!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("canis_toolkit",[],e):"object"==typeof exports?exports.canis_toolkit=e():t.canis_toolkit=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=144)}([function(t,e,r){var n=r(2),i=r(18),a=r(11),o=r(12),s=r(19),u=function(t,e,r){var c,f,l,h,p=t&u.F,d=t&u.G,v=t&u.S,g=t&u.P,y=t&u.B,m=d?n:v?n[e]||(n[e]={}):(n[e]||{}).prototype,b=d?i:i[e]||(i[e]={}),k=b.prototype||(b.prototype={});for(c in d&&(r=e),r)l=((f=!p&&m&&void 0!==m[c])?m:r)[c],h=y&&f?s(l,n):g&&"function"==typeof l?s(Function.call,l):l,m&&o(m,c,l,t&u.U),b[c]!=l&&a(b,c,h),g&&k[c]!=l&&(k[c]=l)};n.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,r){var n=r(4);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(48)("wks"),i=r(33),a=r(2).Symbol,o="function"==typeof a;(t.exports=function(t){return n[t]||(n[t]=o&&a[t]||(o?a:i)("Symbol."+t))}).store=n},function(t,e,r){var n=r(21),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e,r){t.exports=!r(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(1),i=r(108),a=r(23),o=Object.defineProperty;e.f=r(7)?Object.defineProperty:function(t,e,r){if(n(t),e=a(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(24);t.exports=function(t){return Object(n(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){var n=r(8),i=r(32);t.exports=r(7)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(2),i=r(11),a=r(14),o=r(33)("src"),s=r(154),u=(""+s).split("toString");r(18).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,r,s){var c="function"==typeof r;c&&(a(r,"name")||i(r,"name",e)),t[e]!==r&&(c&&(a(r,o)||i(r,o,t[e]?""+t[e]:u.join(String(e)))),t===n?t[e]=r:s?t[e]?t[e]=r:i(t,e,r):(delete t[e],i(t,e,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[o]||s.call(this)})},function(t,e,r){var n=r(0),i=r(3),a=r(24),o=/"/g,s=function(t,e,r,n){var i=String(a(t)),s="<"+e;return""!==r&&(s+=" "+r+'="'+String(n).replace(o,"&quot;")+'"'),s+">"+i+"</"+e+">"};t.exports=function(t,e){var r={};r[t]=e(s),n(n.P+n.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",r)}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(49),i=r(24);t.exports=function(t){return n(i(t))}},function(t,e,r){var n=r(50),i=r(32),a=r(15),o=r(23),s=r(14),u=r(108),c=Object.getOwnPropertyDescriptor;e.f=r(7)?c:function(t,e){if(t=a(t),e=o(e,!0),u)try{return c(t,e)}catch(t){}if(s(t,e))return i(!n.f.call(t,e),t[e])}},function(t,e,r){var n=r(14),i=r(9),a=r(76)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e){var r=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(10);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e){return!!t&&n(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(0),i=r(18),a=r(3);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*a(function(){r(1)}),"Object",o)}},function(t,e,r){var n=r(19),i=r(49),a=r(9),o=r(6),s=r(92);t.exports=function(t,e){var r=1==t,u=2==t,c=3==t,f=4==t,l=6==t,h=5==t||l,p=e||s;return function(e,s,d){for(var v,g,y=a(e),m=i(y),b=n(s,d,3),k=o(m.length),w=0,x=r?p(e,k):u?p(e,0):void 0;k>w;w++)if((h||w in m)&&(g=b(v=m[w],w,y),t))if(r)x[w]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:x.push(v)}else if(f)return!1;return l?-1:c||f?f:x}}},function(t,e,r){"use strict";if(r(7)){var n=r(29),i=r(2),a=r(3),o=r(0),s=r(65),u=r(100),c=r(19),f=r(39),l=r(32),h=r(11),p=r(41),d=r(21),v=r(6),g=r(136),y=r(35),m=r(23),b=r(14),k=r(44),w=r(4),x=r(9),S=r(89),A=r(36),T=r(17),M=r(37).f,E=r(91),O=r(33),_=r(5),P=r(26),I=r(55),N=r(52),j=r(94),F=r(46),C=r(60),R=r(38),L=r(93),B=r(125),V=r(8),D=r(16),G=V.f,U=D.f,z=i.RangeError,W=i.TypeError,Y=i.Uint8Array,X=Array.prototype,q=u.ArrayBuffer,H=u.DataView,J=P(0),Q=P(2),Z=P(3),K=P(4),$=P(5),tt=P(6),et=I(!0),rt=I(!1),nt=j.values,it=j.keys,at=j.entries,ot=X.lastIndexOf,st=X.reduce,ut=X.reduceRight,ct=X.join,ft=X.sort,lt=X.slice,ht=X.toString,pt=X.toLocaleString,dt=_("iterator"),vt=_("toStringTag"),gt=O("typed_constructor"),yt=O("def_constructor"),mt=s.CONSTR,bt=s.TYPED,kt=s.VIEW,wt=P(1,function(t,e){return Mt(N(t,t[yt]),e)}),xt=a(function(){return 1===new Y(new Uint16Array([1]).buffer)[0]}),St=!!Y&&!!Y.prototype.set&&a(function(){new Y(1).set({})}),At=function(t,e){var r=d(t);if(r<0||r%e)throw z("Wrong offset!");return r},Tt=function(t){if(w(t)&&bt in t)return t;throw W(t+" is not a typed array!")},Mt=function(t,e){if(!(w(t)&&gt in t))throw W("It is not a typed array constructor!");return new t(e)},Et=function(t,e){return Ot(N(t,t[yt]),e)},Ot=function(t,e){for(var r=0,n=e.length,i=Mt(t,n);n>r;)i[r]=e[r++];return i},_t=function(t,e,r){G(t,e,{get:function(){return this._d[r]}})},Pt=function(t){var e,r,n,i,a,o,s=x(t),u=arguments.length,f=u>1?arguments[1]:void 0,l=void 0!==f,h=E(s);if(null!=h&&!S(h)){for(o=h.call(s),n=[],e=0;!(a=o.next()).done;e++)n.push(a.value);s=n}for(l&&u>2&&(f=c(f,arguments[2],2)),e=0,r=v(s.length),i=Mt(this,r);r>e;e++)i[e]=l?f(s[e],e):s[e];return i},It=function(){for(var t=0,e=arguments.length,r=Mt(this,e);e>t;)r[t]=arguments[t++];return r},Nt=!!Y&&a(function(){pt.call(new Y(1))}),jt=function(){return pt.apply(Nt?lt.call(Tt(this)):Tt(this),arguments)},Ft={copyWithin:function(t,e){return B.call(Tt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return K(Tt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Tt(this),arguments)},filter:function(t){return Et(this,Q(Tt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return $(Tt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(Tt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Tt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Tt(this),arguments)},lastIndexOf:function(t){return ot.apply(Tt(this),arguments)},map:function(t){return wt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(Tt(this),arguments)},reduceRight:function(t){return ut.apply(Tt(this),arguments)},reverse:function(){for(var t,e=Tt(this).length,r=Math.floor(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this},some:function(t){return Z(Tt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Tt(this),t)},subarray:function(t,e){var r=Tt(this),n=r.length,i=y(t,n);return new(N(r,r[yt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,v((void 0===e?n:y(e,n))-i))}},Ct=function(t,e){return Et(this,lt.call(Tt(this),t,e))},Rt=function(t){Tt(this);var e=At(arguments[1],1),r=this.length,n=x(t),i=v(n.length),a=0;if(i+e>r)throw z("Wrong length!");for(;a<i;)this[e+a]=n[a++]},Lt={entries:function(){return at.call(Tt(this))},keys:function(){return it.call(Tt(this))},values:function(){return nt.call(Tt(this))}},Bt=function(t,e){return w(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Vt=function(t,e){return Bt(t,e=m(e,!0))?l(2,t[e]):U(t,e)},Dt=function(t,e,r){return!(Bt(t,e=m(e,!0))&&w(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?G(t,e,r):(t[e]=r.value,t)};mt||(D.f=Vt,V.f=Dt),o(o.S+o.F*!mt,"Object",{getOwnPropertyDescriptor:Vt,defineProperty:Dt}),a(function(){ht.call({})})&&(ht=pt=function(){return ct.call(this)});var Gt=p({},Ft);p(Gt,Lt),h(Gt,dt,Lt.values),p(Gt,{slice:Ct,set:Rt,constructor:function(){},toString:ht,toLocaleString:jt}),_t(Gt,"buffer","b"),_t(Gt,"byteOffset","o"),_t(Gt,"byteLength","l"),_t(Gt,"length","e"),G(Gt,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,r,u){var c=t+((u=!!u)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=i[c],y=d||{},m=d&&T(d),b=!d||!s.ABV,x={},S=d&&d.prototype,E=function(t,r){G(t,r,{get:function(){return function(t,r){var n=t._d;return n.v[l](r*e+n.o,xt)}(this,r)},set:function(t){return function(t,r,n){var i=t._d;u&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),i.v[p](r*e+i.o,n,xt)}(this,r,t)},enumerable:!0})};b?(d=r(function(t,r,n,i){f(t,d,c,"_d");var a,o,s,u,l=0,p=0;if(w(r)){if(!(r instanceof q||"ArrayBuffer"==(u=k(r))||"SharedArrayBuffer"==u))return bt in r?Ot(d,r):Pt.call(d,r);a=r,p=At(n,e);var y=r.byteLength;if(void 0===i){if(y%e)throw z("Wrong length!");if((o=y-p)<0)throw z("Wrong length!")}else if((o=v(i)*e)+p>y)throw z("Wrong length!");s=o/e}else s=g(r),a=new q(o=s*e);for(h(t,"_d",{b:a,o:p,l:o,e:s,v:new H(a)});l<s;)E(t,l++)}),S=d.prototype=A(Gt),h(S,"constructor",d)):a(function(){d(1)})&&a(function(){new d(-1)})&&C(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=r(function(t,r,n,i){var a;return f(t,d,c),w(r)?r instanceof q||"ArrayBuffer"==(a=k(r))||"SharedArrayBuffer"==a?void 0!==i?new y(r,At(n,e),i):void 0!==n?new y(r,At(n,e)):new y(r):bt in r?Ot(d,r):Pt.call(d,r):new y(g(r))}),J(m!==Function.prototype?M(y).concat(M(m)):M(y),function(t){t in d||h(d,t,y[t])}),d.prototype=S,n||(S.constructor=d));var O=S[dt],_=!!O&&("values"==O.name||null==O.name),P=Lt.values;h(d,gt,!0),h(S,bt,c),h(S,kt,!0),h(S,yt,d),(u?new d(1)[vt]==c:vt in S)||G(S,vt,{get:function(){return c}}),x[c]=d,o(o.G+o.W+o.F*(d!=y),x),o(o.S,c,{BYTES_PER_ELEMENT:e}),o(o.S+o.F*a(function(){y.of.call(d,1)}),c,{from:Pt,of:It}),"BYTES_PER_ELEMENT"in S||h(S,"BYTES_PER_ELEMENT",e),o(o.P,c,Ft),R(c),o(o.P+o.F*St,c,{set:Rt}),o(o.P+o.F*!_,c,Lt),n||S.toString==ht||(S.toString=ht),o(o.P+o.F*a(function(){new d(1).slice()}),c,{slice:Ct}),o(o.P+o.F*(a(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!a(function(){S.toLocaleString.call([1,2])})),c,{toLocaleString:jt}),F[c]=_?O:P,n||_||h(S,dt,P)}}else t.exports=function(){}},function(t,e,r){var n=r(131),i=r(0),a=r(48)("metadata"),o=a.store||(a.store=new(r(134))),s=function(t,e,r){var i=o.get(t);if(!i){if(!r)return;o.set(t,i=new n)}var a=i.get(e);if(!a){if(!r)return;i.set(e,a=new n)}return a};t.exports={store:o,map:s,has:function(t,e,r){var n=s(e,r,!1);return void 0!==n&&n.has(t)},get:function(t,e,r){var n=s(e,r,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,r,n){s(r,n,!0).set(t,e)},keys:function(t,e){var r=s(t,e,!1),n=[];return r&&r.forEach(function(t,e){n.push(e)}),n},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,e){t.exports=!1},function(t,e,r){var n=r(33)("meta"),i=r(4),a=r(14),o=r(8).f,s=0,u=Object.isExtensible||function(){return!0},c=!r(3)(function(){return u(Object.preventExtensions({}))}),f=function(t){o(t,n,{value:{i:"O"+ ++s,w:{}}})},l=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,n)){if(!u(t))return"F";if(!e)return"E";f(t)}return t[n].i},getWeak:function(t,e){if(!a(t,n)){if(!u(t))return!0;if(!e)return!1;f(t)}return t[n].w},onFreeze:function(t){return c&&l.NEED&&u(t)&&!a(t,n)&&f(t),t}}},function(t,e,r){var n=r(5)("unscopables"),i=Array.prototype;null==i[n]&&r(11)(i,n,{}),t.exports=function(t){i[n][t]=!0}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(110),i=r(77);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e,r){var n=r(21),i=Math.max,a=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):a(t,e)}},function(t,e,r){var n=r(1),i=r(111),a=r(77),o=r(76)("IE_PROTO"),s=function(){},u=function(){var t,e=r(74)("iframe"),n=a.length;for(e.style.display="none",r(78).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;n--;)delete u.prototype[a[n]];return u()};t.exports=Object.create||function(t,e){var r;return null!==t?(s.prototype=n(t),r=new s,s.prototype=null,r[o]=t):r=u(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(110),i=r(77).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){"use strict";var n=r(2),i=r(8),a=r(7),o=r(5)("species");t.exports=function(t){var e=n[t];a&&e&&!e[o]&&i.f(e,o,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,e,r){var n=r(19),i=r(123),a=r(89),o=r(1),s=r(6),u=r(91),c={},f={};(e=t.exports=function(t,e,r,l,h){var p,d,v,g,y=h?function(){return t}:u(t),m=n(r,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(a(y)){for(p=s(t.length);p>b;b++)if((g=e?m(o(d=t[b])[0],d[1]):m(t[b]))===c||g===f)return g}else for(v=y.call(t);!(d=v.next()).done;)if((g=i(v,m,d.value,e))===c||g===f)return g}).BREAK=c,e.RETURN=f},function(t,e,r){var n=r(12);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,r){var n=r(8).f,i=r(14),a=r(5)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,a)&&n(t,a,{configurable:!0,value:e})}},function(t,e,r){var n=r(20),i=r(5)("toStringTag"),a="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:a?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,r){var n=r(0),i=r(24),a=r(3),o=r(80),s="["+o+"]",u=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),f=function(t,e,r){var i={},s=a(function(){return!!o[t]()||"​"!="​"[t]()}),u=i[t]=s?e(l):o[t];r&&(i[r]=u),n(n.P+n.F*s,"String",i)},l=f.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(c,"")),t};t.exports=f},function(t,e){t.exports={}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._offset=0,this._reference=t.timingRef.previousStart}var e,r,a;return e=t,a=[{key:"transRef",value:function(t){switch(t){case this.timingRef.previousStart:return"previousStart";case this.timingRef.previousEnd:return"previousEnd";case this.timingRef.absolute:return"absolute"}}}],(r=[{key:"replaceOffsetConst",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;"string"==typeof this.offset?void 0===t.get(this.offset)?e.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:"number"==typeof t.get(this.offset)?this.offset=t.get(this.offset):e.info={type:"error",msg:"Offset must be a number or a numeric type constant.",errSpec:'"offset":"'+this.offset.replace(/\s/g,"")+'"'}:this.offset&&"object"===n(this.offset)&&"string"==typeof this.offset.minOffset&&(void 0===t.get(this.offset.minOffset)?e.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'}:"number"==typeof t.get(this.offset.minOffset)?this.offset.minOffset=t.get(this.offset.minOffset):e.info={type:"error",msg:"MinOffset must be a number or a numeric type constant.",errSpec:'"minOffset":"'+this.offset.minOffset.replace(/\s/g,"")+'"'})}},{key:"calOffsetTime",value:function(e,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Map;if(0===a.size){var o=0;switch(this.reference){case t.timingRef.previousStart:o=e+this.offset-i;break;case t.timingRef.previousEnd:o=r+this.offset-i;break;case t.timingRef.absolute:o=this.offset+i;break;default:o=e+this.offset-i}return o}var s=this,u=new Map,c=1e6;return"object"===n(this.offset)&&a.forEach(function(t,e){c>parseFloat(t["data-datum"][s.offset.field])&&(c=parseFloat(t["data-datum"][s.offset.field]))}),a.forEach(function(a,o){var f=0;switch(f="number"==typeof s.offset?s.offset:"object"===n(s.offset)?s.offset.minOffset*parseFloat(a["data-datum"][s.offset.field])/c:0,s.reference){case t.timingRef.previousStart:u.set(o,e+f-i);break;case t.timingRef.previousEnd:u.set(o,r+f-i);break;case t.timingRef.absolute:u.set(o,f+i);break;default:u.set(o,e+f-i)}}),u}},{key:"reference",set:function(e){if(void 0!==e){var r=t.transRef(e);Object.keys(t.timingRef).includes(r)&&(this._reference=e)}},get:function(){return this._reference}},{key:"offset",set:function(e){void 0!==e&&("number"==typeof e?this._offset=Math.floor(e/(1e3/t.FRAME_RATE))*(1e3/t.FRAME_RATE):"object"===n(e)&&(this._offset=e))},get:function(){return this._offset}}])&&i(e.prototype,r),a&&i(e,a),t}();a.FRAME_RATE=20,a.timingRef={previousStart:"start with previous",previousEnd:"start after previous",absolute:"absolute"},a.dataBindAttrs=["field","minOffset","minDuration"];var o=a;e.default=o,t.exports=e.default},function(t,e,r){var n=r(18),i=r(2),a=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return a[t]||(a[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(29)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){"use strict";var n=r(1);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var n=r(1),i=r(10),a=r(5)("species");t.exports=function(t,e){var r,o=n(t).constructor;return void 0===o||null==(r=n(o)[a])?e:i(r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"LayerFactory",{enumerable:!0,get:function(){return i.LayerFactory}}),Object.defineProperty(e,"EasingFactory",{enumerable:!0,get:function(){return o.EasingFactory}}),Object.defineProperty(e,"PathMaker",{enumerable:!0,get:function(){return s.PathMaker}}),e.MaskType=e.default=void 0;var n,i=r(145),a=(n=r(72))&&n.__esModule?n:{default:n},o=r(103),s=r(71);function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c,f=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:800,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:600;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,r){e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}(this,"root",void 0),this.root={fr:e,w:r,h:n,ddd:0,layers:[],assets:[],fonts:{list:[]},ip:0,op:0}}var e,r,n;return e=t,(r=[{key:"setFrameRate",value:function(t){this.root.fr=t}},{key:"setViewport",value:function(t,e){this.root.w=t,this.root.h=e}},{key:"addLayer",value:function(t){var e;return e=t instanceof SVGGraphicsElement?i.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):"string"==typeof t?i.LayerFactory.ref(t):t,this.root.layers.splice(0,0,e.root),e}},{key:"addMask",value:function(t,e){var r,n,a,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.Alpha;if(e instanceof i.JSMovinLayer?(r=e,n=this.root.layers.indexOf(r.root),r.root.tt=o):(n=e,this.root.layers[n].tt=o),n<0)throw new Error("Given layer is not a member of this JSMovin.");return a=t instanceof SVGGraphicsElement?i.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):t,this.root.layers.splice(n,0,a.root),a}},{key:"makeAsset",value:function(t){var e=this;t.forEach(function(r,n){if(1==r.root.tt){var a=e.root.layers.indexOf(r.root);if(a>0){var o=e.root.layers[a-1];0!=n&&t[n-1].root==o||t.splice(n,0,new i.JSMovinLayer(o))}}}),(t=t.map(function(t,e){return{layer:t,innerIndex:e}}).sort(function(t,r){return e.root.layers.indexOf(t.layer.root)-e.root.layers.indexOf(r.layer.root)||t.innerIndex-r.innerIndex}).map(function(t){return t.layer})).forEach(function(t){var r=e.root.layers.indexOf(t.root);r>0&&e.root.layers.splice(r,1),t.root.op=9e9});var r=(0,a.default)();return this.root.assets.push({id:r,layers:t.map(function(t){return t.root})}),r}},{key:"removeLayer",value:function(t){var e,r;t instanceof i.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):r=t,this.root.layers.splice(r,1)}},{key:"removeMask",value:function(t){var e,r;if(t instanceof i.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):(r=t,e=new i.JSMovinLayer(this.root.layers[r])),e.root.tt)e.root.tt=0,this.root.layers.splice(r-1,1);else{if(!this.root.layers[r+1].tt)throw new Error("The input layer is not a mask or a masked layer.");this.root.layers[r+1].tt=0,this.root.layers.splice(r,1)}}},{key:"clearLayers",value:function(){this.root.layers=[]}},{key:"uniform",value:function(){var t=this.root.layers.reduce(function(t,e){return t<e.op?e.op:t},0);this.root.op=t,this.root.layers.forEach(function(e){return e.op=t})}},{key:"toObject",value:function(){return this.uniform(),JSON.parse(this.toJSON())}},{key:"toJSON",value:function(){return this.uniform(),JSON.stringify(this.root)}}])&&u(e.prototype,r),n&&u(e,n),t}();e.default=f,e.MaskType=c,function(t){t[t.Alpha=1]="Alpha",t[t.InvertAlpha=2]="InvertAlpha",t[t.Luma=3]="Luma",t[t.InvertLuma=4]="InvertLuma"}(c||(e.MaskType=c={}))},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.globalVar=void 0;var i={jsMovin:new(((n=r(53))&&n.__esModule?n:{default:n}).default),markLayers:new Map};e.globalVar=i},function(t,e,r){var n=r(15),i=r(6),a=r(35);t.exports=function(t){return function(e,r,o){var s,u=n(e),c=i(u.length),f=a(o,c);if(t&&r!=r){for(;c>f;)if((s=u[f++])!=s)return!0}else for(;c>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(20);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(21),i=r(24);t.exports=function(t){return function(e,r){var a,o,s=String(i(e)),u=n(r),c=s.length;return u<0||u>=c?t?"":void 0:(a=s.charCodeAt(u))<55296||a>56319||u+1===c||(o=s.charCodeAt(u+1))<56320||o>57343?t?s.charAt(u):a:t?s.slice(u,u+2):o-56320+(a-55296<<10)+65536}}},function(t,e,r){var n=r(4),i=r(20),a=r(5)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==i(t))}},function(t,e,r){var n=r(5)("iterator"),i=!1;try{var a=[7][n]();a.return=function(){i=!0},Array.from(a,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var a=[7],o=a[n]();o.next=function(){return{done:r=!0}},a[n]=function(){return o},t(a)}catch(t){}return r}},function(t,e,r){"use strict";var n=r(44),i=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var a=r.call(t,e);if("object"!=typeof a)throw new TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,r){"use strict";r(127);var n=r(12),i=r(11),a=r(3),o=r(24),s=r(5),u=r(95),c=s("species"),f=!a(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var h=s(t),p=!a(function(){var e={};return e[h]=function(){return 7},7!=""[t](e)}),d=p?!a(function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[c]=function(){return r}),r[h](""),!e}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],g=r(o,h,""[t],function(t,e,r,n,i){return e.exec===u?p&&!i?{done:!0,value:v.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),y=g[0],m=g[1];n(String.prototype,t,y),i(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,r){var n=r(2).navigator;t.exports=n&&n.userAgent||""},function(t,e,r){"use strict";var n=r(2),i=r(0),a=r(12),o=r(41),s=r(30),u=r(40),c=r(39),f=r(4),l=r(3),h=r(60),p=r(43),d=r(81);t.exports=function(t,e,r,v,g,y){var m=n[t],b=m,k=g?"set":"add",w=b&&b.prototype,x={},S=function(t){var e=w[t];a(w,t,"delete"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(y||w.forEach&&!l(function(){(new b).entries().next()}))){var A=new b,T=A[k](y?{}:-0,1)!=A,M=l(function(){A.has(1)}),E=h(function(t){new b(t)}),O=!y&&l(function(){for(var t=new b,e=5;e--;)t[k](e,e);return!t.has(-0)});E||((b=e(function(e,r){c(e,b,t);var n=d(new m,e,b);return null!=r&&u(r,g,n[k],n),n})).prototype=w,w.constructor=b),(M||O)&&(S("delete"),S("has"),g&&S("get")),(O||T)&&S(k),y&&w.clear&&delete w.clear}else b=v.getConstructor(e,t,g,k),o(b.prototype,r),s.NEED=!0;return p(b,t),x[t]=b,i(i.G+i.W+i.F*(b!=m),x),y||v.setStrong(b,t,g),b}},function(t,e,r){for(var n,i=r(2),a=r(11),o=r(33),s=o("typed_array"),u=o("view"),c=!(!i.ArrayBuffer||!i.DataView),f=c,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(n=i[h[l++]])?(a(n.prototype,s,!0),a(n.prototype,u,!0)):f=!1;t.exports={ABV:c,CONSTR:f,TYPED:s,VIEW:u}},function(t,e,r){"use strict";t.exports=r(29)||!r(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete r(2)[t]})},function(t,e,r){"use strict";var n=r(0);t.exports=function(t){n(n.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,r){"use strict";var n=r(0),i=r(10),a=r(19),o=r(40);t.exports=function(t){n(n.S,t,{from:function(t){var e,r,n,s,u=arguments[1];return i(this),(e=void 0!==u)&&i(u),null==t?new this:(r=[],e?(n=0,s=a(u,arguments[2],2),o(t,!1,function(t){r.push(s(t,n++))})):o(t,!1,r.push,r),new this(r))}})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(102)),i=l(r(106)),a=l(r(107)),o=l(r(47)),s=r(70),u=r(54),c=r(73),f=r(53);function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function g(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function y(t,e){return(y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var m=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=g(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))).chartIdx,t.selector,t.grouping=new a.default,t.actions=[],t.animationStartTime=1e6,t.animationEndTime=0,t.root={},t}var r,l,m;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(e,o.default),r=e,m=[{key:"renderAnimation",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=this;this.allMarkAni.forEach(function(t,r){e.wholeEndTime<t.startTime+t.totalDuration&&(e.wholeEndTime=t.startTime+t.totalDuration)}),t&&(t.info="The duration of the generated animation is: "+this.wholeEndTime+"ms"),console.log("The duration of the generated animation is: "+this.wholeEndTime+"ms"),this.allMarkAni.forEach(function(t,r){for(var n,i=0;i<t.actionAttrs.length|(n=t.actionAttrs[i]);i++)"wholeEnd"===n.duration&&(n.duration=e.wholeEndTime-n.startTime)}),console.log("all mark ani: ",this.allMarkAni)}},{key:"findKeyframes",value:function(){}},{key:"translateToLottieChannel",value:function(t){switch(t){case"opacity":return["opacity"];case"x":case"cx":return["x"];case"y":case"cy":return["y"];case"r":return["scaleX","scaleY"];case"width":return["scaleX"];case"height":return["scaleY"];case"d":case"x1":case"x2":case"y1":case"y2":return["shape"];case"textContent":return["text"];case"fill":return["fillColor"];case"stroke":return["strokeColor"]}}},{key:"mapToLottieSpec",value:function(){var t=this;this.allMarkAni.forEach(function(r,n){for(var a=function(a){var l=r.actionAttrs[a];if(l.duration>0){var h=document.getElementById(n);if(l.type===i.default.actionTargets.mark){var d=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),v=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){if(l.animationType===i.default.targetAnimationType.custom){if("r"===t.attrName){var r=(0,c.getBoundingBox)(h);u.globalVar.markLayers.get(n).setStaticProperty("anchorX",r[2]/2),u.globalVar.markLayers.get(n).setStaticProperty("anchorY",r[3]/2)}else"text"===document.getElementById(n).tagName&&u.globalVar.markLayers.get(n).setStaticProperty("anchorY",0);var a=e.translateToLottieChannel(t.attrName);if(Array.isArray(t.to)){for(var o=0,f=0,g=0;g<t.to.length;g++)if(t.to[g][0]===n){o=t.from[g][1],f=t.to[g][1];break}a.forEach(function(t){if("shape"===t){var e,r,a=p(s.CanisUtil.transDToLottieSpec(o),2);e=a[0],o=a[1];var c=p(s.CanisUtil.transDToLottieSpec(f),2);r=c[0],f=c[1],u.globalVar.markLayers.get(n).setAnimatableProperty("x",d,v,e[0],r[0],i.default.transToLottieAction(l.easing)),u.globalVar.markLayers.get(n).setAnimatableProperty("y",d,v,e[1],r[1],i.default.transToLottieAction(l.easing))}else"fillColor"===t||"strokeColor"===t?o&&f&&"none"!==o&&"none"!==f?(o=s.CanisUtil.toLottieRGBA(o),f=s.CanisUtil.toLottieRGBA(f)):o=f=[0,0,0,0]:"opacity"===t&&(o*=100,f*=100);u.globalVar.markLayers.get(n).setAnimatableProperty(t,d,v,o,f,i.default.transToLottieAction(l.easing))})}else a.forEach(function(e){u.globalVar.markLayers.get(n).setAnimatableProperty(e,d,v,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))})}else u.globalVar.markLayers.get(n).setAnimatableProperty(t.attrName,d,v,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))})}else if(l.type===i.default.actionTargets.mask){var g,y=(0,c.getBoundingBox)(h),m=t.finalStatus.get(n)[l.chartIdx].outterRadius;switch(l.animationType){case i.default.targetAnimationType.wipe:case i.default.targetAnimationType.move:case i.default.targetAnimationType.appear:g=f.LayerFactory.boundingBox(h);break;case i.default.targetAnimationType.circle:(g=f.LayerFactory.ellipse(y[0]+y[2],y[1]+y[3],m,m)).setStaticProperty("anchorX",y[2]/2),g.setStaticProperty("anchorY",y[3]/2);break;case i.default.targetAnimationType.wheel:var b=s.CanisUtil.getPathOffset(h.getAttribute("d")),k=t.finalStatus.get(n)[l.chartIdx].cx+y[0]-b[0],w=t.finalStatus.get(n)[l.chartIdx].cy+y[1]-b[1];g=f.LayerFactory.ellipse(k,w,m,m);var x=t.finalStatus.get(n)[l.chartIdx].startAngle,S=t.finalStatus.get(n)[l.chartIdx].endAngle;g.setStaticProperty("trimOffset",-x/Math.PI/2*360-90),l.attribute[0].to=1-(S-x)%(2*Math.PI)/(2*Math.PI),g.setStaticProperty("strokeWidth",2*m),g.setStaticProperty("fillOpacity",0)}var A=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),T=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){g.setAnimatableProperty(t.attrName,A,T,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))}),u.globalVar.jsMovin.addMask(g,u.globalVar.markLayers.get(n),l.maskType)}else console.error("unkonwn actions target: ",l.type)}},l=0;l<r.actionAttrs.length;l++)a(l)})}},{key:"resetAll",value:function(){this.wholeEndTime=0,this.allMarkAni.clear(),this.frameTime.clear(),this.finalStatus.clear(),this.animations.clear()}}],(l=[{key:"replaceConstants",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;this.replaceOffsetConst(t,e),"undefined"!==this.grouping&&this.grouping.replaceDelayConst(t,e),this.actions.forEach(function(r){r.replaceOffsetConst(t,e),r.replaceDurationConst(t,e)})}},{key:"translate",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.chartIdx=t.chartIdx,r||(this.selector=t.selector),this.reference=t.reference,this.offset=t.offset,void 0!==t.grouping&&this.grouping.initGrouping(t.grouping),void 0!==t.effects){r&&(this.actions=[]);for(var a,o=0;o<t.effects.length|(a=t.effects[o]);o++){a.chartIdx=t.chartIdx;for(var s,u=i.default.transToVisualAttrAction(a,t.chartIdx,e,n.default.dataTrans),c=0;c<u.length|(s=u[c]);c++){var f=new i.default;f.initAction(s),this.actions.push(f)}}}}},{key:"calAniTime",value:function(t,r){console.time("cal ani time");for(var n,o=this,u=new Map,c=0;c<t.length|(n=t[c]);c++){for(var f,l=new Map,v=0;v<this.actions.length|(f=this.actions[v]);v++)if("object"===d(f.duration)){var g=e.domMarks.get(n)["data-datum"],y=parseFloat(g[f.duration.field]),m=void 0===f.duration.minDuration?300:f.duration.minDuration;l.set(f.duration.field,[y,m])}u.set(n,l)}var b=p(i.default.calActionDuration(this.actions,u,e.domMarks),3),k=b[0],w=b[1],x=b[2];console.log("after calculate actions: ",this.actions,k,w,x);var S=this.grouping.arrangeOrder(t,e.domMarks,this.root);console.log("animation frames: ",a.default.frames);for(var A,T=new Map,M=0;M<S.length|(A=S[M]);M++){for(var E,O={},_=0;_<e.visualAttrs.length|(E=e.visualAttrs[_]);_++)if(void 0===e.domMarks.get(A)[E])switch(E){case"opacity":O[E]=1;break;case"width":O[E]=e.domMarks.get(A).bbWidth;break;case"height":O[E]=e.domMarks.get(A).bbHeight;break;case"x":O[E]=e.domMarks.get(A).bbX;break;case"y":O[E]=e.domMarks.get(A).bbY;break;case"cx":void 0!==e.domMarks.get(A).cx?O[E]=e.domMarks.get(A).cx:O[E]=e.domMarks.get(A).bbX+e.domMarks.get(A).bbWidth/2;break;case"cy":void 0!==e.domMarks.get(A).cy?O[E]=e.domMarks.get(A).cy:O[E]=e.domMarks.get(A).bbY+e.domMarks.get(A).bbHeight/2;break;case"innerRadius":void 0!==e.domMarks.get(A).innerRadius?O[E]=e.domMarks.get(A).innerRadius:O[E]=0;break;case"outterRadius":void 0!==e.domMarks.get(A).outterRadius?O[E]=e.domMarks.get(A).outterRadius:O[E]=Math.sqrt(Math.pow(e.domMarks.get(A).bbWidth/2,2)+Math.pow(e.domMarks.get(A).bbHeight/2,2))+1;break;case"startAngle":void 0!==e.domMarks.get(A).startAngle?O[E]=e.domMarks.get(A).startAngle:O[E]=0;break;case"endAngle":void 0!==e.domMarks.get(A).endAngle?O[E]=e.domMarks.get(A).endAngle:O[E]=2*Math.PI}else O[E]=e.domMarks.get(A)[E];void 0===e.finalStatus.get(A)&&e.finalStatus.set(A,[]),e.finalStatus.get(A).push(O),T.set(A,{startTime:0,totalDuration:k.get(A),actionAttrs:[]})}console.log("going in cal time with tree: ",T,T.get("mark152")),this.grouping.calTimeWithTree(this.root,-1,-1,T),console.log("generated tree: ",this.root),console.log("frame time",a.default.framesMark);var P=1e4;T.forEach(function(t,e){t.startTime<P&&(P=t.startTime)});var I=void 0===r?this.calOffsetTime(0,0,P,e.domMarks):this.calOffsetTime(r.animationStartTime,r.animationEndTime,P,e.domMarks);T.forEach(function(t,r){var n={startTime:t.startTime+I.get(r),totalDuration:t.totalDuration,actionAttrs:[]};n.startTime<o.animationStartTime&&(o.animationStartTime=n.startTime),n.startTime+n.totalDuration>o.animationEndTime&&(o.animationEndTime=n.startTime+n.totalDuration);for(var a,u=0;u<x.length|(a=x[u]);u++){for(var c,f=new i.default,l=Object.keys(a),h=0;h<l.length|(c=l[h]);h++)if(f[c]=a[c],"_duration"===c&&"object"===d(a[c])){var p=e.domMarks.get(r)["data-datum"],v=w.get(a[c].field);f[c]=a[c].minDuration*parseFloat(p[a[c].field])/v}else"offsetStart"===c&&(f[c]=a[c].get(r));f.animationType===i.default.targetAnimationType.custom?s.CanisUtil.checkValidProp(e.domMarks.get(r).tagName,f.attribute[0].attrName)&&n.actionAttrs.push(f):n.actionAttrs.push(f)}T.set(r,n)}),T.forEach(function(t,r){for(var n=0,i=0;i<t.actionAttrs.length;i++)t.actionAttrs[i].startTime=t.startTime+t.actionAttrs[i].offsetStart,t.actionAttrs[i].startTime+t.actionAttrs[i].duration>n&&(n=t.actionAttrs[i].startTime+t.actionAttrs[i].duration);if(void 0===e.allMarkAni.get(r))e.allMarkAni.set(r,t);else{var o=e.allMarkAni.get(r).startTime,s=o+e.allMarkAni.get(r).totalDuration;e.allMarkAni.get(r).startTime=o<t.startTime?o:t.startTime;var u=t.startTime+t.totalDuration;s=s>u?s:u,e.allMarkAni.get(r).totalDuration=s-e.allMarkAni.get(r).startTime,e.allMarkAni.get(r).actionAttrs=[].concat(h(e.allMarkAni.get(r).actionAttrs),h(t.actionAttrs))}a.default.framesMark.get(r)?e.frameTime.set(n,!0):void 0===e.frameTime.get(n)&&e.frameTime.set(n,!1)}),console.timeEnd("cal ani time")}}])&&v(r.prototype,l),m&&v(r,m),e}();m.visualAttrs=["x","y","cx","cy","innerRadius","outterRadius","startAngle","endAngle","width","height","opacity","fill","stroke","content","stroke-dasharray","stroke-dashoffset"],m.domMarks=new Map,m.attrs=["selector","grouping","effects","offset","reference"],m.wholeEndTime=0,m.frameTime=new Map,m.animations=new Map,m.finalStatus=new Map,m.allMarkAni=new Map,m.easeFuncs={easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return t/2<1?.5*t*t:-(--t*(t-2)-1)/2},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return(t-=1)*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?t*t*t/2:((t-=2)*t*t+2)/2},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}};var b=m;e.default=b,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AssetTemplate=e.Viewport=e.CanisUtil=void 0;var n=r(53),i=r(104);function a(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function c(t,e,r){return e&&u(t.prototype,e),r&&u(t,r),t}var f=function(){function t(){s(this,t)}return c(t,null,[{key:"deepClone",value:function(t){if(!t||1==t)return t;var e=o(t);if("number"==e||"string"==e)return t;var r=Array.isArray(t)?[]:{};if(t instanceof Map){r=new Map;for(var n=0;n<t.keys().length;n++){var i=t.keys()[n];r.set(i,this.deepClone(t.get(i)))}}for(var a in t)t.hasOwnProperty(a)&&(r[a]=this.deepClone(t[a]));return r}},{key:"formatTime",value:function(t){var e=parseInt(t/1e3),r=parseInt(t%1e3/10);return(e<10?"0"+e:""+e)+":"+(r<10?"0"+r:""+r)}},{key:"color2RGB",value:function(t){if(t){if(t=t.toLowerCase(),Array.from(this.colorNames.keys()).includes(t)&&(t=this.colorNames.get(t)),(t=t.replace(/\s/g,"")).indexOf("rgb")>=0){var e=t.substr(t.indexOf("(")+1),r=(e=e.substring(0,e.indexOf(")"))).split(",");return 3===r.length&&(r[3]=255),[parseInt(r[0]),parseInt(r[1]),parseInt(r[2]),parseInt(r[3])]}if(t.indexOf("#")>=0)return this.HEX2RGB(t)}return"none"}},{key:"HEX2RGB",value:function(t){if("#"===t.charAt(0)&&(t=t.substr(1)),t.length<2||t.length>6)return!1;var e,r,n,i=t.split("");if(2===t.length)r=e=parseInt(i[0].toString()+i[1].toString(),16),n=e;else if(3===t.length)e=parseInt(i[0].toString()+i[0].toString(),16),r=parseInt(i[1].toString()+i[1].toString(),16),n=parseInt(i[2].toString()+i[2].toString(),16);else{if(6!==t.length)return!1;e=parseInt(i[0].toString()+i[1].toString(),16),r=parseInt(i[2].toString()+i[3].toString(),16),n=parseInt(i[4].toString()+i[5].toString(),16)}return[e,r,n,255]}},{key:"toLottieRGBA",value:function(t){return this.color2RGB(t).map(function(t){return t/255})}},{key:"toJSON",value:function(t){var e={nodeType:(t=t||this).nodeType};t.tagName?e.tagName=t.tagName.toLowerCase():t.nodeName&&(e.nodeName=t.nodeName),t.nodeValue&&(e.nodeValue=t.nodeValue);var r=t.attributes;if(r){e.attr={};for(var n,i=0;i<r.length|(n=r[i]);i++)e.attr[n.nodeName]=n.nodeValue}return e}},{key:"toDOM",value:function(t){var e;switch("string"==typeof t&&(t=JSON.parse(t)),t.nodeType){case 1:e=document.createElementNS("http://www.w3.org/2000/svg",t.tagName);for(var r,n=t.attr||{},i=0;i<Object.keys(n).length|(r=Object.keys(n)[i]);i++){var a="object"===o(n[r])?JSON.stringify(n[r],null,0):n[r];e.setAttributeNS(null,r,a)}break;case 3:e=document.createTextNode(t.nodeValue);break;case 8:e=document.createComment(t.nodeValue);break;case 9:e=document.implementation.createDocument();break;case 10:e=document.implementation.createDocumentType(t.nodeName);break;case 11:e=document.createDocumentFragment();break;default:return e}return e}},{key:"discretizePath",value:function(t){if("path"!==t.tagName)return null;var e=t.attr||{};return e.d?this.discretizeD(e.d,e.fill):null}},{key:"discretizeD",value:function(e,r){for(var n=[],i=/[MmLlHhVvZzCcSsQqTtAa][^MmLlHhVvZzCcSsQqTtAa]*/gi,a=void 0;a=i.exec(e);){var o=n.reduce(function(t,e){return t+e.length},0);n.push(e.slice(o,a.index)),n.push(a[0])}var s=n.map(function(t){var e=t.slice(0,1),r=t.slice(1).split(/[ ,]/).filter(function(t){return t.trim()}).map(function(t){return parseFloat(t)});return e?{command:e,parameters:r}:null}).filter(function(t){return t});if(s.every(function(t){return"MmLlHhVv".includes(t.command)})&&!t.convertColor(r)){var u=[],c=null,f=!0;if(s.forEach(function(t){if(f)if("M"!==t.command){if(!c)return f=!1;if("m"!==t.command){var e=c,r=t.command===t.command.toLowerCase()?c.slice():[0,0];switch(t.command.toLowerCase()){case"l":r=r.map(function(e,r){return e+t.parameters[r]});break;case"h":r[0]+=t.parameters[0],r[1]=e[1];break;case"v":r[1]+=t.parameters[0],r[0]=e[0]}r?(u.push([e,r]),c=r):f=!1}else c=c.map(function(e,r){return e+t.parameters[r]})}else c=t.parameters.slice(-2)}),f)return{type:"lines",data:u}}if(s.every(function(t){return"MmLlAaZz".includes(t.command)})&&s.filter(function(t){return"a"===t.command.toLowerCase()}).length){var l=[],h=null,p=!0;if(s.forEach(function(e){if(p)if("m"!==e.command.toLowerCase()){if(!h)return p=!1;if("z"!==e.command.toLowerCase()){var r=h,n=e.command.toLowerCase()===e.command?h.slice():[0,0];if("a"!==e.command.toLowerCase())return h=n.map(function(t,r){return t+e.parameters[r]});n=n.map(function(t,r){return t+e.parameters[r+5]});var i=t.svgArcToCenterParam.apply(null,r.concat(e.parameters.slice(0,5)).concat(n));isNaN(i.cx)||isNaN(i.cy)||l.push({...i,rx:e.parameters[0],ry:e.parameters[1],rotate:e.parameters[2]}),h=n}}else h=e.parameters.slice(-2)}),(l.length<=0||!l.every(function(t){return["cx","cy"].reduce(function(e,r){return e+Math.abs(t[r]-l[0][r])},0)<.1}))&&(p=!1),p){var d=l.reduce(function(t,e){return t?e.rx+e.ry>t.rx+t.ry?e:t:e},null);return{type:"pies",data:{cx:d.cx,cy:d.cy,startAngle:d.startAngle,endAngle:d.endAngle,clockwise:d.clockwise,radius:l.map(function(t){return{rx:t.rx,ry:t.ry,rotate:t.rotate}})}}}}return null}},{key:"radian",value:function(t,e,r,n){var i=t*r+e*n,a=Math.sqrt((t*t+e*e)*(r*r+n*n)),o=Math.acos(i/a);return t*n-e*r<0&&(o=-o),o}},{key:"svgArcToCenterParam",value:function(e,r,n,i,a,o,s,u,c){var f,l,h,p,d,v=2*Math.PI;n<0&&(n=-n),i<0&&(i=-i);var g=Math.sin(a),y=Math.cos(a),m=(e-u)/2,b=(r-c)/2,k=(e+u)/2,w=(r+c)/2,x=y*m+g*b,S=y*b-g*m,A=x*x/(n*n)+S*S/(i*i);A>1&&(n*=Math.sqrt(A),i*=Math.sqrt(A));var T=n*i,M=n*S,E=i*x,O=M*M+E*E,_=Math.sqrt(Math.abs((T*T-O)/O));o==s&&(_=-_);var P=_*M/i,I=-_*E/n;f=y*P-g*I+k,l=g*P+y*I+w;var N=(x-P)/n,j=(x+P)/n,F=(S-I)/i,C=(S+I)/i;for(h=t.radian(1,0,N,F),p=t.radian(N,F,-j,-C);p>v;)p-=v;for(;p<0;)p+=v;for(0!=s&&0!=s||(p-=v),d=h+p;d>v;)d-=v;for(;d<0;)d+=v;return{cx:f,cy:l,startAngle:h,deltaAngle:p,endAngle:d,clockwise:1==s||1==s}}},{key:"convertColor",value:function(t,e,r){if("string"!=typeof t)return t;if("none"===t)return null;t=t.trim();var n=null;switch(void 0===r&&(r=e,t.startsWith("#")?e="hex":t.startsWith("rgb")&&(e="rgb")),e){case"rgb":n=t.split("(")[1].split(",").map(function(t){return parseFloat(t)});break;case"hex":n=t.slice(1).match(/.{1,2}/g).map(function(t){return parseInt(t,16)});default:return t}switch(n=n.slice(0,3),r){case"hex":return"#"+n.map(function(t){return t.toString(16).padStart(2,"0")}).join("");case"rgb":return"rgb(".concat(n.join(","),")");default:return t}}},{key:"polarToCartesian",value:function(t,e,r,n){return{x:Math.round(100*(t+r*Math.cos(n)))/100,y:Math.round(100*(e+r*Math.sin(n)))/100}}},{key:"arc",value:function(e,r,n,i,a,o){a=a<0?a+2*Math.PI:a,n=0===n?0:n-1,i+=1;var s=(o=o<0||a>o?o+2*Math.PI:o)-a<=Math.PI?0:1,u=t.polarToCartesian(e,r,i,o),c=t.polarToCartesian(e,r,i,a),f=t.polarToCartesian(e,r,n,o),l=t.polarToCartesian(e,r,n,a),h=!1;return u.x===c.x&&u.y===c.y&&(c.y-=1,l.y-=1,h=!0),h?["M"+u.x,u.y,"A"+i,i,0,s,1,c.x,c.y,"M"+l.x,l.y,"A"+n,n,0,s,0,f.x,f.y+"Z"].join(","):["M"+u.x,u.y,"A"+i,i,0,s,0,c.x,c.y,"L"+l.x,l.y,"A"+n,n,0,s,1,f.x,f.y,"L"+u.x,u.y+"Z"].join(",")}},{key:"domNodeToString",value:function(t){var e=document.createElement("div");return e.appendChild(t),e.innerHTML}},{key:"strToDomNode",value:function(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.firstChild}},{key:"transShape",value:function(e,r,n){if("path"!==e.tagName){var i=!1;(e.getAttribute("x")||e.getAttribute("y"))&&(i=!0,e.setAttribute("x",e.getAttribute("x")?parseFloat(e.getAttribute("x"))+r:r),e.setAttribute("y",e.getAttribute("y")?parseFloat(e.getAttribute("y"))+n:n)),(e.getAttribute("x1")||e.getAttribute("y1")||e.getAttribute("x2")||e.getAttribute("y2"))&&(i=!0,e.setAttribute("x1",e.getAttribute("x1")?parseFloat(e.getAttribute("x1"))+r:r),e.setAttribute("x2",e.getAttribute("x2")?parseFloat(e.getAttribute("x2"))+r:r),e.setAttribute("y1",e.getAttribute("y1")?parseFloat(e.getAttribute("y1"))+n:n),e.setAttribute("y2",e.getAttribute("y2")?parseFloat(e.getAttribute("y2"))+n:n)),(e.getAttribute("cx")||e.getAttribute("cy"))&&(i=!0,e.setAttribute("cx",e.getAttribute("cx")?parseFloat(e.getAttribute("cx"))+r:r),e.setAttribute("cy",e.getAttribute("cy")?parseFloat(e.getAttribute("cy"))+n:n)),i||("circle"===e.tagName?(e.setAttribute("cx",r),e.setAttribute("cy",n)):(e.setAttribute("x",r),e.setAttribute("y",n)))}else if(e.getAttribute("d")){var a=t.setPathDValue(e.getAttribute("d"),!1,r,n);e.setAttribute("d",a)}}},{key:"splitPath",value:function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttributeNS(null,"d",t);for(var r=e.getTotalLength()/300,n="",i=0;i<300;i++){var a=e.getPointAtLength(r*i);n+=0===i?"M"+a.x+","+a.y:"L"+a.x+","+a.y}return n+="Z"}},{key:"getPathOffset",value:function(t){var e,r=t,a=(0,i.parseSVG)(r),o=new n.PathMaker;return a.forEach(function(t){switch(t.code){case"M":e=t,o.moveTo(e.x,e.y);break;case"L":e=t,o.lineTo(e.x,e.y);break;case"l":e=t,o.lineToRelative(e.x,e.y);break;case"H":e=t,o.horizontalTo(e.x);break;case"h":e=t,o.horizontalToRelative(e.x);break;case"V":e=t,o.verticalTo(e.y);break;case"v":e=t,o.verticalToRelative(e.y);break;case"C":e=t,o.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,o.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,o.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,o.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,o.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,o.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":o.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}}),[o.offsetX,o.offsetY]}},{key:"transDToLottieSpec",value:function(t){var e=this.getPathOffset(t),r=new n.PathMaker(t);return r.uniform(),[e,r]}},{key:"setPathDValue",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new Map;t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var a=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),o="",s=t.match(a);if(s){var u=s[0].substring(0,1),c="0",f="0";if("m"===u||"M"===u){var l=s[0].substring(1).split(",");c=l[0],f=l[1]}for(var h=0;h<s.length;h++){var p=s[h].substring(0,1),d=s[h].substring(1);switch(o+=p,p){case"H":o=this.calNumTrans(o,i,h,p,d,e,c,r);break;case"h":o=this.calNumTrans(o,i,h,p,d,e,"0",0);break;case"V":o=this.calNumTrans(o,i,h,p,d,e,f,n);break;case"v":o=this.calNumTrans(o,i,h,p,d,e,"0",0);break;case"M":case"L":case"T":case"C":case"S":case"Q":for(var v=d.split(","),g=0;g<v.length;g++)o=g%2==0?this.calNumTrans(o,i,h,p,v[g],e,c,r):this.calNumTrans(o,i,h,p,v[g],e,f,n),g!==v.length-1&&(o+=" ");break;case"m":case"l":case"t":case"c":case"s":case"q":for(var y=d.split(","),m=0;m<y.length;m++)o=this.calNumTrans(o,i,h,p,y[m],e,"0",0),m!==y.length-1&&""!==y[m]&&(o+=" ");break;case"A":for(var b=d.split(","),k=0;k<b.length;k++)k===b.length-2?(o=this.calNumTrans(o,i,h,p,b[k],e,parseFloat(c)+1,r),o+=" "):k===b.length-1?o=this.calNumTrans(o,i,h,p,b[k],e,parseFloat(f)+1,n):o+=b[k]+" ";break;case"a":for(var w=d.split(","),x=0;x<w.length;x++)x===w.length-2?(o=this.calNumTrans(o,i,h,p,w[x],e,"1",0),o+=" "):x===w.length-1?o=this.calNumTrans(o,i,h,p,w[x],e,"1",0):o+=w[x]+" "}}"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(o+="Z")}return o}},{key:"calNumTrans",value:function(t,e,r,n,i,a,o,s){if(n=n.toLowerCase(),a)if(void 0!==e.get(n)){for(var u=e.get(n),c=!1,f=0;f<u.length;f++)if(u[f].cmdIdx===r){t+=o,c=!0;break}c||(t+=i)}else t+=i;else i.length>0&&(t+=parseFloat(i)+s);return t}},{key:"calTransD",value:function(t,e,r,n,i){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var a="";if(0===r)a=t;else if(1===r)a=e;else for(var o=0,s=n.length;o<s;o++)a+=(0===o?"M":"L")+((i[o][0]-n[o][0])*r+n[o][0])+","+((i[o][1]-n[o][1])*r+n[o][1]);return"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(a+="Z"),a}},{key:"arcTransition",value:function(t,e,r,n,i,a){var o=function(t,e){return e<t?function(){throw"startAngle should smaller than endAngle"}():null};o(t,e),o(r,n);var s=function(t,e){return e-2*Math.PI*Math.floor((e-t)/Math.PI/2)};e=s(t,e),r=s(t,r),n=s(r,n),n=s(r-=Math.abs(r-t)+Math.abs(n-e)<2*Math.PI?0:2*Math.PI,n);var u=a||function(t,e,r){return r*(e-t)+t};return[u(t,r,i),u(e,n,i)]}},{key:"findDiffCmds",value:function(e){var r=new Map;return e.forEach(function(e,n){for(var i=[],a=0;a<e.length;a++)void 0!==e[a]&&i.push(e[a].d?e[a].d:"m0,0");i.length>0&&t.compareD(i,r)}),r}},{key:"compareD",value:function(t,e){for(var r=new RegExp(/[mlhvcsqta][^mlhvcsqtaz]*/g),n=t[0],i=(n=(n=n.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),o=1;o<t.length;o++)for(var s=t[o],u=(s=(s=s.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),c=0;c<i.length;c++)if(void 0===u[c]){var f=i[c].substring(0,1);void 0===e.get(f)&&e.set(f,[]);var l={};l.cmdIdx=c,l.diffAttrIdxs=[];for(var h=i[c].substring(1).split(","),p=0;p<h.length;p++)l.diffAttrIdxs.push(p);e.get(f).push(l)}else{var d=u[c].substring(0,1),v=u[c].substring(1),g=i[c].substring(1);if(v!==g){void 0===e.get(d)&&e.set(d,[]);var y={};y.cmdIdx=c,y.diffAttrIdxs=[];for(var m=v.split(","),b=g.split(","),k=0;k<m.length;k++)Math.floor(1e3*parseFloat(m[k]))!==Math.floor(1e3*parseFloat(b[k]))&&y.diffAttrIdxs.push(k);for(var w=!1,x=0;x<e.get(d).length;x++)if(e.get(d)[x].cmdIdx===y.cmdIdx){w=!0,e.get(d)[x].diffAttrIdxs=[].concat(a(new Set([].concat(a(e.get(d)[x].diffAttrIdxs),a(y.diffAttrIdxs)))));break}w||e.get(d).push(y)}}}},{key:"getTransformAttrs",value:function(t){var e=t.getAttribute("transform");if(e){e=(e=e.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var r="",n="",i=0;i<e.length;i++)e[i].indexOf("translate")>=0?n=e[i]:e[i].indexOf("scale")>=0&&(r=e[i]);var a=["0","0"],o="1";return""!==n&&(a=n.replace(/translate\(| |\)/g,"").split(",")),""!==r&&(o=r.replace(/scale\(| |\)/g,"")),{transNums:[parseFloat(a[0]),parseFloat(a[1])],scaleNum:parseFloat(o)}}return{transNums:[0,0],scaleNum:1}}},{key:"checkValidProp",value:function(t,e){switch(t){case"circle":return["opacity","cx","cy","r","stroke","stroke-width","fill"].includes(e);case"ellipse":return["opacity","cx","cy","rx","ry","stroke","stroke-width","fill"].includes(e);case"image":return["x","y","width","height","href","xlink:href","preserveAspectRatio"].includes(e);case"line":return["opacity","x1","x2","y1","y2","stroke","stroke-width","fill"].includes(e);case"path":return["opacity","d","stroke","stroke-width","fill"].includes(e);case"polygon":case"polyline":return["opacity","points","stroke","stroke-width","fill"].includes(e);case"rect":return["opacity","x","y","width","height","rx","ry","stroke","stroke-width","fill"].includes(e);case"text":return["opacity","x","y","dx","dy","textContent"].includes(e);default:return!1}}},{key:"checkHTML",value:function(t){return/<[^>]+>/g.test(t)}}]),t}();e.CanisUtil=f,f.colorNames=new Map([["aliceblue","#f0f8ff"],["antiquewhite","#faebd7"],["aqua","#00ffff"],["aquamarine","#7fffd4"],["azure","#f0ffff"],["beige","#f5f5dc"],["bisque","#ffe4c4"],["black","#000000"],["blanchedalmond","#ffebcd"],["blue","#0000ff"],["blueviolet","#8a2be2"],["brown","#a52a2a"],["burlywood","#deb887"],["cadetblue","#5f9ea0"],["chartreuse","#7fff00"],["chocolate","#d2691e"],["coral","#ff7f50"],["cornflowerblue","#6495ed"],["cornsilk","#fff8dc"],["crimson","#dc143c"],["cyan","#00ffff"],["darkblue","#00008b"],["darkcyan","#008b8b"],["darkgoldenrod","#b8860b"],["darkgray","#a9a9a9"],["darkgrey","#a9a9a9"],["darkgreen","#006400"],["darkkhaki","#bdb76b"],["darkmagenta","#8b008b"],["darkolivegreen","#556b2f"],["darkorange","#ff8c00"],["darkorchid","#9932cc"],["darkred","#8b0000"],["darksalmon","#e9967a"],["darkseagreen","#8fbc8f"],["darkslateblue","#483d8b"],["darkslategray","#2f4f4f"],["darkslategrey","#2f4f4f"],["darkturquoise","#00ced1"],["darkviolet","#9400d3"],["deeppink","#ff1493"],["deepskyblue","#00bfff"],["dimgray","#696969"],["dimgrey","#696969"],["dodgerblue","#1e90ff"],["firebrick","#b22222"],["floralwhite","#fffaf0"],["forestgreen","#228b22"],["fuchsia","#ff00ff"],["gainsboro","#dcdcdc"],["ghostwhite","#f8f8ff"],["gold","#ffd700"],["goldenrod","#daa520"],["gray","#808080"],["grey","#808080"],["green","#008000"],["greenyellow","#adff2f"],["honeydew","#f0fff0"],["hotpink","#ff69b4"],["indianred ","#cd5c5c"],["indigo  ","#4b0082"],["ivory","#fffff0"],["khaki","#f0e68c"],["lavender","#e6e6fa"],["lavenderblush","#fff0f5"],["lawngreen","#7cfc00"],["lemonchiffon","#fffacd"],["lightblue","#add8e6"],["lightcoral","#f08080"],["lightcyan","#e0ffff"],["lightgoldenrodyellow","#fafad2"],["lightgray","#d3d3d3"],["lightgrey","#d3d3d3"],["lightgreen","#90ee90"],["lightpink","#ffb6c1"],["lightsalmon","#ffa07a"],["lightseagreen","#20b2aa"],["lightskyblue","#87cefa"],["lightslategray","#778899"],["lightslategrey","#778899"],["lightsteelblue","#b0c4de"],["lightyellow","#ffffe0"],["lime","#00ff00"],["limegreen","#32cd32"],["linen","#faf0e6"],["magenta","#ff00ff"],["maroon","#800000"],["mediumaquamarine","#66cdaa"],["mediumblue","#0000cd"],["mediumorchid","#ba55d3"],["mediumpurple","#9370db"],["mediumseagreen","#3cb371"],["mediumslateblue","#7b68ee"],["mediumspringgreen","#00fa9a"],["mediumturquoise","#48d1cc"],["mediumvioletred","#c71585"],["midnightblue","#191970"],["mintcream","#f5fffa"],["mistyrose","#ffe4e1"],["moccasin","#ffe4b5"],["navajowhite","#ffdead"],["navy","#000080"],["oldlace","#fdf5e6"],["olive","#808000"],["olivedrab","#6b8e23"],["orange","#ffa500"],["orangered","#ff4500"],["orchid","#da70d6"],["palegoldenrod","#eee8aa"],["palegreen","#98fb98"],["paleturquoise","#afeeee"],["palevioletred","#db7093"],["papayawhip","#ffefd5"],["peachpuff","#ffdab9"],["peru","#cd853f"],["pink","#ffc0cb"],["plum","#dda0dd"],["powderblue","#b0e0e6"],["purple","#800080"],["rebeccapurple","#663399"],["red","#ff0000"],["rosybrown","#bc8f8f"],["royalblue","#4169e1"],["saddlebrown","#8b4513"],["salmon","#fa8072"],["sandybrown","#f4a460"],["seagreen","#2e8b57"],["seashell","#fff5ee"],["sienna","#a0522d"],["silver","#c0c0c0"],["skyblue","#87ceeb"],["slateblue","#6a5acd"],["slategray","#708090"],["slategrey","#708090"],["snow","#fffafa"],["springgreen","#00ff7f"],["steelblue","#4682b4"],["tan","#d2b48c"],["teal","#008080"],["thistle","#d8bfd8"],["tomato","#ff6347"],["turquoise","#40e0d0"],["violet","#ee82ee"],["wheat","#f5deb3"],["white","#ffffff"],["whitesmoke","#f5f5f5"],["yellow","#ffff00"],["yellowgreen","#9acd32"]]);var l=function(){function t(){s(this,t),this.chartWidth=0,this.chartHeight=0}return c(t,[{key:"setViewport",value:function(t,e){this.chartWidth=t,this.chartHeight=e}}]),t}();e.Viewport=l;var h=function(){function t(){s(this,t)}return c(t,[{key:"construcor",value:function(t,e,r,n,i){this.tagName=t,this.visualProps=e,this.animateProps=r,this.boundingBox=n,this.jsMovinLayerIdx=i}}],[{key:"compareTemplate",value:function(t,e){return t.tagName===e.tagName&&(!!this.compareVisualProps(t.visualProps,e.visualProps)&&void 0)}},{key:"compareVisualProps",value:function(t,e){var r=["x","y","width","height","r","opacity","d"],n=[].concat(a(Object.keys(t)),a(Object.keys(e))).filter(function(r){void 0===t[r]||void 0===e[r]||(t[r],e[r])});if(n.includes("d")){var i=new RegExp(/[0-9\.,\s]/g);return t.d.replace(i,"")===e.d.replace(i,"")}return n.every(function(t){return r.indexOf(t)>=0})}},{key:"checkElementsSelected",value:function(t){console.log(t)}}]),t}();e.AssetTemplate=h},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PathMaker=void 0;var n=r(104);function i(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"path",{c:!1,i:[],o:[],v:[]}),o(this,"currentX",0),o(this,"currentY",0),o(this,"offsetX",1/0),o(this,"offsetY",1/0),o(this,"pathReady",!1),o(this,"pathStart",[0,0]),o(this,"pathChain",[]),e&&this.parse(e)}var e,r,s;return e=t,s=[{key:"a2c",value:function(t,e,r,n,i,a,o,s,u,c){var f,l=120*Math.PI/180,h=Math.PI/180*(+i||0),p=[],d=function(t,e,r){return{x:t*Math.cos(r)-e*Math.sin(r),y:t*Math.sin(r)+e*Math.cos(r)}};if(!r||!n)return[t,e,s,u,s,u];if(c)S=c[0],A=c[1],w=c[2],x=c[3];else{t=(f=d(t,e,-h)).x,e=f.y,s=(f=d(s,u,-h)).x,u=f.y,Math.cos(Math.PI/180*i),Math.sin(Math.PI/180*i);var v=(t-s)/2,g=(e-u)/2,y=v*v/(r*r)+g*g/(n*n);y>1&&(r*=y=Math.sqrt(y),n*=y);var m=r*r,b=n*n,k=(a==o?-1:1)*Math.sqrt(Math.abs((m*b-m*g*g-b*v*v)/(m*g*g+b*v*v))),w=k*r*g/n+(t+s)/2,x=k*-n*v/r+(e+u)/2,S=Math.asin((e-x)/n),A=Math.asin((u-x)/n);S=t<w?Math.PI-S:S,A=s<w?Math.PI-A:A,S<0&&(S=2*Math.PI+S),A<0&&(A=2*Math.PI+A),o&&S>A&&(S-=2*Math.PI),!o&&A>S&&(A-=2*Math.PI)}var T=A-S;if(Math.abs(T)>l){var M=A,E=s,O=u;A=S+l*(o&&A>S?1:-1),s=w+r*Math.cos(A),u=x+n*Math.sin(A),p=this.a2c(s,u,r,n,i,0,o,E,O,[A,M,w,x])}T=A-S;var _=Math.cos(S),P=Math.sin(S),I=Math.cos(A),N=Math.sin(A),j=Math.tan(T/4),F=4/3*r*j,C=4/3*n*j,R=[t,e],L=[t+F*P,e-C*_],B=[s+F*N,u-C*I],V=[s,u];if(L[0]=2*R[0]-L[0],L[1]=2*R[1]-L[1],c)return[L,B,V].concat(p);for(var D=[],G=0,U=(p=[L,B,V].concat(p).join().split(",").map(function(t){return parseFloat(t)})).length;G<U;G++)D[G]=G%2?d(p[G-1],p[G],h).y:d(p[G],p[G+1],h).x;return D}}],(r=[{key:"updateXY",value:function(t,e){this.currentX=t,this.currentY=e,this.offsetX=Math.min(this.offsetX,t),this.offsetY=Math.min(this.offsetY,e)}},{key:"calculateBezierMinMax",value:function(t,e,r,n){var i=3*(n-3*r+3*e-t),a=6*(r-2*e+t),o=3*(e-t),s=1/0,u=-1/0;if(a*a-4*i*o>=0){var c=Math.sqrt(a*a-4*i*o);[1,-1].map(function(t){return(t*c-a)/2/i}).forEach(function(i){if(i>0&&i<1){var a=Math.pow(1-i,3)*t+3*Math.pow(1-i,2)*i*e+3*(1-i)*i*i*r+Math.pow(i,3)*n;s=Math.min(s,a),u=Math.max(u,a)}})}return s=Math.min(s,t,n),u=Math.max(u,t,n),[s,u]}},{key:"calculateHighlyOrder",value:function(t,e){var r=[];return t.forEach(function(t,n,i){n>=i.length-1||r.push(t*(1-e)+i[n+1]*e)}),r}},{key:"calculateBezierSplit",value:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var i=this.calculateHighlyOrder(r,t),a=this.calculateHighlyOrder(i,t),o=this.calculateHighlyOrder(a,t);return[i[0],a[0],o[0],a[1],i[2],r[3]]}},{key:"moveTo",value:function(t,e){this.pathReady?(this.lineTo.apply(this,i(this.pathStart)),this.lineTo(t,e),this.pathChain.push(this.pathStart)):(this.path.c=!1,this.path.i=[[0,0]],this.path.o=[],this.path.v=[[t,e]],this.currentX=t,this.currentY=e,this.offsetX=t,this.offsetY=e,this.pathReady=!0),this.pathStart=[t,e]}},{key:"moveToRelative",value:function(t,e){this.moveTo(this.currentX+t,this.currentY+e)}},{key:"lineTo",value:function(t,e){this.path.i.push([0,0]),this.path.o.push([0,0]),this.path.v.push([t,e]),this.updateXY(t,e)}},{key:"lineToRelative",value:function(t,e){this.lineTo(this.currentX+t,this.currentY+e)}},{key:"horizontalTo",value:function(t){this.lineTo(t,this.currentY)}},{key:"horizontalToRelative",value:function(t){this.horizontalTo(this.currentX+t)}},{key:"verticalTo",value:function(t){this.lineTo(this.currentX,t)}},{key:"verticalToRelative",value:function(t){this.verticalTo(this.currentY+t)}},{key:"cubicBezierCurveTo",value:function(t,e,r,n,a,o){this.path.i.push([r-a,n-o]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([a,o]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,t,r,a)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,e,n,o)))),this.updateXY(a,o)}},{key:"cubicBezierCurveToRelative",value:function(t,e,r,n,i,a){this.cubicBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n,this.currentX+i,this.currentY+a)}},{key:"quadraticBezierCurveTo",value:function(t,e,r,n){this.path.i.push([t-r,e-n]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([r,n]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,t,t,r)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,e,e,n)))),this.updateXY(r,n)}},{key:"quadraticBezierCurveToRelative",value:function(t,e,r,n){this.quadraticBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n)}},{key:"arcTo",value:function(e,r,n,a,o,s,u){for(var c=t.a2c(this.currentX,this.currentY,e,r,n,a,o,s,u);c.length>=6;){var f=c.splice(0,6);this.path.i.push([f[2]-f[4],f[3]-f[5]]),this.path.o.push([f[0]-this.currentX,f[1]-this.currentY]),this.path.v.push([f[4],f[5]]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,f[0],f[2],f[4])))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,f[1],f[3],f[5])))),this.updateXY(f[4],f[5])}}},{key:"arcToRelative",value:function(t,e,r,n,i,a,o){this.arcTo(t,e,r,n,i,this.currentX+a,this.currentY+o)}},{key:"closePath",value:function(){this.path.c=!0}},{key:"uniform",value:function(){var t=this;for(!this.pathChain.length||this.currentX==this.pathStart[0]&&this.currentY==this.pathStart[1]||this.lineTo.apply(this,i(this.pathStart));this.pathChain.length;){var e=this.pathChain.pop();this.lineTo.apply(this,i(e))}for(;this.path.o.length<this.path.i.length;)this.path.o.push([0,0]);this.path.v.forEach(function(e){e[0]-=t.offsetX,e[1]-=t.offsetY}),this.offsetX=0,this.offsetY=0}},{key:"parse",value:function(t){var e,r=this;(0,n.parseSVG)(t).forEach(function(t){switch(t.code){case"M":e=t,r.moveTo(e.x,e.y);break;case"m":e=t,r.moveToRelative(e.x,e.y);case"L":e=t,r.lineTo(e.x,e.y);break;case"l":e=t,r.lineToRelative(e.x,e.y);break;case"H":e=t,r.horizontalTo(e.x);break;case"h":e=t,r.horizontalToRelative(e.x);break;case"V":e=t,r.verticalTo(e.y);break;case"v":e=t,r.verticalToRelative(e.y);break;case"C":e=t,r.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,r.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,r.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,r.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,r.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,r.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":r.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}})}},{key:"upsample",value:function(t){var e=this;if(!Number.isInteger(t))throw new Error("The upsampling ratio should be an integer.");if(this.uniform(),!(t<=1)){var r={c:this.path.c,i:[],o:[],v:[]};this.path.v.forEach(function(n,a,o){if(a<=0)return r.v.push(n),void r.i.push(e.path.i[a]);for(var s=e.path.o,u=e.path.i,c=[o[a-1][0],s[a-1][0]+o[a-1][0],u[a][0]+n[0],n[0]],f=[o[a-1][1],s[a-1][1]+o[a-1][1],u[a][1]+n[1],n[1]],l=1;l<t;l++){var h=1/(t-l+1),p=e.calculateBezierSplit.apply(e,[h].concat(i(c))),d=e.calculateBezierSplit.apply(e,[h].concat(i(f))),v=c[0],g=p.shift()-v,y=p[1],m=p.shift()-y,b=f[0],k=d.shift()-b,w=d[1],x=d.shift()-w;r.o.push([g,k]),r.i.push([m,x]),r.v.push([y,w]),c=p,f=d}var S=c.shift(),A=c.shift()-S,T=c[1],M=c.shift()-T,E=f.shift(),O=f.shift()-E,_=f[1],P=f.shift()-_;r.o.push([A,O]),r.i.push([M,P]),r.v.push([T,_])}),this.path=r,this.uniform()}}}])&&a(e.prototype,r),s&&a(e,s),t}();e.PathMaker=s},function(t,e,r){var n=r(148),i=r(149);t.exports=function(t,e,r){var a=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var s=0;s<16;++s)e[a+s]=o[s];return e||i(o)}},function(t,e,r){"use strict";function n(t,e){return e.getScreenCTM().inverse().multiply(t.getScreenCTM())}function i(t,e){for(t=Math.abs(t),e=Math.abs(e);e;){var r=e;e=t%e,t=r}return t}Object.defineProperty(e,"__esModule",{value:!0}),e.calculateBaseTransform=n,e.getBoundingBox=function(t){var e=t;for(;e.parentElement instanceof SVGGraphicsElement;)e=e.parentElement;var r=n(t,e),i=t.getBBox();return[r.e+i.x,r.f+i.y,i.width+1,i.height+1]},e.getLeafNodes=function(t){return Array.prototype.slice.call(t.getElementsByTagName("*"),0).filter(function(t){if(t.hasChildNodes())for(var e=0;e<t.childNodes.length;e++)if(1==t.childNodes[e].nodeType)return!1;return!0})},e.getBaselineHeight=function(t){var e=document.createElement("canvas").getContext("2d"),r=getComputedStyle(t).font;return e.font=r,e.measureText("ypfgj█").actualBoundingBoxDescent||0},e.encodeLineCap=function(t){switch(t){case"square":return 3;case"butt":return 1;default:return 2}},e.encodeLineJoin=function(t){switch(t){case"miter":return 1;case"bevel":return 3;default:return 2}},e.encodeTextAnchor=function(t){switch(t){case"middle":return 2;case"end":return 1;default:return 0}},e.greatestCommonDivisor=i,e.leastCommonMultiple=function(t,e){return t&&e?Math.abs(t*e/i(t,e)):0}},function(t,e,r){var n=r(4),i=r(2).document,a=n(i)&&n(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,r){var n=r(2),i=r(18),a=r(29),o=r(109),s=r(8).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=a?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:o.f(t)})}},function(t,e,r){var n=r(48)("keys"),i=r(33);t.exports=function(t){return n[t]||(n[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(2).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(4),i=r(1),a=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(19)(Function.call,r(16).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return a(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:a}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,r){var n=r(4),i=r(79).set;t.exports=function(t,e,r){var a,o=e.constructor;return o!==r&&"function"==typeof o&&(a=o.prototype)!==r.prototype&&n(a)&&i&&i(t,a),t}},function(t,e,r){"use strict";var n=r(21),i=r(24);t.exports=function(t){var e=String(i(this)),r="",a=n(t);if(a<0||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(e+=e))1&a&&(r+=e);return r}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,e,r){"use strict";var n=r(29),i=r(0),a=r(12),o=r(11),s=r(46),u=r(86),c=r(43),f=r(17),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,v,g,y){u(r,e,d);var m,b,k,w=function(t){if(!h&&t in T)return T[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},x=e+" Iterator",S="values"==v,A=!1,T=t.prototype,M=T[l]||T["@@iterator"]||v&&T[v],E=M||w(v),O=v?S?w("entries"):E:void 0,_="Array"==e&&T.entries||M;if(_&&(k=f(_.call(new t)))!==Object.prototype&&k.next&&(c(k,x,!0),n||"function"==typeof k[l]||o(k,l,p)),S&&M&&"values"!==M.name&&(A=!0,E=function(){return M.call(this)}),n&&!y||!h&&!A&&T[l]||o(T,l,E),s[e]=E,s[x]=p,v)if(m={values:S?E:w("values"),keys:g?E:w("keys"),entries:O},y)for(b in m)b in T||a(T,b,m[b]);else i(i.P+i.F*(h||A),e,m);return m}},function(t,e,r){"use strict";var n=r(36),i=r(32),a=r(43),o={};r(11)(o,r(5)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),a(t,e+" Iterator")}},function(t,e,r){var n=r(59),i=r(24);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},function(t,e,r){var n=r(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,r){var n=r(46),i=r(5)("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||a[i]===t)}},function(t,e,r){"use strict";var n=r(8),i=r(32);t.exports=function(t,e,r){e in t?n.f(t,e,i(0,r)):t[e]=r}},function(t,e,r){var n=r(44),i=r(5)("iterator"),a=r(46);t.exports=r(18).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||a[n(t)]}},function(t,e,r){var n=r(243);t.exports=function(t,e){return new(n(t))(e)}},function(t,e,r){"use strict";var n=r(9),i=r(35),a=r(6);t.exports=function(t){for(var e=n(this),r=a(e.length),o=arguments.length,s=i(o>1?arguments[1]:void 0,r),u=o>2?arguments[2]:void 0,c=void 0===u?r:i(u,r);c>s;)e[s++]=t;return e}},function(t,e,r){"use strict";var n=r(31),i=r(126),a=r(46),o=r(15);t.exports=r(85)(Array,"Array",function(t,e){this._t=o(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var n,i,a=r(51),o=RegExp.prototype.exec,s=String.prototype.replace,u=o,c=(n=/a/,i=/b*/g,o.call(n,"a"),o.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(c||f)&&(u=function(t){var e,r,n,i,u=this;return f&&(r=new RegExp("^"+u.source+"$(?!\\s)",a.call(u))),c&&(e=u.lastIndex),n=o.call(u,t),c&&n&&(u.lastIndex=u.global?n.index+n[0].length:e),f&&n&&n.length>1&&s.call(n[0],r,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)}),n}),t.exports=u},function(t,e,r){"use strict";var n=r(58)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n,i,a,o=r(19),s=r(116),u=r(78),c=r(74),f=r(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return y[++g]=function(){s("function"==typeof t?t:Function(t),e)},n(g),g},p=function(t){delete y[t]},"process"==r(20)(l)?n=function(t){l.nextTick(o(m,t,1))}:v&&v.now?n=function(t){v.now(o(m,t,1))}:d?(a=(i=new d).port2,i.port1.onmessage=b,n=o(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):n="onreadystatechange"in c("script")?function(t){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),m.call(t)}}:function(t){setTimeout(o(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,r){var n=r(2),i=r(97).set,a=n.MutationObserver||n.WebKitMutationObserver,o=n.process,s=n.Promise,u="process"==r(20)(o);t.exports=function(){var t,e,r,c=function(){var n,i;for(u&&(n=o.domain)&&n.exit();t;){i=t.fn,t=t.next;try{i()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(u)r=function(){o.nextTick(c)};else if(!a||n.navigator&&n.navigator.standalone)if(s&&s.resolve){var f=s.resolve(void 0);r=function(){f.then(c)}}else r=function(){i.call(n,c)};else{var l=!0,h=document.createTextNode("");new a(c).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(n){var i={fn:n,next:void 0};e&&(e.next=i),t||(t=i,r()),e=i}}},function(t,e,r){"use strict";var n=r(10);function i(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=n(e),this.reject=n(r)}t.exports.f=function(t){return new i(t)}},function(t,e,r){"use strict";var n=r(2),i=r(7),a=r(29),o=r(65),s=r(11),u=r(41),c=r(3),f=r(39),l=r(21),h=r(6),p=r(136),d=r(37).f,v=r(8).f,g=r(93),y=r(43),m="prototype",b="Wrong index!",k=n.ArrayBuffer,w=n.DataView,x=n.Math,S=n.RangeError,A=n.Infinity,T=k,M=x.abs,E=x.pow,O=x.floor,_=x.log,P=x.LN2,I=i?"_b":"buffer",N=i?"_l":"byteLength",j=i?"_o":"byteOffset";function F(t,e,r){var n,i,a,o=new Array(r),s=8*r-e-1,u=(1<<s)-1,c=u>>1,f=23===e?E(2,-24)-E(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=M(t))!=t||t===A?(i=t!=t?1:0,n=u):(n=O(_(t)/P),t*(a=E(2,-n))<1&&(n--,a*=2),(t+=n+c>=1?f/a:f*E(2,1-c))*a>=2&&(n++,a/=2),n+c>=u?(i=0,n=u):n+c>=1?(i=(t*a-1)*E(2,e),n+=c):(i=t*E(2,c-1)*E(2,e),n=0));e>=8;o[l++]=255&i,i/=256,e-=8);for(n=n<<e|i,s+=e;s>0;o[l++]=255&n,n/=256,s-=8);return o[--l]|=128*h,o}function C(t,e,r){var n,i=8*r-e-1,a=(1<<i)-1,o=a>>1,s=i-7,u=r-1,c=t[u--],f=127&c;for(c>>=7;s>0;f=256*f+t[u],u--,s-=8);for(n=f&(1<<-s)-1,f>>=-s,s+=e;s>0;n=256*n+t[u],u--,s-=8);if(0===f)f=1-o;else{if(f===a)return n?NaN:c?-A:A;n+=E(2,e),f-=o}return(c?-1:1)*n*E(2,f-e)}function R(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function B(t){return[255&t,t>>8&255]}function V(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function D(t){return F(t,52,8)}function G(t){return F(t,23,4)}function U(t,e,r){v(t[m],e,{get:function(){return this[r]}})}function z(t,e,r,n){var i=p(+r);if(i+e>t[N])throw S(b);var a=t[I]._b,o=i+t[j],s=a.slice(o,o+e);return n?s:s.reverse()}function W(t,e,r,n,i,a){var o=p(+r);if(o+e>t[N])throw S(b);for(var s=t[I]._b,u=o+t[j],c=n(+i),f=0;f<e;f++)s[u+f]=c[a?f:e-f-1]}if(o.ABV){if(!c(function(){k(1)})||!c(function(){new k(-1)})||c(function(){return new k,new k(1.5),new k(NaN),"ArrayBuffer"!=k.name})){for(var Y,X=(k=function(t){return f(this,k),new T(p(t))})[m]=T[m],q=d(T),H=0;q.length>H;)(Y=q[H++])in k||s(k,Y,T[Y]);a||(X.constructor=k)}var J=new w(new k(2)),Q=w[m].setInt8;J.setInt8(0,2147483648),J.setInt8(1,2147483649),!J.getInt8(0)&&J.getInt8(1)||u(w[m],{setInt8:function(t,e){Q.call(this,t,e<<24>>24)},setUint8:function(t,e){Q.call(this,t,e<<24>>24)}},!0)}else k=function(t){f(this,k,"ArrayBuffer");var e=p(t);this._b=g.call(new Array(e),0),this[N]=e},w=function(t,e,r){f(this,w,"DataView"),f(t,k,"DataView");var n=t[N],i=l(e);if(i<0||i>n)throw S("Wrong offset!");if(i+(r=void 0===r?n-i:h(r))>n)throw S("Wrong length!");this[I]=t,this[j]=i,this[N]=r},i&&(U(k,"byteLength","_l"),U(w,"buffer","_b"),U(w,"byteLength","_l"),U(w,"byteOffset","_o")),u(w[m],{getInt8:function(t){return z(this,1,t)[0]<<24>>24},getUint8:function(t){return z(this,1,t)[0]},getInt16:function(t){var e=z(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=z(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return R(z(this,4,t,arguments[1]))},getUint32:function(t){return R(z(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return C(z(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return C(z(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){W(this,1,t,L,e)},setUint8:function(t,e){W(this,1,t,L,e)},setInt16:function(t,e){W(this,2,t,B,e,arguments[2])},setUint16:function(t,e){W(this,2,t,B,e,arguments[2])},setInt32:function(t,e){W(this,4,t,V,e,arguments[2])},setUint32:function(t,e){W(this,4,t,V,e,arguments[2])},setFloat32:function(t,e){W(this,4,t,G,e,arguments[2])},setFloat64:function(t,e){W(this,8,t,D,e,arguments[2])}});y(k,"ArrayBuffer"),y(w,"DataView"),s(w[m],o.VIEW,!0),e.ArrayBuffer=k,e.DataView=w},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(102)),i=l(r(105)),a=l(r(47)),o=l(r(69)),s=r(70),u=r(54);r(150);var c=l(r(107)),f=l(r(106));function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e,r,n,i,a,o){try{var s=t[a](o),u=s.value}catch(t){return void r(t)}s.done?e(u):Promise.resolve(u).then(n,i)}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var y=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentSpec={},this.canisObj={},this._constants=new Map,this.chartSpecs,this.facet,this._animations,this.chartWidth,this.chartHeight,this.hasError=!1}var e,r,l,y,m;return e=t,(r=[{key:"preprocessCharts",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;console.time("prepeocess charts"),this.chartSpecs=[];var a=t;if(e){var o=n.default.chartPreProcessing(a.charts,r),s=v(o,2);if(a.charts=s[0],this.hasError=s[1],this.hasError)return a;for(var c=0;c<a.charts.length;c++){var f=void 0===a.charts[c].id?"chart"+c:a.charts[c].id,l=void 0===a.charts[c].type?n.default.CHART_URL:a.charts[c].type,h=new n.default(f,l,a.charts[c].source);this.chartSpecs.push(h)}if(a.facet&&(this.facet=new i.default(a.facet.type,a.facet.views)),this.hasError=n.default.loadCharts(this.chartSpecs,this.facet,r),this.hasError)return a;u.globalVar.jsMovin.setViewport(n.default.viewport.chartWidth,n.default.viewport.chartHeight),n.default.removeTransAndMerge(),document.getElementById("chartContainer").innerHTML="",document.getElementById("chartContainer").appendChild(n.default.svgChart)}return u.globalVar.jsMovin.clearLayers(),n.default.addLottieMarkLayers(n.default.svgChart),console.timeEnd("prepeocess charts"),a}},{key:"compareSpec",value:function(t){var e=!1;return console.log("comparing: ",this.currentSpec.charts,t.charst),(void 0!==this.currentSpec.constants&&JSON.stringify(t.constants)!==JSON.stringify(this.currentSpec.constants)||void 0!==this.currentSpec.charts&&JSON.stringify(t.charts)!==JSON.stringify(this.currentSpec.charts)||void 0===this.currentSpec.charts||void 0!==t.facet&&void 0!==this.currentSpec.facet&&JSON.stringify(t.facet)!==JSON.stringify(this.currentSpec.facet)||(void 0===this.currentSpec.facet||void 0===t.facet)&&(void 0!==this.currentSpec.facet||void 0!==t.facet))&&(e=!0),e&&(o.default.domMarks.clear(),n.default.dataMarkDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={},o.default.animations.clear()),this.currentSpec=t,e}},{key:"checkAttrs",value:function(t,e,r){for(var n=Object.keys(e),i=!1,a=0,o=n.length;a<o;a++)if(!t.includes(n[a])){i=!0;var s=e[n[a]],u='"'+n[a]+'":';isNaN(Number(s))?"object"===d(s)?u+=JSON.stringify(s):u+='"'+s+'"':u+=""+s,r.info={type:"error",msg:'Illegal attribute name "'+n[a]+'".',errSpec:u.replace(/\s/g,"")};break}return i}},{key:"checkSpec",value:function(t,e){var r=!1;0===t.charts.length&&(r=!0,e.info={type:"error",msg:"There are no input charts.",errSpec:'"charts":[]'});for(var i=0,s=t.charts.length;i<s&&!(r=this.checkAttrs(n.default.attrs,t.charts[i],e));i++){if(!t.charts[i].source){r=!0,e.info={type:"error",msg:"No chart source found in chart item.",errSpec:JSON.stringify(t.charts[i]).replace(/\s/g,"")};break}if(t.charts[i].source.indexOf(".dsvg")<0&&(!t.charts[i].start||!t.charts[i].end)){r=!0,e.info={type:"error",msg:"No range specification found for input chart index .",errSpec:JSON.stringify(t.charts[i]).replace(/\s/g,"")};break}}for(var u=0,c=t.animations.length;u<c&&!(r=this.checkAttrs(o.default.attrs,t.animations[u],e));u++){if(!t.animations[u].selector){r=!0,e.info={type:"error",msg:"No selector found in animation unit.",errSpec:JSON.stringify(t.animations[u]).replace(/\s/g,"")};break}if(!t.animations[u].effects){r=!0,e.info={type:"error",msg:"No effects found in animation unit.",errSpec:JSON.stringify(t.animations[u]).replace(/\s/g,"")};break}if(t.animations[u].reference&&!Object.keys(a.default.timingRef).includes(a.default.transRef(t.animations[u].reference))){r=!0,e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.animations[u].reference.replace(/\s/g,"")+'"'};break}if(t.animations[u].offset&&"object"===d(t.animations[u].offset)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[u].offset,e)))break;if(t.animations[u].grouping&&(r=this.checkGroupingSpec(t.animations[u].grouping,e)))break;for(var l=0,h=t.animations[u].effects.length;l<h&&!(r=this.checkAttrs(f.default.attrs,t.animations[u].effects[l],e));l++){if(!t.animations[u].effects[l].type){r=!0,e.info={type:"error",msg:"No effect type found in effect item.",errSpec:JSON.stringify(t.animations[u].effects[l]).replace(/\s/g,"")};break}if(!Object.values(f.default.actionTypes).includes(t.animations[u].effects[l].type)){r=!0,e.info={type:"error",msg:'Invalid effect type "'+t.animations[u].effects[l].type+'".',errSpec:'"type":"'+t.animations[u].effects[l].type.replace(/\s/g,"")+'"'};break}if(t.animations[u].effects[l].offset&&"object"===d(t.animations[u].effects[l].offset)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[u].effects[l].offset,e)))break;if(t.animations[u].effects[l].duration&&"object"===d(t.animations[u].effects[l].duration)&&(r=this.checkAttrs(a.default.dataBindAttrs,t.animations[u].effects[l].duration,e)))break;if(t.animations[u].effects[l].easing&&!Object.values(f.default.easingType).includes(t.animations[u].effects[l].easing)){r=!0,e.info={type:"error",msg:'Invalid easing type "'+t.animations[u].effects[l].easing+'".',errSpec:'"easing":"'+t.animations[u].effects[l].easing.replace(/\s/g,"")+'"'};break}}}return r}},{key:"checkGroupingSpec",value:function(t,e){if("number"==typeof t||"string"==typeof t){var r="number"==typeof t?'"grouping":'+t:'"grouping":"'+t.replace(/\s/g,"")+'"';return e.info={type:"error",msg:"Invalid grouping value.",errSpec:r},!0}if(this.checkAttrs(c.default.attrs,t,e))return!0;if(t.reference&&!Object.keys(a.default.timingRef).includes(a.default.transRef(t.reference)))return e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.reference.replace(/\s/g,"")+'"'},!0;if(t.sort&&"object"===d(t.sort)){if(this.checkAttrs(c.default.sortAttrs,t.sort,e))return!0}else if("number"==typeof t.sort)return e.info={type:"error",msg:"Invalid sort value.",errSpec:'"sort":'+t.sort},!0;return!!t.grouping&&this.checkGroupingSpec(t.grouping,e)}},{key:"init",value:(y=regeneratorRuntime.mark(function t(e){var r,i,f,l,p,v,g,y=this,m=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if((r=m.length>1&&void 0!==m[1]?m[1]:null)&&(this.hasError=this.checkSpec(e,r)),this.hasError){t.next=32;break}if(o.default.resetAll(),c.default.frames.clear(),c.default.framesMark.clear(),0!==e.charts.length){t.next=15;break}o.default.domMarks.clear(),n.default.dataMarkDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={},o.default.animations.clear(),document.getElementById("chartContainer")&&(document.getElementById("chartContainer").innerHTML=""),t.next=32;break;case 15:return u.globalVar.jsMovin.setFrameRate(a.default.FRAME_RATE),i=this.compareSpec(e),t.next=19,this.preprocessCharts(e,i,r);case 19:if((f=t.sent).constants&&void 0!==f.constants&&(this.constants=f.constants),this.animations=f.animations,!Array.isArray(this.animations)){t.next=32;break}p=function(t){var e=y.animations[t];console.time("using dom"),console.time("query dom");var i=document.createElement("div");document.body.appendChild(i),i.innerHTML=n.default.charts[e.chartIdx].outerHTML;var a=i.querySelectorAll(e.selector);if(0===a.length)return"number"==typeof e.selector?r.info={type:"error",msg:"The selector need to be a CSS selector",errSpec:'"selector":'+e.selector}:r.info={type:"error",msg:"The selector "+e.selector+" selects no marks",errSpec:'"selector":"'+e.selector.replace(/\s/g,"")+'"'},{v:void 0};console.timeEnd("query dom");for(var u=[],c=0;c<n.default.changedAttrs.length;c++)u.push(n.default.changedAttrs[c]);console.log("selector of this animation: ",e.selector);var f=void 0;void 0!==o.default.animations.get(e.selector)?(f=o.default.animations.get(e.selector)).translate(e,u,!0):((f=new o.default).translate(e,u),o.default.animations.set(e.selector,f)),y.constants.size>0&&(f.replaceConstants(y.constants,r),console.log("translated animation: ",f)),console.timeEnd("using dom");var p=[];a.length>0&&(console.time("extract mark dom"),[].forEach.call(a,function(t){if(t.classList.contains("mark")){var e=t.getAttribute("id");if(p.push(e),void 0===o.default.domMarks.get(e)){if("path"===t.tagName){var r=s.CanisUtil.toJSON(t),n=s.CanisUtil.discretizePath(r);if(n){if("lines"===n.type)for(var i=0;i<n.data.length;i++)r.attr["x"+(1+2*i)]=n.data[i][0][0],r.attr["y"+(1+2*i)]=n.data[i][0][1],r.attr["x"+(2+2*i)]=n.data[i][1][0],r.attr["y"+(2+2*i)]=n.data[i][1][1];else for(var a=Object.keys(n.data),u=0;u<a.length;u++){var c=a[u];"radius"===c?n.data[c].length>1?(r.attr.innerRadius=n.data[c][0].rx+1,r.attr.outterRadius=n.data[c][1].rx-1):(r.attr.innerRadius=0,r.attr.outterRadius=n.data[c][0].rx-1):r.attr[c]=n.data[c]}t=s.CanisUtil.toDOM(r)}}for(var f={},l=[].concat(h(t.attributes)),d=0;d<l.length;d++){var v=l[d];f[v.name]=t.getAttribute(v.name)}var g=document.getElementById(e);f.bbWidth=g.getBBox().width,f.bbHeight=g.getBBox().height,f.bbX=g.getBBox().x,f.bbY=g.getBBox().y,f.content=t.textContent,f.id=e;var y=JSON.parse(t.getAttribute("data-datum"));if(Array.isArray(y)&&(y=y[0]),f["data-datum"]=y,f.tagName=t.tagName,("path"===t.tagName||"line"===t.tagName)&&(f["stroke-dasharray"]=document.getElementById(e).getTotalLength(),f["stroke-dashoffset"]=document.getElementById(e).getTotalLength(),"path"===t.tagName)){var m=s.CanisUtil.discretizeD(t.getAttribute("d"),"#000");void 0!==m&&m&&"pies"===m.type&&(f.cx=m.data.cx,f.cy=m.data.cy,f.startAngle=(m.data.clockwise?m.data.startAngle:m.data.endAngle)-1/(2*Math.PI),f.endAngle=(m.data.clockwise?m.data.endAngle:m.data.startAngle)+4*Math.PI+1/(2*Math.PI),m.data.radius.length>1?(f.innerRadius=m.data.radius[0].rx>m.data.radius[1].rx?m.data.radius[1].rx:m.data.radius[0].rx,f.outterRadius=m.data.radius[0].rx>m.data.radius[1].rx?m.data.radius[0].rx:m.data.radius[1].rx,f.outterRadius++):(f.innerRadius=0,f.outterRadius=m.data.radius[0].rx+1))}o.default.domMarks.set(e,f)}}}),console.timeEnd("extract mark dom")),f.calAniTime(p,l),l=f,document.body.removeChild(i)},v=0;case 25:if(!(v<this.animations.length)){t.next=32;break}if("object"!==d(g=p(v))){t.next=29;break}return t.abrupt("return",g.v);case 29:v++,t.next=25;break;case 32:case"end":return t.stop()}},t,this)}),m=function(){var t=this,e=arguments;return new Promise(function(r,n){var i=y.apply(t,e);function a(t){p(i,r,n,a,o,"next",t)}function o(t){p(i,r,n,a,o,"throw",t)}a(void 0)})},function(t){return m.apply(this,arguments)})},{key:"render",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;console.time("rendering"),o.default.renderAnimation(r),o.default.findKeyframes(),o.default.mapToLottieSpec();var n=u.globalVar.jsMovin.toJSON();return t.lottieJSON=n,console.timeEnd("rendering"),r&&(r.info="Done rendering."),e(),JSON.parse(n)}},{key:"constants",set:function(t){var e=this;this._constants.clear(),t.forEach(function(t){e._constants.set(t.name,t.value)}),console.log(this._constants)},get:function(){return this._constants}},{key:"animations",set:function(t){var e=t.map(function(t){return t.chartIdx=0,t}),r=0;if((r=this.facet?this.facet.views[0].frames.length:this.chartSpecs.length)>1)for(var n=function(r){var n=s.CanisUtil.deepClone(t);n[0].reference=a.default.timingRef.previousEnd;var i=n.map(function(t){return t.chartIdx=r,t});e.push.apply(e,h(i))},i=1;i<r-1;i++)n(i);this._animations=e},get:function(){return this._animations}}])&&g(e.prototype,r),l&&g(e,l),t}();y.lottieJSON="";var m=y;e.default=m,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=r(70),a=(n=r(105))&&n.__esModule?n:{default:n},o=r(54);function s(t){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c=function(){function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=e,this.type=r,this.source=n}var e,r,n;return e=t,n=[{key:"chartPreProcessing",value:function(t,e){for(var r=[],n=!1,i=0;i<t.length;i++){var a=t[i];if(void 0!==a.start&&void 0!==a.end){var o=parseInt(a.start),s=parseInt(a.end);if(s<o){n=!0,e.info={type:"error",msg:"Wrong start and end chart index.",errSpec:JSON.stringify(r).replace(/\s/g,"")};continue}for(var u=a.source.split("/"),c=void 0===a.id?u[u.length-1]:a.id,f=o;f<=s;f++)r.push({id:c+f,source:a.source+f+".dsvg"})}else r.push(a)}return[r,n]}},{key:"loadCharts",value:function(e,r,n){var i=new Map;t.charts=[];for(var a=[],o=0,u=0,c=!1,f=0;f<e.length;f++)if(e[f].type===t.CHART_URL){var l=new XMLHttpRequest,h="file:"===document.location.protocol?0:200,p=void 0;if(l.open("GET",e[f].source,!1),l.overrideMimeType("text/html;charset=utf-8"),l.send(null),l.status===h){var d=document.createElement("div");d.innerHTML=l.responseText;var v=(p=d.children[0]).getAttribute("viewBox").split(" ");o=parseFloat(v[2]),u=parseFloat(v[3]),t.charts.push(p),i.set(e[f].id,t.charts.length-1)}else 404===l.status&&(a.unshift(f),c=!0,console.log('"source":'+e[f].source),n.info={type:"error",msg:"Can not find "+e[f].source+" ! Please check the url.",errSpec:'"source":"'+e[f].source.replace(/\s/g,"")+'"'})}else console.log(e[f].source,s(e[f].source));for(var g=0;g<a.length;g++)e.slice(a[g],1);return void 0!==r?t.facetViews(i,r):this.viewport.setViewport(o,u),c}},{key:"removeTransAndMerge",value:function(){for(var e=0;e<t.charts.length;e++)t.charts[e].setAttribute("trans","0,0"),t.removeTransitions(t.charts[e].children[0]);this.svgChart=t.mergeCharts()}},{key:"facetViews",value:function(e,r){if(r.views.length>0){for(var n=[],i=0;i<r.views[0].frames.length;i++){for(var a=[],o=0;o<r.views.length;o++){var s=r.views[o].frames[i];void 0!==e.get(s)?a.push(t.charts[e.get(s)].cloneNode(!0)):console.log("chart name "+s+" is undefined !")}a.length===r.views.length&&n.push(a)}t.combineCharts(r.type,r.views.length,n)}}},{key:"combineCharts",value:function(e,r,n){for(var o=[],s=0,u=0,c=s,f=u,l=0;l<n.length;l++){var h=n[l];s=parseFloat(h[0].getAttribute("width")),u=parseFloat(h[0].getAttribute("height")),c=s,f=u;var p=h[0].getAttribute("viewBox").split(" "),d=parseFloat(p[2]),v=parseFloat(p[3]),g=i.CanisUtil.getTransformAttrs(h[0].children[0]);switch(h[0].children[0].setAttribute("transform","translate("+g.transNums[0]+","+g.transNums[1]+")"),e){case a.default.facetType.row:f*=h.length,h[0].setAttribute("height",u*h.length),h[0].setAttribute("viewBox","0 0 "+d+" "+u*h.length);break;case a.default.facetType.col:c*=h.length,h[0].setAttribute("width",s*h.length),h[0].setAttribute("viewBox","0 0 "+s*h.length+" "+v)}for(var y=function(t){var r=h[t],n=r.querySelectorAll(".mark");if([].forEach.call(n,function(e){var r=parseInt(e.getAttribute("id").substring(4));e.setAttribute("id","mark"+(r+1e5*t)),e.classList.add("facet"+t)}),t>0)for(var o=r.children[0].children,c=0;c<o.length;c++){var f=o[c],l=i.CanisUtil.getTransformAttrs(f);switch(e){case a.default.facetType.row:f.setAttribute("transform","translate("+l.transNums[0]+","+(l.transNums[1]+(u+20)*t)+") scale("+l.scaleNum+")");break;case a.default.facetType.col:f.setAttribute("transform","translate("+(l.transNums[0]+(s+20)*t)+","+l.transNums[1]+") scale("+l.scaleNum+")")}h[0].children[0].appendChild(f)}},m=0;m<h.length;m++)y(m);o.push(h[0])}t.charts=o,this.viewport.setViewport(c,f)}},{key:"mergeCharts",value:function(){for(var e=new Set,r=new Map,n=new Map,a=["x","y","cx","cy","x1","y1","x2","y2","d","r","width","height","textContent","fill","stroke","opacity"],o={},s=0;s<a.length;s++)o[a[s]]=null;for(var u=function(i){var s=t.charts[i].querySelectorAll(".mark");s.length>0&&[].forEach.call(s,function(s){var u=s.getAttribute("id");e.add(u);for(var c={},f=0;f<a.length;f++)c[a[f]]="textContent"===a[f]?s.innerHTML:s.getAttribute(a[f]);void 0===r.get(u)&&r.set(u,new Array(t.charts.length).fill(o)),r.get(u)[i]=c,n.set(u,s.outerHTML)})},c=0;c<t.charts.length;c++)u(c);t.changedAttrs=[];var f=i.CanisUtil.deepClone(a);r.forEach(function(e,r){for(var n=0;n<f.length;n++){for(var i=!0,a=void 0,o=0;o<e.length;o++)if(void 0!==e[o]){a=e[o];break}for(var s=0;s<e.length;s++)if(void 0!==e[s]&&e[s][f[n]]!==a[f[n]]){t.changedAttrs.push(f[n]),i=!1;break}i||f.splice(n,1)}});var l=new Map;for(t.changedAttrs.indexOf("d")>=0&&(l=i.CanisUtil.findDiffCmds(r)),e=Array.from(e),c=0;c<t.charts.length;c++)for(var h=0;h<e.length;h++)if(0===t.charts[c].querySelectorAll("#"+e[h]).length){var p=n.get(e[h]),d=document.createElement("div");d.innerHTML=p;for(var v=d.children[0],g={},y=0;y<t.changedAttrs.length;y++)if("y"===t.changedAttrs[y]&&t.changedAttrs.indexOf("height")>=0){var m=(v.getAttribute("y")?parseFloat(v.getAttribute("y")):0)+(v.getAttribute("height")?parseFloat(v.getAttribute("height")):0);v.setAttribute("y",m),g.y=m}else if("d"===t.changedAttrs[y]){var b=void 0;v.getAttribute("d")&&(b=i.CanisUtil.setPathDValue(v.getAttribute("d"),!0,0,0,l)),v.setAttribute("d",b),g.d=b}else"textContent"===t.changedAttrs[y]?(v.innerHTML="",g.textContent=""):"fill"===t.changedAttrs[y]||"stroke"===t.changedAttrs[y]?(void 0===v.getAttribute(t.changedAttrs[y])&&v.setAttribute(t.changedAttrs[y],"#FFFFFF"),g[t.changedAttrs[y]]=v.getAttribute(t.changedAttrs[y])):["x","y","cx","cy","x1","y1","x2","y2"].includes(t.changedAttrs[y])?"x2"===t.changedAttrs[y]?(v.setAttribute("x2",parseFloat(v.getAttribute("x1"))),g.x2=parseFloat(v.getAttribute("x1"))):"y2"===t.changedAttrs[y]?(v.setAttribute("y2",parseFloat(v.getAttribute("y1"))),g.y2=parseFloat(v.getAttribute("y1"))):g[t.changedAttrs[y]]=parseFloat(v.getAttribute(t.changedAttrs[y])):(v.setAttribute(t.changedAttrs[y],0),g[t.changedAttrs[y]]=0);p='<svg xmlns="http://www.w3.org/2000/svg" width="500" height="500">'+v.outerHTML+"</svg>";var k=(new DOMParser).parseFromString(p,"image/svg+xml").lastChild.children[0];t.charts[c].querySelector("#chartContent").appendChild(k),r.get(e[h])[c]=g}t.dataTrans=new Map;for(var w=0;w<e.length;w++){for(var x=r.get(e[w]),S=[],A=0;A<x.length;A++){for(var T={},M=0;M<t.changedAttrs.length;M++)["width","height","r"].includes(t.changedAttrs[M])?T[t.changedAttrs[M]]=100*x[A][t.changedAttrs[M]]/x[0][t.changedAttrs[M]]:T[t.changedAttrs[M]]=x[A][t.changedAttrs[M]];S.push(T)}t.dataTrans.set(e[w],S),t.charts[0].querySelector("#"+e[w]).setAttribute("data-transition",JSON.stringify({dataTrans:S},null,"\t"))}return t.charts[0]}},{key:"getBBoxes",value:function(){var t=document.getElementById("chartContainer").children[0].querySelectorAll('[id^="mark"]'),e=new Map;return t.length>0&&[].forEach.call(t,function(t){var r,n=t.getAttribute("id");"text"===t.tagName?(r=t.getBBox()).width+=10:r=t.getBBox(),e.set(n,r)}),e}},{key:"removeTransitions",value:function(e){var r=e.getAttribute("transform"),n=e.parentNode.getAttribute("trans").split(",");if(e.classList.contains("mark")){var a=JSON.parse(e.getAttribute("data-datum"));Array.isArray(a)&&(a=a[0]);var o=!1;Array.from(e.classList).forEach(function(t){((t=t.toLowerCase()).includes("axis")||t.includes("legend")||t.includes("title"))&&(o=!0)}),o?this.nonDataMarkDatum.set(e.getAttribute("id"),a):this.dataMarkDatum.set(e.getAttribute("id"),a)}if(e.classList.contains("axis")||e.classList.contains("legend")){var s=JSON.parse(e.getAttribute("data-datum"));if(Array.isArray(s)&&(function(){throw new Error('"tmpDataDatum" is read-only')}(),s=s[0]),e.classList.contains("axis"))this.chartUnderstanding[s.position]="position";else if(e.classList.contains("legend"))for(var u in s)this.chartUnderstanding[s[u]]=u}if(r){r=(r=r.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var c="",f="",l=0;l<r.length;l++)r[l].indexOf("translate")>=0?f=r[l]:r[l].indexOf("scale")>=0&&(c=r[l]);var h=f.replace(/translate\(| |\)/g,"").split(",");e.setAttribute("transform",c),"g"===e.tagName?e.setAttribute("trans",parseFloat(h[0])+parseFloat(n[0])+","+(parseFloat(h[1])+parseFloat(n[1]))):i.CanisUtil.transShape(e,parseFloat(h[0])+parseFloat(n[0]),parseFloat(h[1])+parseFloat(n[1]))}else"g"===e.tagName?e.setAttribute("trans",n.join(",")):i.CanisUtil.transShape(e,parseFloat(n[0]),parseFloat(n[1]));if(e.children.length>0)for(var p=0;p<e.children.length;p++)t.removeTransitions(e.children[p])}},{key:"addLottieMarkLayers",value:function(e){if("g"!==e.tagName&&"svg"!==e.tagName&&(e.classList.contains("mark")?o.globalVar.markLayers.set(e.getAttribute("id"),o.globalVar.jsMovin.addLayer(e)):o.globalVar.jsMovin.addLayer(e)),e.children.length>0)for(var r=0;r<e.children.length;r++)t.addLottieMarkLayers(e.children[r])}}],(r=null)&&u(e.prototype,r),n&&u(e,n),t}();c.CHART_URL="url",c.CHART_CONTENT="content",c.charts=[],c.attrs=["id","source","start","end"],c.changedAttrs=[],c.viewport=new i.Viewport,c.dataTrans=new Map,c.svgChart,c.chartUnderstanding={},c.dataMarkDatum=new Map,c.nonDataMarkDatum=new Map;var f=c;e.default=f,t.exports=e.default},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.EasingFactory=void 0;var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,i;return e=t,i=[{key:"linear",value:function(){return[[[1],[1]],[[0],[0]]]}},{key:"easeInSine",value:function(){return[[[.47],[0]],[[.745],[.715]]]}},{key:"easeOutSine",value:function(){return[[[.39],[.575]],[[.565],[1]]]}},{key:"easeInOutSine",value:function(){return[[[.445],[.05]],[[.55],[.95]]]}},{key:"easeInQuad",value:function(){return[[[.55],[.085]],[[.68],[.53]]]}},{key:"easeOutQuad",value:function(){return[[[.25],[.46]],[[.45],[.94]]]}},{key:"easeInOutQuad",value:function(){return[[[.455],[.03]],[[.515],[.955]]]}},{key:"easeInCubic",value:function(){return[[[.55],[.055]],[[.675],[.19]]]}},{key:"easeOutCubic",value:function(){return[[[.215],[.61]],[[.355],[1]]]}},{key:"easeInOutCubic",value:function(){return[[[.645],[.045]],[[.355],[1]]]}},{key:"easeInQuart",value:function(){return[[[.895],[.03]],[[.685],[.22]]]}},{key:"easeOutQuart",value:function(){return[[[.165],[.84]],[[.44],[1]]]}},{key:"easeInOutQuart",value:function(){return[[[.77],[0]],[[.175],[1]]]}},{key:"easeInQuint",value:function(){return[[[.755],[.05]],[[.855],[.06]]]}},{key:"easeOutQuint",value:function(){return[[[.23],[1]],[[.32],[1]]]}},{key:"easeInOutQuint",value:function(){return[[[.86],[0]],[[.07],[1]]]}},{key:"easeInExpo",value:function(){return[[[.95],[.05]],[[.795],[.035]]]}},{key:"easeOutExpo",value:function(){return[[[.19],[1]],[[.22],[1]]]}},{key:"easeInOutExpo",value:function(){return[[[1],[0]],[[0],[1]]]}},{key:"easeInCirc",value:function(){return[[[.6],[.04]],[[.98],[.335]]]}},{key:"easeOutCirc",value:function(){return[[[.075],[.82]],[[.165],[1]]]}},{key:"easeInOutCirc",value:function(){return[[[.785],[.135]],[[.15],[.86]]]}},{key:"easeInBack",value:function(){return[[[.6],[-.28]],[[.735],[.045]]]}},{key:"easeOutBack",value:function(){return[[[.175],[.885]],[[.32],[1.275]]]}},{key:"easeInOutBack",value:function(){return[[[.68],[-.55]],[[.265],[1.55]]]}}],(r=null)&&n(e.prototype,r),i&&n(e,i),t}();e.EasingFactory=i},function(t,e,r){var n=r(147).parse;n.parseSVG=n,n.makeAbsolute=function(t){var e,r={x:0,y:0},n={x:"x0",y:"y0",x1:"x0",y1:"y0",x2:"x0",y2:"y0"};return t.forEach(function(t){for(var i in"moveto"===t.command&&(e=t),t.x0=r.x,t.y0=r.y,n)i in t&&(t[i]+=t.relative?t[n[i]]:0);"x"in t||(t.x=r.x),"y"in t||(t.y=r.y),t.relative=!1,t.code=t.code.toUpperCase(),"closepath"==t.command&&(t.x=e.x,t.y=e.y),r=t}),t},t.exports=n},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._type,this._views,this.views=r,this.type=e}var e,r,i;return e=t,(r=[{key:"type",set:function(e){void 0!==e&&(Object.keys(t.facetType).includes(e)?this._type=e:(console.log('the facet type has to be one of "row" or "column", setting to default value "column".'),this._type=t.facetType.col))},get:function(){return this._type}},{key:"views",set:function(t){if(void 0!==t){for(var e=t.map(function(t){if(void 0!==t.range){var e=new RegExp("\\d+$"),r=t.range[0].replace(e,""),n=t.range[1].replace(e,""),i=t.range[0].match(e),a=t.range[1].match(e);if(r===n){t.frames=[];for(var o=i;o<=a;o++)t.frames.push(r+o)}else t.frames=[t.range[0],t.range[1]],console.log("range start and end mismatch")}return t}),r=0,n=0;n<e.length;n++)e[n].frames.length>r&&(r=e[n].frames.length);for(var i=0;i<e.length;i++)if(e[i].frames.length<r)for(var a=e[i].frames[e[i].frames.length-1],o=r-e[i].frames.length;o>0;)e[i].frames.push(a),o--;this._views=e}},get:function(){return this._views}}])&&n(e.prototype,r),i&&n(e,i),t}();i.facetType={row:"row",col:"column"};var a=i;e.default=a,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=(n=r(47))&&n.__esModule?n:{default:n},a=(r(54),r(53));function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var f=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=u(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))).chartIdx=0,t._type=e.actionTypes.appear,t.animationType="",t._easing=e.easingType.easeLinear,t._duration=0,t.startTime,t.attribute=[],t}var r,n,f;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,i.default),r=e,f=[{key:"transToVisualAttrAction",value:function(t,r,n,o){for(var s=[],u=function(a){var u=n[a],c=[],f=[];o.forEach(function(t,e){if(r+1<t.length)if("d"===u||"textContent"===u||"fill"===u||"stroke"===u){var n=[e,t[r][u]?t[r][u]:"d"===u?"m0,0":t[r][u]],i=[e,t[r+1][u]?t[r+1][u]:"d"===u?"m0,0":t[r+1][u]];if("d"===u){var a=document.createElementNS("http://www.w3.org/2000/svg","path"),o=document.createElementNS("http://www.w3.org/2000/svg","path");a.setAttributeNS(null,"d",t[r][u]?t[r][u]:"m0,0"),o.setAttributeNS(null,"d",t[r+1][u]?t[r+1][u]:"m0,0");for(var s=a.getTotalLength()/300,l=o.getTotalLength()/300,h=[],p=[],d=0;d<300;d++){var v=a.getPointAtLength(s*d),g=o.getPointAtLength(l*d);h.push([v.x,v.y]),p.push([g.x,g.y])}n.push(h),i.push(p)}c.push(n),f.push(i)}else c.push([e,parseFloat(t[r][u])]),f.push([e,parseFloat(t[r+1][u])])});var l={chartIdx:t.chartIdx,reference:i.default.timingRef.previousStart,offset:0,duration:t.type===e.actionTypes.transition?t.duration:0,type:e.actionTargets.mark,animationType:e.targetAnimationType.custom,attribute:[{attrName:u,from:c,to:f}]};s.push(l)},c=0;c<n.length;c++)u(c);if(t.type!==e.actionTypes.transition){var f={chartIdx:t.chartIdx,reference:t.reference,offset:t.offset,easing:t.easing,duration:void 0===t.duration?i.default.FRAME_RATE:t.duration,type:e.actionTargets.mask};switch(t.type){case e.actionTypes.appear:f.duration=1e3/i.default.FRAME_RATE,f.animationType=e.targetAnimationType.fade,f.type=e.actionTargets.mark,f.attribute=[{attrName:"opacity",from:0,to:1}];break;case e.actionTypes.disappear:f.duration=1e3/i.default.FRAME_RATE,f.animationType=e.targetAnimationType.fade,f.type=e.actionTargets.mark,f.attribute=[{attrName:"opacity",from:1,to:0}];break;case e.actionTypes.fade:f.animationType=e.targetAnimationType.fade,f.type=e.actionTargets.mark,f.attribute=[{attrName:"opacity",from:0,to:1}];break;case e.actionTypes.fadeOut:f.animationType=e.targetAnimationType.fade,f.type=e.actionTargets.mark,f.attribute=[{attrName:"opacity",from:1,to:0}];break;case e.actionTypes.grow:f.type=e.actionTargets.mark,f.animationType=e.targetAnimationType.grow,f.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case e.actionTypes.degrow:f.type=e.actionTargets.mark,f.animationType=e.targetAnimationType.grow,f.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case e.actionTypes.wipeBottom:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"scaleY",from:1,to:0}];break;case e.actionTypes.wipeOutFromTop:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"scaleY",from:0,to:1}];break;case e.actionTypes.wipeTop:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleY",from:0,to:1}];break;case e.actionTypes.wipeOutFromBottom:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleY",from:1,to:0}];break;case e.actionTypes.wipeLeft:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleX",from:0,to:1}];break;case e.actionTypes.wipeOutFromRight:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleX",from:1,to:0}];break;case e.actionTypes.wipeRight:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"scaleX",from:1,to:0}];break;case e.actionTypes.wipeOutFromLeft:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"scaleX",from:0,to:1}];break;case e.actionTypes.circle:f.animationType=e.targetAnimationType.circle,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleX",from:0,to:1},{attrName:"scaleY",from:0,to:1}];break;case e.actionTypes.circleOut:f.animationType=e.targetAnimationType.circle,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleX",from:1,to:0},{attrName:"scaleY",from:1,to:0}];break;case e.actionTypes.wheel:f.animationType=e.targetAnimationType.wheel,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case e.actionTypes.wheelOut:f.animationType=e.targetAnimationType.wheel,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"trimEnd",from:0,to:1}]}s.push(f)}return s}},{key:"calActionDuration",value:function(t,r,n){for(var i=0,a=-1e5,s=0,u=0,c=!1,f=function(r){var f=void 0,l=new Map;f=t[r].calOffsetTime(s,u,0,n),r>0&&t[r-1].animationType===e.targetAnimationType.mistake&&f.forEach(function(e,n){f.set(n,e-t[r-1].offset)});var h=1e6,p=-1e5;t[r].offsetStart=new Map,f.forEach(function(e,n){var s=0;"object"===o(t[r].duration)?(c=!0,s=e):"number"==typeof t[r].duration&&(s=e+t[r].duration),l.set(n,s),t[r].offsetStart.set(n,e),e<h&&(h=e),s>p&&(p=s),e<i&&(i=e),s>a&&(a=s)}),s=h,u=p},l=0;l<t.length;l++)f(l);var h=a-i,p=new Map,d=new Map;return c?(r.forEach(function(t,e){t.forEach(function(t,e){(void 0===d.get(e)||t[0]<d.get(e))&&d.set(e,t[0])})}),r.forEach(function(t,e){var r=0;t.forEach(function(t,e){var n=d.get(e);r+=t[1]*t[0]/n}),p.set(e,h+r)})):r.forEach(function(t,e){p.set(e,h)}),[p,d,t]}},{key:"transToLottieAction",value:function(t){switch(t){case e.easingType.easeLinear:return a.EasingFactory.linear();case e.easingType.easeInQuad:return a.EasingFactory.easeInQuad();case e.easingType.easeOutQuad:return a.EasingFactory.easeOutQuad();case e.easingType.easeInOutQuad:return a.EasingFactory.easeInOutQuad();case e.easingType.easeInCubic:return a.EasingFactory.easeInCubic();case e.easingType.easeOutCubic:return a.EasingFactory.easeOutCubic();case e.easingType.easeInOutCubic:return a.EasingFactory.easeInOutCubic()}}}],(n=[{key:"initAction",value:function(t){var e=this;this.chartIdx=t.chartIdx,this.type=t.type,this.animationType=t.animationType,this.maskType=void 0===t.maskType?a.MaskType.Alpha:t.maskType,this.reference=t.reference,this.offset=t.offset,this.duration=t.duration,this.easing=t.easing,void 0!==t.attribute&&t.attribute.forEach(function(t){var r={attrName:t.attrName,from:t.from,to:t.to};e.attribute.push(r)})}},{key:"replaceDurationConst",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;"string"==typeof this.duration?void 0===t.get(this.duration)?e.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:"number"==typeof t.get(this.duration)?this.duration=t.get(this.duration):e.info={type:"error",msg:"Duration must be a number or a numeric type constant.",errSpec:'"duration":"'+this.duration.replace(/\s/g,"")+'"'}:this.duration&&"object"===o(this.duration)&&"string"==typeof this.duration.minDuration&&(void 0===t.get(this.duration.minDuration)?e.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'}:"number"==typeof t.get(this.duration.minDuration)?this.duration.minDuration=t.get(this.duration.minDuration):e.info={type:"error",msg:"MinDuration must be a number or a numeric type constant.",errSpec:'"minDuration":"'+this.duration.minDuration.replace(/\s/g,"")+'"'})}},{key:"type",set:function(t){void 0!==t&&(Object.keys(e.actionTypes).includes(t)?this._type=t:alert("the 'type' of action is not defined. "))},get:function(){return this._type}},{key:"easing",set:function(t){void 0!==t&&(Object.keys(e.easingType).includes(t)?this._easing=t:alert("the 'easing' of action is not defined. "))},get:function(){return this._easing}},{key:"duration",set:function(t){void 0!==t&&(this._duration="number"==typeof t?Math.floor(t/(1e3/i.default.FRAME_RATE))*(1e3/i.default.FRAME_RATE):t)},get:function(){return this._duration}}])&&s(r.prototype,n),f&&s(r,f),e}();f.attrs=["type","offset","reference","easing","duration"],f.actionTypes={fade:"fade",wipeBottom:"wipe bottom",wipeTop:"wipe top",wipeLeft:"wipe left",wipeRight:"wipe right",wheel:"wheel",appear:"appear",disappear:"disappear",circle:"circle",grow:"grow",custom:"custom",fadeOut:"fade out",wipeOutFromLeft:"wipe out from left",wipeOutFromTop:"wipe out from top",wipeOutFromRight:"wipe out from right",wipeOutFromBottom:"wipe out from bottom",wheelOut:"wheel out",circleOut:"circle out",degrow:"degrow",transition:"magic move",zoom:"zoom",mark:"mask",mask:"mark"},f.actionTargets={mark:"mark",mask:"mask"},f.targetAnimationType={fade:"fade",wipe:"wipe",move:"move",wheel:"wheel",circle:"circle",appear:"appear",grow:"grow",custom:"custom",mistake:"mistake"},f.easingType={easeLinear:"easeLinear",easeInQuad:"easeInQuad",easeOutQuad:"easeOutQuad",easeInOutQuad:"easeInOutQuad",easeInCubic:"easeInCubic",easeOutCubic:"easeOutCubic",easeInOutCubic:"easeInOutCubic",easeOutBounce:"easeOutBounce"};var l=f;e.default=l,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=(n=r(47))&&n.__esModule?n:{default:n};function a(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var f=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=u(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)))._groupBy="id",t._reference=i.default.timingRef.previousStart,t._delay=0,t.definedById=!1,t.sort={},t.grouping,t}var r,n,f;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,i.default),r=e,(n=[{key:"replaceDelayConst",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;"string"==typeof this.delay&&(void 0===t.get(this.delay)?e.info={type:"error",msg:"Wrong reference of the constant variables.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}:"number"==typeof t.get(this.delay)?this.delay=t.get(this.delay):e.info={type:"error",msg:"Delay must be a number or a numeric type constant.",errSpec:'"delay":"'+this.delay.replace(/\s/g,"")+'"'}),void 0!==this.grouping&&this.grouping.replaceDelayConst(t,e)}},{key:"initGrouping",value:function(t){console.log("grouping json: ",t,this,this.grouping),this.groupBy=t.groupBy,"id"===t.groupBy&&(this.definedById=!0),this.reference=t.reference,this.delay=t.delay,void 0!==t.sort&&(this.sort.field=t.sort.field,this.sort.order=t.sort.order,this.sort.expr=t.sort.expr),void 0!==t.grouping?(this.grouping=new e,this.grouping.initGrouping(t.grouping)):void 0===t.grouping&&"id"!==t.groupBy&&(this.grouping=new e,this.grouping.groupBy="id",this.grouping.definedById=!1)}},{key:"arrangeOrder",value:function(t,r,n){return e.frames.clear(),e.framesMark.clear(),0===Object.keys(n).length?(n.groupRef="root",n.id=e.nodeId,e.frames.set(e.nodeId,!0),e.nodeId++,n.children=[],n.marks=t,n.timingRef=i.default.timingRef.previousStart,n.delay=0,this.generateTree(n,r)):this.updateTree(n,r),console.log("generated tree: ",n),this.getMarkOrder(n)}},{key:"updateTree",value:function(t,e){if(void 0!==t){var r=this.groupBy,n=this.reference,i=this.delay;if(void 0!==this.grouping){var a=!1;if(void 0!==t.children[0]&&(a=t.children[0].groupRef===r),console.log("whether this is same grouping: ",a),a){for(var o,s=new Map,u=0;u<t.children.length|(o=t.children[u]);u++)this.grouping.updateTree(o,e),s.set(o.refValue,o),o.timingRef=n,o.delay=i;this.sortNodes(this.sort,t,s,e)}else t.children=[],this.generateTree(t,e)}else void 0===this.grouping&&t.children.length>0&&(t.children=[])}}},{key:"generateTree",value:function(t,r){for(var n,i=this.groupBy,a=this.reference,o=this.delay,s=new Map,u=0;u<t.marks.length|(n=t.marks[u]);u++){var c=r.get(n)["data-datum"],f=void 0;if(void 0!==r.get(n)[i])f=r.get(n)[i];else{if(void 0!==r.get(n)[i]||void 0===c[i])return void console.log("error: grouping by an unknown attribute");f=c[i]}if(void 0!==s.get(f))s.get(f).marks.push(n);else{var l={};l.id=e.nodeId,e.nodeId++,l.groupRef=i,"id"===l.groupRef&&(l.definedById=this.definedById),l.refValue=f,l.timingRef=a,l.delay=o,l.children=[],l.marks=[n],s.set(f,l)}}if(this.sortNodes(this.sort,t,s,r),console.log("nodes this level: ",s),void 0!==this.grouping)for(var h,p=0;p<t.children.length|(h=t.children[p]);p++)this.grouping.generateTree(h,r)}},{key:"sortNodes",value:function(t,r,n,i){var s=this;switch(r.children=[],o(t.order)){case"object":for(var u,c=0,f=0;f<t.order.length|(u=t.order[f]);f++)void 0!==n.get(u)&&(r.children.push(n.get(u)),s.appendFrame(r.id,n.get(u).id,c,n.size),c++);break;case"string":var l=!0;if(n.forEach(function(t,e){t.marks.length>1&&(l=!1)}),void 0!==t.field&&l){var h=t.field,p=[].concat(a(n)),d=t.order;p.sort(function(t,r){var n=t[1].marks[0],a=r[1].marks[0],o="",s="",u=i.get(n)["data-datum"],c=i.get(a)["data-datum"];return void 0!==i.get(n)[h]&&"undefined"!==i.get(a)[h]?(o=i.get(n)[h],s=i.get(a)[h]):void 0===i.get(n)[h]&&void 0!==u[h]&&void 0===i.get(a)[h]&&void 0!==c[h]&&(o=u[h],s=c[h]),isNaN(parseFloat(o))||(o=parseFloat(o)),isNaN(parseFloat(s))||(s=parseFloat(s)),d===e.orderTypes.ascending?o>=s?1:-1:d===e.orderTypes.descending?s>=o?1:-1:d===e.orderTypes.random?Math.random()>=.5?1:-1:void 0});for(var v,g=0;g<p.length|(v=p[g]);g++)s.appendFrame(r.id,v.id,g,p.length),r.children.push(v[1])}else{var y=[].concat(a(n));t.order===e.orderTypes.ascending?y.sort(function(t,e){return t[0]>=e[0]?1:-1}):t.order===e.orderTypes.descending?y.sort(function(t,e){return e[0]>=t[0]?1:-1}):t.order===e.orderTypes.random&&y.sort(function(t,e){return Math.random()>=.5?1:-1});for(var m,b=0;b<y.length|(m=y[b]);b++)s.appendFrame(r.id,m.id,b,y.length),r.children.push(m[1])}break;default:var k=0;n.forEach(function(t,e){r.children.push(t),s.appendFrame(r.id,t.id,k,n.size),k++})}}},{key:"appendFrame",value:function(t,r,n,i){!e.frames.get(t)||0!==n&&n!==i-1?e.frames.set(r,!1):e.frames.set(r,!0)}},{key:"getMarkOrder",value:function(t){var e=[];if(null!=t){var r=[];for(r.unshift(t);0!=r.length;){var n=r.shift(),i=n.children;if(i.length<=0)e=[].concat(a(e),a(n.marks));else for(var o=0;o<i.length;o++)r.push(i[o])}}return e}},{key:"calTimeWithTree",value:function(t,r,n,a){if(t.children.length>0)for(var o=0;o<t.children.length;o++)o>0?this.calTimeWithTree(t.children[o],t.children[o-1].start,t.children[o-1].end,a):this.calTimeWithTree(t.children[o],-1,-1,a);switch(t.timingRef){case i.default.timingRef.previousStart:t.start=r+t.delay;break;case i.default.timingRef.previousEnd:t.start=n+t.delay;break;case i.default.timingRef.absolute:t.start=t.delay;break;default:t.start=r+t.delay}-1===r&&(t.start=0),t.end=0;for(var s=0;s<t.marks.length;s++)a.get(t.marks[s]).startTime+=t.start,a.get(t.marks[s]).startTime+a.get(t.marks[s]).totalDuration>t.end&&(t.end=a.get(t.marks[s]).startTime+a.get(t.marks[s]).totalDuration,console.log("t end: ",t.end));if(1===t.marks.length){var u=t.marks[0];e.frames.get(t.id)?e.framesMark.set(u,!0):void 0===e.framesMark.get(u)&&e.framesMark.set(u,!1)}}},{key:"groupBy",set:function(t){void 0!==t&&(this._groupBy=t)},get:function(){return this._groupBy}},{key:"reference",set:function(t){if(void 0!==t){var e=i.default.transRef(t);Object.keys(i.default.timingRef).includes(e)?this._reference=t:alert("the 'reference' of TimingSpec has to be one of 'previousStart', 'previousEnd' or 'absolute'. ")}},get:function(){return this._reference}},{key:"delay",set:function(t){void 0!==t&&(t>=1e3/i.default.FRAME_RATE||0===t?this._delay=t:this._delay=1e3/i.default.FRAME_RATE)},get:function(){return this._delay}}])&&s(r.prototype,n),f&&s(r,f),e}();f.attrs=["groupBy","reference","delay","sort","grouping"],f.sortAttrs=["order","field"],f.orderTypes={ascending:"ascending",descending:"descending",random:"random"},f.nodeId=0,f.frames=new Map,f.framesMark=new Map;var l=f;e.default=l,t.exports=e.default},function(t,e,r){t.exports=!r(7)&&!r(3)(function(){return 7!=Object.defineProperty(r(74)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){e.f=r(5)},function(t,e,r){var n=r(14),i=r(15),a=r(55)(!1),o=r(76)("IE_PROTO");t.exports=function(t,e){var r,s=i(t),u=0,c=[];for(r in s)r!=o&&n(s,r)&&c.push(r);for(;e.length>u;)n(s,r=e[u++])&&(~a(c,r)||c.push(r));return c}},function(t,e,r){var n=r(8),i=r(1),a=r(34);t.exports=r(7)?Object.defineProperties:function(t,e){i(t);for(var r,o=a(e),s=o.length,u=0;s>u;)n.f(t,r=o[u++],e[r]);return t}},function(t,e,r){var n=r(15),i=r(37).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},function(t,e,r){"use strict";var n=r(7),i=r(34),a=r(56),o=r(50),s=r(9),u=r(49),c=Object.assign;t.exports=!c||r(3)(function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach(function(t){e[t]=t}),7!=c({},t)[r]||Object.keys(c({},e)).join("")!=n})?function(t,e){for(var r=s(t),c=arguments.length,f=1,l=a.f,h=o.f;c>f;)for(var p,d=u(arguments[f++]),v=l?i(d).concat(l(d)):i(d),g=v.length,y=0;g>y;)p=v[y++],n&&!h.call(d,p)||(r[p]=d[p]);return r}:c},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,r){"use strict";var n=r(10),i=r(4),a=r(116),o=[].slice,s={},u=function(t,e,r){if(!(e in s)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";s[e]=Function("F,a","return new F("+n.join(",")+")")}return s[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=o.call(arguments,1),s=function(){var n=r.concat(o.call(arguments));return this instanceof s?u(e,n.length,n):a(e,n,t)};return i(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e){t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},function(t,e,r){var n=r(2).parseInt,i=r(45).trim,a=r(80),o=/^[-+]?0[xX]/;t.exports=8!==n(a+"08")||22!==n(a+"0x16")?function(t,e){var r=i(String(t),3);return n(r,e>>>0||(o.test(r)?16:10))}:n},function(t,e,r){var n=r(2).parseFloat,i=r(45).trim;t.exports=1/n(r(80)+"-0")!=-1/0?function(t){var e=i(String(t),3),r=n(e);return 0===r&&"-"==e.charAt(0)?-0:r}:n},function(t,e,r){var n=r(20);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},function(t,e,r){var n=r(4),i=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&i(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,r){var n=r(83),i=Math.pow,a=i(2,-52),o=i(2,-23),s=i(2,127)*(2-o),u=i(2,-126);t.exports=Math.fround||function(t){var e,r,i=Math.abs(t),c=n(t);return i<u?c*(i/u/o+1/a-1/a)*u*o:(r=(e=(1+o/a)*i)-(e-i))>s||r!=r?c*(1/0):c*r}},function(t,e,r){var n=r(1);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var a=t.return;throw void 0!==a&&n(a.call(t)),e}}},function(t,e,r){var n=r(10),i=r(9),a=r(49),o=r(6);t.exports=function(t,e,r,s,u){n(e);var c=i(t),f=a(c),l=o(c.length),h=u?l-1:0,p=u?-1:1;if(r<2)for(;;){if(h in f){s=f[h],h+=p;break}if(h+=p,u?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;u?h>=0:l>h;h+=p)h in f&&(s=e(s,f[h],h,c));return s}},function(t,e,r){"use strict";var n=r(9),i=r(35),a=r(6);t.exports=[].copyWithin||function(t,e){var r=n(this),o=a(r.length),s=i(t,o),u=i(e,o),c=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===c?o:i(c,o))-u,o-s),l=1;for(u<s&&s<u+f&&(l=-1,u+=f-1,s+=f-1);f-- >0;)u in r?r[s]=r[u]:delete r[s],s+=l,u+=l;return r}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){"use strict";var n=r(95);r(0)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},function(t,e,r){r(7)&&"g"!=/./g.flags&&r(8).f(RegExp.prototype,"flags",{configurable:!0,get:r(51)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,r){var n=r(1),i=r(4),a=r(99);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";var n=r(132),i=r(42);t.exports=r(64)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=n.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return n.def(i(this,"Map"),0===t?0:t,e)}},n,!0)},function(t,e,r){"use strict";var n=r(8).f,i=r(36),a=r(41),o=r(19),s=r(39),u=r(40),c=r(85),f=r(126),l=r(38),h=r(7),p=r(30).fastKey,d=r(42),v=h?"_s":"size",g=function(t,e){var r,n=p(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,c){var f=t(function(t,n){s(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=n&&u(n,r,t[c],t)});return a(f.prototype,{clear:function(){for(var t=d(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var r=d(this,e),n=g(r,t);if(n){var i=n.n,a=n.p;delete r._i[n.i],n.r=!0,a&&(a.n=i),i&&(i.p=a),r._f==n&&(r._f=i),r._l==n&&(r._l=a),r[v]--}return!!n},forEach:function(t){d(this,e);for(var r,n=o(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(d(this,e),t)}}),h&&n(f.prototype,"size",{get:function(){return d(this,e)[v]}}),f},def:function(t,e,r){var n,i,a=g(t,e);return a?a.v=r:(t._l=a={i:i=p(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=a),n&&(n.n=a),t[v]++,"F"!==i&&(t._i[i]=a)),t},getEntry:g,setStrong:function(t,e,r){c(t,e,function(t,r){this._t=d(t,e),this._k=r,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))},r?"entries":"values",!r,!0),l(e)}}},function(t,e,r){"use strict";var n=r(132),i=r(42);t.exports=r(64)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(i(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,r){"use strict";var n,i=r(2),a=r(26)(0),o=r(12),s=r(30),u=r(113),c=r(135),f=r(4),l=r(42),h=r(42),p=!i.ActiveXObject&&"ActiveXObject"in i,d=s.getWeak,v=Object.isExtensible,g=c.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var e=d(t);return!0===e?g(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(l(this,"WeakMap"),t,e)}},b=t.exports=r(64)("WeakMap",y,m,c,!0,!0);h&&p&&(u((n=c.getConstructor(y,"WeakMap")).prototype,m),s.NEED=!0,a(["delete","has","get","set"],function(t){var e=b.prototype,r=e[t];o(e,t,function(e,i){if(f(e)&&!v(e)){this._f||(this._f=new n);var a=this._f[t](e,i);return"set"==t?this:a}return r.call(this,e,i)})}))},function(t,e,r){"use strict";var n=r(41),i=r(30).getWeak,a=r(1),o=r(4),s=r(39),u=r(40),c=r(26),f=r(14),l=r(42),h=c(5),p=c(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return h(t.a,function(t){return t[0]===e})};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var r=y(this,t);r?r[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,a){var c=t(function(t,n){s(t,c,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=n&&u(n,r,t[a],t)});return n(c.prototype,{delete:function(t){if(!o(t))return!1;var r=i(t);return!0===r?v(l(this,e)).delete(t):r&&f(r,this._i)&&delete r[this._i]},has:function(t){if(!o(t))return!1;var r=i(t);return!0===r?v(l(this,e)).has(t):r&&f(r,this._i)}}),c},def:function(t,e,r){var n=i(a(e),!0);return!0===n?v(t).set(e,r):n[t._i]=r,t},ufstore:v}},function(t,e,r){var n=r(21),i=r(6);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=i(e);if(e!==r)throw RangeError("Wrong length!");return r}},function(t,e,r){var n=r(37),i=r(56),a=r(1),o=r(2).Reflect;t.exports=o&&o.ownKeys||function(t){var e=n.f(a(t)),r=i.f;return r?e.concat(r(t)):e}},function(t,e,r){"use strict";var n=r(57),i=r(4),a=r(6),o=r(19),s=r(5)("isConcatSpreadable");t.exports=function t(e,r,u,c,f,l,h,p){for(var d,v,g=f,y=0,m=!!h&&o(h,p,3);y<c;){if(y in u){if(d=m?m(u[y],y,r):u[y],v=!1,i(d)&&(v=void 0!==(v=d[s])?!!v:n(d)),v&&l>0)g=t(e,r,d,a(d.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=d}g++}y++}return g}},function(t,e,r){var n=r(6),i=r(82),a=r(24);t.exports=function(t,e,r,o){var s=String(a(t)),u=s.length,c=void 0===r?" ":String(r),f=n(e);if(f<=u||""==c)return s;var l=f-u,h=i.call(c,Math.ceil(l/c.length));return h.length>l&&(h=h.slice(0,l)),o?h+s:s+h}},function(t,e,r){var n=r(7),i=r(34),a=r(15),o=r(50).f;t.exports=function(t){return function(e){for(var r,s=a(e),u=i(s),c=u.length,f=0,l=[];c>f;)r=u[f++],n&&!o.call(s,r)||l.push(t?[r,s[r]]:s[r]);return l}}},function(t,e,r){var n=r(44),i=r(142);t.exports=function(t){return function(){if(n(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,e,r){var n=r(40);t.exports=function(t,e){var r=[];return n(t,!1,r.push,r,e),r}},function(t,e){t.exports=Math.scale||function(t,e,r,n,i){return 0===arguments.length||t!=t||e!=e||r!=r||n!=n||i!=i?NaN:t===1/0||t===-1/0?t:(t-e)*(i-n)/(r-e)+n}},function(t,e,r){"use strict";r.r(e);var n=r(47),i=r.n(n),a=r(69),o=r.n(a),s=r(101),u=r.n(s);window.canis={canisObj:{},frameRate:i.a.FRAME_RATE,duration:()=>o.a.wholeEndTime,renderSpec:(t,e,r)=>(e.info={type:"clear",msg:"rendering..."},0===Object.keys(canis.canisObj).length&&(canis.canisObj=new u.a),canis.canisObj.init(t,e).then(()=>{if(!canis.canisObj.hasError)return canis.canisObj.render(r,e)})),reset:function(){o.a.resetAll()},exportJSON:function(){return u.a.lottieJSON},test:function(t){console.log("this is a test! ",t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LayerFactory=e.JSMovinLayer=void 0;var n,i=r(103),a=r(146),o=r(73),s=(n=r(72))&&n.__esModule?n:{default:n},u=r(71);function c(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function d(t,e,r){return e&&p(t.prototype,e),r&&p(t,r),t}function v(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var g=function(){function t(e){h(this,t),v(this,"root",void 0),v(this,"anchor",void 0),v(this,"position",void 0),v(this,"timeRange",{}),this.root=e,this.anchor=[0,0,0],this.position=[0,0,0]}return d(t,[{key:"getDefaultProperty",value:function(t){switch(t){case"a":case"p":return JSON.parse(JSON.stringify("a"==t?this.anchor:this.position));case"s":return[100,100,100];case"o":return 100;case"r":return 0;case"tm":return{s:{k:0},e:{k:100},o:{k:0}};default:return 0}}},{key:"convertToStaticProperty",value:function(t,e){if(t[e]||(t[e]={a:0,k:this.getDefaultProperty(e)}),1==t[e].a){var r=t[e].k[0].s;t[e]={a:0,k:r}}}},{key:"convertToAnimatableProperty",value:function(t,e){t[e]&&t[e].a||("a"==e&&(this.anchor=t[e]?t[e].k:[0,0,0]),"p"==e&&(this.position=t[e]?t[e].k:[0,0,0]),t[e]={a:1,k:[]})}},{key:"addKeyframe",value:function(t,e){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,i=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,s=!(arguments.length>6&&void 0!==arguments[6])||arguments[6],u=t[e].k.filter(function(t){return t.t==i});if(u.length)r=u[0];else{r={t:i,s:this.getDefaultProperty(e)};var c=t[e].k.reduce(function(t,e){return e.t<i?t+1:t},0);t[e].k.splice(c,0,r)}o&&(r.o={x:o[0][0],y:o[0][1]},r.i={x:o[1][0],y:o[1][1]}),n>=0?r.s[n]=a:r.s=!s||a instanceof Array?a:[a]}},{key:"findPropertyConfig",value:function(t){return this.root.shapes[0].it.find(function(e){return e.ty==t})}},{key:"findOrInsertPropertyConfig",value:function(t){var e=this.findPropertyConfig(t);if(e)return e;var r=this.findPropertyConfig("tr"),n=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach(function(e){v(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}({ty:t},this.getDefaultProperty(t));if(r){var i=this.root.shapes[0].it;i.splice(i.length-1,0,n)}else this.root.shapes[0].it.push(n);return n}},{key:"commonPropertyMapping",value:function(t){var e,r,n;switch(t){case"scaleX":e=this.root.ks,r="s",n=0;break;case"scaleY":e=this.root.ks,r="s",n=1;break;case"anchorX":e=this.root.ks,r="a",n=0;break;case"anchorY":e=this.root.ks,r="a",n=1;break;case"x":e=this.root.ks,r="p",n=0;break;case"y":e=this.root.ks,r="p",n=1;break;case"rotate":e=this.root.ks,r="r",n=-1;break;case"opacity":e=this.root.ks,r="o",n=-1;break;case"trimStart":e=this.findOrInsertPropertyConfig("tm"),r="s",n=-1;break;case"trimEnd":e=this.findOrInsertPropertyConfig("tm"),r="e",n=-1;break;case"trimOffset":e=this.findOrInsertPropertyConfig("tm"),r="o",n=-1;break;case"fillColor":e=this.findPropertyConfig("fl"),r="c",n=-1;break;case"strokeColor":e=this.findPropertyConfig("st"),r="c",n=-1;break;case"strokeWidth":e=this.findPropertyConfig("st"),r="w",n=-1;break;case"shape":e=this.findPropertyConfig("sh"),r="ks",n=-1;break;case"fillOpacity":e=this.findPropertyConfig("fl"),r="o",n=-1;break;case"strokeOpacity":e=this.findPropertyConfig("st"),r="o",n=-1}return[e,r,n]}},{key:"updateTimeRange",value:function(){this.root.op=Math.max.apply(Math,f(Object.values(this.timeRange)).concat([1]))}}]),d(t,[{key:"setStaticProperty",value:function(t,e){var r,n,i;this.timeRange[t]=1,this.updateTimeRange(),e instanceof u.PathMaker&&(e.uniform(),e=e.path);var a=c(this.commonPropertyMapping(t),3);if(r=a[0],n=a[1],i=a[2],!n||void 0===i)switch(t){case"text":if(5==this.root.ty){var o=this.root.t.d;o.k=[o.k[0]],o.k[0].t=0,o.k[0].s.t=e}break;default:throw console.error(t,e),new Error("Not a valid key.")}r&&n&&void 0!==i&&(this.convertToStaticProperty(r,n),i>=0?r[n].k[i]=e:r[n].k=e)}},{key:"setAnimatableProperty",value:function(t,e,r,n,a,s){if(r<=e)throw new Error("End frame should be larger than start frame.");if(this.timeRange[t]=Math.max(this.timeRange[t]||0,r+1),this.updateTimeRange(),s||(s=i.EasingFactory.linear()),n instanceof u.PathMaker||a instanceof u.PathMaker){if([n,a].forEach(function(t){return t instanceof u.PathMaker&&t.uniform()}),n instanceof u.PathMaker&&a instanceof u.PathMaker){var f=n.path.v.length-1,l=a.path.v.length-1;if(!(f<=0&&l<=0))if(Math.min(f,l)<=0&&Math.max(f,l)>0){var h=f<=0?n:a,p=Math.max(f,l);["i","o","v"].forEach(function(t){h.path[t]=Array(p).fill(h.path[t].length?h.path[t][0]:[0,0])})}else{var d=(0,o.leastCommonMultiple)(f,l);n.upsample(Math.round(d/f)),a.upsample(Math.round(d/l))}}var v=c([n,a].map(function(t){return t instanceof u.PathMaker?t.path:t}),2);n=v[0],a=v[1]}var g,y,m,b=!0,k=c(this.commonPropertyMapping(t),3);if(g=k[0],y=k[1],m=k[2],!y||void 0===m)switch(t){case"text":if(5==this.root.ty){var w=(g=this.root.t).d.k[0].s,x=JSON.parse(JSON.stringify(w)),S=JSON.parse(JSON.stringify(w));x.t=n,S.t=a,n=x,a=S,y="d",m=-1,b=!1}break;default:throw console.error(t,e,r,n,a,s),new Error("Not a valid key.")}g&&y&&void 0!==m&&(this.convertToAnimatableProperty(g,y),this.addKeyframe(g,y,m,e,n,s,b),this.addKeyframe(g,y,m,r,a,i.EasingFactory.linear(),b))}}]),t}();e.JSMovinLayer=g;var y=function(){function t(){h(this,t)}return d(t,null,[{key:"generateTransform",value:function(t){return{o:{a:0,k:100},r:{a:0,k:0},p:{a:0,k:[t[0],t[1],0]},a:{a:0,k:[0,0,0]},s:{a:0,k:[100,100,100]}}}},{key:"boundingBox",value:function(t){var e=(0,o.getBoundingBox)(t).map(function(t,e){return e<2?t-1:t+1});return this.rect.apply(this,f(e))}},{key:"shape",value:function(t){var e=(0,o.getBoundingBox)(t),r={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(e),ip:0,op:1,st:0,bm:0,shapes:(0,a.render)(t)};return new g(r)}},{key:"rect",value:function(t,e,r,n){var i={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t,e,r,n]),ip:0,op:1,st:0,bm:0,shapes:[(0,a.renderPlainGlyph)("rect",[r,n])]};return new g(i)}},{key:"ellipse",value:function(t,e,r,n){var i={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t-r,e-n,2*r,2*n]),ip:0,op:1,st:0,bm:0,shapes:[(0,a.renderPlainGlyph)("ellipse",[r,n])]};return new g(i)}},{key:"ref",value:function(t){return new g({ty:0,ddd:0,sr:1,ao:0,ks:this.generateTransform([0,0,0,0]),ip:0,op:1,st:0,bm:0,w:9e9,h:9e9,refId:t})}},{key:"hierarchy",value:function(t,e,r){var n,i=this,u=(0,o.getBoundingBox)(t),f={ty:n=t instanceof SVGTextElement?5:t instanceof SVGImageElement?2:t instanceof SVGGElement?0:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(0==n?[0,0,0,0]:u),ip:0,op:1,st:0,bm:0};switch(n){case 0:var l=(0,o.getLeafNodes)(t);if(l.filter(function(t){return t instanceof SVGTextElement||t instanceof SVGImageElement}).length){var h=f,p=[],d=(0,s.default)();l.forEach(function(t){t instanceof SVGGraphicsElement&&!(t instanceof SVGGElement)&&p.unshift(i.hierarchy(t,e,r))}),p.forEach(function(t){t.root.op=9e9}),h.w=u[0]+u[2]+1,h.h=u[1]+u[3]+1,h.refId=d,e.push({id:d,layers:p.map(function(t){return t.root})})}else{var v=f;v.ty=4,v.ks=this.generateTransform(u),v.shapes=(0,a.render)(t)}break;case 2:var y=f,m=c((0,a.renderImage)(t,e),2),b=m[0],k=m[1];y.refId=b,e.filter(function(t){return t.id==b}).length||e.push(k);break;case 4:f.shapes=(0,a.render)(t);break;case 5:var w=f,x=(0,o.getBaselineHeight)(t),S=[0,1,.5][(0,o.encodeTextAnchor)(getComputedStyle(t).textAnchor)];w.ks.p.k=[u[0]+u[2]*S,u[1]+u[3]-x,0],w.ks.o.k=~~(100*parseFloat(getComputedStyle(t).fillOpacity||"1"));var A=c((0,a.renderText)(t,r),2),T=A[0],M=A[1];w.t=T,r.list.filter(function(t){return t.fName==M.fName}).length||r.list.push(M)}return new g(f)}}]),t}();e.LayerFactory=y},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.render=u,e.renderPlainGlyph=function(t,e){var r={ty:"gr",it:[{ty:"sh",ks:{k:null,a:0},hd:!1},{ty:"st",c:{k:[1,1,1,1]},w:{k:1},o:{k:100},lc:(0,o.encodeLineCap)("butt"),lj:(0,o.encodeLineJoin)("miter")},{ty:"fl",c:{k:[1,1,1,1]},o:{k:100}},{ty:"tr",p:{k:[0,0]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:100},sk:{k:0},sa:{k:0}}],bm:0,hd:!1},n=new i.PathMaker;switch(t){case"rect":n.moveTo(0,0),n.lineTo(e[0],0),n.lineTo(e[0],e[1]),n.lineTo(0,e[1]),n.closePath();break;case"ellipse":n.moveTo(e[0],0),n.arcTo(e[0],e[1],0,1,0,e[0],2*e[1]),n.arcTo(e[0],e[1],0,1,0,e[0],0),n.closePath()}return n.uniform(),r.it[0].ks.k=n.path,r},e.renderText=function(t,e){var r=getComputedStyle(t),n=parseFloat(r.fontSize),i=r.fontFamily.split(",")[0].trim(),s=r.fontStyle,u=r.fontWeight,c=(r.fill||"rgb(0,0,0)").split("(")[1].split(")")[0].split(",").map(function(t){return parseInt(t)/255}),f=r.textAnchor,l=(0,a.default)();if(e){var h=e.list.filter(function(t){return t.fFamily==i&&t.fStyle==s&&t.fWeight==u});h.length&&(l=h[0].fName)}var p={d:{k:[{t:0,s:{s:n,f:l,t:t.innerHTML,j:(0,o.encodeTextAnchor)(f),tr:0,ls:0,fc:c}}]},p:{},m:{a:{k:[0,0]}},a:[]},d={fFamily:i,fWeight:"".concat(u),fStyle:s,fName:l};return[p,d]},e.renderImage=function(t,e){var r=(0,a.default)(),n=t.height.baseVal;n.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var i=t.width.baseVal;i.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var o=document.createElement("canvas"),s=o.getContext("2d");o.width=3*i.valueInSpecifiedUnits,o.height=3*n.valueInSpecifiedUnits,s.drawImage(t,0,0,o.width,o.height);var u=o.toDataURL();if(e){var c=e.filter(function(t){return t.p==u});c.length&&(r=c[0].id)}var f={h:n.valueInSpecifiedUnits,w:i.valueInSpecifiedUnits,id:r,p:u,e:1};return[r,f]};var n,i=r(71),a=(n=r(72))&&n.__esModule?n:{default:n},o=r(73);function s(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function u(t,e){return t instanceof SVGTextElement||t instanceof SVGImageElement?[]:t instanceof SVGGElement?function(t,e){var r=[];return t.childNodes.forEach(function(n){n instanceof SVGGraphicsElement&&(r=u(n,e||t).concat(r))}),r}(t,e):function(t,e){var r={ty:"gr",it:[],bm:0,hd:!1},n=function(n){n.uniform(),r.it.push({ty:"sh",ks:{k:n.path,a:0},nm:t.id,hd:!1});var i=window.getComputedStyle(t);!function(t,e,r,n){e.stroke&&"none"!==e.stroke&&t.push({ty:"st",c:{k:e.stroke.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.strokeOpacity||"1")},w:{k:parseFloat(e.strokeWidth||"1")},lc:(0,o.encodeLineCap)(e.strokeLinecap),lj:(0,o.encodeLineJoin)(e.strokeLinejoin)});e.fill&&"none"!==e.fill&&t.push({ty:"fl",c:{k:e.fill.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.fillOpacity||"1")}});var i=0,a=0,s=100;if(r&&n){var u=(0,o.calculateBaseTransform)(r,n),c=n.getBBox(),f=r.getBBox();i=u.e+f.x-c.x,a=u.f+f.y-c.y,s=100*parseFloat(e.opacity||"1")}t.push({ty:"tr",p:{k:[i,a]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:s},sk:{k:0},sa:{k:0}})}(r.it,i,t,e)};if(t instanceof SVGCircleElement){var a=t.r.baseVal;a.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var u=a.valueInSpecifiedUnits,c=new i.PathMaker;c.moveTo(u,0),c.arcTo(u,u,0,1,0,u,2*u),c.arcTo(u,u,0,1,0,u,0),c.closePath(),n(c)}else if(t instanceof SVGEllipseElement){var f=s(["rx","ry"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),l=f[0],h=f[1],p=new i.PathMaker;p.moveTo(l,0),p.arcTo(l,h,0,1,0,l,2*h),p.arcTo(l,h,0,1,0,l,0),p.closePath(),n(p)}else if(t instanceof SVGLineElement){var d=s(["x1","x2","y1","y2"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),4),v=d[0],g=d[1],y=d[2],m=d[3],b=Math.min(v,g),k=Math.min(y,m),w=new i.PathMaker;w.moveTo(v-b,y-k),w.lineTo(g-b,m-k),n(w)}else if(t instanceof SVGPathElement){var x=t.getAttribute("d")||"",S=new i.PathMaker(x);n(S)}else if(t instanceof SVGPolygonElement||t instanceof SVGPolylineElement){var A=t.points;if(A.length){var T=Array.prototype.slice.call(A),M=T.reduce(function(t,e){return Math.min(t,e.x)},0),E=T.reduce(function(t,e){return Math.min(t,e.y)},0),O=new i.PathMaker;O.moveTo(A[0].x-M,A[0].y-E),T.forEach(function(t,e){e<=0||O.lineTo(t.x-M,t.y-E)}),t instanceof SVGPolygonElement&&O.closePath(),n(O)}}else{if(!(t instanceof SVGRectElement))throw console.error(t),new Error("No implementation found for svg graphics element.");var _=s(["width","height"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),P=_[0],I=_[1],N=new i.PathMaker;N.moveTo(0,0),N.lineTo(P,0),N.lineTo(P,I),N.lineTo(0,I),N.closePath(),n(N)}return[r]}(t,e)}},function(t,e,r){"use strict";function n(t,e,r,i){this.message=t,this.expected=e,this.found=r,this.location=i,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,n)}!function(t,e){function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r}(n,Error),n.buildMessage=function(t,e){var r={literal:function(t){return'"'+i(t.text)+'"'},class:function(t){var e,r="";for(e=0;e<t.parts.length;e++)r+=t.parts[e]instanceof Array?a(t.parts[e][0])+"-"+a(t.parts[e][1]):a(t.parts[e]);return"["+(t.inverted?"^":"")+r+"]"},any:function(t){return"any character"},end:function(t){return"end of input"},other:function(t){return t.description}};function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function i(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function a(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}return"Expected "+function(t){var e,n,i,a=new Array(t.length);for(e=0;e<t.length;e++)a[e]=(i=t[e],r[i.type](i));if(a.sort(),a.length>0){for(e=1,n=1;e<a.length;e++)a[e-1]!==a[e]&&(a[n]=a[e],n++);a.length=n}switch(a.length){case 1:return a[0];case 2:return a[0]+" or "+a[1];default:return a.slice(0,-1).join(", ")+", or "+a[a.length-1]}}(t)+" but "+function(t){return t?'"'+i(t)+'"':"end of input"}(e)+" found."},t.exports={SyntaxError:n,parse:function(t,e){e=void 0!==e?e:{};var r,i={},a={svg_path:gt},o=gt,s=function(t){if(!t)return[];for(var e=[],r=0;r<t.length;r++)e=e.concat.apply(e,t[r]);var n=e[0];return n&&"m"==n.code&&(delete n.relative,n.code="M"),e},u=function(t,e){return function(t,e){if(!e)return[t];for(var r=[t],n=0,i=e.length;n<i;n++)r[n+1]=e[n][1];return r}(t,e)},c=/^[Mm]/,f=lt(["M","m"],!1,!1),l=function(t,e,r){var n=Bt(t,[e]);return r&&(n=n.concat(Bt("M"==t?"L":"l",r[1]))),n},h=/^[Zz]/,p=lt(["Z","z"],!1,!1),d=function(){return Bt("Z")},v=/^[Ll]/,g=lt(["L","l"],!1,!1),y=function(t,e){return Bt(t,e)},m=/^[Hh]/,b=lt(["H","h"],!1,!1),k=function(t,e){return Bt(t,e.map(function(t){return{x:t}}))},w=/^[Vv]/,x=lt(["V","v"],!1,!1),S=function(t,e){return Bt(t,e.map(function(t){return{y:t}}))},A=/^[Cc]/,T=lt(["C","c"],!1,!1),M=function(t,e,r){return{x1:t.x,y1:t.y,x2:e.x,y2:e.y,x:r.x,y:r.y}},E=/^[Ss]/,O=lt(["S","s"],!1,!1),_=function(t,e){return{x2:t.x,y2:t.y,x:e.x,y:e.y}},P=/^[Qq]/,I=lt(["Q","q"],!1,!1),N=function(t,e){return{x1:t.x,y1:t.y,x:e.x,y:e.y}},j=/^[Tt]/,F=lt(["T","t"],!1,!1),C=/^[Aa]/,R=lt(["A","a"],!1,!1),L=function(t,e,r,n,i,a){return{rx:t,ry:e,xAxisRotation:r,largeArc:n,sweep:i,x:a.x,y:a.y}},B=function(t,e){return{x:t,y:e}},V=function(t){return 1*t},D=function(t){return 1*t.join("")},G=/^[01]/,U=lt(["0","1"],!1,!1),z=function(t){return"1"==t},W=function(){return""},Y=",",X=ft(",",!1),q=function(t){return t.join("")},H=".",J=ft(".",!1),Q=/^[eE]/,Z=lt(["e","E"],!1,!1),K=/^[+\-]/,$=lt(["+","-"],!1,!1),tt=/^[0-9]/,et=lt([["0","9"]],!1,!1),rt=function(t){return t.join("")},nt=/^[ \t\n\r]/,it=lt([" ","\t","\n","\r"],!1,!1),at=0,ot=[{line:1,column:1}],st=0,ut=[],ct=0;if("startRule"in e){if(!(e.startRule in a))throw new Error("Can't start parsing from rule \""+e.startRule+'".');o=a[e.startRule]}function ft(t,e){return{type:"literal",text:t,ignoreCase:e}}function lt(t,e,r){return{type:"class",parts:t,inverted:e,ignoreCase:r}}function ht(e){var r,n=ot[e];if(n)return n;for(r=e-1;!ot[r];)r--;for(n={line:(n=ot[r]).line,column:n.column};r<e;)10===t.charCodeAt(r)?(n.line++,n.column=1):n.column++,r++;return ot[e]=n,n}function pt(t,e){var r=ht(t),n=ht(e);return{start:{offset:t,line:r.line,column:r.column},end:{offset:e,line:n.line,column:n.column}}}function dt(t){at<st||(at>st&&(st=at,ut=[]),ut.push(t))}function vt(t,e,r){return new n(n.buildMessage(t,e),t,e,r)}function gt(){var t,e,r,n,a;for(t=at,e=[],r=Ct();r!==i;)e.push(r),r=Ct();if(e!==i)if((r=function(){var t,e,r,n,a,o;if(t=at,(e=yt())!==i){for(r=[],n=at,a=[],o=Ct();o!==i;)a.push(o),o=Ct();for(a!==i&&(o=yt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;){for(r.push(n),n=at,a=[],o=Ct();o!==i;)a.push(o),o=Ct();a!==i&&(o=yt())!==i?n=a=[a,o]:(at=n,n=i)}r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())===i&&(r=null),r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i?(t,t=e=s(r)):(at=t,t=i)}else at=t,t=i;else at=t,t=i;return t}function yt(){var e,r,n,a,o,s;if(e=at,(r=function(){var e,r,n,a,o,s,u;e=at,c.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(f));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=Tt())!==i?(o=at,(s=_t())===i&&(s=null),s!==i&&(u=bt())!==i?o=s=[s,u]:(at=o,o=i),o===i&&(o=null),o!==i?(e,r=l(r,a,o),e=r):(at=e,e=i)):(at=e,e=i)}else at=e,e=i;return e}())!==i){for(n=[],a=at,o=[],s=Ct();s!==i;)o.push(s),s=Ct();for(o!==i&&(s=mt())!==i?a=o=[o,s]:(at=a,a=i);a!==i;){for(n.push(a),a=at,o=[],s=Ct();s!==i;)o.push(s),s=Ct();o!==i&&(s=mt())!==i?a=o=[o,s]:(at=a,a=i)}n!==i?(e,e=r=u(r,n)):(at=e,e=i)}else at=e,e=i;return e}function mt(){var e;return(e=function(){var e,r;e=at,h.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(p));r!==i&&(e,r=d());return e=r}())===i&&(e=function(){var e,r,n,a;e=at,v.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(g));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=bt())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,m.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(b));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=kt())!==i?(e,r=k(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,w.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(x));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=kt())!==i?(e,r=S(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,A.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(T));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=wt())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=wt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=wt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,E.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(O));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=xt())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,P.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(I));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=St())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=St())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=St())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,j.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(F));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=Tt())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,C.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(R));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=At())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=At())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=At())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=u(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}()),e}function bt(){var t,e,r,n,a,o;if(t=at,(e=Tt())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,t=e=u(e,r)):(at=t,t=i)}else at=t,t=i;return t}function kt(){var t,e,r,n,a,o;if(t=at,(e=Et())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=Et())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=Et())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,t=e=u(e,r)):(at=t,t=i)}else at=t,t=i;return t}function wt(){var t,e,r,n,a,o;return t=at,(e=Tt())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Tt())!==i?((a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?(t,t=e=M(e,n,o)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i),t}function xt(){var t,e,r,n;return t=at,(e=Tt())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Tt())!==i?(t,t=e=_(e,n)):(at=t,t=i)):(at=t,t=i),t}function St(){var t,e,r,n;return t=at,(e=Tt())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Tt())!==i?(t,t=e=N(e,n)):(at=t,t=i)):(at=t,t=i),t}function At(){var t,e,r,n,a,o,s,u,c,f,l;return t=at,(e=Mt())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Mt())!==i?((a=_t())===i&&(a=null),a!==i&&(o=Et())!==i&&_t()!==i&&(s=Ot())!==i?((u=_t())===i&&(u=null),u!==i&&(c=Ot())!==i?((f=_t())===i&&(f=null),f!==i&&(l=Tt())!==i?(t,t=e=L(e,n,o,s,c,l)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i),t}function Tt(){var t,e,r,n;return t=at,(e=Et())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Et())!==i?(t,t=e=B(e,n)):(at=t,t=i)):(at=t,t=i),t}function Mt(){var t,e;return t=at,(e=It())===i&&(e=Ft()),e!==i&&(t,e=V(e)),t=e}function Et(){var t,e,r,n;return t=at,e=at,(r=jt())===i&&(r=null),r!==i&&(n=It())!==i?e=r=[r,n]:(at=e,e=i),e===i&&(e=at,(r=jt())===i&&(r=null),r!==i&&(n=Ft())!==i?e=r=[r,n]:(at=e,e=i)),e!==i&&(t,e=D(e)),t=e}function Ot(){var e,r;return e=at,G.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(U)),r!==i&&(e,r=z(r)),e=r}function _t(){var t,e,r,n,a;if(t=at,e=[],(r=Ct())!==i)for(;r!==i;)e.push(r),r=Ct();else e=i;if(e!==i)if((r=Pt())===i&&(r=null),r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i?t=e=[e,r,n]:(at=t,t=i)}else at=t,t=i;else at=t,t=i;if(t===i){if(t=at,e=at,(r=Pt())!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i?e=r=[r,n]:(at=e,e=i)}else at=e,e=i;e!==i&&(t,e=W()),t=e}return t}function Pt(){var e;return 44===t.charCodeAt(at)?(e=Y,at++):(e=i,0===ct&&dt(X)),e}function It(){var e,r,n,a;return e=at,r=at,(n=function(){var e,r,n,a,o;e=at,r=at,(n=Ft())===i&&(n=null);n!==i?(46===t.charCodeAt(at)?(a=H,at++):(a=i,0===ct&&dt(J)),a!==i&&(o=Ft())!==i?r=n=[n,a,o]:(at=r,r=i)):(at=r,r=i);r===i&&(r=at,(n=Ft())!==i?(46===t.charCodeAt(at)?(a=H,at++):(a=i,0===ct&&dt(J)),a!==i?r=n=[n,a]:(at=r,r=i)):(at=r,r=i));r!==i&&(e,r=q(r));return e=r}())!==i?((a=Nt())===i&&(a=null),a!==i?r=n=[n,a]:(at=r,r=i)):(at=r,r=i),r===i&&(r=at,(n=Ft())!==i&&(a=Nt())!==i?r=n=[n,a]:(at=r,r=i)),r!==i&&(e,r=q(r)),e=r}function Nt(){var e,r,n,a,o;return e=at,r=at,Q.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(Z)),n!==i?((a=jt())===i&&(a=null),a!==i&&(o=Ft())!==i?r=n=[n,a,o]:(at=r,r=i)):(at=r,r=i),r!==i&&(e,r=q(r)),e=r}function jt(){var e;return K.test(t.charAt(at))?(e=t.charAt(at),at++):(e=i,0===ct&&dt($)),e}function Ft(){var e,r,n;if(e=at,r=[],tt.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(et)),n!==i)for(;n!==i;)r.push(n),tt.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(et));else r=i;return r!==i&&(e,r=rt(r)),e=r}function Ct(){var e,r;return e=at,nt.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(it)),r!==i&&(e,r=W()),e=r}var Rt={m:"moveto",l:"lineto",h:"horizontal lineto",v:"vertical lineto",c:"curveto",s:"smooth curveto",q:"quadratic curveto",t:"smooth quadratic curveto",a:"elliptical arc",z:"closepath"};for(var Lt in Rt)Rt[Lt.toUpperCase()]=Rt[Lt];function Bt(t,e){e||(e=[{}]);for(var r=e.length;r--;){var n={code:t,command:Rt[t]};for(var i in t==t.toLowerCase()&&(n.relative=!0),e[r])n[i]=e[r][i];e[r]=n}return e}if((r=o())!==i&&at===t.length)return r;throw r!==i&&at<t.length&&dt({type:"end"}),vt(ut,st<t.length?t.charAt(st):null,st<t.length?pt(st,st+1):pt(st,st))}}},function(t,e){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var n=new Uint8Array(16);t.exports=function(){return r(n),n}}else{var i=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),i[e]=t>>>((3&e)<<3)&255;return i}}},function(t,e){for(var r=[],n=0;n<256;++n)r[n]=(n+256).toString(16).substr(1);t.exports=function(t,e){var n=e||0,i=r;return[i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]]].join("")}},function(t,e,r){"use strict";(function(t){if(r(152),r(349),r(350),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function n(t,r,n){t[r]||Object[e](t,r,{writable:!0,configurable:!0,value:n})}n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(this,r(151))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){r(153),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208),r(209),r(210),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(218),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(227),r(228),r(229),r(230),r(231),r(233),r(234),r(236),r(237),r(238),r(239),r(240),r(241),r(242),r(244),r(245),r(246),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(94),r(257),r(127),r(258),r(128),r(259),r(260),r(261),r(262),r(263),r(131),r(133),r(134),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(276),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(290),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),r(324),r(325),r(326),r(327),r(328),r(329),r(330),r(331),r(332),r(333),r(334),r(335),r(336),r(337),r(338),r(339),r(340),r(341),r(342),r(343),r(344),r(345),r(346),r(347),r(348),t.exports=r(18)},function(t,e,r){"use strict";var n=r(2),i=r(14),a=r(7),o=r(0),s=r(12),u=r(30).KEY,c=r(3),f=r(48),l=r(43),h=r(33),p=r(5),d=r(109),v=r(75),g=r(155),y=r(57),m=r(1),b=r(4),k=r(9),w=r(15),x=r(23),S=r(32),A=r(36),T=r(112),M=r(16),E=r(56),O=r(8),_=r(34),P=M.f,I=O.f,N=T.f,j=n.Symbol,F=n.JSON,C=F&&F.stringify,R=p("_hidden"),L=p("toPrimitive"),B={}.propertyIsEnumerable,V=f("symbol-registry"),D=f("symbols"),G=f("op-symbols"),U=Object.prototype,z="function"==typeof j&&!!E.f,W=n.QObject,Y=!W||!W.prototype||!W.prototype.findChild,X=a&&c(function(){return 7!=A(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=P(U,e);n&&delete U[e],I(t,e,r),n&&t!==U&&I(U,e,n)}:I,q=function(t){var e=D[t]=A(j.prototype);return e._k=t,e},H=z&&"symbol"==typeof j.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof j},J=function(t,e,r){return t===U&&J(G,e,r),m(t),e=x(e,!0),m(r),i(D,e)?(r.enumerable?(i(t,R)&&t[R][e]&&(t[R][e]=!1),r=A(r,{enumerable:S(0,!1)})):(i(t,R)||I(t,R,S(1,{})),t[R][e]=!0),X(t,e,r)):I(t,e,r)},Q=function(t,e){m(t);for(var r,n=g(e=w(e)),i=0,a=n.length;a>i;)J(t,r=n[i++],e[r]);return t},Z=function(t){var e=B.call(this,t=x(t,!0));return!(this===U&&i(D,t)&&!i(G,t))&&(!(e||!i(this,t)||!i(D,t)||i(this,R)&&this[R][t])||e)},K=function(t,e){if(t=w(t),e=x(e,!0),t!==U||!i(D,e)||i(G,e)){var r=P(t,e);return!r||!i(D,e)||i(t,R)&&t[R][e]||(r.enumerable=!0),r}},$=function(t){for(var e,r=N(w(t)),n=[],a=0;r.length>a;)i(D,e=r[a++])||e==R||e==u||n.push(e);return n},tt=function(t){for(var e,r=t===U,n=N(r?G:w(t)),a=[],o=0;n.length>o;)!i(D,e=n[o++])||r&&!i(U,e)||a.push(D[e]);return a};z||(s((j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(r){this===U&&e.call(G,r),i(this,R)&&i(this[R],t)&&(this[R][t]=!1),X(this,t,S(1,r))};return a&&Y&&X(U,t,{configurable:!0,set:e}),q(t)}).prototype,"toString",function(){return this._k}),M.f=K,O.f=J,r(37).f=T.f=$,r(50).f=Z,E.f=tt,a&&!r(29)&&s(U,"propertyIsEnumerable",Z,!0),d.f=function(t){return q(p(t))}),o(o.G+o.W+o.F*!z,{Symbol:j});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;et.length>rt;)p(et[rt++]);for(var nt=_(p.store),it=0;nt.length>it;)v(nt[it++]);o(o.S+o.F*!z,"Symbol",{for:function(t){return i(V,t+="")?V[t]:V[t]=j(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in V)if(V[e]===t)return e},useSetter:function(){Y=!0},useSimple:function(){Y=!1}}),o(o.S+o.F*!z,"Object",{create:function(t,e){return void 0===e?A(t):Q(A(t),e)},defineProperty:J,defineProperties:Q,getOwnPropertyDescriptor:K,getOwnPropertyNames:$,getOwnPropertySymbols:tt});var at=c(function(){E.f(1)});o(o.S+o.F*at,"Object",{getOwnPropertySymbols:function(t){return E.f(k(t))}}),F&&o(o.S+o.F*(!z||c(function(){var t=j();return"[null]"!=C([t])||"{}"!=C({a:t})||"{}"!=C(Object(t))})),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!H(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!H(e))return e}),n[1]=e,C.apply(F,n)}}),j.prototype[L]||r(11)(j.prototype,L,j.prototype.valueOf),l(j,"Symbol"),l(Math,"Math",!0),l(n.JSON,"JSON",!0)},function(t,e,r){t.exports=r(48)("native-function-to-string",Function.toString)},function(t,e,r){var n=r(34),i=r(56),a=r(50);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,s=r(t),u=a.f,c=0;s.length>c;)u.call(t,o=s[c++])&&e.push(o);return e}},function(t,e,r){var n=r(0);n(n.S,"Object",{create:r(36)})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperty:r(8).f})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperties:r(111)})},function(t,e,r){var n=r(15),i=r(16).f;r(25)("getOwnPropertyDescriptor",function(){return function(t,e){return i(n(t),e)}})},function(t,e,r){var n=r(9),i=r(17);r(25)("getPrototypeOf",function(){return function(t){return i(n(t))}})},function(t,e,r){var n=r(9),i=r(34);r(25)("keys",function(){return function(t){return i(n(t))}})},function(t,e,r){r(25)("getOwnPropertyNames",function(){return r(112).f})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("freeze",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("seal",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("preventExtensions",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4);r(25)("isFrozen",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isSealed",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isExtensible",function(t){return function(e){return!!n(e)&&(!t||t(e))}})},function(t,e,r){var n=r(0);n(n.S+n.F,"Object",{assign:r(113)})},function(t,e,r){var n=r(0);n(n.S,"Object",{is:r(114)})},function(t,e,r){var n=r(0);n(n.S,"Object",{setPrototypeOf:r(79).set})},function(t,e,r){"use strict";var n=r(44),i={};i[r(5)("toStringTag")]="z",i+""!="[object z]"&&r(12)(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},function(t,e,r){var n=r(0);n(n.P,"Function",{bind:r(115)})},function(t,e,r){var n=r(8).f,i=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in i||r(7)&&n(i,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(4),i=r(17),a=r(5)("hasInstance"),o=Function.prototype;a in o||r(8).f(o,a,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,r){var n=r(0),i=r(117);n(n.G+n.F*(parseInt!=i),{parseInt:i})},function(t,e,r){var n=r(0),i=r(118);n(n.G+n.F*(parseFloat!=i),{parseFloat:i})},function(t,e,r){"use strict";var n=r(2),i=r(14),a=r(20),o=r(81),s=r(23),u=r(3),c=r(37).f,f=r(16).f,l=r(8).f,h=r(45).trim,p=n.Number,d=p,v=p.prototype,g="Number"==a(r(36)(v)),y="trim"in String.prototype,m=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var r,n,i,a=(e=y?e.trim():h(e,3)).charCodeAt(0);if(43===a||45===a){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===a){switch(e.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+e}for(var o,u=e.slice(2),c=0,f=u.length;c<f;c++)if((o=u.charCodeAt(c))<48||o>i)return NaN;return parseInt(u,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof p&&(g?u(function(){v.valueOf.call(r)}):"Number"!=a(r))?o(new d(m(e)),r,p):m(e)};for(var b,k=r(7)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;k.length>w;w++)i(d,b=k[w])&&!i(p,b)&&l(p,b,f(d,b));p.prototype=v,v.constructor=p,r(12)(n,"Number",p)}},function(t,e,r){"use strict";var n=r(0),i=r(21),a=r(119),o=r(82),s=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*c[r],c[r]=n%1e7,n=u(n/1e7)},h=function(t){for(var e=6,r=0;--e>=0;)r+=c[e],c[e]=u(r/t),r=r%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var r=String(c[t]);e=""===e?r:e+o.call("0",7-r.length)+r}return e},d=function(t,e,r){return 0===e?r:e%2==1?d(t,e-1,r*t):d(t*t,e/2,r)};n(n.P+n.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(3)(function(){s.call({})})),"Number",{toFixed:function(t){var e,r,n,s,u=a(this,f),c=i(t),v="",g="0";if(c<0||c>20)throw RangeError(f);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(u*d(2,69,1))-69)<0?u*d(2,-e,1):u/d(2,e,1),r*=4503599627370496,(e=52-e)>0){for(l(0,r),n=c;n>=7;)l(1e7,0),n-=7;for(l(d(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),l(1,1),h(2),g=p()}else l(0,r),l(1<<-e,0),g=p()+o.call("0",c);return g=c>0?v+((s=g.length)<=c?"0."+o.call("0",c-s)+g:g.slice(0,s-c)+"."+g.slice(s-c)):v+g}})},function(t,e,r){"use strict";var n=r(0),i=r(3),a=r(119),o=1..toPrecision;n(n.P+n.F*(i(function(){return"1"!==o.call(1,void 0)})||!i(function(){o.call({})})),"Number",{toPrecision:function(t){var e=a(this,"Number#toPrecision: incorrect invocation!");return void 0===t?o.call(e):o.call(e,t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,r){var n=r(0),i=r(2).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{isInteger:r(120)})},function(t,e,r){var n=r(0);n(n.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,r){var n=r(0),i=r(120),a=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return i(t)&&a(t)<=9007199254740991}})},function(t,e,r){var n=r(0);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,r){var n=r(0);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,r){var n=r(0),i=r(118);n(n.S+n.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,r){var n=r(0),i=r(117);n(n.S+n.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,r){var n=r(0),i=r(121),a=Math.sqrt,o=Math.acosh;n(n.S+n.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+a(t-1)*a(t+1))}})},function(t,e,r){var n=r(0),i=Math.asinh;n(n.S+n.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,r){var n=r(0),i=Math.atanh;n(n.S+n.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,r){var n=r(0),i=r(83);n(n.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,r){var n=r(0),i=Math.exp;n(n.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,r){var n=r(0),i=r(84);n(n.S+n.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,r){var n=r(0);n(n.S,"Math",{fround:r(122)})},function(t,e,r){var n=r(0),i=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var r,n,a=0,o=0,s=arguments.length,u=0;o<s;)u<(r=i(arguments[o++]))?(a=a*(n=u/r)*n+1,u=r):a+=r>0?(n=r/u)*n:r;return u===1/0?1/0:u*Math.sqrt(a)}})},function(t,e,r){var n=r(0),i=Math.imul;n(n.S+n.F*r(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n;return 0|i*a+((65535&r>>>16)*a+i*(65535&n>>>16)<<16>>>0)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log1p:r(121)})},function(t,e,r){var n=r(0);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,r){var n=r(0);n(n.S,"Math",{sign:r(83)})},function(t,e,r){var n=r(0),i=r(84),a=Math.exp;n(n.S+n.F*r(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(a(t-1)-a(-t-1))*(Math.E/2)}})},function(t,e,r){var n=r(0),i=r(84),a=Math.exp;n(n.S,"Math",{tanh:function(t){var e=i(t=+t),r=i(-t);return e==1/0?1:r==1/0?-1:(e-r)/(a(t)+a(-t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,r){var n=r(0),i=r(35),a=String.fromCharCode,o=String.fromCodePoint;n(n.S+n.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?a(e):a(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},function(t,e,r){var n=r(0),i=r(15),a=r(6);n(n.S,"String",{raw:function(t){for(var e=i(t.raw),r=a(e.length),n=arguments.length,o=[],s=0;r>s;)o.push(String(e[s++])),s<n&&o.push(String(arguments[s]));return o.join("")}})},function(t,e,r){"use strict";r(45)("trim",function(t){return function(){return t(this,3)}})},function(t,e,r){"use strict";var n=r(58)(!0);r(85)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e,r){"use strict";var n=r(0),i=r(58)(!1);n(n.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,r){"use strict";var n=r(0),i=r(6),a=r(87),o="".endsWith;n(n.P+n.F*r(88)("endsWith"),"String",{endsWith:function(t){var e=a(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,n=i(e.length),s=void 0===r?n:Math.min(i(r),n),u=String(t);return o?o.call(e,u,s):e.slice(s-u.length,s)===u}})},function(t,e,r){"use strict";var n=r(0),i=r(87);n(n.P+n.F*r(88)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(0);n(n.P,"String",{repeat:r(82)})},function(t,e,r){"use strict";var n=r(0),i=r(6),a=r(87),o="".startsWith;n(n.P+n.F*r(88)("startsWith"),"String",{startsWith:function(t){var e=a(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return o?o.call(e,n,r):e.slice(r,r+n.length)===n}})},function(t,e,r){"use strict";r(13)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,r){"use strict";r(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,r){"use strict";r(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,r){"use strict";r(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,r){"use strict";r(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,r){"use strict";r(13)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,r){"use strict";r(13)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,r){"use strict";r(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,r){"use strict";r(13)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,r){"use strict";r(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,r){"use strict";r(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,r){"use strict";r(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,r){"use strict";r(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,r){var n=r(0);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23);n(n.P+n.F*r(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),r=a(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},function(t,e,r){var n=r(0),i=r(232);n(n.P+n.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,r){"use strict";var n=r(3),i=Date.prototype.getTime,a=Date.prototype.toISOString,o=function(t){return t>9?t:"0"+t};t.exports=n(function(){return"0385-07-25T07:06:39.999Z"!=a.call(new Date(-5e13-1))})||!n(function(){a.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+o(t.getUTCMonth()+1)+"-"+o(t.getUTCDate())+"T"+o(t.getUTCHours())+":"+o(t.getUTCMinutes())+":"+o(t.getUTCSeconds())+"."+(r>99?r:"0"+o(r))+"Z"}:a},function(t,e,r){var n=Date.prototype,i=n.toString,a=n.getTime;new Date(NaN)+""!="Invalid Date"&&r(12)(n,"toString",function(){var t=a.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,e,r){var n=r(5)("toPrimitive"),i=Date.prototype;n in i||r(11)(i,n,r(235))},function(t,e,r){"use strict";var n=r(1),i=r(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(n(this),"number"!=t)}},function(t,e,r){var n=r(0);n(n.S,"Array",{isArray:r(57)})},function(t,e,r){"use strict";var n=r(19),i=r(0),a=r(9),o=r(123),s=r(89),u=r(6),c=r(90),f=r(91);i(i.S+i.F*!r(60)(function(t){Array.from(t)}),"Array",{from:function(t){var e,r,i,l,h=a(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,y=0,m=f(h);if(g&&(v=n(v,d>2?arguments[2]:void 0,2)),null==m||p==Array&&s(m))for(r=new p(e=u(h.length));e>y;y++)c(r,y,g?v(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(i=l.next()).done;y++)c(r,y,g?o(l,v,[i.value,y],!0):i.value);return r.length=y,r}})},function(t,e,r){"use strict";var n=r(0),i=r(90);n(n.S+n.F*r(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)i(r,t,arguments[t++]);return r.length=e,r}})},function(t,e,r){"use strict";var n=r(0),i=r(15),a=[].join;n(n.P+n.F*(r(49)!=Object||!r(22)(a)),"Array",{join:function(t){return a.call(i(this),void 0===t?",":t)}})},function(t,e,r){"use strict";var n=r(0),i=r(78),a=r(20),o=r(35),s=r(6),u=[].slice;n(n.P+n.F*r(3)(function(){i&&u.call(i)}),"Array",{slice:function(t,e){var r=s(this.length),n=a(this);if(e=void 0===e?r:e,"Array"==n)return u.call(this,t,e);for(var i=o(t,r),c=o(e,r),f=s(c-i),l=new Array(f),h=0;h<f;h++)l[h]="String"==n?this.charAt(i+h):this[i+h];return l}})},function(t,e,r){"use strict";var n=r(0),i=r(10),a=r(9),o=r(3),s=[].sort,u=[1,2,3];n(n.P+n.F*(o(function(){u.sort(void 0)})||!o(function(){u.sort(null)})||!r(22)(s)),"Array",{sort:function(t){return void 0===t?s.call(a(this)):s.call(a(this),i(t))}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(0),a=r(22)([].forEach,!0);n(n.P+n.F*!a,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,r){var n=r(4),i=r(57),a=r(5)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),n(e)&&null===(e=e[a])&&(e=void 0)),void 0===e?Array:e}},function(t,e,r){"use strict";var n=r(0),i=r(26)(1);n(n.P+n.F*!r(22)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(2);n(n.P+n.F*!r(22)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(3);n(n.P+n.F*!r(22)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(4);n(n.P+n.F*!r(22)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(124);n(n.P+n.F*!r(22)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,r){"use strict";var n=r(0),i=r(124);n(n.P+n.F*!r(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,r){"use strict";var n=r(0),i=r(55)(!1),a=[].indexOf,o=!!a&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(o||!r(22)(a)),"Array",{indexOf:function(t){return o?a.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(15),a=r(21),o=r(6),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(u||!r(22)(s)),"Array",{lastIndexOf:function(t){if(u)return s.apply(this,arguments)||0;var e=i(this),r=o(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,a(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},function(t,e,r){var n=r(0);n(n.P,"Array",{copyWithin:r(125)}),r(31)("copyWithin")},function(t,e,r){var n=r(0);n(n.P,"Array",{fill:r(93)}),r(31)("fill")},function(t,e,r){"use strict";var n=r(0),i=r(26)(5),a=!0;"find"in[]&&Array(1).find(function(){a=!1}),n(n.P+n.F*a,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("find")},function(t,e,r){"use strict";var n=r(0),i=r(26)(6),a="findIndex",o=!0;a in[]&&Array(1)[a](function(){o=!1}),n(n.P+n.F*o,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)(a)},function(t,e,r){r(38)("Array")},function(t,e,r){var n=r(2),i=r(81),a=r(8).f,o=r(37).f,s=r(59),u=r(51),c=n.RegExp,f=c,l=c.prototype,h=/a/g,p=/a/g,d=new c(h)!==h;if(r(7)&&(!d||r(3)(function(){return p[r(5)("match")]=!1,c(h)!=h||c(p)==p||"/a/i"!=c(h,"i")}))){c=function(t,e){var r=this instanceof c,n=s(t),a=void 0===e;return!r&&n&&t.constructor===c&&a?t:i(d?new f(n&&!a?t.source:t,e):f((n=t instanceof c)?t.source:t,n&&a?u.call(t):e),r?this:l,c)};for(var v=function(t){t in c||a(c,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=o(f),y=0;g.length>y;)v(g[y++]);l.constructor=c,c.prototype=l,r(12)(n,"RegExp",c)}r(38)("RegExp")},function(t,e,r){"use strict";r(128);var n=r(1),i=r(51),a=r(7),o=/./.toString,s=function(t){r(12)(RegExp.prototype,"toString",t,!0)};r(3)(function(){return"/a/b"!=o.call({source:"a",flags:"b"})})?s(function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!a&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=o.name&&s(function(){return o.call(this)})},function(t,e,r){"use strict";var n=r(1),i=r(6),a=r(96),o=r(61);r(62)("match",1,function(t,e,r,s){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=s(r,t,this);if(e.done)return e.value;var u=n(t),c=String(this);if(!u.global)return o(u,c);var f=u.unicode;u.lastIndex=0;for(var l,h=[],p=0;null!==(l=o(u,c));){var d=String(l[0]);h[p]=d,""===d&&(u.lastIndex=a(c,i(u.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,e,r){"use strict";var n=r(1),i=r(9),a=r(6),o=r(21),s=r(96),u=r(61),c=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;r(62)("replace",2,function(t,e,r,d){return[function(n,i){var a=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,a,i):r.call(String(a),n,i)},function(t,e){var i=d(r,t,this,e);if(i.done)return i.value;var l=n(t),h=String(this),p="function"==typeof e;p||(e=String(e));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=u(l,h);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(l.lastIndex=s(h,a(l.lastIndex),y))}for(var k,w="",x=0,S=0;S<m.length;S++){b=m[S];for(var A=String(b[0]),T=c(f(o(b.index),h.length),0),M=[],E=1;E<b.length;E++)M.push(void 0===(k=b[E])?k:String(k));var O=b.groups;if(p){var _=[A].concat(M,T,h);void 0!==O&&_.push(O);var P=String(e.apply(void 0,_))}else P=v(A,h,T,M,O,e);T>=x&&(w+=h.slice(x,T)+P,x=T+A.length)}return w+h.slice(x)}];function v(t,e,n,a,o,s){var u=n+t.length,c=a.length,f=p;return void 0!==o&&(o=i(o),f=h),r.call(s,f,function(r,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(u);case"<":s=o[i.slice(1,-1)];break;default:var f=+i;if(0===f)return r;if(f>c){var h=l(f/10);return 0===h?r:h<=c?void 0===a[h-1]?i.charAt(1):a[h-1]+i.charAt(1):r}s=a[f-1]}return void 0===s?"":s})}})},function(t,e,r){"use strict";var n=r(1),i=r(114),a=r(61);r(62)("search",1,function(t,e,r,o){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=o(r,t,this);if(e.done)return e.value;var s=n(t),u=String(this),c=s.lastIndex;i(c,0)||(s.lastIndex=0);var f=a(s,u);return i(s.lastIndex,c)||(s.lastIndex=c),null===f?-1:f.index}]})},function(t,e,r){"use strict";var n=r(59),i=r(1),a=r(52),o=r(96),s=r(6),u=r(61),c=r(95),f=r(3),l=Math.min,h=[].push,p=!f(function(){RegExp(4294967295,"y")});r(62)("split",2,function(t,e,r,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!n(t))return r.call(i,t,e);for(var a,o,s,u=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,f+"g");(a=c.call(d,i))&&!((o=d.lastIndex)>l&&(u.push(i.slice(l,a.index)),a.length>1&&a.index<i.length&&h.apply(u,a.slice(1)),s=a[0].length,l=o,u.length>=p));)d.lastIndex===a.index&&d.lastIndex++;return l===i.length?!s&&d.test("")||u.push(""):u.push(i.slice(l)),u.length>p?u.slice(0,p):u}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:r.call(this,t,e)}:r,[function(r,n){var i=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,i,n):d.call(String(i),r,n)},function(t,e){var n=f(d,t,this,e,d!==r);if(n.done)return n.value;var c=i(t),h=String(this),v=a(c,RegExp),g=c.unicode,y=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(p?"y":"g"),m=new v(p?c:"^(?:"+c.source+")",y),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===h.length)return null===u(m,h)?[h]:[];for(var k=0,w=0,x=[];w<h.length;){m.lastIndex=p?w:0;var S,A=u(m,p?h:h.slice(w));if(null===A||(S=l(s(m.lastIndex+(p?0:w)),h.length))===k)w=o(h,w,g);else{if(x.push(h.slice(k,w)),x.length===b)return x;for(var T=1;T<=A.length-1;T++)if(x.push(A[T]),x.length===b)return x;w=k=S}}return x.push(h.slice(k)),x}]})},function(t,e,r){"use strict";var n,i,a,o,s=r(29),u=r(2),c=r(19),f=r(44),l=r(0),h=r(4),p=r(10),d=r(39),v=r(40),g=r(52),y=r(97).set,m=r(98)(),b=r(99),k=r(129),w=r(63),x=r(130),S=u.TypeError,A=u.process,T=A&&A.versions,M=T&&T.v8||"",E=u.Promise,O="process"==f(A),_=function(){},P=i=b.f,I=!!function(){try{var t=E.resolve(1),e=(t.constructor={})[r(5)("species")]=function(t){t(_,_)};return(O||"function"==typeof PromiseRejectionEvent)&&t.then(_)instanceof e&&0!==M.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),N=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},j=function(t,e){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var n=t._v,i=1==t._s,a=0,o=function(e){var r,a,o,s=i?e.ok:e.fail,u=e.resolve,c=e.reject,f=e.domain;try{s?(i||(2==t._h&&R(t),t._h=1),!0===s?r=n:(f&&f.enter(),r=s(n),f&&(f.exit(),o=!0)),r===e.promise?c(S("Promise-chain cycle")):(a=N(r))?a.call(r,u,c):u(r)):c(n)}catch(t){f&&!o&&f.exit(),c(t)}};r.length>a;)o(r[a++]);t._c=[],t._n=!1,e&&!t._h&&F(t)})}},F=function(t){y.call(u,function(){var e,r,n,i=t._v,a=C(t);if(a&&(e=k(function(){O?A.emit("unhandledRejection",i,t):(r=u.onunhandledrejection)?r({promise:t,reason:i}):(n=u.console)&&n.error&&n.error("Unhandled promise rejection",i)}),t._h=O||C(t)?2:1),t._a=void 0,a&&e.e)throw e.v})},C=function(t){return 1!==t._h&&0===(t._a||t._c).length},R=function(t){y.call(u,function(){var e;O?A.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),j(e,!0))},B=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw S("Promise can't be resolved itself");(e=N(t))?m(function(){var n={_w:r,_d:!1};try{e.call(t,c(B,n,1),c(L,n,1))}catch(t){L.call(n,t)}}):(r._v=t,r._s=1,j(r,!1))}catch(t){L.call({_w:r,_d:!1},t)}}};I||(E=function(t){d(this,E,"Promise","_h"),p(t),n.call(this);try{t(c(B,this,1),c(L,this,1))}catch(t){L.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(41)(E.prototype,{then:function(t,e){var r=P(g(this,E));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=O?A.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&j(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),a=function(){var t=new n;this.promise=t,this.resolve=c(B,t,1),this.reject=c(L,t,1)},b.f=P=function(t){return t===E||t===o?new a(t):i(t)}),l(l.G+l.W+l.F*!I,{Promise:E}),r(43)(E,"Promise"),r(38)("Promise"),o=r(18).Promise,l(l.S+l.F*!I,"Promise",{reject:function(t){var e=P(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(s||!I),"Promise",{resolve:function(t){return x(s&&this===o?E:this,t)}}),l(l.S+l.F*!(I&&r(60)(function(t){E.all(t).catch(_)})),"Promise",{all:function(t){var e=this,r=P(e),n=r.resolve,i=r.reject,a=k(function(){var r=[],a=0,o=1;v(t,!1,function(t){var s=a++,u=!1;r.push(void 0),o++,e.resolve(t).then(function(t){u||(u=!0,r[s]=t,--o||n(r))},i)}),--o||n(r)});return a.e&&i(a.v),r.promise},race:function(t){var e=this,r=P(e),n=r.reject,i=k(function(){v(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return i.e&&n(i.v),r.promise}})},function(t,e,r){"use strict";var n=r(135),i=r(42);r(64)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(i(this,"WeakSet"),t,!0)}},n,!1,!0)},function(t,e,r){"use strict";var n=r(0),i=r(65),a=r(100),o=r(1),s=r(35),u=r(6),c=r(4),f=r(2).ArrayBuffer,l=r(52),h=a.ArrayBuffer,p=a.DataView,d=i.ABV&&f.isView,v=h.prototype.slice,g=i.VIEW;n(n.G+n.W+n.F*(f!==h),{ArrayBuffer:h}),n(n.S+n.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||c(t)&&g in t}}),n(n.P+n.U+n.F*r(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(o(this),t);for(var r=o(this).byteLength,n=s(t,r),i=s(void 0===e?r:e,r),a=new(l(this,h))(u(i-n)),c=new p(this),f=new p(a),d=0;n<i;)f.setUint8(d++,c.getUint8(n++));return a}}),r(38)("ArrayBuffer")},function(t,e,r){var n=r(0);n(n.G+n.W+n.F*!r(65).ABV,{DataView:r(100).DataView})},function(t,e,r){r(27)("Int8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}},!0)},function(t,e,r){r(27)("Int16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Int32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float64",8,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){var n=r(0),i=r(10),a=r(1),o=(r(2).Reflect||{}).apply,s=Function.apply;n(n.S+n.F*!r(3)(function(){o(function(){})}),"Reflect",{apply:function(t,e,r){var n=i(t),u=a(r);return o?o(n,e,u):s.call(n,e,u)}})},function(t,e,r){var n=r(0),i=r(36),a=r(10),o=r(1),s=r(4),u=r(3),c=r(115),f=(r(2).Reflect||{}).construct,l=u(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!u(function(){f(function(){})});n(n.S+n.F*(l||h),"Reflect",{construct:function(t,e){a(t),o(e);var r=arguments.length<3?t:a(arguments[2]);if(h&&!l)return f(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(c.apply(t,n))}var u=r.prototype,p=i(s(u)?u:Object.prototype),d=Function.apply.call(t,p,e);return s(d)?d:p}})},function(t,e,r){var n=r(8),i=r(0),a=r(1),o=r(23);i(i.S+i.F*r(3)(function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,r){a(t),e=o(e,!0),a(r);try{return n.f(t,e,r),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),i=r(16).f,a=r(1);n(n.S,"Reflect",{deleteProperty:function(t,e){var r=i(a(t),e);return!(r&&!r.configurable)&&delete t[e]}})},function(t,e,r){"use strict";var n=r(0),i=r(1),a=function(t){this._t=i(t),this._i=0;var e,r=this._k=[];for(e in t)r.push(e)};r(86)(a,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),n(n.S,"Reflect",{enumerate:function(t){return new a(t)}})},function(t,e,r){var n=r(16),i=r(17),a=r(14),o=r(0),s=r(4),u=r(1);o(o.S,"Reflect",{get:function t(e,r){var o,c,f=arguments.length<3?e:arguments[2];return u(e)===f?e[r]:(o=n.f(e,r))?a(o,"value")?o.value:void 0!==o.get?o.get.call(f):void 0:s(c=i(e))?t(c,r,f):void 0}})},function(t,e,r){var n=r(16),i=r(0),a=r(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(a(t),e)}})},function(t,e,r){var n=r(0),i=r(17),a=r(1);n(n.S,"Reflect",{getPrototypeOf:function(t){return i(a(t))}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,r){var n=r(0),i=r(1),a=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return i(t),!a||a(t)}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{ownKeys:r(137)})},function(t,e,r){var n=r(0),i=r(1),a=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){i(t);try{return a&&a(t),!0}catch(t){return!1}}})},function(t,e,r){var n=r(8),i=r(16),a=r(17),o=r(14),s=r(0),u=r(32),c=r(1),f=r(4);s(s.S,"Reflect",{set:function t(e,r,s){var l,h,p=arguments.length<4?e:arguments[3],d=i.f(c(e),r);if(!d){if(f(h=a(e)))return t(h,r,s,p);d=u(0)}if(o(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=i.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=s,n.f(p,r,l)}else n.f(p,r,u(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},function(t,e,r){var n=r(0),i=r(79);i&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},function(t,e,r){"use strict";var n=r(0),i=r(55)(!0);n(n.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("includes")},function(t,e,r){"use strict";var n=r(0),i=r(138),a=r(9),o=r(6),s=r(10),u=r(92);n(n.P,"Array",{flatMap:function(t){var e,r,n=a(this);return s(t),e=o(n.length),r=u(n,0),i(r,n,n,e,0,1,t,arguments[1]),r}}),r(31)("flatMap")},function(t,e,r){"use strict";var n=r(0),i=r(138),a=r(9),o=r(6),s=r(21),u=r(92);n(n.P,"Array",{flatten:function(){var t=arguments[0],e=a(this),r=o(e.length),n=u(e,0);return i(n,e,e,r,0,void 0===t?1:s(t)),n}}),r(31)("flatten")},function(t,e,r){"use strict";var n=r(0),i=r(58)(!0);n(n.P,"String",{at:function(t){return i(this,t)}})},function(t,e,r){"use strict";var n=r(0),i=r(139),a=r(63),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);n(n.P+n.F*o,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,r){"use strict";var n=r(0),i=r(139),a=r(63),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);n(n.P+n.F*o,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,r){"use strict";r(45)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,r){"use strict";r(45)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,r){"use strict";var n=r(0),i=r(24),a=r(6),o=r(59),s=r(51),u=RegExp.prototype,c=function(t,e){this._r=t,this._s=e};r(86)(c,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),n(n.P,"String",{matchAll:function(t){if(i(this),!o(t))throw TypeError(t+" is not a regexp!");var e=String(this),r="flags"in u?String(t.flags):s.call(t),n=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return n.lastIndex=a(t.lastIndex),new c(n,e)}})},function(t,e,r){r(75)("asyncIterator")},function(t,e,r){r(75)("observable")},function(t,e,r){var n=r(0),i=r(137),a=r(15),o=r(16),s=r(90);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),u=o.f,c=i(n),f={},l=0;c.length>l;)void 0!==(r=u(n,e=c[l++]))&&s(f,e,r);return f}})},function(t,e,r){var n=r(0),i=r(140)(!1);n(n.S,"Object",{values:function(t){return i(t)}})},function(t,e,r){var n=r(0),i=r(140)(!0);n(n.S,"Object",{entries:function(t){return i(t)}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(10),o=r(8);r(7)&&n(n.P+r(66),"Object",{__defineGetter__:function(t,e){o.f(i(this),t,{get:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(10),o=r(8);r(7)&&n(n.P+r(66),"Object",{__defineSetter__:function(t,e){o.f(i(this),t,{set:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(66),"Object",{__lookupGetter__:function(t){var e,r=i(this),n=a(t,!0);do{if(e=s(r,n))return e.get}while(r=o(r))}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23),o=r(17),s=r(16).f;r(7)&&n(n.P+r(66),"Object",{__lookupSetter__:function(t){var e,r=i(this),n=a(t,!0);do{if(e=s(r,n))return e.set}while(r=o(r))}})},function(t,e,r){var n=r(0);n(n.P+n.R,"Map",{toJSON:r(141)("Map")})},function(t,e,r){var n=r(0);n(n.P+n.R,"Set",{toJSON:r(141)("Set")})},function(t,e,r){r(67)("Map")},function(t,e,r){r(67)("Set")},function(t,e,r){r(67)("WeakMap")},function(t,e,r){r(67)("WeakSet")},function(t,e,r){r(68)("Map")},function(t,e,r){r(68)("Set")},function(t,e,r){r(68)("WeakMap")},function(t,e,r){r(68)("WeakSet")},function(t,e,r){var n=r(0);n(n.G,{global:r(2)})},function(t,e,r){var n=r(0);n(n.S,"System",{global:r(2)})},function(t,e,r){var n=r(0),i=r(20);n(n.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clamp:function(t,e,r){return Math.min(r,Math.max(e,t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,r){var n=r(0),i=180/Math.PI;n(n.S,"Math",{degrees:function(t){return t*i}})},function(t,e,r){var n=r(0),i=r(143),a=r(122);n(n.S,"Math",{fscale:function(t,e,r,n,o){return a(i(t,e,r,n,o))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{iaddh:function(t,e,r,n){var i=t>>>0,a=r>>>0;return(e>>>0)+(n>>>0)+((i&a|(i|a)&~(i+a>>>0))>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{isubh:function(t,e,r,n){var i=t>>>0,a=r>>>0;return(e>>>0)-(n>>>0)-((~i&a|~(i^a)&i-a>>>0)>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{imulh:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n,o=r>>16,s=n>>16,u=(o*a>>>0)+(i*a>>>16);return o*s+(u>>16)+((i*s>>>0)+(65535&u)>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,r){var n=r(0),i=Math.PI/180;n(n.S,"Math",{radians:function(t){return t*i}})},function(t,e,r){var n=r(0);n(n.S,"Math",{scale:r(143)})},function(t,e,r){var n=r(0);n(n.S,"Math",{umulh:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n,o=r>>>16,s=n>>>16,u=(o*a>>>0)+(i*a>>>16);return o*s+(u>>>16)+((i*s>>>0)+(65535&u)>>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,r){"use strict";var n=r(0),i=r(18),a=r(2),o=r(52),s=r(130);n(n.P+n.R,"Promise",{finally:function(t){var e=o(this,i.Promise||a.Promise),r="function"==typeof t;return this.then(r?function(r){return s(e,t()).then(function(){return r})}:t,r?function(r){return s(e,t()).then(function(){throw r})}:t)}})},function(t,e,r){"use strict";var n=r(0),i=r(99),a=r(129);n(n.S,"Promise",{try:function(t){var e=i.f(this),r=a(t);return(r.e?e.reject:e.resolve)(r.v),e.promise}})},function(t,e,r){var n=r(28),i=r(1),a=n.key,o=n.set;n.exp({defineMetadata:function(t,e,r,n){o(t,e,i(r),a(n))}})},function(t,e,r){var n=r(28),i=r(1),a=n.key,o=n.map,s=n.store;n.exp({deleteMetadata:function(t,e){var r=arguments.length<3?void 0:a(arguments[2]),n=o(i(e),r,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var u=s.get(e);return u.delete(r),!!u.size||s.delete(e)}})},function(t,e,r){var n=r(28),i=r(1),a=r(17),o=n.has,s=n.get,u=n.key,c=function(t,e,r){if(o(t,e,r))return s(t,e,r);var n=a(e);return null!==n?c(t,n,r):void 0};n.exp({getMetadata:function(t,e){return c(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,r){var n=r(133),i=r(142),a=r(28),o=r(1),s=r(17),u=a.keys,c=a.key,f=function(t,e){var r=u(t,e),a=s(t);if(null===a)return r;var o=f(a,e);return o.length?r.length?i(new n(r.concat(o))):o:r};a.exp({getMetadataKeys:function(t){return f(o(t),arguments.length<2?void 0:c(arguments[1]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.get,o=n.key;n.exp({getOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.keys,o=n.key;n.exp({getOwnMetadataKeys:function(t){return a(i(t),arguments.length<2?void 0:o(arguments[1]))}})},function(t,e,r){var n=r(28),i=r(1),a=r(17),o=n.has,s=n.key,u=function(t,e,r){if(o(t,e,r))return!0;var n=a(e);return null!==n&&u(t,n,r)};n.exp({hasMetadata:function(t,e){return u(t,i(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.has,o=n.key;n.exp({hasOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=r(10),o=n.key,s=n.set;n.exp({metadata:function(t,e){return function(r,n){s(t,e,(void 0!==n?i:a)(r),o(n))}}})},function(t,e,r){var n=r(0),i=r(98)(),a=r(2).process,o="process"==r(20)(a);n(n.G,{asap:function(t){var e=o&&a.domain;i(e?e.bind(t):t)}})},function(t,e,r){"use strict";var n=r(0),i=r(2),a=r(18),o=r(98)(),s=r(5)("observable"),u=r(10),c=r(1),f=r(39),l=r(41),h=r(11),p=r(40),d=p.RETURN,v=function(t){return null==t?void 0:u(t)},g=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},b=function(t,e){c(t),this._c=void 0,this._o=t,t=new k(this);try{var r=e(t),n=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){n.unsubscribe()}:u(r),this._c=r)}catch(e){return void t.error(e)}y(this)&&g(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var k=function(t){this._s=t};k.prototype=l({},{next:function(t){var e=this._s;if(!y(e)){var r=e._o;try{var n=v(r.next);if(n)return n.call(r,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var r=e._o;e._o=void 0;try{var n=v(r.error);if(!n)throw t;t=n.call(r,t)}catch(t){try{g(e)}finally{throw t}}return g(e),t},complete:function(t){var e=this._s;if(!y(e)){var r=e._o;e._o=void 0;try{var n=v(r.complete);t=n?n.call(r,t):void 0}catch(t){try{g(e)}finally{throw t}}return g(e),t}}});var w=function(t){f(this,w,"Observable","_f")._f=u(t)};l(w.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(a.Promise||i.Promise)(function(r,n){u(t);var i=e.subscribe({next:function(e){try{return t(e)}catch(t){n(t),i.unsubscribe()}},error:n,complete:r})})}}),l(w,{from:function(t){var e="function"==typeof this?this:w,r=v(c(t)[s]);if(r){var n=c(r.call(t));return n.constructor===e?n:new e(function(t){return n.subscribe(t)})}return new e(function(e){var r=!1;return o(function(){if(!r){try{if(p(t,!1,function(t){if(e.next(t),r)return d})===d)return}catch(t){if(r)throw t;return void e.error(t)}e.complete()}}),function(){r=!0}})},of:function(){for(var t=0,e=arguments.length,r=new Array(e);t<e;)r[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return o(function(){if(!e){for(var n=0;n<r.length;++n)if(t.next(r[n]),e)return;t.complete()}}),function(){e=!0}})}}),h(w.prototype,s,function(){return this}),n(n.G,{Observable:w}),r(38)("Observable")},function(t,e,r){var n=r(2),i=r(0),a=r(63),o=[].slice,s=/MSIE .\./.test(a),u=function(t){return function(e,r){var n=arguments.length>2,i=!!n&&o.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,r)}};i(i.G+i.B+i.F*s,{setTimeout:u(n.setTimeout),setInterval:u(n.setInterval)})},function(t,e,r){var n=r(0),i=r(97);n(n.G+n.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,r){for(var n=r(94),i=r(34),a=r(12),o=r(2),s=r(11),u=r(46),c=r(5),f=c("iterator"),l=c("toStringTag"),h=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,y=d[v],m=p[y],b=o[y],k=b&&b.prototype;if(k&&(k[f]||s(k,f,h),k[l]||s(k,l,y),u[y]=h,m))for(g in n)k[g]||a(k,g,n[g],!0)}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",s=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag",c="object"==typeof t,f=e.regeneratorRuntime;if(f)c&&(t.exports=f);else{(f=e.regeneratorRuntime=c?t.exports:{}).wrap=k;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},g={};g[o]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(I([])));m&&m!==n&&i.call(m,o)&&(g=m);var b=A.prototype=x.prototype=Object.create(g);S.prototype=b.constructor=A,A.constructor=S,A[u]=S.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===S||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,A):(t.__proto__=A,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},T(M.prototype),M.prototype[s]=function(){return this},f.AsyncIterator=M,f.async=function(t,e,r,n){var i=new M(k(t,e,r,n));return f.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},T(b),b[u]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=I,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(_),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,i){return s.type="throw",s.arg=t,e.next=n,i&&(e.method="next",e.arg=r),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var u=i.call(o,"catchLoc"),c=i.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var a=n;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),_(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;_(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:I(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),v}}}function k(t,e,r,n){var i=e&&e.prototype instanceof x?e:x,a=Object.create(i.prototype),o=new P(n||[]);return a._invoke=function(t,e,r){var n=l;return function(i,a){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===i)throw a;return N()}for(r.method=i,r.arg=a;;){var o=r.delegate;if(o){var s=E(o,r);if(s){if(s===v)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=w(t,e,r);if("normal"===u.type){if(n=r.done?d:h,u.arg===v)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=d,r.method="throw",r.arg=u.arg)}}}(t,r,o),a}function w(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function S(){}function A(){}function T(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function M(t){var e;this._invoke=function(r,n){function a(){return new Promise(function(e,a){!function e(r,n,a,o){var s=w(t[r],t,n);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){e("next",t,a,o)},function(t){e("throw",t,a,o)}):Promise.resolve(c).then(function(t){u.value=t,a(u)},o)}o(s.arg)}(r,n,e,a)})}return e=e?e.then(a,a):a()}}function E(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,E(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=w(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,v):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function I(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,a=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return a.next=a}}return{next:N}}function N(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){r(351),t.exports=r(18).RegExp.escape},function(t,e,r){var n=r(0),i=r(352)(/[\\^$*+?.()|[\]{}]/g,"\\$&");n(n.S,"RegExp",{escape:function(t){return i(t)}})},function(t,e){t.exports=function(t,e){var r=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,r)}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0U6L3dvcmtzcGFjZS9naXRfd29ya3NwYWNlL2NhbmlzLWNvbXBpbGVyL3NyYy9UaW1pbmdTcGVjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvanNtb3Zpbi9iaW4vanNtb3Zpbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3NyYy9FOi93b3Jrc3BhY2UvZ2l0X3dvcmtzcGFjZS9jYW5pcy1jb21waWxlci9zcmMvdXRpbC9HbG9iYWxWYXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvRTovd29ya3NwYWNlL2dpdF93b3Jrc3BhY2UvY2FuaXMtY29tcGlsZXIvc3JjL0FuaW1hdGlvblNwZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvRTovd29ya3NwYWNlL2dpdF93b3Jrc3BhY2UvY2FuaXMtY29tcGlsZXIvc3JjL3V0aWwvVXRpbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2pzbW92aW4vYmluL3BhdGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy91dWlkL3Y0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvanNtb3Zpbi9iaW4vaGVscGVyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3NyYy9FOi93b3Jrc3BhY2UvZ2l0X3dvcmtzcGFjZS9jYW5pcy1jb21waWxlci9zcmMvQ2FuaXNTcGVjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvc3JjL0U6L3dvcmtzcGFjZS9naXRfd29ya3NwYWNlL2NhbmlzLWNvbXBpbGVyL3NyYy9DaGFydFNwZWMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9qc21vdmluL2Jpbi9lYXNpbmcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9zdmctcGF0aC1wYXJzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC9zcmMvRTovd29ya3NwYWNlL2dpdF93b3Jrc3BhY2UvY2FuaXMtY29tcGlsZXIvc3JjL0ZhY2V0U3BlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3NyYy9FOi93b3Jrc3BhY2UvZ2l0X3dvcmtzcGFjZS9jYW5pcy1jb21waWxlci9zcmMvQWN0aW9uU3BlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0L3NyYy9FOi93b3Jrc3BhY2UvZ2l0X3dvcmtzcGFjZS9jYW5pcy1jb21waWxlci9zcmMvR3JvdXBpbmdTcGVjLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNjYWxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9qc21vdmluL2Jpbi9sYXllci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2pzbW92aW4vYmluL3JlbmRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL3N2Zy1wYXRoLXBhcnNlci9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmctYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaWFkZGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zaWduYml0LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vY2FuaXNfdG9vbGtpdC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzIiwid2VicGFjazovL2NhbmlzX3Rvb2xraXQvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly9jYW5pc190b29sa2l0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwiYSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImNyZWF0ZURlc2MiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsInRhZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJsZW5ndGgiLCJJT2JqZWN0IiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiYiIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJzbGljZSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwibWV0aG9kIiwiYXJnIiwidmFsdWVPZiIsIktFWSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2Iiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCJpdGVyIiwiY29uY2F0IiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsImZyb20iLCJNYXAiLCJzaGFyZWQiLCJnZXRPckNyZWF0ZU1ldGFkYXRhTWFwIiwidGFyZ2V0S2V5IiwidGFyZ2V0TWV0YWRhdGEiLCJrZXlNZXRhZGF0YSIsIk1ldGFkYXRhS2V5IiwibWV0YWRhdGFNYXAiLCJNZXRhZGF0YVZhbHVlIiwiXyIsIk1FVEEiLCJzZXREZXNjIiwiaWQiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiVU5TQ09QQUJMRVMiLCJiaXRtYXAiLCJweCIsInJhbmRvbSIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJtYXgiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwiY29udGVudFdpbmRvdyIsImRvY3VtZW50Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiX3QiLCJkZWYiLCJzdGF0IiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJUaW1pbmdTcGVjIiwiX29mZnNldCIsIl9yZWZlcmVuY2UiLCJ0aW1pbmdSZWYiLCJwcmV2aW91c1N0YXJ0IiwicmVmU3RyIiwicHJldmlvdXNFbmQiLCJhYnNvbHV0ZSIsImNvbnN0YW50cyIsInN0YXR1cyIsImluZm8iLCJtc2ciLCJlcnJTcGVjIiwibWluT2Zmc2V0IiwibGFzdFN0YXJ0IiwibGFzdEVuZCIsImFsbEl0ZW1zU3RhcnQiLCJkb21NYXJrcyIsInNpemUiLCJpdGVtU3RhcnQiLCJyZWZlcmVuY2UiLCJpdGVtc1N0YXJ0IiwibWluQXR0clZhbHVlIiwiYXR0cnMiLCJtYXJrSWQiLCJwYXJzZUZsb2F0IiwiZmllbGQiLCJvZmZzZXRWYWx1ZSIsIm9mZnNldFJlZiIsInRtcE9mZnNldFJlZlN0ciIsInRyYW5zUmVmIiwib2ZzdCIsIkZSQU1FX1JBVEUiLCJkYXRhQmluZEF0dHJzIiwiY29weXJpZ2h0IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIkQiLCJfbGF5ZXIiLCJMYXllckZhY3RvcnkiLCJfZWFzaW5nIiwiRWFzaW5nRmFjdG9yeSIsIl9wYXRoIiwiUGF0aE1ha2VyIiwiTWFza1R5cGUiLCJvYmoiLCJfdiIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiSlNNb3ZpbiIsImZwcyIsIndpZHRoIiwiaGVpZ2h0IiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydHkiLCJmciIsImgiLCJkZGQiLCJsYXllcnMiLCJhc3NldHMiLCJmb250cyIsImlwIiwib3AiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJkb21MYXllck9yQXNzZXRJZCIsImxheWVyIiwiU1ZHR3JhcGhpY3NFbGVtZW50IiwiaGllcmFyY2h5IiwicmVmIiwic3BsaWNlIiwibWFza09yRG9tIiwibGF5ZXJSZWZPckluZGV4IiwibGF5ZXJSZWYiLCJsYXllckluZGV4IiwibWFza0xheWVyIiwibWFza1R5cGUiLCJBbHBoYSIsIkpTTW92aW5MYXllciIsInR0IiwiRXJyb3IiLCJsYXllclJlZnMiLCJfdGhpcyIsImlubmVySW5kZXgiLCJtYXNrIiwibGF5ZXJXcmFwcGVyIiwicmVmSWQiLCJtYXhUaW1lIiwidW5pZm9ybSIsIkpTT04iLCJwYXJzZSIsInRvSlNPTiIsInN0cmluZ2lmeSIsImdsb2JhbFZhciIsImpzTW92aW4iLCJtYXJrTGF5ZXJzIiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlzQXJyYXkiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiTUFUQ0giLCJpc1JlZ0V4cCIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJhcnIiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImZvck9mIiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJjb21tb24iLCJJU19XRUFLIiwiQURERVIiLCJmaXhNZXRob2QiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiSyIsIl9fZGVmaW5lU2V0dGVyX18iLCJDT0xMRUNUSU9OIiwiQSIsImNiIiwibWFwRm4iLCJuZXh0SXRlbSIsIkFuaW1hdGlvbiIsImNoYXJ0SWR4Iiwic2VsZWN0b3IiLCJncm91cGluZyIsImFjdGlvbnMiLCJhbmltYXRpb25TdGFydFRpbWUiLCJhbmltYXRpb25FbmRUaW1lIiwiYWxsTWFya0FuaSIsIndob2xlRW5kVGltZSIsInN0YXJ0VGltZSIsInRvdGFsRHVyYXRpb24iLCJjb25zb2xlIiwibG9nIiwiaXRlbSIsImFjdGlvbkF0dHJzIiwiZHVyYXRpb24iLCJhdHRyTmFtZSIsInRtcEFjdGlvblNwZWMiLCJ0YXJnZXRNYXJrIiwiZ2V0RWxlbWVudEJ5SWQiLCJhY3Rpb25UYXJnZXRzIiwibWFyayIsInN0YXJ0RnJhbWUiLCJlbmRGcmFtZSIsImF0dHIiLCJhbmltYXRpb25UeXBlIiwidGFyZ2V0QW5pbWF0aW9uVHlwZSIsImN1c3RvbSIsInRtcEJib3giLCJnZXRCb3VuZGluZ0JveCIsInNldFN0YXRpY1Byb3BlcnR5IiwidGFnTmFtZSIsImxvdHRpZUNoYW5uZWxzIiwidHJhbnNsYXRlVG9Mb3R0aWVDaGFubmVsIiwidG8iLCJmcm9tVmFsdWUiLCJ0b1ZhbHVlIiwiaiIsImxjIiwiZnJvbVBvc2kiLCJ0b1Bvc2kiLCJDYW5pc1V0aWwiLCJ0cmFuc0RUb0xvdHRpZVNwZWMiLCJzZXRBbmltYXRhYmxlUHJvcGVydHkiLCJ0cmFuc1RvTG90dGllQWN0aW9uIiwiZWFzaW5nIiwidG9Mb3R0aWVSR0JBIiwiZmluYWxTdGF0dXMiLCJ3aXBlIiwibW92ZSIsImFwcGVhciIsImJvdW5kaW5nQm94IiwiY2lyY2xlIiwiZWxsaXBzZSIsIndoZWVsIiwicGF0aE9mZnNldCIsImdldFBhdGhPZmZzZXQiLCJnZXRBdHRyaWJ1dGUiLCJ0bXBPZmZzZXRYIiwidG1wT2Zmc2V0WSIsInRtcFN0YXJ0QW5nbGUiLCJ0bXBFbmRBbmdsZSIsIlBJIiwiYWRkTWFzayIsImVycm9yIiwiZnJhbWVUaW1lIiwiYW5pbWF0aW9ucyIsInJlcGxhY2VPZmZzZXRDb25zdCIsInJlcGxhY2VEZWxheUNvbnN0IiwicmVwbGFjZUR1cmF0aW9uQ29uc3QiLCJhbmltYXRpb25Kc29uIiwidXNlZENoYW5nZWRBdHRycyIsInVwZGF0aW5nIiwiaW5pdEdyb3VwaW5nIiwiZWZmZWN0cyIsImFjdGlvbkpzb24iLCJ2aXNBdHRyQWN0aW9uSnNvbiIsInZpc0F0dHJBY3Rpb25Kc29uQXJyIiwidHJhbnNUb1Zpc3VhbEF0dHJBY3Rpb24iLCJkYXRhVHJhbnMiLCJ0bXBBY3Rpb24iLCJpbml0QWN0aW9uIiwibWFya0lkcyIsImxhc3RBbmltYXRpb24iLCJ0aW1lIiwiZHVyYXRpb25BdHRyVmFsdWVzIiwiYWN0aW9uIiwidG1wQXR0clZhbHVlcyIsImRhdHVtIiwibWluRHVyYXRpb24iLCJjYWxBY3Rpb25EdXJhdGlvbiIsImFjdGlvbnNEdXJhdGlvbnMiLCJtaW5WYWx1ZUVhY2hBdHRyIiwicHJvY2Vzc2VkQWN0aW9ucyIsIm1hcmtzSW5PcmRlciIsImFycmFuZ2VPcmRlciIsImZyYW1lcyIsIm1hcmtBbmkiLCJ2QXR0ciIsInRtcE9iaiIsInZpc3VhbEF0dHJzIiwic3FydCIsInBvdyIsImNhbFRpbWVXaXRoVHJlZSIsImZyYW1lc01hcmsiLCJ0bXBBbGxTdGFydCIsInRpbWVEaWZmIiwiY2FsT2Zmc2V0VGltZSIsImNoZWNrVmFsaWRQcm9wIiwiZnJhbWVUaW1lUG9pbnQiLCJvZmZzZXRTdGFydCIsImN1cnJlbnRTdGFydFRpbWUiLCJjdXJyZW50RW5kVGltZSIsInRtcEVuZFRpbWUiLCJ0aW1lRW5kIiwiZWFzZUZ1bmNzIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlT3V0Qm91bmNlIiwib2JqVHlwZSIsImRlZXBDbG9uZSIsImN1cnJlbnRUaW1lUyIsInBhcnNlSW50IiwiY3VycmVudFRpbWVNUyIsImNvbG9yIiwiY29sb3JOYW1lcyIsInRtcFN0ciIsInN1YnN0ciIsInJnYiIsInN1YnN0cmluZyIsIkhFWDJSR0IiLCJoZXgiLCJnIiwiY29sb3IyUkdCIiwibm9kZSIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJub2RlVmFsdWUiLCJhdHRyaWJ1dGVzIiwiY3JlYXRlRWxlbWVudE5TIiwiYXR0clZhbHVlIiwic2V0QXR0cmlidXRlTlMiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUNvbW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZURvY3VtZW50IiwiY3JlYXRlRG9jdW1lbnRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImRpc2NyZXRpemVEIiwiZmlsbENvbG9yIiwicmVzdWx0R3JvdXAiLCJyZWciLCJncm91cCIsIngiLCJjb21tYW5kIiwicGFyYW1ldGVycyIsImNvbnZlcnRDb2xvciIsImxpbmVzIiwicHJldiIsInZhbGlkIiwiZmlyc3RQb2ludCIsInNlY29uZFBvaW50IiwiY2lyY2xlcyIsInRtcCIsInN2Z0FyY1RvQ2VudGVyUGFyYW0iLCJjeCIsImN5IiwicngiLCJyeSIsInJvdGF0ZSIsImFicyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImNsb2Nrd2lzZSIsInJhZGl1cyIsInV4IiwidXkiLCJ2eCIsInZ5IiwiZG90IiwibW9kIiwicmFkIiwiYWNvcyIsIngxIiwieTEiLCJwaGkiLCJmQSIsImZTIiwieDIiLCJ5MiIsImRlbHRhQW5nbGUiLCJQSXgyIiwic19waGkiLCJzaW4iLCJjX3BoaSIsImNvcyIsImhkX3giLCJoZF95IiwiaHNfeCIsImhzX3kiLCJ4MV8iLCJ5MV8iLCJsYW1iZGEiLCJyeHJ5Iiwicnh5MV8iLCJyeXgxXyIsInN1bV9vZl9zcSIsImNvZSIsImN4XyIsImN5XyIsInhjcjEiLCJ4Y3IyIiwieWNyMSIsInljcjIiLCJyYWRpYW4iLCJmTW9kZSIsInRNb2RlIiwibXIiLCJzdGFydHNXaXRoIiwibWF0Y2giLCJwYWRTdGFydCIsImNlbnRlclgiLCJjZW50ZXJZIiwiYW5nbGVJblJhZGlhbnMiLCJ5IiwiaW5uZXJSYWRpdXMiLCJvdXR0ZXJSYWRpdXMiLCJsYXJnZUFyY0ZsYWciLCJzdGFydDEiLCJwb2xhclRvQ2FydGVzaWFuIiwiZW5kMSIsInN0YXJ0MiIsImVuZDIiLCJpc1JpbmciLCJkb21Ob2RlIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJ0bXBEaXYiLCJmaXJzdENoaWxkIiwidHgiLCJ0eSIsImhhc1Bvc2kiLCJzZXRBdHRyaWJ1dGUiLCJyZXN1bHRDbWQiLCJzZXRQYXRoRFZhbHVlIiwidG1wUGF0aCIsInBhdGhTdGVwTGVuIiwiZ2V0VG90YWxMZW5ndGgiLCJkaXNjcml0UGF0aCIsInRtcFBudCIsImdldFBvaW50QXRMZW5ndGgiLCJwYXRoRGF0YVdpdGhUeXBlIiwicGF0aERhdGEiLCJwYXRoRGF0YVNlcmllcyIsInBhcnNlU1ZHIiwicGF0aE1ha2VyIiwicGF0aERhdGFJdGVtIiwiY29kZSIsIm1vdmVUbyIsImxpbmVUbyIsImxpbmVUb1JlbGF0aXZlIiwiaG9yaXpvbnRhbFRvIiwiaG9yaXpvbnRhbFRvUmVsYXRpdmUiLCJ2ZXJ0aWNhbFRvIiwidmVydGljYWxUb1JlbGF0aXZlIiwiY3ViaWNCZXppZXJDdXJ2ZVRvIiwiY3ViaWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUiLCJxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvIiwicXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlIiwiYXJjVG8iLCJ4QXhpc1JvdGF0aW9uIiwibGFyZ2VBcmMiLCJzd2VlcCIsImFyY1RvUmVsYXRpdmUiLCJjbG9zZVBhdGgiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvc2lPZmZzZXQiLCJwbSIsInJlc2V0IiwiZGlmZkNtZHMiLCJjbWRSZWdFeHAiLCJjbWRzIiwiZmlyc3RDbWROYW1lIiwicmVzZXRYIiwicmVzZXRZIiwiZmlyc3RDbWRWYWx1ZXMiLCJjbWROYW1lIiwiY21kVmFsdWUiLCJjYWxOdW1UcmFucyIsIm51bXMiLCJuaSIsIm51bXMyIiwiYW51bXMiLCJhbnVtczIiLCJjdXJyZW50Q21kSWR4IiwicmVzZXRWYWwiLCJ0VmFsIiwiZGlmZkNtZElkeHMiLCJmbGFnIiwiY21kSWR4Iiwic3RhcnREIiwiZW5kRCIsInJhdGlvIiwic3RhcnREaXNEIiwiZW5kRGlzRCIsImZyb21TdGFydEFuZ2xlIiwiZnJvbUVuZEFuZ2xlIiwidG9TdGFydEFuZ2xlIiwidG9FbmRBbmdsZSIsImludGVycG9sYXRlRm4iLCJ2YWxpZEFuZ2xlIiwibWluaW1hbEFuZ2xlIiwiaW50ZXJwb2xhdGUiLCJtYXJrU3RhdHVzIiwic3RhdHVzQXJyIiwidG1wRFJlY29yZGVyIiwiY29tcGFyZUQiLCJkQXJyIiwiZmlyc3REIiwiZmlyc3REQ21kcyIsInRtcEQiLCJ0bXBEQ21kcyIsImRpZmZBdHRySWR4cyIsImZpcnN0RENtZFZhbHVlcyIsInRtcERDbWRWYWx1ZSIsImZpcnN0RENtZFZhbHVlIiwidG1wRENtZFZhbHVlcyIsImhhc0ZsYWciLCJTZXQiLCJkb20iLCJ0ciIsInNjYWxlU3RyIiwidHJhbnNTdHIiLCJ0cmFuc1Bvc2lTdHIiLCJzY2FsZU51bVN0ciIsInRyYW5zTnVtcyIsInNjYWxlTnVtIiwicHJvcE5hbWUiLCJWaWV3cG9ydCIsImNoYXJ0V2lkdGgiLCJjaGFydEhlaWdodCIsIkFzc2V0VGVtcGxhdGUiLCJ2aXN1YWxQcm9wcyIsImFuaW1hdGVQcm9wcyIsImpzTW92aW5MYXllcklkeCIsImNhbmRpZGF0ZUF0IiwiYXQiLCJjb21wYXJlVmlzdWFsUHJvcHMiLCJwMiIsInNhZmVQcm9wcyIsImRpZmZlcmVudEtleXMiLCJrIiwicmVtb3ZlTnVtUmVnRXhwIiwiX3N2Z1BhdGhQYXJzZXIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIkluZmluaXR5IiwiYW5nbGUiLCJsYXJnZV9hcmNfZmxhZyIsInN3ZWVwX2ZsYWciLCJyZWN1cnNpdmUiLCJ4eSIsIl8xMjAiLCJmMSIsImYyIiwicngyIiwicnkyIiwiYXNpbiIsImRmIiwiZjJvbGQiLCJ4Mm9sZCIsInkyb2xkIiwiYTJjIiwiYzEiLCJzMSIsImMyIiwiczIiLCJ0YW4iLCJoeCIsImh5IiwibTEiLCJtMiIsIm0zIiwibTQiLCJuZXdyZXMiLCJpaSIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJwMCIsInAzIiwibXVsdGkiLCJfbGVuIiwib3JkZXIwIiwiX2tleSIsIm9yZGVyMSIsImNhbGN1bGF0ZUhpZ2hseU9yZGVyIiwib3JkZXIyIiwib3JkZXIzIiwicGF0aFJlYWR5IiwicGF0aFN0YXJ0IiwicGF0aENoYWluIiwicGF0aCIsInVwZGF0ZVhZIiwiYzF4IiwiYzF5IiwiYzJ4IiwiYzJ5IiwiY2FsY3VsYXRlQmV6aWVyTWluTWF4Iiwic3dlZXBGbGFnIiwiY1NlcmllcyIsImlvdkxpc3QiLCJwYXRoUmVmIiwicG9wIiwiX3RoaXMyIiwibW92ZVRvUmVsYXRpdmUiLCJfdGhpczMiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJjb3B5UGF0aCIsIm9BcnJheSIsImlBcnJheSIsInhBcnJheSIsInlBcnJheSIsInN0ZXBSYXRpbyIsInhTcGxpdEFycmF5IiwiY2FsY3VsYXRlQmV6aWVyU3BsaXQiLCJ5U3BsaXRBcnJheSIsIl9wMHgiLCJfcDF4Iiwic2hpZnQiLCJfcDN4IiwiX3AyeCIsIl9wMHkiLCJfcDF5IiwiX3AzeSIsIl9wMnkiLCJwMHgiLCJwMXgiLCJwM3giLCJwMngiLCJwMHkiLCJwMXkiLCJwM3kiLCJwMnkiLCJybmciLCJieXRlc1RvVXVpZCIsIm9wdGlvbnMiLCJidWYiLCJybmRzIiwiY2FsY3VsYXRlQmFzZVRyYW5zZm9ybSIsImdldFNjcmVlbkNUTSIsImludmVyc2UiLCJtdWx0aXBseSIsImdyZWF0ZXN0Q29tbW9uRGl2aXNvciIsInN2Z1Jvb3QiLCJwYXJlbnRFbGVtZW50IiwiYmFzZUJveCIsInJlZkJCb3giLCJnZXRCQm94IiwiZ2V0TGVhZk5vZGVzIiwibWFzdGVyIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJlbGVtIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkTm9kZXMiLCJnZXRCYXNlbGluZUhlaWdodCIsImdldENvbnRleHQiLCJmb250U2V0dGluZ3MiLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udCIsIm1lYXN1cmVUZXh0IiwiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwiZW5jb2RlTGluZUNhcCIsImVuY29kZUxpbmVKb2luIiwiZW5jb2RlVGV4dEFuY2hvciIsImxlYXN0Q29tbW9uTXVsdGlwbGUiLCJpcyIsIndrc0V4dCIsIiRTeW1ib2wiLCJkb2N1bWVudEVsZW1lbnQiLCJjaGVjayIsInNldFByb3RvdHlwZU9mIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJjb3VudCIsInNpZ24iLCIkZXhwbTEiLCJleHBtMSIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwic2VhcmNoU3RyaW5nIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJvcmlnaW5hbCIsImVuZFBvcyIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwibGFzdEluZGV4IiwicmVDb3B5IiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImludm9rZSIsImh0bWwiLCJjZWwiLCJwcm9jZXNzIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJhcmdzIiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJQcm9taXNlIiwiaXNOb2RlIiwiaGVhZCIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsInN0YW5kYWxvbmUiLCJyZXNvbHZlIiwicHJvbWlzZSIsInRoZW4iLCJ0b2dnbGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInRhc2siLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlamVjdCIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiQ2FuaXNTcGVjIiwiY3VycmVudFNwZWMiLCJjYW5pc09iaiIsIl9jb25zdGFudHMiLCJjaGFydFNwZWNzIiwiZmFjZXQiLCJfYW5pbWF0aW9ucyIsImhhc0Vycm9yIiwic3BlYyIsImRpZmZDaGFydCIsImNoYXJ0UHJlUHJvY2Vzc2luZyIsImNoYXJ0cyIsImNoYXJ0TmFtZSIsImNoYXJ0VHlwZSIsIkNIQVJUX1VSTCIsInRtcENoYXJ0Iiwidmlld3MiLCJsb2FkQ2hhcnRzIiwic2V0Vmlld3BvcnQiLCJ2aWV3cG9ydCIsInJlbW92ZVRyYW5zQW5kTWVyZ2UiLCJzdmdDaGFydCIsImNsZWFyTGF5ZXJzIiwiYWRkTG90dGllTWFya0xheWVycyIsImNoYXJzdCIsImRhdGFNYXJrRGF0dW0iLCJub25EYXRhTWFya0RhdHVtIiwiY2hhcnRVbmRlcnN0YW5kaW5nIiwibGVnYWxBdHRycyIsImxlbjIiLCJ0bXBWYWx1ZSIsImVyclNwZWNTdHIiLCJjaGVja0F0dHJzIiwiY2hlY2tHcm91cGluZ1NwZWMiLCJhY3Rpb25UeXBlcyIsImVhc2luZ1R5cGUiLCJncm91cGluZ1NwZWMiLCJlcnJTdHIiLCJzb3J0QXR0cnMiLCJjaGVja1NwZWMiLCJyZXNldEFsbCIsInNldEZyYW1lUmF0ZSIsImNvbXBhcmVTcGVjIiwicHJlcHJvY2Vzc0NoYXJ0cyIsImFuaUlkeCIsInRtcENvbnRhaW5lciIsImJvZHkiLCJvdXRlckhUTUwiLCJtYXJrcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjaGFuZ2VkQXR0cnMiLCJhbmltYXRpb24iLCJ0cmFuc2xhdGUiLCJyZXBsYWNlQ29uc3RhbnRzIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJtYXJrSlNPTiIsInRyYW5zZm9ybWVkQXR0cnMiLCJkaXNjcmV0aXplUGF0aCIsInRmQXR0cnNEYXRhS2V5cyIsInRBdHRyIiwidG9ET00iLCJ0bXBEb21BdHRyT2JqIiwiYXR0ckFyciIsIm1hcmtEb20iLCJ0ZXh0Q29udGVudCIsImRhdGFEYXR1bUF0dHJWYWx1ZSIsImRpc2NEIiwiY2FsQW5pVGltZSIsImNhbGxiYWNrIiwicmVuZGVyQW5pbWF0aW9uIiwiZmluZEtleWZyYW1lcyIsIm1hcFRvTG90dGllU3BlYyIsImxvdHRpZUpTT04iLCJjb25BcnIiLCJhbmlKc29uIiwiaWR4QW5pSnNvbiIsInRtcEFuaSIsImNoYXJ0TnVtIiwidG1wQW5pSnNvbiIsInRtcElkeEFuaUpzb24iLCJDaGFydFNwZWMiLCJpbnB1dFNwZWNzIiwiaW5wdXRTcGVjIiwic3RhcnRJZHgiLCJlbmRJZHgiLCJ0bXBCbG9ja3MiLCJuYW1lQ2hhcnRzIiwibnVsbENoYXJ0cyIsImRlZmF1bHRXaWR0aCIsImRlZmF1bHRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9rU3RhdHVzIiwibG9jYXRpb24iLCJwcm90b2NvbCIsInN2Z0NvbnRlbnQiLCJvdmVycmlkZU1pbWVUeXBlIiwic2VuZCIsInJlc3BvbnNlVGV4dCIsInZpZXdCb3hOdW1zIiwiY2hpbGRyZW4iLCJ1bnNoaWZ0IiwiZmFjZXRWaWV3cyIsInJlbW92ZVRyYW5zaXRpb25zIiwibWVyZ2VDaGFydHMiLCJjaGFydHNUb0NvbWJpbmUiLCJ0bXBSZWNvcmRlciIsImNsb25lTm9kZSIsImNvbWJpbmVDaGFydHMiLCJmYWNldFR5cGUiLCJmYWNldE51bSIsInJlc3VsdENoYXJ0cyIsIm9yaVdpZHRoIiwib3JpSGVpZ2h0Iiwid2lkdGhBZnRlckZhY2V0IiwiaGVpZ2h0QWZ0ZXJGYWNldCIsInRtcENoYXJ0cyIsInZpZXdCb3hXIiwidmlld0JveEgiLCJjaGFydFRyYW5zRm9ybSIsImdldFRyYW5zZm9ybUF0dHJzIiwicm93IiwiY29sIiwidG1wTWFya3MiLCJpZE51bSIsImFkZCIsImNoYXJ0Q2hpbGRyZW4iLCJ0bXBEb20iLCJ0cmFuc2Zvcm1BdHRycyIsImFsbE1hcmtzIiwibWFya1RlbXBsZXRlcyIsImF0dHJOYW1lcyIsIm51bGxTdGF0dXMiLCJzdGF0dXNPYmoiLCJhdHRyTmFtZXNDb3B5IiwiY29tcGFyZVN0YXR1cyIsImZpbmREaWZmQ21kcyIsIm1hcmtTdHIiLCJ0YXJnZXRWYWx1ZSIsInJlc3VsdEQiLCJzdmdNYXJrIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwibGFzdENoaWxkIiwicXVlcnlTZWxlY3RvciIsImRhdGFUcmFuc0FyciIsInNpIiwidG1wU3RhdHVzIiwiYkJveGVzIiwiYkJveCIsInBhcmVudFRyYW5zIiwicGFyZW50Tm9kZSIsImlzTm9uRGF0YU1hcmsiLCJ0bXBEYXRhRGF0dW0iLCJwb3NpdGlvbiIsInRyYW5zU2hhcGUiLCJhZGRMYXllciIsIkNIQVJUX0NPTlRFTlQiLCJwYXJzZXJGdW5jdGlvbiIsIm1ha2VBYnNvbHV0ZSIsImNvbW1hbmRzIiwic3VicGF0aFN0YXJ0IiwicHJldkNtZCIsImNtZCIsIngwIiwieTAiLCJyZWxhdGl2ZSIsInRvVXBwZXJDYXNlIiwiRmFjZXRTcGVjIiwiX3R5cGUiLCJfdmlld3MiLCJmcmFtZVZpZXdzIiwicmFuZ2UiLCJyZWdlbmQiLCJyYW5nZVN0YXJ0TmFtZSIsInJhbmdlRW5kTmFtZSIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsIm1heExlbiIsImxhc3RJdGVtIiwibnVtRGlmZiIsIkFjdGlvblNwZWMiLCJlYXNlTGluZWFyIiwiX2R1cmF0aW9uIiwiYWN0aW9uSnNvbkFyciIsImNoYW5nZWRBdHRyIiwiZnJvbUFyciIsInRvQXJyIiwidHJhbnNBcnIiLCJ0bXBGcm9tSXRlbSIsInRtcFRvSXRlbSIsInRtcEZyb21QYXRoIiwidG1wVG9QYXRoIiwiZnJvbVBhdGhTdGVwTGVuIiwidG9QYXRoU3RlcExlbiIsImZyb21EaXNjcml0UGF0aCIsInRvRGlzY3JpdFBhdGgiLCJ0bXBGcm9tUG50IiwidG1wVG9QbnQiLCJwcmVPYmoiLCJ0cmFuc2l0aW9uIiwiZmFkZSIsImRpc2FwcGVhciIsImZhZGVPdXQiLCJncm93IiwiZGVncm93Iiwid2lwZUJvdHRvbSIsIkludmVydEFscGhhIiwid2lwZU91dEZyb21Ub3AiLCJ3aXBlVG9wIiwid2lwZU91dEZyb21Cb3R0b20iLCJ3aXBlTGVmdCIsIndpcGVPdXRGcm9tUmlnaHQiLCJ3aXBlUmlnaHQiLCJ3aXBlT3V0RnJvbUxlZnQiLCJjaXJjbGVPdXQiLCJ3aGVlbE91dCIsImFjdGlvbkFyciIsIndob2xlU3RhcnQiLCJ3aG9sZUVuZCIsImR1cmF0aW9uV2l0aEF0dHIiLCJ0bXBTdGFydE1hcCIsInRtcEVuZE1hcCIsIm1pc3Rha2UiLCJ0bXBTdGFydCIsIm1pblRtcFN0YXJ0IiwibWF4VG1wRW5kIiwidG1wRW5kIiwidG1wUmVzdWx0RHVyYXRpb24iLCJyZXN1bHREdXJhdGlvbnMiLCJ0bXBFeHRyYUR1cmF0aW9uIiwiZWFzaW5nTmFtZSIsImxpbmVhciIsInRtcEF0dHIiLCJ0cCIsImFsZXJ0IiwiZXMiLCJkcnRuIiwiem9vbSIsIkdyb3VwaW5nU3BlYyIsIl9ncm91cEJ5IiwiX2RlbGF5IiwiZGVmaW5lZEJ5SWQiLCJkZWxheSIsImdyb3VwaW5nSnNvbiIsImdyb3VwQnkiLCJvcmRlciIsImV4cHIiLCJncm91cFJlZiIsIm5vZGVJZCIsImdlbmVyYXRlVHJlZSIsInVwZGF0ZVRyZWUiLCJnZXRNYXJrT3JkZXIiLCJncm91cEJ5UmVmIiwic2FtZUdyb3VwaW5nIiwidG1wTm9kZSIsIm5vZGVzVGhpc0xldmVsIiwicmVmVmFsdWUiLCJzb3J0Tm9kZXMiLCJzcGVjU29ydCIsImFwcGVuZE51bSIsImFwcGVuZEZyYW1lIiwiaGFzU2luZ2xlTWFyayIsIm9yZGVyUmVmIiwibm9kZXNUaGlzTGV2ZWxBcnIiLCJvcmRlclR5cGUiLCJtYXJrSWQxIiwibWFya0lkMiIsIm9yZGVyUmVmVmFsdWUxIiwib3JkZXJSZWZWYWx1ZTIiLCJkYXR1bTEiLCJkYXR1bTIiLCJvcmRlclR5cGVzIiwiYXNjZW5kaW5nIiwiZGVzY2VuZGluZyIsInBhcmVudElkIiwibm9kZUlkeCIsIm5vZGVzTnVtIiwib3JkZXJlZE1hcmtzIiwibGFzdEdyb3VwU3RhcnQiLCJsYXN0R3JvdXBFbmQiLCJ0bXBNYXJrSWQiLCJnYiIsInRtcFJlZlN0ciIsImRseSIsIm5hbWVzIiwiZ2V0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZ09QUyIsIiRhc3NpZ24iLCJhc3NpZ24iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwicGFydEFyZ3MiLCJib3VuZCIsInVuIiwiJHBhcnNlSW50IiwiJHRyaW0iLCJ3cyIsInJhZGl4IiwiJHBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImxvZzFwIiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJyZXQiLCJtZW1vIiwiaXNSaWdodCIsImluYyIsImZvcmNlZCIsImZsYWdzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsInN0cm9uZyIsImVudHJ5IiwiZ2V0RW50cnkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJfZiIsIl9sIiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsIk5BVElWRV9XRUFLX01BUCIsIklTX0lFMTEiLCJBY3RpdmVYT2JqZWN0IiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsInVmc3RvcmUiLCIkV2Vha01hcCIsIiRoYXMiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJzcHJlYWRhYmxlIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpc0VudHJpZXMiLCJzY2FsZSIsImluTG93IiwiaW5IaWdoIiwib3V0TG93Iiwib3V0SGlnaCIsImNhbmlzIiwiZnJhbWVSYXRlIiwicmVuZGVyU3BlYyIsImluaXQiLCJyZW5kZXIiLCJleHBvcnRKU09OIiwiX3JlbmRlciIsIl9oZWxwZXIiLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9hcnIiLCJfbiIsIl9lIiwiX3MiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0IiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwic3ltIiwiX2NyZWF0ZUNsYXNzIiwiYW5jaG9yIiwidHJhbnNmb3JtIiwiZ2V0RGVmYXVsdFByb3BlcnR5Iiwic3RhdGljVmFsdWUiLCJyZWFkeVRvU2V0IiwiaWR4Iiwid3JhcCIsImV4aXN0S2V5ZnJhbWUiLCJwcmV2aW91c0tleWZyYW1lQ291bnQiLCJzaGFwZXMiLCJzaGFwZSIsImZpbmRQcm9wZXJ0eUNvbmZpZyIsImhhc1RyYW5zZm9ybSIsImNvbmZpZyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfb2JqZWN0U3ByZWFkIiwiZ3JvdXBTaGFwZXMiLCJiYXNlIiwia3MiLCJmaW5kT3JJbnNlcnRQcm9wZXJ0eUNvbmZpZyIsInRpbWVSYW5nZSIsInVwZGF0ZVRpbWVSYW5nZSIsIl90aGlzJGNvbW1vblByb3BlcnR5TTIiLCJjb21tb25Qcm9wZXJ0eU1hcHBpbmciLCJkb2MiLCJjb252ZXJ0VG9TdGF0aWNQcm9wZXJ0eSIsInN0YXJ0VmFsdWUiLCJlbmRWYWx1ZSIsInN0YXJ0TGluZUNvdW50IiwiZW5kTGluZUNvdW50IiwibmVlZENvcHkiLCJuZWVkTGVuZ3RoIiwiY29tbW9uTXVsdGlwbGUiLCJ1cHNhbXBsZSIsIl9tYXAyIiwiX3RoaXMkY29tbW9uUHJvcGVydHlNNCIsInRleHRQcm9wIiwidG1wU3RhcnRWYWx1ZSIsInRtcEVuZFZhbHVlIiwiY29udmVydFRvQW5pbWF0YWJsZVByb3BlcnR5IiwiYWRkS2V5ZnJhbWUiLCJjb29yZGluYXRlIiwicmVjdCIsInNyIiwiYW8iLCJnZW5lcmF0ZVRyYW5zZm9ybSIsInN0IiwiYm0iLCJ0b3AiLCJyZW5kZXJQbGFpbkdseXBoIiwiYXNzZXRMaXN0IiwiZm9udExpc3QiLCJkb21UeXBlIiwiU1ZHVGV4dEVsZW1lbnQiLCJTVkdJbWFnZUVsZW1lbnQiLCJTVkdHRWxlbWVudCIsImRvbUxlYXZlcyIsInByZWNvbXBMYXllciIsInByZUNvbXBBc3NldCIsInByZUNvbXBSZWZJZCIsIl9zaGFwZUxheWVyIiwiaW1hZ2VMYXllciIsIl9yZW5kZXJJbWFnZTIiLCJyZW5kZXJJbWFnZSIsImltYWdlUmVmSWQiLCJpbWFnZUFzc2V0IiwidGV4dExheWVyIiwiYmFzZUxpbmVIZWlnaHQiLCJ0ZXh0QW5jaG9yV2VpZ2h0IiwidGV4dEFuY2hvciIsImZpbGxPcGFjaXR5IiwiX3JlbmRlclRleHQyIiwicmVuZGVyVGV4dCIsInRleHREYXRhIiwiZk5hbWUiLCJoZCIsImxqIiwic2siLCJzYSIsImNvbXB1dGVkU3R5bGUiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJmb250U3R5bGUiLCJmb250V2VpZ2h0IiwiZm9udENvbG9yIiwiZm9udE5hbWUiLCJmb250RXhpc3QiLCJmRmFtaWx5IiwiZlN0eWxlIiwiZldlaWdodCIsImxzIiwiZmMiLCJmb250RGVmIiwiZG9tSGVpZ2h0VmFsIiwiYmFzZVZhbCIsImNvbnZlcnRUb1NwZWNpZmllZFVuaXRzIiwiU1ZHTGVuZ3RoIiwiU1ZHX0xFTkdUSFRZUEVfUFgiLCJkb21XaWR0aFZhbCIsImNhbnZhcyIsInZhbHVlSW5TcGVjaWZpZWRVbml0cyIsImRyYXdJbWFnZSIsImRhdGFVcmwiLCJ0b0RhdGFVUkwiLCJhc3NldEV4aXN0IiwiYXNzZXQiLCJiYXNlRG9tIiwiaXRlbXMiLCJyZW5kZXJHcm91cCIsInBvc3RBY3Rpb25zIiwibm0iLCJzdHlsZXMiLCJzdHJva2UiLCJyYXciLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJzdHJva2VMaW5lY2FwIiwic3Ryb2tlTGluZWpvaW4iLCJwb3NYIiwicG9zWSIsIm9wYWNpdHkiLCJiYXNlVHJhbnNmb3JtIiwiYmFzZUJCb3giLCJhZGRWaXN1YWxFbmNvZGluZ3MiLCJTVkdDaXJjbGVFbGVtZW50Iiwic3ZnTGVuZ3RoIiwiU1ZHRWxsaXBzZUVsZW1lbnQiLCJfbWFwS2V5JG1hcDIiLCJfcGF0aE1ha2VyIiwiU1ZHTGluZUVsZW1lbnQiLCJfbWFwS2V5JG1hcDQiLCJfcGF0aE1ha2VyMiIsIlNWR1BhdGhFbGVtZW50IiwiX3BhdGhNYWtlcjMiLCJTVkdQb2x5Z29uRWxlbWVudCIsIlNWR1BvbHlsaW5lRWxlbWVudCIsInBvaW50cyIsIml0ZXJhYmxlUG9pbnRzIiwiX29mZnNldFgiLCJfb2Zmc2V0WSIsIl9wYXRoTWFrZXI0IiwiU1ZHUmVjdEVsZW1lbnQiLCJfbWFwS2V5MiRtYXAyIiwiX3BhdGhNYWtlcjUiLCJyZW5kZXJHbHlwaCIsInBlZyRTeW50YXhFcnJvciIsIm1lc3NhZ2UiLCJleHBlY3RlZCIsImZvdW5kIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJjaGlsZCIsImN0b3IiLCJwZWckc3ViY2xhc3MiLCJidWlsZE1lc3NhZ2UiLCJERVNDUklCRV9FWFBFQ1RBVElPTl9GTlMiLCJsaXRlcmFsIiwiZXhwZWN0YXRpb24iLCJsaXRlcmFsRXNjYXBlIiwidGV4dCIsImVzY2FwZWRQYXJ0cyIsInBhcnRzIiwiY2xhc3NFc2NhcGUiLCJpbnZlcnRlZCIsImFueSIsIm90aGVyIiwiZGVzY3JpcHRpb24iLCJjaCIsImRlc2NyaXB0aW9ucyIsImRlc2NyaWJlRXhwZWN0ZWQiLCJkZXNjcmliZUZvdW5kIiwiU3ludGF4RXJyb3IiLCJpbnB1dCIsInBlZyRyZXN1bHQiLCJwZWckRkFJTEVEIiwicGVnJHN0YXJ0UnVsZUZ1bmN0aW9ucyIsInN2Z19wYXRoIiwicGVnJHBhcnNlc3ZnX3BhdGgiLCJwZWckc3RhcnRSdWxlRnVuY3Rpb24iLCJwZWckYzAiLCJmaXJzdCIsInBlZyRjMSIsIm1vcmUiLCJtZXJnZSIsInBlZyRjMiIsInBlZyRjMyIsInBlZyRjbGFzc0V4cGVjdGF0aW9uIiwicGVnJGM0IiwicGVnJGM1IiwicGVnJGM2IiwicGVnJGM3IiwicGVnJGM4IiwicGVnJGM5IiwicGVnJGMxMCIsInBlZyRjMTEiLCJwZWckYzEyIiwicGVnJGMxMyIsInBlZyRjMTQiLCJwZWckYzE1IiwicGVnJGMxNiIsInBlZyRjMTciLCJwZWckYzE4IiwicGVnJGMxOSIsInBlZyRjMjAiLCJwZWckYzIxIiwicGVnJGMyMiIsInBlZyRjMjMiLCJwZWckYzI0IiwicGVnJGMyNSIsInBlZyRjMjYiLCJwZWckYzI3IiwicGVnJGMyOCIsInBlZyRjMjkiLCJwZWckYzMwIiwieHJvdCIsImxhcmdlIiwicGVnJGMzMSIsInBlZyRjMzIiLCJwZWckYzMzIiwicGVnJGMzNCIsInBlZyRjMzUiLCJwZWckYzM2IiwiYml0IiwicGVnJGMzNyIsInBlZyRjMzgiLCJwZWckYzM5IiwicGVnJGxpdGVyYWxFeHBlY3RhdGlvbiIsInBlZyRjNDAiLCJwZWckYzQxIiwicGVnJGM0MiIsInBlZyRjNDMiLCJwZWckYzQ0IiwicGVnJGM0NSIsInBlZyRjNDYiLCJwZWckYzQ3IiwicGVnJGM0OCIsInBlZyRjNDkiLCJkaWdpdHMiLCJwZWckYzUwIiwicGVnJGM1MSIsInBlZyRjdXJyUG9zIiwicGVnJHBvc0RldGFpbHNDYWNoZSIsImxpbmUiLCJjb2x1bW4iLCJwZWckbWF4RmFpbFBvcyIsInBlZyRtYXhGYWlsRXhwZWN0ZWQiLCJwZWckc2lsZW50RmFpbHMiLCJzdGFydFJ1bGUiLCJwZWckY29tcHV0ZVBvc0RldGFpbHMiLCJkZXRhaWxzIiwicGVnJGNvbXB1dGVMb2NhdGlvbiIsInN0YXJ0UG9zIiwic3RhcnRQb3NEZXRhaWxzIiwiZW5kUG9zRGV0YWlscyIsInBlZyRmYWlsIiwicGVnJGJ1aWxkU3RydWN0dXJlZEVycm9yIiwiczAiLCJzMyIsInM0IiwicGVnJHBhcnNld3NwIiwiczUiLCJwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cCIsInBlZyRwYXJzZW1vdmVUb19kcmF3VG9fY29tbWFuZEdyb3VwcyIsInM2IiwicGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyIiwicGVnJHBhcnNlY29tbWFfd3NwIiwicGVnJHBhcnNlbGluZXRvX2FyZ3VtZW50X3NlcXVlbmNlIiwicGVnJHBhcnNlbW92ZXRvIiwicGVnJHBhcnNlZHJhd3RvX2NvbW1hbmQiLCJwZWckcGFyc2VjbG9zZXBhdGgiLCJwZWckcGFyc2VsaW5ldG8iLCJwZWckcGFyc2Vjb29yZGluYXRlX3NlcXVlbmNlIiwicGVnJHBhcnNlaG9yaXpvbnRhbF9saW5ldG8iLCJwZWckcGFyc2V2ZXJ0aWNhbF9saW5ldG8iLCJwZWckcGFyc2VjdXJ2ZXRvX2FyZ3VtZW50IiwicGVnJHBhcnNlY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSIsInBlZyRwYXJzZWN1cnZldG8iLCJwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudCIsInBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlIiwicGVnJHBhcnNlc21vb3RoX2N1cnZldG8iLCJwZWckcGFyc2VxdWFkcmF0aWNfYmV6aWVyX2N1cnZldG9fYXJndW1lbnQiLCJwZWckcGFyc2VxdWFkcmF0aWNfYmV6aWVyX2N1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UiLCJwZWckcGFyc2VxdWFkcmF0aWNfYmV6aWVyX2N1cnZldG8iLCJwZWckcGFyc2VzbW9vdGhfcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlIiwicGVnJHBhcnNlc21vb3RoX3F1YWRyYXRpY19iZXppZXJfY3VydmV0byIsInBlZyRwYXJzZWVsbGlwdGljYWxfYXJjX2FyZ3VtZW50IiwicGVnJHBhcnNlZWxsaXB0aWNhbF9hcmNfYXJndW1lbnRfc2VxdWVuY2UiLCJwZWckcGFyc2VlbGxpcHRpY2FsX2FyYyIsInBlZyRwYXJzZW51bWJlciIsInM3IiwiczgiLCJzOSIsInMxMCIsInMxMSIsInBlZyRwYXJzZW5vbm5lZ2F0aXZlX251bWJlciIsInBlZyRwYXJzZWZsYWciLCJwZWckcGFyc2VmbG9hdGluZ19wb2ludF9jb25zdGFudCIsInBlZyRwYXJzZWRpZ2l0X3NlcXVlbmNlIiwicGVnJHBhcnNlc2lnbiIsInBlZyRwYXJzZWNvbW1hIiwicGVnJHBhcnNlZnJhY3Rpb25hbF9jb25zdGFudCIsInBlZyRwYXJzZWV4cG9uZW50IiwicSIsInoiLCJnZXRSYW5kb21WYWx1ZXMiLCJjcnlwdG8iLCJtc0NyeXB0byIsInJuZHM4IiwiYnl0ZVRvSGV4IiwiYnRoIiwiX2JhYmVsUG9seWZpbGwiLCJERUZJTkVfUFJPUEVSVFkiLCJwYWRFbmQiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUFMiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiJGdldFByb3RvdHlwZU9mIiwiJGZyZWV6ZSIsIiRzZWFsIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJGlzRXh0ZW5zaWJsZSIsIkZQcm90byIsIm5hbWVSRSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJfaXNGaW5pdGUiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJoeXBvdCIsInZhbHVlMSIsInZhbHVlMiIsImRpdiIsInN1bSIsImxhcmciLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsImxvZzEwIiwiTE9HMTBFIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidHJ1bmMiLCJmcm9tQ2hhckNvZGUiLCIkZnJvbUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJjYWxsU2l0ZSIsInRwbCIsIiRhdCIsInBvaW50IiwiY29kZVBvaW50QXQiLCJjb250ZXh0IiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsIiRzdGFydHNXaXRoIiwidXJsIiwiRGF0ZSIsImdldFRpbWUiLCJ0b0lTT1N0cmluZyIsInB2IiwiJHRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJEYXRlUHJvdG8iLCJoaW50IiwiY3JlYXRlUHJvcGVydHkiLCJ1cFRvIiwiY2xvbmVkIiwiJHNvcnQiLCIkZm9yRWFjaCIsIlNUUklDVCIsIiRmaWx0ZXIiLCIkc29tZSIsIiRldmVyeSIsIiRyZWR1Y2UiLCIkaW5kZXhPZiIsIk5FR0FUSVZFX1pFUk8iLCIkZmluZCIsIiRmbGFncyIsIiRSZWdFeHAiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiJG1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNhcHR1cmUiLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCIkc2VhcmNoIiwicHJldmlvdXNMYXN0SW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsImxpbSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiY2hhaW4iLCJfYyIsIm9rIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiJGlzVmlldyIsImlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImRlbGV0ZVByb3BlcnR5IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwicmVjZWl2ZXIiLCJnZXRQcm90byIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwic2V0UHJvdG8iLCIkaW5jbHVkZXMiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0TWFwIiwiZmxhdHRlbiIsImRlcHRoQXJnIiwiJHBhZCIsIldFQktJVF9CVUciLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiX3IiLCJtYXRjaEFsbCIsImdldERlc2MiLCIkdmFsdWVzIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiaXNFcnJvciIsImNsYW1wIiwibG93ZXIiLCJ1cHBlciIsIkRFR19QRVJfUkFEIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsImZzY2FsZSIsImlhZGRoIiwiJHgwIiwiJHkwIiwiaXN1YmgiLCJpbXVsaCIsInUiLCIkdSIsIiR2IiwidTAiLCJ2MCIsInUxIiwidjEiLCJ1bXVsaCIsInNpZ25iaXQiLCJvbkZpbmFsbHkiLCJtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsImRlbGV0ZU1ldGFkYXRhIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJwS2V5cyIsImdldE1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwiaGFzT3duTWV0YWRhdGEiLCIkbWV0YWRhdGEiLCJhc2FwIiwiT0JTRVJWQUJMRSIsImNsZWFudXBTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwic3Vic2NyaXB0aW9uQ2xvc2VkIiwiX28iLCJjbG9zZVN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsIm9ic2VydmVyIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCJjb21wbGV0ZSIsIiRPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwib2JzZXJ2YWJsZSIsIk9ic2VydmFibGUiLCJNU0lFIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCIkdGFzayIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImluTW9kdWxlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJDb250ZXh0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJzdG9wIiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhYnJ1cHQiLCJmaW5hbGx5RW50cnkiLCJhZnRlckxvYyIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsInN0YXRlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwidW53cmFwcGVkIiwicmV0dXJuIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiZXNjYXBlIiwiJHJlIiwicmVnRXhwIiwicGFydCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxnQkFBaUIsR0FBSUgsR0FDRixpQkFBWkMsUUFDZEEsUUFBdUIsY0FBSUQsSUFFM0JELEVBQW9CLGNBQUlDLElBUjFCLENBU0dLLE9BQVEsV0FDWCxPLFlDVEUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVVAsUUFHbkMsSUFBSUMsRUFBU0ksRUFBaUJFLEdBQVksQ0FDekNDLEVBQUdELEVBQ0hFLEdBQUcsRUFDSFQsUUFBUyxJQVVWLE9BTkFVLEVBQVFILEdBQVVJLEtBQUtWLEVBQU9ELFFBQVNDLEVBQVFB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Q1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLElBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSbHJCLEVBQU9ELFFBQVUsRUFB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R0FBNkIsbUJBQWxCQSxFQUFTM0gsS0FDbEIsT0FBTzJILEVBR1QsSUFBSzdPLE1BQU02TyxFQUFTcFEsUUFBUyxDQUMzQixJQUFJMUcsR0FBSyxFQUFHbVAsRUFBTyxTQUFTQSxJQUMxQixPQUFTblAsRUFBSThXLEVBQVNwUSxRQUNwQixHQUFJbW5FLEVBQU8xdEUsS0FBSzJXLEVBQVU5VyxHQUd4QixPQUZBbVAsRUFBS2xPLE1BQVE2VixFQUFTOVcsR0FDdEJtUCxFQUFLQyxNQUFPLEVBQ0xELEVBT1gsT0FIQUEsRUFBS2xPLE1BQVFzQyxFQUNiNEwsRUFBS0MsTUFBTyxFQUVMRCxHQUdULE9BQU9BLEVBQUtBLEtBQU9BLEdBS3ZCLE1BQU8sQ0FBRUEsS0FBTXlpRSxHQUlqQixTQUFTQSxJQUNQLE1BQU8sQ0FBRTN3RSxNQUFPc0MsRUFBVzZMLE1BQU0sSUFoZ0JwQyxDQThzQkMsV0FBYyxPQUFPdEosS0FBckIsSUFBa0N0QyxTQUFTLGNBQVRBLEssZ0JDcnRCcEMsRUFBUSxLQUNSL0QsRUFBT0QsUUFBVSxFQUFRLElBQXVCa1ksT0FBTzg2RCxRLGdCQ0F2RCxJQUFJbndFLEVBQVUsRUFBUSxHQUNsQm93RSxFQUFNLEVBQVEsSUFBUixDQUF1QixzQkFBdUIsUUFFeERwd0UsRUFBUUEsRUFBUVcsRUFBRyxTQUFVLENBQUV3dkUsT0FBUSxTQUFnQjN1RSxHQUFNLE9BQU80dUUsRUFBSTV1RSxPLGNDSnhFcEUsRUFBT0QsUUFBVSxTQUFVa3pFLEVBQVFwc0UsR0FDakMsSUFBSXN4RCxFQUFXdHhELElBQVk1RixPQUFPNEYsR0FBVyxTQUFVcXNFLEdBQ3JELE9BQU9yc0UsRUFBUXFzRSxJQUNicnNFLEVBQ0osT0FBTyxTQUFVekMsR0FDZixPQUFPZ0MsT0FBT2hDLEdBQUl5QyxRQUFRb3NFLEVBQVE5YSIsImZpbGUiOiJjYW5pc190b29sa2l0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiY2FuaXNfdG9vbGtpdFwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJjYW5pc190b29sa2l0XCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImNhbmlzX3Rvb2xraXRcIl0gPSBmYWN0b3J5KCk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxNDQpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuOScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwidmFyIE1hcCA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcbnZhciBzdG9yZSA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSgpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYgKCFrZXlNZXRhZGF0YSkge1xuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIHZhciBrZXlzID0gW107XG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJjbGFzcyBUaW1pbmdTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX29mZnNldCA9IDA7Ly9kZWZhdWx0IG9mZmZzZXQgaXMgMFxyXG4gICAgICAgIHRoaXMuX3JlZmVyZW5jZSA9IFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQ7Ly9kZWZhdWx0IG9mZnNldCByZWZlcmVuY2UgaXMgJ3ByZXZpb3VzX3N0YXJ0J1xyXG4gICAgfVxyXG5cclxuICAgIC8qKioqKiBnZXR0ZXJzIGFuZCBzZXR0ZXJzICoqKioqL1xyXG4gICAgc2V0IHJlZmVyZW5jZShvZmZzZXRSZWYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9mZnNldFJlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgbGV0IHRtcE9mZnNldFJlZlN0ciA9IFRpbWluZ1NwZWMudHJhbnNSZWYob2Zmc2V0UmVmKTtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKFRpbWluZ1NwZWMudGltaW5nUmVmKS5pbmNsdWRlcyh0bXBPZmZzZXRSZWZTdHIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2UgPSBvZmZzZXRSZWY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlZmVyZW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBvZmZzZXQob2ZzdCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb2ZzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvZnN0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gTWF0aC5mbG9vcihvZnN0IC8gKDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEUpKSAqICgxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2ZzdCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29mZnNldCA9IG9mc3Q7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBvZmZzZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldDtcclxuICAgIH1cclxuICAgIC8qKioqKiBlbmQgZ2V0dGVycyBhbmQgc2V0dGVycyAqKioqKi9cclxuXHJcbiAgICByZXBsYWNlT2Zmc2V0Q29uc3QoY29uc3RhbnRzLCBzdGF0dXMgPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9mZnNldCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMub2Zmc2V0KSA9PT0gJ3VuZGVmaW5lZCcpIHsvL2NoZWNrIGVycm9yIGluIGFuaW1hdGlvbiB0aW1pbmdcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyByZWZlcmVuY2Ugb2YgdGhlIGNvbnN0YW50IHZhcmlhYmxlcy4nLCBlcnJTcGVjOiAnXCJvZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICB9IGVsc2Ugey8vcmVwbGFjZVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMub2Zmc2V0KSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IGNvbnN0YW50cy5nZXQodGhpcy5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnT2Zmc2V0IG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wib2Zmc2V0XCI6XCInICsgdGhpcy5vZmZzZXQucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vZmZzZXQgJiYgdHlwZW9mIHRoaXMub2Zmc2V0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMub2Zmc2V0Lm1pbk9mZnNldCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnRzLmdldCh0aGlzLm9mZnNldC5taW5PZmZzZXQpID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyByZWZlcmVuY2Ugb2YgdGhlIGNvbnN0YW50IHZhcmlhYmxlcy4nLCBlcnJTcGVjOiAnXCJtaW5PZmZzZXRcIjpcIicgKyB0aGlzLm9mZnNldC5taW5PZmZzZXQucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly9yZXBsYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMub2Zmc2V0Lm1pbk9mZnNldCkgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0Lm1pbk9mZnNldCA9IGNvbnN0YW50cy5nZXQodGhpcy5vZmZzZXQubWluT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnTWluT2Zmc2V0IG11c3QgYmUgYSBudW1iZXIgb3IgYSBudW1lcmljIHR5cGUgY29uc3RhbnQuJywgZXJyU3BlYzogJ1wibWluT2Zmc2V0XCI6XCInICsgdGhpcy5vZmZzZXQubWluT2Zmc2V0LnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogYWRkIG9mZnNldCBzdGFydCB0aW1lXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdFN0YXJ0IDogc3RhcnQgdGltZSBvZiB0aGUgbGFzdCBpdGVtXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdEVuZCA6IGVuZCB0aW1lIG9mIHRoZSBsYXN0IGl0ZW1cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbGxJdGVtc1N0YXJ0IDogc3RhcnQgdGltZSBvZiBhbGwgdGhlIGl0ZW1zIFxyXG4gICAgICogQHBhcmFtIHtNYXB9IGRvbU1hcmtzIDoga2V5OiBtYXJrSWQsIHZhbHVlOiBhdHRyc1xyXG4gICAgICovXHJcbiAgICBjYWxPZmZzZXRUaW1lKGxhc3RTdGFydCwgbGFzdEVuZCwgYWxsSXRlbXNTdGFydCA9IDAsIGRvbU1hcmtzID0gbmV3IE1hcCgpKSB7XHJcbiAgICAgICAgaWYgKGRvbU1hcmtzLnNpemUgPT09IDApIHsvL2NvbXB1dGluZyBhY3Rpb24gb2Zmc2V0IHRpbWUsIHJldHVybiBhIG51bWJlclxyXG4gICAgICAgICAgICBsZXQgaXRlbVN0YXJ0ID0gMDtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1TdGFydCA9IGxhc3RTdGFydCArIHRoaXMub2Zmc2V0IC0gYWxsSXRlbXNTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNFbmQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVN0YXJ0ID0gbGFzdEVuZCArIHRoaXMub2Zmc2V0IC0gYWxsSXRlbXNTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYuYWJzb2x1dGU6XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVN0YXJ0ID0gdGhpcy5vZmZzZXQgKyBhbGxJdGVtc1N0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpdGVtU3RhcnQgPSBsYXN0U3RhcnQgKyB0aGlzLm9mZnNldCAtIGFsbEl0ZW1zU3RhcnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1TdGFydDtcclxuICAgICAgICB9IGVsc2Ugey8vY29tcHV0aW5nIGFuaW1hdGlvbiBvZmZzZXQgdGltZSwgcmV0dXJuIGEgbWFwXHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgbGV0IGl0ZW1zU3RhcnQgPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgICAgICAgICAvL2lmIHRoZSBvZmZzZXQgaXMgYW4gb2JqZWN0LCBmaW5kIHRoZSBtaW4gdmFsdWUgb2YgdGhlIGZpZWxkIGluIG9mZnNldFxyXG4gICAgICAgICAgICBsZXQgbWluQXR0clZhbHVlID0gMTAwMDAwMDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9mZnNldCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIGRvbU1hcmtzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJzLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWluQXR0clZhbHVlID4gcGFyc2VGbG9hdChhdHRyc1snZGF0YS1kYXR1bSddW3RoYXQub2Zmc2V0LmZpZWxkXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluQXR0clZhbHVlID0gcGFyc2VGbG9hdChhdHRyc1snZGF0YS1kYXR1bSddW3RoYXQub2Zmc2V0LmZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZG9tTWFya3MuZm9yRWFjaChmdW5jdGlvbiAoYXR0cnMsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9mZnNldFZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgIC8vanVkZ2UgdGhlIHR5cGUgb2Ygb2Zmc2V0OiBudW1iZXIgb3Igb2JqZWN0XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoYXQub2Zmc2V0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFZhbHVlID0gdGhhdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGF0Lm9mZnNldCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRWYWx1ZSA9IHRoYXQub2Zmc2V0Lm1pbk9mZnNldCAqIHBhcnNlRmxvYXQoYXR0cnNbJ2RhdGEtZGF0dW0nXVt0aGF0Lm9mZnNldC5maWVsZF0pIC8gbWluQXR0clZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGF0LnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNTdGFydDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNTdGFydC5zZXQobWFya0lkLCBsYXN0U3RhcnQgKyBvZmZzZXRWYWx1ZSAtIGFsbEl0ZW1zU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzRW5kOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1N0YXJ0LnNldChtYXJrSWQsIGxhc3RFbmQgKyBvZmZzZXRWYWx1ZSAtIGFsbEl0ZW1zU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFRpbWluZ1NwZWMudGltaW5nUmVmLmFic29sdXRlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1N0YXJ0LnNldChtYXJrSWQsIG9mZnNldFZhbHVlICsgYWxsSXRlbXNTdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zU3RhcnQuc2V0KG1hcmtJZCwgbGFzdFN0YXJ0ICsgb2Zmc2V0VmFsdWUgLSBhbGxJdGVtc1N0YXJ0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zU3RhcnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdHJhbnNSZWYocmVmU3RyKSB7XHJcbiAgICAgICAgc3dpdGNoIChyZWZTdHIpIHtcclxuICAgICAgICAgICAgY2FzZSB0aGlzLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdwcmV2aW91c1N0YXJ0JztcclxuICAgICAgICAgICAgY2FzZSB0aGlzLnRpbWluZ1JlZi5wcmV2aW91c0VuZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAncHJldmlvdXNFbmQnO1xyXG4gICAgICAgICAgICBjYXNlIHRoaXMudGltaW5nUmVmLmFic29sdXRlOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5UaW1pbmdTcGVjLkZSQU1FX1JBVEUgPSAyMDtcclxuVGltaW5nU3BlYy50aW1pbmdSZWYgPSB7XHJcbiAgICBwcmV2aW91c1N0YXJ0OiAnc3RhcnQgd2l0aCBwcmV2aW91cycsXHJcbiAgICBwcmV2aW91c0VuZDogJ3N0YXJ0IGFmdGVyIHByZXZpb3VzJyxcclxuICAgIGFic29sdXRlOiAnYWJzb2x1dGUnXHJcbn07XHJcblRpbWluZ1NwZWMuZGF0YUJpbmRBdHRycyA9IFsnZmllbGQnLCAnbWluT2Zmc2V0JywgJ21pbkR1cmF0aW9uJ107XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUaW1pbmdTcGVjOyIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMYXllckZhY3RvcnlcIiwge1xyXG4gIGVudW1lcmFibGU6IHRydWUsXHJcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICByZXR1cm4gX2xheWVyLkxheWVyRmFjdG9yeTtcclxuICB9XHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFYXNpbmdGYWN0b3J5XCIsIHtcclxuICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xyXG4gICAgcmV0dXJuIF9lYXNpbmcuRWFzaW5nRmFjdG9yeTtcclxuICB9XHJcbn0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXRoTWFrZXJcIiwge1xyXG4gIGVudW1lcmFibGU6IHRydWUsXHJcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XHJcbiAgICByZXR1cm4gX3BhdGguUGF0aE1ha2VyO1xyXG4gIH1cclxufSk7XHJcbmV4cG9ydHMuTWFza1R5cGUgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcclxuXHJcbnZhciBfbGF5ZXIgPSByZXF1aXJlKFwiLi9sYXllclwiKTtcclxuXHJcbnZhciBfdiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInV1aWQvdjRcIikpO1xyXG5cclxudmFyIF9lYXNpbmcgPSByZXF1aXJlKFwiLi9lYXNpbmdcIik7XHJcblxyXG52YXIgX3BhdGggPSByZXF1aXJlKFwiLi9wYXRoXCIpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XHJcblxyXG52YXIgSlNNb3ZpbiA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBmcHMgbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kXHJcbiAgICogQHBhcmFtIHdpZHRoIHdpZHRoIG9mIHZpZXdwb3J0IChweClcclxuICAgKiBAcGFyYW0gaGVpZ2h0IGhlaWdodCBvZiB2aWV3cG9ydCAocHgpXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gSlNNb3ZpbigpIHtcclxuICAgIHZhciBmcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDMwO1xyXG4gICAgdmFyIHdpZHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiA4MDA7XHJcbiAgICB2YXIgaGVpZ2h0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiA2MDA7XHJcblxyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpTTW92aW4pO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvb3RcIiwgdm9pZCAwKTtcclxuXHJcbiAgICB0aGlzLnJvb3QgPSB7XHJcbiAgICAgIGZyOiBmcHMsXHJcbiAgICAgIHc6IHdpZHRoLFxyXG4gICAgICBoOiBoZWlnaHQsXHJcbiAgICAgIGRkZDogMCxcclxuICAgICAgbGF5ZXJzOiBbXSxcclxuICAgICAgYXNzZXRzOiBbXSxcclxuICAgICAgZm9udHM6IHtcclxuICAgICAgICBsaXN0OiBbXVxyXG4gICAgICB9LFxyXG4gICAgICBpcDogMCxcclxuICAgICAgb3A6IDBcclxuICAgIH07XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBmcHMgbnVtYmVyIG9mIGZyYW1lcyBwZXIgc2Vjb25kXHJcbiAgICovXHJcblxyXG5cclxuICBfY3JlYXRlQ2xhc3MoSlNNb3ZpbiwgW3tcclxuICAgIGtleTogXCJzZXRGcmFtZVJhdGVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGcmFtZVJhdGUoZnBzKSB7XHJcbiAgICAgIHRoaXMucm9vdC5mciA9IGZwcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHdpZHRoIHdpZHRoIG9mIHZpZXdwb3J0IChweClcclxuICAgICAqIEBwYXJhbSBoZWlnaHQgaGVpZ2h0IG9mIHZpZXdwb3J0IChweClcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwic2V0Vmlld3BvcnRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWaWV3cG9ydCh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgIHRoaXMucm9vdC53ID0gd2lkdGg7XHJcbiAgICAgIHRoaXMucm9vdC5oID0gaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgYSBzaW1wbGUgZ3JhcGhpY2FsIGxheWVyXHJcbiAgICAgKiBAcGFyYW0gZG9tTGF5ZXJPckFzc2V0SWQgYSBTVkcgZWxlbWVudCBET00gb3IgSlNNb3ZpbkxheWVyIG9yIGFzc2V0IElEIG5lZWRzIHRvIGJlIGluc2VydGVkXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFkZExheWVyXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGF5ZXIoZG9tTGF5ZXJPckFzc2V0SWQpIHtcclxuICAgICAgdmFyIGxheWVyO1xyXG5cclxuICAgICAgaWYgKGRvbUxheWVyT3JBc3NldElkIGluc3RhbmNlb2YgU1ZHR3JhcGhpY3NFbGVtZW50KSB7XHJcbiAgICAgICAgbGF5ZXIgPSBfbGF5ZXIuTGF5ZXJGYWN0b3J5LmhpZXJhcmNoeShkb21MYXllck9yQXNzZXRJZCwgdGhpcy5yb290LmFzc2V0cywgdGhpcy5yb290LmZvbnRzKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9tTGF5ZXJPckFzc2V0SWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgbGF5ZXIgPSBfbGF5ZXIuTGF5ZXJGYWN0b3J5LnJlZihkb21MYXllck9yQXNzZXRJZCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGF5ZXIgPSBkb21MYXllck9yQXNzZXRJZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UoMCwgMCwgbGF5ZXIucm9vdCk7XHJcbiAgICAgIHJldHVybiBsYXllcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG1hc2tPckRvbSBhIFNWRyBlbGVtZW50IERPTSBvciBKU01vdmluTGF5ZXIgdG8gYmUgdGhlIG1hc2tcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbGF5ZXIgdG8gYmUgdGhlIG1hc2tlZCBsYXllclxyXG4gICAgICogQHBhcmFtIG1hc2tUeXBlIHdoaWNoIHR5cGUgb2YgbWFzayB0byB1c2UsIHVzZSBgTWFza1R5cGUuKmAgdG8gc3BlY2lmeVxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJhZGRNYXNrXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTWFzayhtYXNrT3JEb20sIGxheWVyUmVmT3JJbmRleCkge1xyXG4gICAgICB2YXIgbWFza1R5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICB2YXIgbGF5ZXJSZWY7XHJcbiAgICAgIHZhciBsYXllckluZGV4O1xyXG5cclxuICAgICAgaWYgKGxheWVyUmVmT3JJbmRleCBpbnN0YW5jZW9mIF9sYXllci5KU01vdmluTGF5ZXIpIHtcclxuICAgICAgICBsYXllclJlZiA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgICBsYXllckluZGV4ID0gdGhpcy5yb290LmxheWVycy5pbmRleE9mKGxheWVyUmVmLnJvb3QpO1xyXG4gICAgICAgIGxheWVyUmVmLnJvb3QudHQgPSBtYXNrVHlwZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsYXllckluZGV4ID0gbGF5ZXJSZWZPckluZGV4O1xyXG4gICAgICAgIHRoaXMucm9vdC5sYXllcnNbbGF5ZXJJbmRleF0udHQgPSBtYXNrVHlwZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxheWVySW5kZXggPCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaXZlbiBsYXllciBpcyBub3QgYSBtZW1iZXIgb2YgdGhpcyBKU01vdmluLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgbWFza0xheWVyO1xyXG5cclxuICAgICAgaWYgKG1hc2tPckRvbSBpbnN0YW5jZW9mIFNWR0dyYXBoaWNzRWxlbWVudCkge1xyXG4gICAgICAgIG1hc2tMYXllciA9IF9sYXllci5MYXllckZhY3RvcnkuaGllcmFyY2h5KG1hc2tPckRvbSwgdGhpcy5yb290LmFzc2V0cywgdGhpcy5yb290LmZvbnRzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBtYXNrTGF5ZXIgPSBtYXNrT3JEb207XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMuc3BsaWNlKGxheWVySW5kZXgsIDAsIG1hc2tMYXllci5yb290KTtcclxuICAgICAgcmV0dXJuIG1hc2tMYXllcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGxheWVyUmVmcyBhIHNldCBvZiBsYXllcnMgdG8gYmUgcGFja2VkIGFzIGFuIGFzc2V0XHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcIm1ha2VBc3NldFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VBc3NldChsYXllclJlZnMpIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgIGxheWVyUmVmcy5mb3JFYWNoKGZ1bmN0aW9uIChsYXllciwgaW5uZXJJbmRleCkge1xyXG4gICAgICAgIGlmIChsYXllci5yb290LnR0ID09IDEpIHtcclxuICAgICAgICAgIHZhciBsYXllckluZGV4ID0gX3RoaXMucm9vdC5sYXllcnMuaW5kZXhPZihsYXllci5yb290KTtcclxuXHJcbiAgICAgICAgICBpZiAobGF5ZXJJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIG1hc2sgPSBfdGhpcy5yb290LmxheWVyc1tsYXllckluZGV4IC0gMV07XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5uZXJJbmRleCA9PSAwIHx8IGxheWVyUmVmc1tpbm5lckluZGV4IC0gMV0ucm9vdCAhPSBtYXNrKSB7XHJcbiAgICAgICAgICAgICAgbGF5ZXJSZWZzLnNwbGljZShpbm5lckluZGV4LCAwLCBuZXcgX2xheWVyLkpTTW92aW5MYXllcihtYXNrKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBsYXllclJlZnMgPSBsYXllclJlZnMubWFwKGZ1bmN0aW9uIChsYXllciwgaW5uZXJJbmRleCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBsYXllcjogbGF5ZXIsXHJcbiAgICAgICAgICBpbm5lckluZGV4OiBpbm5lckluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgIHZhciBhSW5kZXggPSBfdGhpcy5yb290LmxheWVycy5pbmRleE9mKGEubGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIHZhciBiSW5kZXggPSBfdGhpcy5yb290LmxheWVycy5pbmRleE9mKGIubGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIHJldHVybiBhSW5kZXggLSBiSW5kZXggfHwgYS5pbm5lckluZGV4IC0gYi5pbm5lckluZGV4O1xyXG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKGxheWVyV3JhcHBlcikge1xyXG4gICAgICAgIHJldHVybiBsYXllcldyYXBwZXIubGF5ZXI7XHJcbiAgICAgIH0pO1xyXG4gICAgICBsYXllclJlZnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcclxuICAgICAgICB2YXIgbGF5ZXJJbmRleCA9IF90aGlzLnJvb3QubGF5ZXJzLmluZGV4T2YobGF5ZXIucm9vdCk7XHJcblxyXG4gICAgICAgIGlmIChsYXllckluZGV4ID4gMCkge1xyXG4gICAgICAgICAgX3RoaXMucm9vdC5sYXllcnMuc3BsaWNlKGxheWVySW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGF5ZXIucm9vdC5vcCA9IDllOTtcclxuICAgICAgfSk7XHJcbiAgICAgIHZhciByZWZJZCA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcbiAgICAgIHRoaXMucm9vdC5hc3NldHMucHVzaCh7XHJcbiAgICAgICAgaWQ6IHJlZklkLFxyXG4gICAgICAgIGxheWVyczogbGF5ZXJSZWZzLm1hcChmdW5jdGlvbiAobGF5ZXJSZWYpIHtcclxuICAgICAgICAgIHJldHVybiBsYXllclJlZi5yb290O1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcmVmSWQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbGF5ZXIgdG8gcmVtb3ZlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlbW92ZUxheWVyXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGF5ZXIobGF5ZXJSZWZPckluZGV4KSB7XHJcbiAgICAgIHZhciBsYXllclJlZjtcclxuICAgICAgdmFyIGxheWVySW5kZXg7XHJcblxyXG4gICAgICBpZiAobGF5ZXJSZWZPckluZGV4IGluc3RhbmNlb2YgX2xheWVyLkpTTW92aW5MYXllcikge1xyXG4gICAgICAgIGxheWVyUmVmID0gbGF5ZXJSZWZPckluZGV4O1xyXG4gICAgICAgIGxheWVySW5kZXggPSB0aGlzLnJvb3QubGF5ZXJzLmluZGV4T2YobGF5ZXJSZWYucm9vdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGF5ZXJJbmRleCA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UobGF5ZXJJbmRleCwgMSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBsYXllclJlZk9ySW5kZXggYSBKU01vdmluTGF5ZXIgb3IgaW5kZXggb2YgbWFzayBvciBtYXNrZWQgbGF5ZXIgdG8gcmVtb3ZlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlbW92ZU1hc2tcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVNYXNrKGxheWVyUmVmT3JJbmRleCkge1xyXG4gICAgICB2YXIgbGF5ZXJSZWY7XHJcbiAgICAgIHZhciBsYXllckluZGV4O1xyXG5cclxuICAgICAgaWYgKGxheWVyUmVmT3JJbmRleCBpbnN0YW5jZW9mIF9sYXllci5KU01vdmluTGF5ZXIpIHtcclxuICAgICAgICBsYXllclJlZiA9IGxheWVyUmVmT3JJbmRleDtcclxuICAgICAgICBsYXllckluZGV4ID0gdGhpcy5yb290LmxheWVycy5pbmRleE9mKGxheWVyUmVmLnJvb3QpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxheWVySW5kZXggPSBsYXllclJlZk9ySW5kZXg7XHJcbiAgICAgICAgbGF5ZXJSZWYgPSBuZXcgX2xheWVyLkpTTW92aW5MYXllcih0aGlzLnJvb3QubGF5ZXJzW2xheWVySW5kZXhdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxheWVyUmVmLnJvb3QudHQpIHtcclxuICAgICAgICBsYXllclJlZi5yb290LnR0ID0gMDtcclxuICAgICAgICB0aGlzLnJvb3QubGF5ZXJzLnNwbGljZShsYXllckluZGV4IC0gMSwgMSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5yb290LmxheWVyc1tsYXllckluZGV4ICsgMV0udHQpIHtcclxuICAgICAgICB0aGlzLnJvb3QubGF5ZXJzW2xheWVySW5kZXggKyAxXS50dCA9IDA7XHJcbiAgICAgICAgdGhpcy5yb290LmxheWVycy5zcGxpY2UobGF5ZXJJbmRleCwgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5wdXQgbGF5ZXIgaXMgbm90IGEgbWFzayBvciBhIG1hc2tlZCBsYXllci4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBjbGVhciBhbGwgbGF5ZXJzXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNsZWFyTGF5ZXJzXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJMYXllcnMoKSB7XHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbWFrZSBhbGwgbGF5ZXJzIGVuZCBhdCBzYW1lIHRpbWVcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidW5pZm9ybVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuaWZvcm0oKSB7XHJcbiAgICAgIHZhciBtYXhUaW1lID0gdGhpcy5yb290LmxheWVycy5yZWR1Y2UoZnVuY3Rpb24gKHAsIHYpIHtcclxuICAgICAgICByZXR1cm4gcCA8IHYub3AgPyB2Lm9wIDogcDtcclxuICAgICAgfSwgMCk7XHJcbiAgICAgIHRoaXMucm9vdC5vcCA9IG1heFRpbWU7XHJcbiAgICAgIHRoaXMucm9vdC5sYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobGF5ZXIpIHtcclxuICAgICAgICByZXR1cm4gbGF5ZXIub3AgPSBtYXhUaW1lO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZXhwb3J0IExvdHRpZSBhcyBKYXZhU2NyaXB0IE9iamVjdCBcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidG9PYmplY3RcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b09iamVjdCgpIHtcclxuICAgICAgdGhpcy51bmlmb3JtKCk7XHJcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMudG9KU09OKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBleHBvcnQgTG90dGllIGFzIEpTT04gdGV4dFxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ0b0pTT05cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XHJcbiAgICAgIHRoaXMudW5pZm9ybSgpO1xyXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5yb290KTtcclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBKU01vdmluO1xyXG59KCk7XHJcblxyXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IEpTTW92aW47XHJcbnZhciBNYXNrVHlwZTtcclxuZXhwb3J0cy5NYXNrVHlwZSA9IE1hc2tUeXBlO1xyXG5cclxuKGZ1bmN0aW9uIChNYXNrVHlwZSkge1xyXG4gIE1hc2tUeXBlW01hc2tUeXBlW1wiQWxwaGFcIl0gPSAxXSA9IFwiQWxwaGFcIjtcclxuICBNYXNrVHlwZVtNYXNrVHlwZVtcIkludmVydEFscGhhXCJdID0gMl0gPSBcIkludmVydEFscGhhXCI7XHJcbiAgTWFza1R5cGVbTWFza1R5cGVbXCJMdW1hXCJdID0gM10gPSBcIkx1bWFcIjtcclxuICBNYXNrVHlwZVtNYXNrVHlwZVtcIkludmVydEx1bWFcIl0gPSA0XSA9IFwiSW52ZXJ0THVtYVwiO1xyXG59KShNYXNrVHlwZSB8fCAoZXhwb3J0cy5NYXNrVHlwZSA9IE1hc2tUeXBlID0ge30pKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlxYzIxdmRtbHVMblJ6SWwwc0ltNWhiV1Z6SWpwYklrcFRUVzkyYVc0aUxDSm1jSE1pTENKM2FXUjBhQ0lzSW1obGFXZG9kQ0lzSW5KdmIzUWlMQ0ptY2lJc0luY2lMQ0pvSWl3aVpHUmtJaXdpYkdGNVpYSnpJaXdpWVhOelpYUnpJaXdpWm05dWRITWlMQ0pzYVhOMElpd2lhWEFpTENKdmNDSXNJbVJ2YlV4aGVXVnlUM0pCYzNObGRFbGtJaXdpYkdGNVpYSWlMQ0pUVmtkSGNtRndhR2xqYzBWc1pXMWxiblFpTENKTVlYbGxja1poWTNSdmNua2lMQ0pvYVdWeVlYSmphSGtpTENKeVpXWWlMQ0p6Y0d4cFkyVWlMQ0p0WVhOclQzSkViMjBpTENKc1lYbGxjbEpsWms5eVNXNWtaWGdpTENKdFlYTnJWSGx3WlNJc0lrMWhjMnRVZVhCbElpd2lRV3h3YUdFaUxDSnNZWGxsY2xKbFppSXNJbXhoZVdWeVNXNWtaWGdpTENKS1UwMXZkbWx1VEdGNVpYSWlMQ0pwYm1SbGVFOW1JaXdpZEhRaUxDSkZjbkp2Y2lJc0ltMWhjMnRNWVhsbGNpSXNJbXhoZVdWeVVtVm1jeUlzSW1admNrVmhZMmdpTENKcGJtNWxja2x1WkdWNElpd2liV0Z6YXlJc0ltMWhjQ0lzSW5OdmNuUWlMQ0poSWl3aVlpSXNJbUZKYm1SbGVDSXNJbUpKYm1SbGVDSXNJbXhoZVdWeVYzSmhjSEJsY2lJc0luSmxaa2xrSWl3aWNIVnphQ0lzSW1sa0lpd2liV0Y0VkdsdFpTSXNJbkpsWkhWalpTSXNJbkFpTENKMklpd2lkVzVwWm05eWJTSXNJa3BUVDA0aUxDSndZWEp6WlNJc0luUnZTbE5QVGlJc0luTjBjbWx1WjJsbWVTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVVOQk96dEJRVU5CT3p0QlFUQk5RVHM3UVVGRFFUczdPenM3T3pzN096czdPMGxCZWsxeFFrRXNUenM3TzBGQlIycENPenM3T3p0QlFVdEJMSEZDUVVGNVJUdEJRVUZCTEZGQlFUZEVReXhIUVVFMlJDeDFSVUZCTDBNc1JVRkJLME03UVVGQlFTeFJRVUV6UTBNc1MwRkJNa01zZFVWQlFUTkNMRWRCUVRKQ08wRkJRVUVzVVVGQmRFSkRMRTFCUVhOQ0xIVkZRVUZNTEVkQlFVczdPMEZCUVVFN08wRkJRVUU3TzBGQlEzSkZMRk5CUVV0RExFbEJRVXdzUjBGQldUdEJRVU5TUXl4TlFVRkJRU3hGUVVGRkxFVkJRVVZLTEVkQlJFazdRVUZGVWtzc1RVRkJRVUVzUTBGQlF5eEZRVUZGU2l4TFFVWkxPMEZCUjFKTExFMUJRVUZCTEVOQlFVTXNSVUZCUlVvc1RVRklTenRCUVVsU1N5eE5RVUZCUVN4SFFVRkhMRVZCUVVVc1EwRktSenRCUVV0U1F5eE5RVUZCUVN4TlFVRk5MRVZCUVVVc1JVRk1RVHRCUVUxU1F5eE5RVUZCUVN4TlFVRk5MRVZCUVVVc1JVRk9RVHRCUVU5U1F5eE5RVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRTRU1zVVVGQlFVRXNTVUZCU1N4RlFVRkZPMEZCUkVnc1QwRlFRenRCUVZWU1F5eE5RVUZCUVN4RlFVRkZMRVZCUVVVc1EwRldTVHRCUVZkU1F5eE5RVUZCUVN4RlFVRkZMRVZCUVVVN1FVRllTU3hMUVVGYU8wRkJZVWc3UVVGRlJEczdPenM3T3p0cFEwRkhZV0lzUnl4RlFVRmhPMEZCUTNSQ0xGZEJRVXRITEVsQlFVd3NRMEZCVlVNc1JVRkJWaXhIUVVGbFNpeEhRVUZtTzBGQlEwZzdRVUZGUkRzN096czdPenRuUTBGSldVTXNTeXhGUVVGbFF5eE5MRVZCUVdkQ08wRkJRM1pETEZkQlFVdERMRWxCUVV3c1EwRkJWVVVzUTBGQlZpeEhRVUZqU2l4TFFVRmtPMEZCUTBFc1YwRkJTMFVzU1VGQlRDeERRVUZWUnl4RFFVRldMRWRCUVdOS0xFMUJRV1E3UVVGRFNEdEJRVVZFT3pzN096czdPelpDUVVsVFdTeHBRaXhGUVVGclJqdEJRVU4yUml4VlFVRkpReXhMUVVGS096dEJRVU5CTEZWQlFVbEVMR2xDUVVGcFFpeFpRVUZaUlN4clFrRkJha01zUlVGQmNVUTdRVUZEYWtSRUxGRkJRVUZCTEV0QlFVc3NSMEZCUjBVc2IwSkJRV0ZETEZOQlFXSXNRMEZCZFVKS0xHbENRVUYyUWl4RlFVRXdReXhMUVVGTFdDeEpRVUZNTEVOQlFWVk5MRTFCUVhCRUxFVkJRVFpFTEV0QlFVdE9MRWxCUVV3c1EwRkJWVThzUzBGQmRrVXNRMEZCVWp0QlFVTklMRTlCUmtRc1RVRkZUeXhKUVVGSkxFOUJRVkZKTEdsQ1FVRlNMRXRCUVN0Q0xGRkJRVzVETEVWQlFUWkRPMEZCUTJoRVF5eFJRVUZCUVN4TFFVRkxMRWRCUVVkRkxHOUNRVUZoUlN4SFFVRmlMRU5CUVdsQ1RDeHBRa0ZCYWtJc1EwRkJVanRCUVVOSUxFOUJSazBzVFVGSFJqdEJRVU5FUXl4UlFVRkJRU3hMUVVGTExFZEJRVWRFTEdsQ1FVRlNPMEZCUTBnN08wRkJRMFFzVjBGQlMxZ3NTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDV1N4TlFVRnNRaXhEUVVGNVFpeERRVUY2UWl4RlFVRTBRaXhEUVVFMVFpeEZRVUVyUWt3c1MwRkJTeXhEUVVGRFdpeEpRVUZ5UXp0QlFVTkJMR0ZCUVU5WkxFdEJRVkE3UVVGRFNEdEJRVVZFT3pzN096czdPenMwUWtGTFVVMHNVeXhGUVVFNFEwTXNaU3hGUVVFMlJUdEJRVUZCTEZWQlFYSkRReXhSUVVGeFF5eDFSVUZCYUVKRExGRkJRVkVzUTBGQlEwTXNTMEZCVHp0QlFVTXZTQ3hWUVVGSlF5eFJRVUZLTzBGQlEwRXNWVUZCU1VNc1ZVRkJTanM3UVVGRFFTeFZRVUZKVEN4bFFVRmxMRmxCUVZsTkxHMUNRVUV2UWl4RlFVRTJRenRCUVVONlEwWXNVVUZCUVVFc1VVRkJVU3hIUVVGSFNpeGxRVUZZTzBGQlEwRkxMRkZCUVVGQkxGVkJRVlVzUjBGQlJ5eExRVUZMZUVJc1NVRkJUQ3hEUVVGVlN5eE5RVUZXTEVOQlFXdENjVUlzVDBGQmJFSXNRMEZCTUVKSUxGRkJRVkVzUTBGQlEzWkNMRWxCUVc1RExFTkJRV0k3UVVGRFFYVkNMRkZCUVVGQkxGRkJRVkVzUTBGQlEzWkNMRWxCUVZRc1EwRkJZekpDTEVWQlFXUXNSMEZCYlVKUUxGRkJRVzVDTzBGQlEwZ3NUMEZLUkN4TlFVbFBPMEZCUTBoSkxGRkJRVUZCTEZWQlFWVXNSMEZCUjB3c1pVRkJZanRCUVVOQkxHRkJRVXR1UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnRRaXhWUVVGc1FpeEZRVUU0UWtjc1JVRkJPVUlzUjBGQmJVTlFMRkZCUVc1RE8wRkJRMGc3TzBGQlEwUXNWVUZCU1Vrc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xHTkJRVTBzU1VGQlNVa3NTMEZCU2l4RFFVRlZMRGhEUVVGV0xFTkJRVTQ3UVVGRFNEczdRVUZEUkN4VlFVRkpReXhUUVVGS096dEJRVU5CTEZWQlFVbFlMRk5CUVZNc1dVRkJXVXdzYTBKQlFYcENMRVZCUVRaRE8wRkJRM3BEWjBJc1VVRkJRVUVzVTBGQlV5eEhRVUZIWml4dlFrRkJZVU1zVTBGQllpeERRVUYxUWtjc1UwRkJka0lzUlVGQmEwTXNTMEZCUzJ4Q0xFbEJRVXdzUTBGQlZVMHNUVUZCTlVNc1JVRkJjVVFzUzBGQlMwNHNTVUZCVEN4RFFVRlZUeXhMUVVFdlJDeERRVUZhTzBGQlEwZ3NUMEZHUkN4TlFVVlBPMEZCUTBoelFpeFJRVUZCUVN4VFFVRlRMRWRCUVVkWUxGTkJRVm83UVVGRFNEczdRVUZEUkN4WFFVRkxiRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q1dTeE5RVUZzUWl4RFFVRjVRazhzVlVGQmVrSXNSVUZCY1VNc1EwRkJja01zUlVGQmQwTkxMRk5CUVZNc1EwRkJRemRDTEVsQlFXeEVPMEZCUTBFc1lVRkJUelpDTEZOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN09FSkJSMVZETEZNc1JVRkJkME03UVVGQlFUczdRVUZET1VOQkxFMUJRVUZCTEZOQlFWTXNRMEZCUTBNc1QwRkJWaXhEUVVGclFpeFZRVUZEYmtJc1MwRkJSQ3hGUVVGUmIwSXNWVUZCVWl4RlFVRjFRanRCUVVOeVF5eFpRVUZKY0VJc1MwRkJTeXhEUVVGRFdpeEpRVUZPTEVOQlFWY3lRaXhGUVVGWUxFbEJRV2xDTEVOQlFYSkNMRVZCUVhkQ08wRkJRM0JDTEdOQlFVMUlMRlZCUVZVc1IwRkJSeXhMUVVGSkxFTkJRVU40UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnhRaXhQUVVGc1FpeERRVUV3UW1Rc1MwRkJTeXhEUVVGRFdpeEpRVUZvUXl4RFFVRnVRanM3UVVGRFFTeGpRVUZKZDBJc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xHZENRVUZOVXl4SlFVRkpMRWRCUVVjc1MwRkJTU3hEUVVGRGFrTXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVOQlFXSTdPMEZCUTBFc1owSkJRVWxSTEZWQlFWVXNTVUZCU1N4RFFVRmtMRWxCUVcxQ1JpeFRRVUZUTEVOQlFVTkZMRlZCUVZVc1IwRkJSeXhEUVVGa0xFTkJRVlFzUTBGQk1FSm9ReXhKUVVFeFFpeEpRVUZyUTJsRExFbEJRWHBFTEVWQlFTdEVPMEZCUXpORVNDeGpRVUZCUVN4VFFVRlRMRU5CUVVOaUxFMUJRVllzUTBGQmFVSmxMRlZCUVdwQ0xFVkJRVFpDTEVOQlFUZENMRVZCUVdkRExFbEJRVWxRTEcxQ1FVRktMRU5CUVdsQ1VTeEpRVUZxUWl4RFFVRm9RenRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5LTEU5QlZrUTdRVUZYUVVnc1RVRkJRVUVzVTBGQlV5eEhRVUZIUVN4VFFVRlRMRU5CUVVOSkxFZEJRVllzUTBGQll5eFZRVUZEZEVJc1MwRkJSQ3hGUVVGUmIwSXNWVUZCVWl4RlFVRjFRanRCUVVNM1F5eGxRVUZQTzBGQlEwaHdRaXhWUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCUkVjN1FVRkZTRzlDTEZWQlFVRkJMRlZCUVZVc1JVRkJWa0U3UVVGR1J5eFRRVUZRTzBGQlNVZ3NUMEZNVnl4RlFVdFVSeXhKUVV4VExFTkJTMG9zVlVGQlEwTXNRMEZCUkN4RlFVRkpReXhEUVVGS0xFVkJRVlU3UVVGRFpDeFpRVUZOUXl4TlFVRk5MRWRCUVVjc1MwRkJTU3hEUVVGRGRFTXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDY1VJc1QwRkJiRUlzUTBGQk1FSlZMRU5CUVVNc1EwRkJRM2hDTEV0QlFVWXNRMEZCVVZvc1NVRkJiRU1zUTBGQlpqczdRVUZEUVN4WlFVRk5kVU1zVFVGQlRTeEhRVUZITEV0QlFVa3NRMEZCUTNaRExFbEJRVXdzUTBGQlZVc3NUVUZCVml4RFFVRnJRbkZDTEU5QlFXeENMRU5CUVRCQ1Z5eERRVUZETEVOQlFVTjZRaXhMUVVGR0xFTkJRVkZhTEVsQlFXeERMRU5CUVdZN08wRkJRMEVzWlVGQlVYTkRMRTFCUVUwc1IwRkJSME1zVFVGQlZpeEpRVUZ6UWtnc1EwRkJReXhEUVVGRFNpeFZRVUZHTEVkQlFXVkxMRU5CUVVNc1EwRkJRMHdzVlVGQk9VTTdRVUZEU0N4UFFWUlhMRVZCVTFSRkxFZEJWRk1zUTBGVFRDeFZRVUZCVFN4WlFVRlpPMEZCUVVFc1pVRkJTVUVzV1VGQldTeERRVUZETlVJc1MwRkJha0k3UVVGQlFTeFBRVlJRTEVOQlFWbzdRVUZWUVd0Q0xFMUJRVUZCTEZOQlFWTXNRMEZCUTBNc1QwRkJWaXhEUVVGclFpeFZRVUZCYmtJc1MwRkJTeXhGUVVGSk8wRkJRM1pDTEZsQlFVMVpMRlZCUVZVc1IwRkJSeXhMUVVGSkxFTkJRVU40UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSnhRaXhQUVVGc1FpeERRVUV3UW1Rc1MwRkJTeXhEUVVGRFdpeEpRVUZvUXl4RFFVRnVRanM3UVVGRFFTeFpRVUZKZDBJc1ZVRkJWU3hIUVVGSExFTkJRV3BDTEVWQlFXOUNPMEZCUTJoQ0xGVkJRVUVzUzBGQlNTeERRVUZEZUVJc1NVRkJUQ3hEUVVGVlN5eE5RVUZXTEVOQlFXdENXU3hOUVVGc1FpeERRVUY1UWs4c1ZVRkJla0lzUlVGQmNVTXNRMEZCY2tNN1FVRkRTRHM3UVVGRFJGb3NVVUZCUVVFc1MwRkJTeXhEUVVGRFdpeEpRVUZPTEVOQlFWZFZMRVZCUVZnc1IwRkJaMElzUjBGQmFFSTdRVUZEU0N4UFFVNUVPMEZCVDBFc1ZVRkJUU3RDTEV0QlFVc3NSMEZCUnl4dlFrRkJaRHRCUVVOQkxGZEJRVXQ2UXl4SlFVRk1MRU5CUVZWTkxFMUJRVllzUTBGQmEwSnZReXhKUVVGc1FpeERRVUYxUWp0QlFVTnVRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZSaXhMUVVSbE8wRkJSVzVDY0VNc1VVRkJRVUVzVFVGQlRTeEZRVUZGZVVJc1UwRkJVeXhEUVVGRFNTeEhRVUZXTEVOQlFXTXNWVUZCUVZnc1VVRkJVVHRCUVVGQkxHbENRVUZKUVN4UlFVRlJMRU5CUVVOMlFpeEpRVUZpTzBGQlFVRXNVMEZCZEVJN1FVRkdWeXhQUVVGMlFqdEJRVWxCTEdGQlFVOTVReXhMUVVGUU8wRkJRMGc3UVVGRlJEczdPenM3TzJkRFFVZFpkRUlzWlN4RlFVRjNRenRCUVVOb1JDeFZRVUZKU1N4UlFVRktPMEZCUTBFc1ZVRkJTVU1zVlVGQlNqczdRVUZEUVN4VlFVRkpUQ3hsUVVGbExGbEJRVmxOTEcxQ1FVRXZRaXhGUVVFMlF6dEJRVU42UTBZc1VVRkJRVUVzVVVGQlVTeEhRVUZIU2l4bFFVRllPMEZCUTBGTExGRkJRVUZCTEZWQlFWVXNSMEZCUnl4TFFVRkxlRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q2NVSXNUMEZCYkVJc1EwRkJNRUpJTEZGQlFWRXNRMEZCUTNaQ0xFbEJRVzVETEVOQlFXSTdRVUZEU0N4UFFVaEVMRTFCUjA4N1FVRkRTSGRDTEZGQlFVRkJMRlZCUVZVc1IwRkJSMHdzWlVGQllqdEJRVU5JT3p0QlFVTkVMRmRCUVV0dVFpeEpRVUZNTEVOQlFWVkxMRTFCUVZZc1EwRkJhMEpaTEUxQlFXeENMRU5CUVhsQ1R5eFZRVUY2UWl4RlFVRnhReXhEUVVGeVF6dEJRVU5JTzBGQlJVUTdPenM3T3pzclFrRkhWMHdzWlN4RlFVRjNRenRCUVVNdlF5eFZRVUZKU1N4UlFVRktPMEZCUTBFc1ZVRkJTVU1zVlVGQlNqczdRVUZEUVN4VlFVRkpUQ3hsUVVGbExGbEJRVmxOTEcxQ1FVRXZRaXhGUVVFMlF6dEJRVU42UTBZc1VVRkJRVUVzVVVGQlVTeEhRVUZIU2l4bFFVRllPMEZCUTBGTExGRkJRVUZCTEZWQlFWVXNSMEZCUnl4TFFVRkxlRUlzU1VGQlRDeERRVUZWU3l4TlFVRldMRU5CUVd0Q2NVSXNUMEZCYkVJc1EwRkJNRUpJTEZGQlFWRXNRMEZCUTNaQ0xFbEJRVzVETEVOQlFXSTdRVUZEU0N4UFFVaEVMRTFCUjA4N1FVRkRTSGRDTEZGQlFVRkJMRlZCUVZVc1IwRkJSMHdzWlVGQllqdEJRVU5CU1N4UlFVRkJRU3hSUVVGUkxFZEJRVWNzU1VGQlNVVXNiVUpCUVVvc1EwRkJhVUlzUzBGQlMzcENMRWxCUVV3c1EwRkJWVXNzVFVGQlZpeERRVUZyUW0xQ0xGVkJRV3hDTEVOQlFXcENMRU5CUVZnN1FVRkRTRHM3UVVGRFJDeFZRVUZKUkN4UlFVRlJMRU5CUVVOMlFpeEpRVUZVTEVOQlFXTXlRaXhGUVVGc1FpeEZRVUZ6UWp0QlFVTnNRa29zVVVGQlFVRXNVVUZCVVN4RFFVRkRka0lzU1VGQlZDeERRVUZqTWtJc1JVRkJaQ3hIUVVGdFFpeERRVUZ1UWp0QlFVTkJMR0ZCUVVzelFpeEpRVUZNTEVOQlFWVkxMRTFCUVZZc1EwRkJhMEpaTEUxQlFXeENMRU5CUVhsQ1R5eFZRVUZWTEVkQlFVY3NRMEZCZEVNc1JVRkJlVU1zUTBGQmVrTTdRVUZEU0N4UFFVaEVMRTFCUjA4c1NVRkJTU3hMUVVGTGVFSXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVWQlFXdERSeXhGUVVGMFF5eEZRVUV3UXp0QlFVTTNReXhoUVVGTE0wSXNTVUZCVEN4RFFVRlZTeXhOUVVGV0xFTkJRV3RDYlVJc1ZVRkJWU3hIUVVGSExFTkJRUzlDTEVWQlFXdERSeXhGUVVGc1F5eEhRVUYxUXl4RFFVRjJRenRCUVVOQkxHRkJRVXN6UWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUTBGQmEwSlpMRTFCUVd4Q0xFTkJRWGxDVHl4VlFVRjZRaXhGUVVGeFF5eERRVUZ5UXp0QlFVTklMRTlCU0Uwc1RVRkhRVHRCUVVOSUxHTkJRVTBzU1VGQlNVa3NTMEZCU2l4RFFVRlZMR3RFUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5LTzBGQlJVUTdPenM3T3p0clEwRkhZenRCUVVOV0xGZEJRVXMxUWl4SlFVRk1MRU5CUVZWTExFMUJRVllzUjBGQmJVSXNSVUZCYmtJN1FVRkRTRHRCUVVWRU96czdPenM3T0VKQlIxVTdRVUZEVGl4VlFVRkpkVU1zVDBGQlR5eEhRVUZITEV0QlFVczFReXhKUVVGTUxFTkJRVlZMTEUxQlFWWXNRMEZCYTBKM1F5eE5RVUZzUWl4RFFVRjVRaXhWUVVGRFF5eERRVUZFTEVWQlFVbERMRU5CUVVvN1FVRkJRU3hsUVVGVlJDeERRVUZETEVkQlFVZERMRU5CUVVNc1EwRkJRM0pETEVWQlFVNHNSMEZCV1hGRExFTkJRVU1zUTBGQlEzSkRMRVZCUVdRc1IwRkJiMEp2UXl4RFFVRTVRanRCUVVGQkxFOUJRWHBDTEVWQlFUQkVMRU5CUVRGRUxFTkJRV1E3UVVGRFFTeFhRVUZMT1VNc1NVRkJUQ3hEUVVGVlZTeEZRVUZXTEVkQlFXVnJReXhQUVVGbU8wRkJRMEVzVjBGQlN6VkRMRWxCUVV3c1EwRkJWVXNzVFVGQlZpeERRVUZyUWpCQ0xFOUJRV3hDTEVOQlFUQkNMRlZCUVVGdVFpeExRVUZMTzBGQlFVRXNaVUZCU1VFc1MwRkJTeXhEUVVGRFJpeEZRVUZPTEVkQlFWZHJReXhQUVVGbU8wRkJRVUVzVDBGQkwwSTdRVUZEU0R0QlFVVkVPenM3T3pzN0swSkJSMWM3UVVGRFVDeFhRVUZMU1N4UFFVRk1PMEZCUTBFc1lVRkJUME1zU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZjc1MwRkJTME1zVFVGQlRDeEZRVUZZTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN05rSkJSMU03UVVGRFRDeFhRVUZMU0N4UFFVRk1PMEZCUTBFc1lVRkJUME1zU1VGQlNTeERRVUZEUnl4VFFVRk1MRU5CUVdVc1MwRkJTM0JFTEVsQlFYQkNMRU5CUVZBN1FVRkRTRHM3T3pzN096dEpRVTFQY1VJc1VUczdPMWRCUVVGQkxGRTdRVUZCUVVFc1JVRkJRVUVzVVN4RFFVRkJRU3hSTzBGQlFVRkJMRVZCUVVGQkxGRXNRMEZCUVVFc1VUdEJRVUZCUVN4RlFVRkJRU3hSTEVOQlFVRkJMRkU3UVVGQlFVRXNSVUZCUVVFc1VTeERRVUZCUVN4Uk8wZEJRVUZCTEZFc2QwSkJRVUZCTEZFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QkJibWx0WVhScGIyNHNJRk5vWVhCbFRHRjVaWElzSUZKbFptVnlaVzVqWlVsRUlIMGdabkp2YlNCY0lpNHZZVzVwYldGMGFXOXVYQ0k3WEc1cGJYQnZjblFnZXlCS1UwMXZkbWx1VEdGNVpYSXNJRXhoZVdWeVJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dmJHRjVaWEluWEc1cGJYQnZjblFnZFhWcFpDQm1jbTl0SUNkMWRXbGtMM1kwSnp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nU2xOTmIzWnBiaUI3WEc0Z0lDQWdjSEpwZG1GMFpTQnliMjkwT2lCQmJtbHRZWFJwYjI0N1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1puQnpJRzUxYldKbGNpQnZaaUJtY21GdFpYTWdjR1Z5SUhObFkyOXVaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjNhV1IwYUNCM2FXUjBhQ0J2WmlCMmFXVjNjRzl5ZENBb2NIZ3BYRzRnSUNBZ0lDb2dRSEJoY21GdElHaGxhV2RvZENCb1pXbG5hSFFnYjJZZ2RtbGxkM0J2Y25RZ0tIQjRLVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1p3Y3pvZ2JuVnRZbVZ5SUQwZ016QXNJSGRwWkhSb09pQnVkVzFpWlhJZ1BTQTRNREFzSUdobGFXZG9kRG9nYm5WdFltVnlJRDBnTmpBd0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkQ0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p5T2lCbWNITXNYRzRnSUNBZ0lDQWdJQ0FnSUNCM09pQjNhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2c2SUdobGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmtaRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeWN6b2dXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjM05sZEhNNklGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkSE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBPaUJiWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0E2SURCY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCbWNITWdiblZ0WW1WeUlHOW1JR1p5WVcxbGN5QndaWElnYzJWamIyNWtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBSbkpoYldWU1lYUmxLR1p3Y3pvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNW1jaUE5SUdad2MxeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCM2FXUjBhQ0IzYVdSMGFDQnZaaUIyYVdWM2NHOXlkQ0FvY0hncFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdobGFXZG9kQ0JvWldsbmFIUWdiMllnZG1sbGQzQnZjblFnS0hCNEtWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGWnBaWGR3YjNKMEtIZHBaSFJvT2lCdWRXMWlaWElzSUdobGFXZG9kRG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEM1M0lEMGdkMmxrZEdoY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MExtZ2dQU0JvWldsbmFIUmNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQmhaR1FnWVNCemFXMXdiR1VnWjNKaGNHaHBZMkZzSUd4aGVXVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHUnZiVXhoZVdWeVQzSkJjM05sZEVsa0lHRWdVMVpISUdWc1pXMWxiblFnUkU5TklHOXlJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQmhjM05sZENCSlJDQnVaV1ZrY3lCMGJ5QmlaU0JwYm5ObGNuUmxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHRmtaRXhoZVdWeUtHUnZiVXhoZVdWeVQzSkJjM05sZEVsa09pQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUWdmQ0JLVTAxdmRtbHVUR0Y1WlhJZ2ZDQlNaV1psY21WdVkyVkpSQ2s2SUVwVFRXOTJhVzVNWVhsbGNpQjdYRzRnSUNBZ0lDQWdJR3hsZENCc1lYbGxjam9nU2xOTmIzWnBia3hoZVdWeU8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkc5dFRHRjVaWEpQY2tGemMyVjBTV1FnYVc1emRHRnVZMlZ2WmlCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlJRDBnVEdGNVpYSkdZV04wYjNKNUxtaHBaWEpoY21Ob2VTaGtiMjFNWVhsbGNrOXlRWE56WlhSSlpDd2dkR2hwY3k1eWIyOTBMbUZ6YzJWMGN5RXNJSFJvYVhNdWNtOXZkQzVtYjI1MGN5RXBYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JQ2hrYjIxTVlYbGxjazl5UVhOelpYUkpaQ2tnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxjaUE5SUV4aGVXVnlSbUZqZEc5eWVTNXlaV1lvWkc5dFRHRjVaWEpQY2tGemMyVjBTV1FwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2lBOUlHUnZiVXhoZVdWeVQzSkJjM05sZEVsa1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtEQXNJREFzSUd4aGVXVnlMbkp2YjNRcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc1lYbGxjbHh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRZWE5yVDNKRWIyMGdZU0JUVmtjZ1pXeGxiV1Z1ZENCRVQwMGdiM0lnU2xOTmIzWnBia3hoZVdWeUlIUnZJR0psSUhSb1pTQnRZWE5yWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hoZVdWeVVtVm1UM0pKYm1SbGVDQmhJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQnBibVJsZUNCdlppQnNZWGxsY2lCMGJ5QmlaU0IwYUdVZ2JXRnphMlZrSUd4aGVXVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWhjMnRVZVhCbElIZG9hV05vSUhSNWNHVWdiMllnYldGemF5QjBieUIxYzJVc0lIVnpaU0JnVFdGemExUjVjR1V1S21BZ2RHOGdjM0JsWTJsbWVWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdGa1pFMWhjMnNvYldGemEwOXlSRzl0T2lCS1UwMXZkbWx1VEdGNVpYSWdmQ0JUVmtkSGNtRndhR2xqYzBWc1pXMWxiblFzSUd4aGVXVnlVbVZtVDNKSmJtUmxlRG9nYm5WdFltVnlJSHdnU2xOTmIzWnBia3hoZVdWeUxDQnRZWE5yVkhsd1pUb2dUV0Z6YTFSNWNHVWdQU0JOWVhOclZIbHdaUzVCYkhCb1lTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JHRjVaWEpTWldZNklFcFRUVzkyYVc1TVlYbGxjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JHRjVaWEpKYm1SbGVEb2diblZ0WW1WeVhHNGdJQ0FnSUNBZ0lHbG1JQ2hzWVhsbGNsSmxaazl5U1c1a1pYZ2dhVzV6ZEdGdVkyVnZaaUJLVTAxdmRtbHVUR0Y1WlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlVbVZtSUQwZ2JHRjVaWEpTWldaUGNrbHVaR1Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnZEdocGN5NXliMjkwTG14aGVXVnljeUV1YVc1a1pYaFBaaWhzWVhsbGNsSmxaaTV5YjI5MEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGNVpYSlNaV1l1Y205dmRDNTBkQ0E5SUcxaGMydFVlWEJsWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnYkdGNVpYSlNaV1pQY2tsdVpHVjRYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SVZ0c1lYbGxja2x1WkdWNFhTNTBkQ0E5SUcxaGMydFVlWEJsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR3hoZVdWeVNXNWtaWGdnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBkcGRtVnVJR3hoZVdWeUlHbHpJRzV2ZENCaElHMWxiV0psY2lCdlppQjBhR2x6SUVwVFRXOTJhVzR1SnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnNaWFFnYldGemEweGhlV1Z5T2lCS1UwMXZkbWx1VEdGNVpYSmNiaUFnSUNBZ0lDQWdhV1lnS0cxaGMydFBja1J2YlNCcGJuTjBZVzVqWlc5bUlGTldSMGR5WVhCb2FXTnpSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXRnphMHhoZVdWeUlEMGdUR0Y1WlhKR1lXTjBiM0o1TG1ocFpYSmhjbU5vZVNodFlYTnJUM0pFYjIwc0lIUm9hWE11Y205dmRDNWhjM05sZEhNaExDQjBhR2x6TG5KdmIzUXVabTl1ZEhNaEtWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGemEweGhlV1Z5SUQwZ2JXRnphMDl5Ukc5dFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtHeGhlV1Z5U1c1a1pYZ3NJREFzSUcxaGMydE1ZWGxsY2k1eWIyOTBLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0Z6YTB4aGVXVnlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHeGhlV1Z5VW1WbWN5QmhJSE5sZENCdlppQnNZWGxsY25NZ2RHOGdZbVVnY0dGamEyVmtJR0Z6SUdGdUlHRnpjMlYwWEc0Z0lDQWdJQ292WEc0Z0lDQWdiV0ZyWlVGemMyVjBLR3hoZVdWeVVtVm1jem9nU2xOTmIzWnBia3hoZVdWeVcxMHBPaUJTWldabGNtVnVZMlZKUkNCN1hHNGdJQ0FnSUNBZ0lHeGhlV1Z5VW1WbWN5NW1iM0pGWVdOb0tDaHNZWGxsY2l3Z2FXNXVaWEpKYm1SbGVDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGVXVnlMbkp2YjNRdWRIUWdQVDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUd4aGVXVnlTVzVrWlhnZ1BTQjBhR2x6TG5KdmIzUXViR0Y1WlhKeklTNXBibVJsZUU5bUtHeGhlV1Z5TG5KdmIzUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGVXVnlTVzVrWlhnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxaGMyc2dQU0IwYUdsekxuSnZiM1F1YkdGNVpYSnpJVnRzWVhsbGNrbHVaR1Y0SUMwZ01WMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVibVZ5U1c1a1pYZ2dQVDBnTUNCOGZDQnNZWGxsY2xKbFpuTmJhVzV1WlhKSmJtUmxlQ0F0SURGZExuSnZiM1FnSVQwZ2JXRnpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGNVpYSlNaV1p6TG5Od2JHbGpaU2hwYm01bGNrbHVaR1Y0TENBd0xDQnVaWGNnU2xOTmIzWnBia3hoZVdWeUtHMWhjMnNnWVhNZ1UyaGhjR1ZNWVhsbGNpa3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lHeGhlV1Z5VW1WbWN5QTlJR3hoZVdWeVVtVm1jeTV0WVhBb0tHeGhlV1Z5TENCcGJtNWxja2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhlV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWJtVnlTVzVrWlhoY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrdWMyOXlkQ2dvWVN3Z1lpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1lVbHVaR1Y0SUQwZ2RHaHBjeTV5YjI5MExteGhlV1Z5Y3lFdWFXNWtaWGhQWmloaExteGhlV1Z5TG5KdmIzUXBYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JpU1c1a1pYZ2dQU0IwYUdsekxuSnZiM1F1YkdGNVpYSnpJUzVwYm1SbGVFOW1LR0l1YkdGNVpYSXVjbTl2ZENsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9ZVWx1WkdWNElDMGdZa2x1WkdWNEtTQjhmQ0FvWVM1cGJtNWxja2x1WkdWNElDMGdZaTVwYm01bGNrbHVaR1Y0S1Z4dUlDQWdJQ0FnSUNCOUtTNXRZWEFvYkdGNVpYSlhjbUZ3Y0dWeUlEMCtJR3hoZVdWeVYzSmhjSEJsY2k1c1lYbGxjaWxjYmlBZ0lDQWdJQ0FnYkdGNVpYSlNaV1p6TG1admNrVmhZMmdvYkdGNVpYSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JHRjVaWEpKYm1SbGVDQTlJSFJvYVhNdWNtOXZkQzVzWVhsbGNuTWhMbWx1WkdWNFQyWW9iR0Y1WlhJdWNtOXZkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hzWVhsbGNrbHVaR1Y0SUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkQzVzWVhsbGNuTWhMbk53YkdsalpTaHNZWGxsY2tsdVpHVjRMQ0F4S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEl1Y205dmRDNXZjQ0E5SURsbE9WeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaV1pKWkNBOUlIVjFhV1FvS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdVlYTnpaWFJ6SVM1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUJ5WldaSlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnljem9nYkdGNVpYSlNaV1p6TG0xaGNDaHNZWGxsY2xKbFppQTlQaUJzWVhsbGNsSmxaaTV5YjI5MEtWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZtU1dSY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYkdGNVpYSlNaV1pQY2tsdVpHVjRJR0VnU2xOTmIzWnBia3hoZVdWeUlHOXlJR2x1WkdWNElHOW1JR3hoZVdWeUlIUnZJSEpsYlc5MlpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGJXOTJaVXhoZVdWeUtHeGhlV1Z5VW1WbVQzSkpibVJsZURvZ2JuVnRZbVZ5SUh3Z1NsTk5iM1pwYmt4aGVXVnlLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnNZWGxsY2xKbFpqb2dTbE5OYjNacGJreGhlV1Z5WEc0Z0lDQWdJQ0FnSUd4bGRDQnNZWGxsY2tsdVpHVjRPaUJ1ZFcxaVpYSmNiaUFnSUNBZ0lDQWdhV1lnS0d4aGVXVnlVbVZtVDNKSmJtUmxlQ0JwYm5OMFlXNWpaVzltSUVwVFRXOTJhVzVNWVhsbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEpTWldZZ1BTQnNZWGxsY2xKbFprOXlTVzVrWlhoY2JpQWdJQ0FnSUNBZ0lDQWdJR3hoZVdWeVNXNWtaWGdnUFNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SVM1cGJtUmxlRTltS0d4aGVXVnlVbVZtTG5KdmIzUXBYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxja2x1WkdWNElEMGdiR0Y1WlhKU1pXWlBja2x1WkdWNFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjM0JzYVdObEtHeGhlV1Z5U1c1a1pYZ3NJREVwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hoZVdWeVVtVm1UM0pKYm1SbGVDQmhJRXBUVFc5MmFXNU1ZWGxsY2lCdmNpQnBibVJsZUNCdlppQnRZWE5ySUc5eUlHMWhjMnRsWkNCc1lYbGxjaUIwYnlCeVpXMXZkbVZjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaVzF2ZG1WTllYTnJLR3hoZVdWeVVtVm1UM0pKYm1SbGVEb2diblZ0WW1WeUlId2dTbE5OYjNacGJreGhlV1Z5S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JzWVhsbGNsSmxaam9nU2xOTmIzWnBia3hoZVdWeVhHNGdJQ0FnSUNBZ0lHeGxkQ0JzWVhsbGNrbHVaR1Y0T2lCdWRXMWlaWEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHeGhlV1Z5VW1WbVQzSkpibVJsZUNCcGJuTjBZVzVqWlc5bUlFcFRUVzkyYVc1TVlYbGxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR0Y1WlhKU1pXWWdQU0JzWVhsbGNsSmxaazl5U1c1a1pYaGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGVXVnlTVzVrWlhnZ1BTQjBhR2x6TG5KdmIzUXViR0Y1WlhKeklTNXBibVJsZUU5bUtHeGhlV1Z5VW1WbUxuSnZiM1FwWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2tsdVpHVjRJRDBnYkdGNVpYSlNaV1pQY2tsdVpHVjRYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYbGxjbEpsWmlBOUlHNWxkeUJLVTAxdmRtbHVUR0Y1WlhJb2RHaHBjeTV5YjI5MExteGhlV1Z5Y3lGYmJHRjVaWEpKYm1SbGVGMGdZWE1nVTJoaGNHVk1ZWGxsY2lsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYkdGNVpYSlNaV1l1Y205dmRDNTBkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR0Y1WlhKU1pXWXVjbTl2ZEM1MGRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaExuTndiR2xqWlNoc1lYbGxja2x1WkdWNElDMGdNU3dnTVNsY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5KdmIzUXViR0Y1WlhKeklWdHNZWGxsY2tsdVpHVjRJQ3NnTVYwdWRIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaFcyeGhlV1Z5U1c1a1pYZ2dLeUF4WFM1MGRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXNZWGxsY25NaExuTndiR2xqWlNoc1lYbGxja2x1WkdWNExDQXhLVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdhVzV3ZFhRZ2JHRjVaWElnYVhNZ2JtOTBJR0VnYldGemF5QnZjaUJoSUcxaGMydGxaQ0JzWVhsbGNpNG5LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWTJ4bFlYSWdZV3hzSUd4aGVXVnljMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnNaV0Z5VEdGNVpYSnpLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNRdWJHRjVaWEp6SUQwZ1cxMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQnRZV3RsSUdGc2JDQnNZWGxsY25NZ1pXNWtJR0YwSUhOaGJXVWdkR2x0WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ1YVdadmNtMG9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnRZWGhVYVcxbElEMGdkR2hwY3k1eWIyOTBMbXhoZVdWeWN5RXVjbVZrZFdObEtDaHdMQ0IyS1NBOVBpQndJRHdnZGk1dmNDRWdQeUIyTG05d0lTQTZJSEFzSURBcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXZjQ0E5SUcxaGVGUnBiV1ZjYmlBZ0lDQWdJQ0FnZEdocGN5NXliMjkwTG14aGVXVnljeUV1Wm05eVJXRmphQ2hzWVhsbGNpQTlQaUJzWVhsbGNpNXZjQ0E5SUcxaGVGUnBiV1VwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWlhod2IzSjBJRXh2ZEhScFpTQmhjeUJLWVhaaFUyTnlhWEIwSUU5aWFtVmpkQ0JjYmlBZ0lDQWdLaTljYmlBZ0lDQjBiMDlpYW1WamRDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdEtDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1Y0dGeWMyVW9kR2hwY3k1MGIwcFRUMDRvS1NsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCbGVIQnZjblFnVEc5MGRHbGxJR0Z6SUVwVFQwNGdkR1Y0ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFJ2U2xOUFRpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFibWxtYjNKdEtDbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1YzNSeWFXNW5hV1o1S0hSb2FYTXVjbTl2ZENsY2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQjdJRXhoZVdWeVJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dmJHRjVaWEluWEc1bGVIQnZjblFnZXlCRllYTnBibWRHWVdOMGIzSjVJSDBnWm5KdmJTQW5MaTlsWVhOcGJtY25YRzVsZUhCdmNuUWdleUJRWVhSb1RXRnJaWElnZlNCbWNtOXRJQ2N1TDNCaGRHZ25YRzVsZUhCdmNuUWdaVzUxYlNCTllYTnJWSGx3WlNCN1hHNGdJQ0FnUVd4d2FHRWdQU0F4TEZ4dUlDQWdJRWx1ZG1WeWRFRnNjR2hoSUQwZ01peGNiaUFnSUNCTWRXMWhJRDBnTXl4Y2JpQWdJQ0JKYm5abGNuUk1kVzFoSUQwZ05GeHVmU0pkZlE9PSIsIi8vIGltcG9ydCBKU01vdmluIGZyb20gJy4vanNtb3Zpbi9qc21vdmluLmJ1bmRsZS5qcyc7XHJcbi8vIGltcG9ydCBKU01vdmluIGZyb20gJy4vanNtb3Zpbi9qc21vdmluLmpzJztcclxuaW1wb3J0IEpTTW92aW4gZnJvbSAnanNtb3Zpbic7XHJcblxyXG5leHBvcnQgbGV0IGdsb2JhbFZhciA9IHtcclxuICAgIGpzTW92aW46IG5ldyBKU01vdmluKCksXHJcbiAgICBtYXJrTGF5ZXJzOiBuZXcgTWFwKClcclxuICAgIC8vIGFzc2V0czogXHJcbn07IiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5JykgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSBBW2xlbmd0aF0gPSBhcmd1bWVudHNbbGVuZ3RoXTtcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XG4gIH0gfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCJpbXBvcnQgQ2hhcnRTcGVjIGZyb20gJy4vQ2hhcnRTcGVjLmpzJztcclxuaW1wb3J0IEFjdGlvblNwZWMgZnJvbSAnLi9BY3Rpb25TcGVjLmpzJztcclxuaW1wb3J0IEdyb3VwaW5nU3BlYyBmcm9tICcuL0dyb3VwaW5nU3BlYy5qcyc7XHJcbmltcG9ydCBUaW1pbmdTcGVjIGZyb20gJy4vVGltaW5nU3BlYy5qcyc7XHJcbmltcG9ydCB7IENhbmlzVXRpbCB9IGZyb20gJy4vdXRpbC9VdGlsLmpzJztcclxuaW1wb3J0IHsgZ2xvYmFsVmFyIH0gZnJvbSAnLi91dGlsL0dsb2JhbFZhci5qcyc7XHJcbmltcG9ydCB7IGdldEJvdW5kaW5nQm94IH0gZnJvbSAnanNtb3Zpbi9iaW4vaGVscGVyJztcclxuaW1wb3J0IHsgTGF5ZXJGYWN0b3J5IH0gZnJvbSAnanNtb3Zpbic7XHJcblxyXG5jbGFzcyBBbmltYXRpb24gZXh0ZW5kcyBUaW1pbmdTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5jaGFydElkeDtcclxuICAgICAgICB0aGlzLnNlbGVjdG9yO1xyXG4gICAgICAgIHRoaXMuZ3JvdXBpbmcgPSBuZXcgR3JvdXBpbmdTcGVjKCk7XHJcbiAgICAgICAgdGhpcy5hY3Rpb25zID0gW107XHJcblxyXG4gICAgICAgIC8vc2F2ZSBhbGwgZG9tIGF0dHJzIG9mIHRoZSBtYXJrcyBzZWxlY3RlZCBpbiB0aGlzIGFuaW1hdGlvblxyXG4gICAgICAgIC8vIEFuaW1hdGlvbi5kb21NYXJrcyA9IG5ldyBNYXAoKTsvL2tleTogbWFya0lkLCB2YWx1ZTogZG9tIGF0dHJzXHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25TdGFydFRpbWUgPSAxMDAwMDAwO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uRW5kVGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5yb290ID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZUNvbnN0YW50cyhjb25zdGFudHMsIHN0YXR1cyA9IG51bGwpIHtcclxuICAgICAgICAvL3JlcGxhY2UgY29uc3RhbnRzIGluIGFuaW1hdGlvbiB0aW1pbmdcclxuICAgICAgICB0aGlzLnJlcGxhY2VPZmZzZXRDb25zdChjb25zdGFudHMsIHN0YXR1cyk7XHJcblxyXG4gICAgICAgIC8vcmVwbGFjZSBjb25zdGFudHMgaW4gZ3JvdXBpbmcgdGltaW5nXHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBpbmcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBpbmcucmVwbGFjZURlbGF5Q29uc3QoY29uc3RhbnRzLCBzdGF0dXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9yZXBsYWNlIGNvbnN0YW50cyBpbiBhY3Rpb24gdGltaW5nXHJcbiAgICAgICAgdGhpcy5hY3Rpb25zLmZvckVhY2goYSA9PiB7XHJcbiAgICAgICAgICAgIGEucmVwbGFjZU9mZnNldENvbnN0KGNvbnN0YW50cywgc3RhdHVzKTtcclxuICAgICAgICAgICAgYS5yZXBsYWNlRHVyYXRpb25Db25zdChjb25zdGFudHMsIHN0YXR1cyk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHRyYW5zbGF0ZSBmcm9tIGpzb24gb2JqZWN0IHRvIEFuaW1hdGlvbiBvYmplY3RcclxuICAgICAqIEBwYXJhbSB7SlNPTiBvYmp9IGFuaW1hdGlvbkpzb24gXHJcbiAgICAgKi9cclxuICAgIHRyYW5zbGF0ZShhbmltYXRpb25Kc29uLCB1c2VkQ2hhbmdlZEF0dHJzLCB1cGRhdGluZyA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5jaGFydElkeCA9IGFuaW1hdGlvbkpzb24uY2hhcnRJZHg7XHJcbiAgICAgICAgaWYgKCF1cGRhdGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdG9yID0gYW5pbWF0aW9uSnNvbi5zZWxlY3RvcjsvL2luaXQgc2VsZWN0b3JcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZWZlcmVuY2UgPSBhbmltYXRpb25Kc29uLnJlZmVyZW5jZTtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IGFuaW1hdGlvbkpzb24ub2Zmc2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgYW5pbWF0aW9uSnNvbi5ncm91cGluZyAhPT0gJ3VuZGVmaW5lZCcpIHsvL2luaXQgZ3JvdXBpbmdcclxuICAgICAgICAgICAgdGhpcy5ncm91cGluZy5pbml0R3JvdXBpbmcoYW5pbWF0aW9uSnNvbi5ncm91cGluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3RyYW5zbGF0ZSBhY3Rpb24gc3BlY3MgaW4gdGhlIGFuaW1hdGlvbiBKc29uXHJcbiAgICAgICAgaWYgKHR5cGVvZiBhbmltYXRpb25Kc29uLmVmZmVjdHMgIT09ICd1bmRlZmluZWQnKSB7Ly9pbml0IGFjdGlvbnNcclxuICAgICAgICAgICAgaWYgKHVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgYWN0aW9uSnNvbjsgaSA8IGFuaW1hdGlvbkpzb24uZWZmZWN0cy5sZW5ndGggfCAoYWN0aW9uSnNvbiA9IGFuaW1hdGlvbkpzb24uZWZmZWN0c1tpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uSnNvbi5jaGFydElkeCA9IGFuaW1hdGlvbkpzb24uY2hhcnRJZHg7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmlzQXR0ckFjdGlvbkpzb25BcnIgPSBBY3Rpb25TcGVjLnRyYW5zVG9WaXN1YWxBdHRyQWN0aW9uKGFjdGlvbkpzb24sIGFuaW1hdGlvbkpzb24uY2hhcnRJZHgsIHVzZWRDaGFuZ2VkQXR0cnMsIENoYXJ0U3BlYy5kYXRhVHJhbnMpOy8vdHJhbnNsYXRlIHRlbXBsYXRlcyB0byBuby10ZW1wbGF0ZXNcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCB2aXNBdHRyQWN0aW9uSnNvbjsgaiA8IHZpc0F0dHJBY3Rpb25Kc29uQXJyLmxlbmd0aCB8ICh2aXNBdHRyQWN0aW9uSnNvbiA9IHZpc0F0dHJBY3Rpb25Kc29uQXJyW2pdKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEFjdGlvbiA9IG5ldyBBY3Rpb25TcGVjKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQWN0aW9uLmluaXRBY3Rpb24odmlzQXR0ckFjdGlvbkpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucy5wdXNoKHRtcEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2FsY3VsYXRlIHRpbWluZyBmb3IgZWFjaCBtYXJrO1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWFya0lkcyA6IGFycmF5IG9mIG1hcmsgaWRzXHJcbiAgICAgKiBAcGFyYW0ge0FuaW1hdGlvbn0gbGFzdEFuaW1hdGlvbiA6IGxhc3QgYW5pbWF0aW9uIGluIG9yZGVyIHRvIGNhbGN1bGF0ZSB0aW1lXHJcbiAgICAgKi9cclxuICAgIGNhbEFuaVRpbWUobWFya0lkcywgbGFzdEFuaW1hdGlvbikge1xyXG4gICAgICAgIGNvbnNvbGUudGltZSgnY2FsIGFuaSB0aW1lJyk7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGUgZHVyYXRpb25zIG9mIHRoZSBhY3Rpb25zIGFyZSBzZXQgd2l0aCB0aGUgZGF0YSB2YXJpYWJsZXNcclxuICAgICAgICBsZXQgZHVyYXRpb25BdHRyVmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBtYXJrSWQ7IGkgPCBtYXJrSWRzLmxlbmd0aCB8IChtYXJrSWQgPSBtYXJrSWRzW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBBdHRyVmFsdWVzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgYWN0aW9uOyBqIDwgdGhpcy5hY3Rpb25zLmxlbmd0aCB8IChhY3Rpb24gPSB0aGlzLmFjdGlvbnNbal0pOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uLmR1cmF0aW9uID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnZGF0YS1kYXR1bSddO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlRmxvYXQoZGF0dW1bYWN0aW9uLmR1cmF0aW9uLmZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pbkR1cmF0aW9uID0gdHlwZW9mIGFjdGlvbi5kdXJhdGlvbi5taW5EdXJhdGlvbiA9PSAndW5kZWZpbmVkJyA/IDMwMCA6IGFjdGlvbi5kdXJhdGlvbi5taW5EdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB0bXBBdHRyVmFsdWVzLnNldChhY3Rpb24uZHVyYXRpb24uZmllbGQsIFt2YWx1ZSwgbWluRHVyYXRpb25dKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkdXJhdGlvbkF0dHJWYWx1ZXMuc2V0KG1hcmtJZCwgdG1wQXR0clZhbHVlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY2FsY3VsYXRlIHRoZSBkdXJhdGlvbiBvZiBhbGwgYWN0aW9uc1xyXG4gICAgICAgIGxldCBbYWN0aW9uc0R1cmF0aW9ucywgbWluVmFsdWVFYWNoQXR0ciwgcHJvY2Vzc2VkQWN0aW9uc10gPSBBY3Rpb25TcGVjLmNhbEFjdGlvbkR1cmF0aW9uKHRoaXMuYWN0aW9ucywgZHVyYXRpb25BdHRyVmFsdWVzLCBBbmltYXRpb24uZG9tTWFya3MpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdhZnRlciBjYWxjdWxhdGUgYWN0aW9uczogJywgdGhpcy5hY3Rpb25zLCBhY3Rpb25zRHVyYXRpb25zLCBtaW5WYWx1ZUVhY2hBdHRyLCBwcm9jZXNzZWRBY3Rpb25zKTtcclxuICAgICAgICAvL2NvbnN0cnVjdCB0cmVlIHdoaWxlIG9yZGVyIHRoZSBtYXJrcyBhY2NvcmRpbmcgdG8gXCJzb3J0XCJcclxuICAgICAgICBsZXQgbWFya3NJbk9yZGVyID0gdGhpcy5ncm91cGluZy5hcnJhbmdlT3JkZXIobWFya0lkcywgQW5pbWF0aW9uLmRvbU1hcmtzLCB0aGlzLnJvb3QpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdhbmltYXRpb24gZnJhbWVzOiAnLCBHcm91cGluZ1NwZWMuZnJhbWVzKTtcclxuXHJcbiAgICAgICAgbGV0IG1hcmtBbmkgPSBuZXcgTWFwKCk7Ly90aGUgdGltZSBzcGVjcyBhbmQgYWN0aW9uIHNwZWNzIG9mIGVhY2ggbWFyaywgZm9yIG5vdyB1c2luZyBNYXAsIGNoZWNrIGxhdGVyIHRvIHNlZSB3aGV0aGVyIGl0IGlzIHdvcnRoeSB0byBjaGFuZ2UgdG8gQXJyYXlcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbWFya0lkOyBpIDwgbWFya3NJbk9yZGVyLmxlbmd0aCB8IChtYXJrSWQgPSBtYXJrc0luT3JkZXJbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgLy9yZWNvcmQgdmlzdWFsIHN0YXR1cyBvZiBhbGwgbWFya3NcclxuICAgICAgICAgICAgbGV0IHRtcE9iaiA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgdkF0dHI7IGogPCBBbmltYXRpb24udmlzdWFsQXR0cnMubGVuZ3RoIHwgKHZBdHRyID0gQW5pbWF0aW9uLnZpc3VhbEF0dHJzW2pdKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVt2QXR0cl0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh2QXR0cikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvcGFjaXR5JzovL2dpdmUgZGVmYXVsdCBvcGFjaXR5IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dpZHRoJzovL3VzZSB0aGUgd2lkdGggb2YgdGhlIGJvdW5kaW5nIGJveCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiV2lkdGgnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoZWlnaHQnOi8vdXNlIHRoZSBoZWlnaHQgb2YgdGhlIGJvdW5kaW5nIGJveCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiSGVpZ2h0J107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneCc6Ly91c2UgdGhlIHBvc2l0aW9uIHggb2YgdGhlIGJvdW5kaW5nIGJveCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiWCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3knOi8vdXNlIHRoZSBwb3NpdGlvbiB5IG9mIHRoZSBib3VuZGluZyBib3ggXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYlknXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjeCc6Ly91c2UgdGhlIGNlbnRlciBvZiB0aGUgYm91bmRpbmcgYm94IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2N4J10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnY3gnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnYmJYJ10gKyBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiV2lkdGgnXSAvIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY3knOi8vdXNlIHRoZSBjZW50ZXIgb2YgdGhlIGJvdW5kaW5nIGJveCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydjeSddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2N5J107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiWSddICsgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYkhlaWdodCddIC8gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbm5lclJhZGl1cyc6Ly9naXZlIGRlZmF1bHQgaW5uZXIgcmFkaXVzIDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydpbm5lclJhZGl1cyddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2lubmVyUmFkaXVzJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb3V0dGVyUmFkaXVzJzovL3VzZSBoYWxmIG9mIHRoZSBkaWFnb25hbCBsaW5lIG9mIHRoZSBib3VuZGluZyBib3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydvdXR0ZXJSYWRpdXMnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydvdXR0ZXJSYWRpdXMnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IE1hdGguc3FydChNYXRoLnBvdyhBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbJ2JiV2lkdGgnXSAvIDIsIDIpICsgTWF0aC5wb3coQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydiYkhlaWdodCddIC8gMiwgMikpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdGFydEFuZ2xlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydzdGFydEFuZ2xlJ10gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZBdHRyXSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnc3RhcnRBbmdsZSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlbmRBbmdsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnZW5kQW5nbGUnXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gQW5pbWF0aW9uLmRvbU1hcmtzLmdldChtYXJrSWQpWydlbmRBbmdsZSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBPYmpbdkF0dHJdID0gTWF0aC5QSSAqIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9ialt2QXR0cl0gPSBBbmltYXRpb24uZG9tTWFya3MuZ2V0KG1hcmtJZClbdkF0dHJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmZpbmFsU3RhdHVzLmdldChtYXJrSWQpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uLmZpbmFsU3RhdHVzLnNldChtYXJrSWQsIFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBBbmltYXRpb24uZmluYWxTdGF0dXMuZ2V0KG1hcmtJZCkucHVzaCh0bXBPYmopO1xyXG5cclxuICAgICAgICAgICAgbWFya0FuaS5zZXQobWFya0lkLCB7XHJcbiAgICAgICAgICAgICAgICAnc3RhcnRUaW1lJzogMCwgLy9zdGFydCB0aW1lIG9mIHRoaXMgbWFyayBcclxuICAgICAgICAgICAgICAgICd0b3RhbER1cmF0aW9uJzogYWN0aW9uc0R1cmF0aW9ucy5nZXQobWFya0lkKSwgLy90b3RhbCBkdXJhdGlvbiBvZiBhbGwgdGhlIGFjdGlvbnMgb2YgdGhpcyBtYXJrXHJcbiAgICAgICAgICAgICAgICAnYWN0aW9uQXR0cnMnOiBbXSAvL2FjdGlvbiBhdHRyaWJ1dGVzIG9mIHRoaXMgbWFya1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2dvaW5nIGluIGNhbCB0aW1lIHdpdGggdHJlZTogJywgbWFya0FuaSwgbWFya0FuaS5nZXQoJ21hcmsxNTInKSk7XHJcbiAgICAgICAgdGhpcy5ncm91cGluZy5jYWxUaW1lV2l0aFRyZWUodGhpcy5yb290LCAtMSwgLTEsIG1hcmtBbmkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdnZW5lcmF0ZWQgdHJlZTogJywgdGhpcy5yb290KTtcclxuICAgICAgICBjb25zb2xlLmxvZygnZnJhbWUgdGltZScsIEdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrKTtcclxuICAgICAgICAvL3VwZGF0ZSB0aW1lIGFjY29yZGluZyB0byB0aGUgdGltZSBzcGVjIG9mIGFuaW1hdGlvblxyXG4gICAgICAgIGxldCB0bXBBbGxTdGFydCA9IDEwMDAwO1xyXG4gICAgICAgIG1hcmtBbmkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuc3RhcnRUaW1lIDwgdG1wQWxsU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIHRtcEFsbFN0YXJ0ID0gdmFsdWUuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgbGV0IHRpbWVEaWZmID0gdHlwZW9mIGxhc3RBbmltYXRpb24gPT09ICd1bmRlZmluZWQnID8gdGhpcy5jYWxPZmZzZXRUaW1lKDAsIDAsIHRtcEFsbFN0YXJ0LCBBbmltYXRpb24uZG9tTWFya3MpIDogdGhpcy5jYWxPZmZzZXRUaW1lKGxhc3RBbmltYXRpb24uYW5pbWF0aW9uU3RhcnRUaW1lLCBsYXN0QW5pbWF0aW9uLmFuaW1hdGlvbkVuZFRpbWUsIHRtcEFsbFN0YXJ0LCBBbmltYXRpb24uZG9tTWFya3MpO1xyXG5cclxuICAgICAgICBtYXJrQW5pLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgbGV0IHRtcE9iaiA9IHsgJ3N0YXJ0VGltZSc6IHZhbHVlLnN0YXJ0VGltZSArIHRpbWVEaWZmLmdldChtYXJrSWQpLCAndG90YWxEdXJhdGlvbic6IHZhbHVlLnRvdGFsRHVyYXRpb24sICdhY3Rpb25BdHRycyc6IFtdIH07XHJcbiAgICAgICAgICAgIGlmICh0bXBPYmouc3RhcnRUaW1lIDwgdGhhdC5hbmltYXRpb25TdGFydFRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuYW5pbWF0aW9uU3RhcnRUaW1lID0gdG1wT2JqLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodG1wT2JqLnN0YXJ0VGltZSArIHRtcE9iai50b3RhbER1cmF0aW9uID4gdGhhdC5hbmltYXRpb25FbmRUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmFuaW1hdGlvbkVuZFRpbWUgPSB0bXBPYmouc3RhcnRUaW1lICsgdG1wT2JqLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGE7IGkgPCBwcm9jZXNzZWRBY3Rpb25zLmxlbmd0aCB8IChhID0gcHJvY2Vzc2VkQWN0aW9uc1tpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcEFjdGlvblNwZWMgPSBuZXcgQWN0aW9uU3BlYygpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhhKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBhdHRyOyBqIDwga2V5cy5sZW5ndGggfCAoYXR0ciA9IGtleXNbal0pOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBBY3Rpb25TcGVjW2F0dHJdID0gYVthdHRyXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ciA9PT0gJ19kdXJhdGlvbicgJiYgdHlwZW9mIGFbYXR0cl0gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsnZGF0YS1kYXR1bSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWluQXR0clZhbHVlID0gbWluVmFsdWVFYWNoQXR0ci5nZXQoYVthdHRyXS5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWNbYXR0cl0gPSBhW2F0dHJdLm1pbkR1cmF0aW9uICogcGFyc2VGbG9hdChkYXR1bVthW2F0dHJdLmZpZWxkXSkgLyBtaW5BdHRyVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRyID09PSAnb2Zmc2V0U3RhcnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEFjdGlvblNwZWNbYXR0cl0gPSBhW2F0dHJdLmdldChtYXJrSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vaWYgdGhlIGFuaW1hdGlvbiB0eXBlIGlzIGN1c3RvbSB0aGVuIGp1ZGdlIGlmIHRoZSBhdHRyaWJ1dGUgaW4gdGhlIGFjdGlvbiBhYm91dCB0byBhZGQgaXMgYSB2YWxpZCBwcm9wZXJ0eSBvZiB0aGUgdGFyZ2V0IG1hcmtcclxuICAgICAgICAgICAgICAgIGlmICh0bXBBY3Rpb25TcGVjLmFuaW1hdGlvblR5cGUgPT09IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5jdXN0b20pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ2FuaXNVdGlsLmNoZWNrVmFsaWRQcm9wKEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKVsndGFnTmFtZSddLCB0bXBBY3Rpb25TcGVjLmF0dHJpYnV0ZVswXS5hdHRyTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFjdGlvbkF0dHJzLnB1c2godG1wQWN0aW9uU3BlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYWN0aW9uQXR0cnMucHVzaCh0bXBBY3Rpb25TcGVjKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWFya0FuaS5zZXQobWFya0lkLCB0bXBPYmopO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIG1hcmtBbmkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAvL3VwZGF0ZSB0aGUgc3RhcnQgdGltZSBvZiBhY3Rpb25zXHJcbiAgICAgICAgICAgIGxldCBmcmFtZVRpbWVQb2ludCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUuYWN0aW9uQXR0cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLmFjdGlvbkF0dHJzW2ldLnN0YXJ0VGltZSA9IHZhbHVlLnN0YXJ0VGltZSArIHZhbHVlLmFjdGlvbkF0dHJzW2ldLm9mZnNldFN0YXJ0Oy8vYWJzb2x1dGUgc3RhcnQgdGltZVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmFjdGlvbkF0dHJzW2ldLnN0YXJ0VGltZSArIHZhbHVlLmFjdGlvbkF0dHJzW2ldLmR1cmF0aW9uID4gZnJhbWVUaW1lUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZVRpbWVQb2ludCA9IHZhbHVlLmFjdGlvbkF0dHJzW2ldLnN0YXJ0VGltZSArIHZhbHVlLmFjdGlvbkF0dHJzW2ldLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya0FuaS5zZXQobWFya0lkLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBmcmFtZVRpbWVQb2ludCA9IHZhbHVlLnN0YXJ0VGltZSArIHZhbHVlLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgIH0gZWxzZSB7Ly9tZXJnZSBhbmltYXRpb24gc3BlY3MgZm9yIHRoZSBzYW1lIG1hcmtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50U3RhcnRUaW1lID0gQW5pbWF0aW9uLmFsbE1hcmtBbmkuZ2V0KG1hcmtJZCkuc3RhcnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRFbmRUaW1lID0gY3VycmVudFN0YXJ0VGltZSArIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtYXJrSWQpLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb24uYWxsTWFya0FuaS5nZXQobWFya0lkKS5zdGFydFRpbWUgPSBjdXJyZW50U3RhcnRUaW1lIDwgdmFsdWUuc3RhcnRUaW1lID8gY3VycmVudFN0YXJ0VGltZSA6IHZhbHVlLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBFbmRUaW1lID0gdmFsdWUuc3RhcnRUaW1lICsgdmFsdWUudG90YWxEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRFbmRUaW1lID0gY3VycmVudEVuZFRpbWUgPiB0bXBFbmRUaW1lID8gY3VycmVudEVuZFRpbWUgOiB0bXBFbmRUaW1lO1xyXG4gICAgICAgICAgICAgICAgLy8gZnJhbWVUaW1lUG9pbnQgPSBjdXJyZW50RW5kVGltZTtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtYXJrSWQpLnRvdGFsRHVyYXRpb24gPSBjdXJyZW50RW5kVGltZSAtIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtYXJrSWQpLnN0YXJ0VGltZTtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtYXJrSWQpLmFjdGlvbkF0dHJzID0gWy4uLkFuaW1hdGlvbi5hbGxNYXJrQW5pLmdldChtYXJrSWQpLmFjdGlvbkF0dHJzLCAuLi52YWx1ZS5hY3Rpb25BdHRyc107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9yZWNvcmQga2V5ZnJhbWUgdGltZSBwb2ludFxyXG4gICAgICAgICAgICBpZiAoR3JvdXBpbmdTcGVjLmZyYW1lc01hcmsuZ2V0KG1hcmtJZCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1hcmtJZCwgJ2VuZCB0aW1lJywgZnJhbWVUaW1lUG9pbnQsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5mcmFtZVRpbWUuc2V0KGZyYW1lVGltZVBvaW50LCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmZyYW1lVGltZS5nZXQoZnJhbWVUaW1lUG9pbnQpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5mcmFtZVRpbWUuc2V0KGZyYW1lVGltZVBvaW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdrZXlmcmFtZXM6ICcsIEFuaW1hdGlvbi5mcmFtZVRpbWUpO1xyXG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgnY2FsIGFuaSB0aW1lJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjYWxjdWxhdGUgdGltaW5nIGZvciBlYWNoIGFjdGlvbiB0aGVuIHJlbmRlciBhbmltYXRpb24gYnkgc2xpY2luZyB0aGUgYWN0aW9uIHNwZWNzIGludG8gZnJhbWVzXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyByZW5kZXJBbmltYXRpb24oc3RhdHVzID0gbnVsbCkge1xyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICB0aGlzLmFsbE1hcmtBbmkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAvL3JlY29yZCB0aGUgZW5kIHRpbWUgb2YgdGhlIGVudGlyZSBhbmltYXRpb24sIGFuZCByZWNvcmQgdGhlIGluaXQgc3RhdHVzIG9mIGVhY2ggbWFya1xyXG4gICAgICAgICAgICBpZiAodGhhdC53aG9sZUVuZFRpbWUgPCB2YWx1ZS5zdGFydFRpbWUgKyB2YWx1ZS50b3RhbER1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Lndob2xlRW5kVGltZSA9IHZhbHVlLnN0YXJ0VGltZSArIHZhbHVlLnRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgc3RhdHVzLmluZm8gPSAnVGhlIGR1cmF0aW9uIG9mIHRoZSBnZW5lcmF0ZWQgYW5pbWF0aW9uIGlzOiAnICsgdGhpcy53aG9sZUVuZFRpbWUgKyAnbXMnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZygnVGhlIGR1cmF0aW9uIG9mIHRoZSBnZW5lcmF0ZWQgYW5pbWF0aW9uIGlzOiAnICsgdGhpcy53aG9sZUVuZFRpbWUgKyAnbXMnKTtcclxuXHJcbiAgICAgICAgLy9yZXBsYWNlIHRoZSAnd2hvbGVFbmQnIHBsYWNlIGhvbGRlciBpbiBkdXJhdGlvblxyXG4gICAgICAgIHRoaXMuYWxsTWFya0FuaS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgYSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaXRlbTsgaSA8IHZhbHVlLmFjdGlvbkF0dHJzLmxlbmd0aCB8IChpdGVtID0gdmFsdWUuYWN0aW9uQXR0cnNbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmR1cmF0aW9uID09PSAnd2hvbGVFbmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5kdXJhdGlvbiA9IHRoYXQud2hvbGVFbmRUaW1lIC0gaXRlbS5zdGFydFRpbWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdhbGwgbWFyayBhbmk6ICcsIHRoaXMuYWxsTWFya0FuaSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZpbmRLZXlmcmFtZXMoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc2xhdGVUb0xvdHRpZUNoYW5uZWwoYXR0ck5hbWUpIHtcclxuICAgICAgICBzd2l0Y2ggKGF0dHJOYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ29wYWNpdHknOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eSddXHJcbiAgICAgICAgICAgIGNhc2UgJ3gnOlxyXG4gICAgICAgICAgICBjYXNlICdjeCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWyd4J107XHJcbiAgICAgICAgICAgIGNhc2UgJ3knOlxyXG4gICAgICAgICAgICBjYXNlICdjeSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWyd5J107XHJcbiAgICAgICAgICAgIGNhc2UgJ3InOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnc2NhbGVYJywgJ3NjYWxlWSddO1xyXG4gICAgICAgICAgICBjYXNlICd3aWR0aCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydzY2FsZVgnXTtcclxuICAgICAgICAgICAgY2FzZSAnaGVpZ2h0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ3NjYWxlWSddO1xyXG4gICAgICAgICAgICBjYXNlICdkJzpcclxuICAgICAgICAgICAgY2FzZSAneDEnOlxyXG4gICAgICAgICAgICBjYXNlICd4Mic6XHJcbiAgICAgICAgICAgIGNhc2UgJ3kxJzpcclxuICAgICAgICAgICAgY2FzZSAneTInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnc2hhcGUnXTtcclxuICAgICAgICAgICAgY2FzZSAndGV4dENvbnRlbnQnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsndGV4dCddO1xyXG4gICAgICAgICAgICBjYXNlICdmaWxsJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2ZpbGxDb2xvciddO1xyXG4gICAgICAgICAgICBjYXNlICdzdHJva2UnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnc3Ryb2tlQ29sb3InXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG1hcFRvTG90dGllU3BlYygpIHtcclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5hbGxNYXJrQW5pLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5hY3Rpb25BdHRycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcEFjdGlvblNwZWMgPSB2YWx1ZS5hY3Rpb25BdHRyc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICh0bXBBY3Rpb25TcGVjLmR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXRNYXJrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWFya0lkKTsvL1RPRE86IHBhc3MgZG9tIGhlcmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG1wQWN0aW9uU3BlYy50eXBlID09PSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IGNvbnNpZGVyICdjdXN0b20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGFydEZyYW1lID0gTWF0aC5jZWlsKHRtcEFjdGlvblNwZWMuc3RhcnRUaW1lIC8gKDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVuZEZyYW1lID0gTWF0aC5jZWlsKCh0bXBBY3Rpb25TcGVjLnN0YXJ0VGltZSArIHRtcEFjdGlvblNwZWMuZHVyYXRpb24pIC8gKDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wQWN0aW9uU3BlYy5hdHRyaWJ1dGUuZm9yRWFjaCgoYXR0cikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcEFjdGlvblNwZWMuYW5pbWF0aW9uVHlwZSA9PT0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmN1c3RvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0IGFuY2hvciBmb3IgciBhbmQgdGV4dCBwb3NpdGlvbiBjaGFuZ2luZ3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ci5hdHRyTmFtZSA9PT0gJ3InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcEJib3ggPSBnZXRCb3VuZGluZ0JveCh0YXJnZXRNYXJrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0U3RhdGljUHJvcGVydHkoJ2FuY2hvclgnLCB0bXBCYm94WzJdIC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFZhci5tYXJrTGF5ZXJzLmdldChtYXJrSWQpLnNldFN0YXRpY1Byb3BlcnR5KCdhbmNob3JZJywgdG1wQmJveFszXSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWFya0lkKS50YWdOYW1lID09PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0U3RhdGljUHJvcGVydHkoJ2FuY2hvclknLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJhbnNsYXRlIHZpc3VhbCBjaGFubmVscyB0byBsb3R0aWUgY2hhbm5lbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG90dGllQ2hhbm5lbHMgPSBBbmltYXRpb24udHJhbnNsYXRlVG9Mb3R0aWVDaGFubmVsKGF0dHIuYXR0ck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGF0dHIudG8pKSB7Ly9kb2luZyB0cmFuc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmcm9tVmFsdWUgPSAwLCB0b1ZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhdHRyLnRvLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0ci50b1tqXVswXSA9PT0gbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVZhbHVlID0gYXR0ci5mcm9tW2pdWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvVmFsdWUgPSBhdHRyLnRvW2pdWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3R0aWVDaGFubmVscy5mb3JFYWNoKChsYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxjID09PSAnc2hhcGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90cmFuc2Zvcm0gdGhlIHN0YXJ0IGQgYW5kIGVuZCBkIHRvIHNoYXBlIHNwZWNpZmljYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnJvbVBvc2kgPSBbMCwgMF0sIHRvUG9zaSA9IFswLCAwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZnJvbVBvc2ksIGZyb21WYWx1ZV0gPSBDYW5pc1V0aWwudHJhbnNEVG9Mb3R0aWVTcGVjKGZyb21WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RvUG9zaSwgdG9WYWx1ZV0gPSBDYW5pc1V0aWwudHJhbnNEVG9Mb3R0aWVTcGVjKHRvVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFZhci5tYXJrTGF5ZXJzLmdldChtYXJrSWQpLnNldEFuaW1hdGFibGVQcm9wZXJ0eShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVBvc2lbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvUG9zaVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWN0aW9uU3BlYy50cmFuc1RvTG90dGllQWN0aW9uKHRtcEFjdGlvblNwZWMuZWFzaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0QW5pbWF0YWJsZVByb3BlcnR5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tUG9zaVsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9Qb3NpWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLnRyYW5zVG9Mb3R0aWVBY3Rpb24odG1wQWN0aW9uU3BlYy5lYXNpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGMgPT09ICdmaWxsQ29sb3InIHx8IGxjID09PSAnc3Ryb2tlQ29sb3InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAmJiB0b1ZhbHVlICYmIGZyb21WYWx1ZSAhPT0gJ25vbmUnICYmIHRvVmFsdWUgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tVmFsdWUgPSBDYW5pc1V0aWwudG9Mb3R0aWVSR0JBKGZyb21WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvVmFsdWUgPSBDYW5pc1V0aWwudG9Mb3R0aWVSR0JBKHRvVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IHRvVmFsdWUgPSBbMCwgMCwgMCwgMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGMgPT09ICdvcGFjaXR5Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21WYWx1ZSAqPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9WYWx1ZSAqPSAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0QW5pbWF0YWJsZVByb3BlcnR5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxjLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kRnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWN0aW9uU3BlYy50cmFuc1RvTG90dGllQWN0aW9uKHRtcEFjdGlvblNwZWMuZWFzaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3R0aWVDaGFubmVscy5mb3JFYWNoKChsYykgPT4gey8vVE9ETzogZGlmZmVyZW5jZSBmcm9tIGFuZCB0byBzdHJhdGVneSB3aXRoIHBvc2l0aW9ucyBhbmQgY2hhbm5lbHMgbGlrZSBvcGFjaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIubWFya0xheWVycy5nZXQobWFya0lkKS5zZXRBbmltYXRhYmxlUHJvcGVydHkoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLmZyb20gKiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci50byAqIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLnRyYW5zVG9Mb3R0aWVBY3Rpb24odG1wQWN0aW9uU3BlYy5lYXNpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly9pZiBub3QgY3VzdG9tLCB0aGVuIGF0dHJOYW1lIGlzIGFscmVhZHkgbG90dGllIGNoYW5uZWxzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCkuc2V0QW5pbWF0YWJsZVByb3BlcnR5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLmF0dHJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci5mcm9tICogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLnRvICogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLnRyYW5zVG9Mb3R0aWVBY3Rpb24odG1wQWN0aW9uU3BlYy5lYXNpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRtcEFjdGlvblNwZWMudHlwZSA9PT0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hc2tMYXllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wQmJveCA9IGdldEJvdW5kaW5nQm94KHRhcmdldE1hcmspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgciA9IE1hdGguc3FydChNYXRoLnBvdyh0bXBCYm94WzJdIC8gMiwgMikgKyBNYXRoLnBvdyh0bXBCYm94WzNdIC8gMiwgMikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgciA9IHRoYXQuZmluYWxTdGF0dXMuZ2V0KG1hcmtJZClbdG1wQWN0aW9uU3BlYy5jaGFydElkeF1bJ291dHRlclJhZGl1cyddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRtcEFjdGlvblNwZWMuYW5pbWF0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgcmVjdCBtYXNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aXBlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUubW92ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmFwcGVhcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrTGF5ZXIgPSBMYXllckZhY3RvcnkuYm91bmRpbmdCb3godGFyZ2V0TWFyayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NyZWF0ZSBjaXJjbGUgbWFza1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY2lyY2xlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllciA9IExheWVyRmFjdG9yeS5lbGxpcHNlKHRtcEJib3hbMF0gKyB0bXBCYm94WzJdLCB0bXBCYm94WzFdICsgdG1wQmJveFszXSwgciwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyLnNldFN0YXRpY1Byb3BlcnR5KCdhbmNob3JYJywgdG1wQmJveFsyXSAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllci5zZXRTdGF0aWNQcm9wZXJ0eSgnYW5jaG9yWScsIHRtcEJib3hbM10gLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlIGNpcmNsZSBtYXNrIHdpdGggdGhpY2sgYm9yZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aGVlbDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGF0aE9mZnNldCA9IENhbmlzVXRpbC5nZXRQYXRoT2Zmc2V0KHRhcmdldE1hcmsuZ2V0QXR0cmlidXRlKCdkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBPZmZzZXRYID0gdGhhdC5maW5hbFN0YXR1cy5nZXQobWFya0lkKVt0bXBBY3Rpb25TcGVjLmNoYXJ0SWR4XVsnY3gnXSArIHRtcEJib3hbMF0gLSBwYXRoT2Zmc2V0WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBPZmZzZXRZID0gdGhhdC5maW5hbFN0YXR1cy5nZXQobWFya0lkKVt0bXBBY3Rpb25TcGVjLmNoYXJ0SWR4XVsnY3knXSArIHRtcEJib3hbMV0gLSBwYXRoT2Zmc2V0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllciA9IExheWVyRmFjdG9yeS5lbGxpcHNlKHRtcE9mZnNldFgsIHRtcE9mZnNldFksIHIsIHIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wU3RhcnRBbmdsZSA9IHRoYXQuZmluYWxTdGF0dXMuZ2V0KG1hcmtJZClbdG1wQWN0aW9uU3BlYy5jaGFydElkeF1bJ3N0YXJ0QW5nbGUnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wRW5kQW5nbGUgPSB0aGF0LmZpbmFsU3RhdHVzLmdldChtYXJrSWQpW3RtcEFjdGlvblNwZWMuY2hhcnRJZHhdWydlbmRBbmdsZSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllci5zZXRTdGF0aWNQcm9wZXJ0eSgndHJpbU9mZnNldCcsIC10bXBTdGFydEFuZ2xlIC8gTWF0aC5QSSAvIDIgKiAzNjAgLSAzNjAgLyA0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBBY3Rpb25TcGVjLmF0dHJpYnV0ZVswXS50byA9IDEgLSAoKHRtcEVuZEFuZ2xlIC0gdG1wU3RhcnRBbmdsZSkgJSAoTWF0aC5QSSAqIDIpKSAvIChNYXRoLlBJICogMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMYXllci5zZXRTdGF0aWNQcm9wZXJ0eSgnc3Ryb2tlV2lkdGgnLCAyICogcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xheWVyLnNldFN0YXRpY1Byb3BlcnR5KCdmaWxsT3BhY2l0eScsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgcGF0aCBtYXNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0RnJhbWUgPSBNYXRoLmNlaWwodG1wQWN0aW9uU3BlYy5zdGFydFRpbWUgLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5kRnJhbWUgPSBNYXRoLmNlaWwoKHRtcEFjdGlvblNwZWMuc3RhcnRUaW1lICsgdG1wQWN0aW9uU3BlYy5kdXJhdGlvbikgLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBBY3Rpb25TcGVjLmF0dHJpYnV0ZS5mb3JFYWNoKChhdHRyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrTGF5ZXIuc2V0QW5pbWF0YWJsZVByb3BlcnR5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuYXR0ck5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRGcmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyLmZyb20gKiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ci50byAqIDEwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBY3Rpb25TcGVjLnRyYW5zVG9Mb3R0aWVBY3Rpb24odG1wQWN0aW9uU3BlYy5lYXNpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxWYXIuanNNb3Zpbi5hZGRNYXNrKG1hc2tMYXllciwgZ2xvYmFsVmFyLm1hcmtMYXllcnMuZ2V0KG1hcmtJZCksIHRtcEFjdGlvblNwZWMubWFza1R5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3Vua29ud24gYWN0aW9ucyB0YXJnZXQ6ICcsIHRtcEFjdGlvblNwZWMudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvL2lmIHRoZSBjaGFydHMgY2hhbmdlZCwgdGhlbiBkbyByZXNldFxyXG4gICAgc3RhdGljIHJlc2V0QWxsKCkge1xyXG4gICAgICAgIHRoaXMud2hvbGVFbmRUaW1lID0gMDtcclxuICAgICAgICB0aGlzLmFsbE1hcmtBbmkuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmZyYW1lVGltZS5jbGVhcigpO1xyXG4gICAgICAgIC8vIHRoaXMuZG9tTWFya3MuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLmZpbmFsU3RhdHVzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLmNsZWFyKCk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5BbmltYXRpb24udmlzdWFsQXR0cnMgPSBbJ3gnLCAneScsICdjeCcsICdjeScsICdpbm5lclJhZGl1cycsICdvdXR0ZXJSYWRpdXMnLCAnc3RhcnRBbmdsZScsICdlbmRBbmdsZScsICd3aWR0aCcsICdoZWlnaHQnLCAnb3BhY2l0eScsICdmaWxsJywgJ3N0cm9rZScsICdjb250ZW50JywgJ3N0cm9rZS1kYXNoYXJyYXknLCAnc3Ryb2tlLWRhc2hvZmZzZXQnXTtcclxuQW5pbWF0aW9uLmRvbU1hcmtzID0gbmV3IE1hcCgpO1xyXG5BbmltYXRpb24uYXR0cnMgPSBbJ3NlbGVjdG9yJywgJ2dyb3VwaW5nJywgJ2VmZmVjdHMnLCAnb2Zmc2V0JywgJ3JlZmVyZW5jZSddXHJcbkFuaW1hdGlvbi53aG9sZUVuZFRpbWUgPSAwO1xyXG5BbmltYXRpb24uZnJhbWVUaW1lID0gbmV3IE1hcCgpOy8va2V5OiB0aW1lLCB2YWx1ZTogd2hldGhlciB0aGlzIHRpbWUgcG9pbnQgaXMgYSBrZXlmcmFtZVxyXG5BbmltYXRpb24uYW5pbWF0aW9ucyA9IG5ldyBNYXAoKTsvL3JlY29yZCBhbGwgYW5pbWF0aW9ucywga2V5OiwgdmFsdWU6IGFuaW1hdGlvbiBvYmpcclxuQW5pbWF0aW9uLmZpbmFsU3RhdHVzID0gbmV3IE1hcCgpOy8vcmVjb3JkIHRoZSBmaW5hbCB2aXN1YWwgc3RhdHVzIG9mIGVhY2ggbWFyaywgZWc6IGtleTptYXJrMSwgdmFsdWU6IHtvcGFjaXR5OiAxLCBoZWlnaHQ6IDIyNn1cclxuQW5pbWF0aW9uLmFsbE1hcmtBbmkgPSBuZXcgTWFwKCk7XHJcbkFuaW1hdGlvbi5lYXNlRnVuY3MgPSB7XHJcbiAgICBlYXNlSW5RdWFkOiAocCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBwICogcDtcclxuICAgIH0sXHJcbiAgICBlYXNlT3V0UXVhZDogKHApID0+IHtcclxuICAgICAgICByZXR1cm4gLSBwICogKHAgLSAyKTtcclxuICAgIH0sXHJcbiAgICBlYXNlSW5PdXRRdWFkOiAocCkgPT4ge1xyXG4gICAgICAgIGlmICgocCAvIDIpIDwgMSkgcmV0dXJuIDEgLyAyICogcCAqIHA7XHJcbiAgICAgICAgcmV0dXJuIC0gKCgtLXApICogKHAgLSAyKSAtIDEpIC8gMjtcclxuICAgIH0sXHJcbiAgICBlYXNlSW5DdWJpYzogKHApID0+IHtcclxuICAgICAgICByZXR1cm4gcCAqIHAgKiBwO1xyXG4gICAgfSxcclxuICAgIGVhc2VPdXRDdWJpYzogKHApID0+IHtcclxuICAgICAgICByZXR1cm4gKHAgPSBwIC0gMSkgKiBwICogcCArIDE7XHJcbiAgICB9LFxyXG4gICAgZWFzZUluT3V0Q3ViaWM6IChwKSA9PiB7XHJcbiAgICAgICAgaWYgKChwIC89IDAuNSkgPCAxKSByZXR1cm4gcCAqIHAgKiBwIC8gMjtcclxuICAgICAgICByZXR1cm4gKChwIC09IDIpICogcCAqIHAgKyAyKSAvIDI7XHJcbiAgICB9LFxyXG4gICAgZWFzZU91dEJvdW5jZTogKHApID0+IHtcclxuICAgICAgICBsZXQgcmF0aW8gPSAwO1xyXG4gICAgICAgIGlmIChwIDwgKDEgLyAyLjc1KSkge1xyXG4gICAgICAgICAgICByYXRpbyA9IDcuNTYyNSAqIHAgKiBwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocCA8ICgyIC8gMi43NSkpIHtcclxuICAgICAgICAgICAgcmF0aW8gPSA3LjU2MjUgKiAocCAtPSAoMS41IC8gMi43NSkpICogcCArIDAuNzU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChwIDwgKDIuNSAvIDIuNzUpKSB7XHJcbiAgICAgICAgICAgIHJhdGlvID0gNy41NjI1ICogKHAgLT0gKDIuMjUgLyAyLjc1KSkgKiBwICsgMC45Mzc1O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJhdGlvID0gNy41NjI1ICogKHAgLT0gKDIuNjI1IC8gMi43NSkpICogcCArIDAuOTg0Mzc1O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmF0aW87XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFuaW1hdGlvbjsiLCJpbXBvcnQgeyBQYXRoTWFrZXIgfSBmcm9tICdqc21vdmluJztcclxuaW1wb3J0IHsgcGFyc2VTVkcgfSBmcm9tICdzdmctcGF0aC1wYXJzZXInXHJcblxyXG5leHBvcnQgY2xhc3MgQ2FuaXNVdGlsIHtcclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgc3RhdGljIGRlZXBDbG9uZShvYmopIHtcclxuICAgICAgICBpZiAoIW9iaiB8fCB0cnVlID09IG9iaikgLy90aGlzIGFsc28gaGFuZGxlcyBib29sZWFuIGFzIHRydWUgYW5kIGZhbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgdmFyIG9ialR5cGUgPSB0eXBlb2YgKG9iaik7XHJcbiAgICAgICAgaWYgKFwibnVtYmVyXCIgPT0gb2JqVHlwZSB8fCBcInN0cmluZ1wiID09IG9ialR5cGUpIC8vIGFkZCB5b3VyIGltbXV0YWJsZXMgaGVyZVxyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBBcnJheS5pc0FycmF5KG9iaikgPyBbXSA6IHt9O1xyXG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBNYXApIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5rZXlzKCkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBvYmoua2V5cygpW2ldO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldChrZXksIHRoaXMuZGVlcENsb25lKG9iai5nZXQoa2V5KSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopXHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSlcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5kZWVwQ2xvbmUob2JqW2tleV0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZvcm1hdFRpbWUodGltZSkge1xyXG4gICAgICAgIGxldCBjdXJyZW50VGltZVMgPSBwYXJzZUludCh0aW1lIC8gMTAwMCk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRUaW1lTVMgPSBwYXJzZUludCh0aW1lICUgMTAwMCAvIDEwKTtcclxuICAgICAgICBsZXQgY3VycmVudFRpbWVTU3RyID0gY3VycmVudFRpbWVTIDwgMTAgPyAnMCcgKyBjdXJyZW50VGltZVMgOiAnJyArIGN1cnJlbnRUaW1lUztcclxuICAgICAgICBsZXQgY3VycmVudFRpbWVNU1N0ciA9IGN1cnJlbnRUaW1lTVMgPCAxMCA/ICcwJyArIGN1cnJlbnRUaW1lTVMgOiAnJyArIGN1cnJlbnRUaW1lTVM7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lU1N0ciArICc6JyArIGN1cnJlbnRUaW1lTVNTdHI7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNvbG9yMlJHQihjb2xvcikge1xyXG4gICAgICAgIGlmIChjb2xvcikge1xyXG4gICAgICAgICAgICBjb2xvciA9IGNvbG9yLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5mcm9tKHRoaXMuY29sb3JOYW1lcy5rZXlzKCkpLmluY2x1ZGVzKGNvbG9yKSkge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLmNvbG9yTmFtZXMuZ2V0KGNvbG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb2xvciA9IGNvbG9yLnJlcGxhY2UoL1xccy9nLCAnJyk7XHJcbiAgICAgICAgICAgIGlmIChjb2xvci5pbmRleE9mKCdyZ2InKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wU3RyID0gY29sb3Iuc3Vic3RyKGNvbG9yLmluZGV4T2YoJygnKSArIDEpO1xyXG4gICAgICAgICAgICAgICAgdG1wU3RyID0gdG1wU3RyLnN1YnN0cmluZygwLCB0bXBTdHIuaW5kZXhPZignKScpKTtcclxuICAgICAgICAgICAgICAgIGxldCByZ2IgPSB0bXBTdHIuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZ2IubGVuZ3RoID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmdiWzNdID0gMjU1O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtwYXJzZUludChyZ2JbMF0pLCBwYXJzZUludChyZ2JbMV0pLCBwYXJzZUludChyZ2JbMl0pLCBwYXJzZUludChyZ2JbM10pXTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xvci5pbmRleE9mKCcjJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSEVYMlJHQihjb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBcIm5vbmVcIjtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgSEVYMlJHQihoZXgpIHtcclxuICAgICAgICBpZiAoaGV4LmNoYXJBdCgwKSA9PT0gJyMnKSB7XHJcbiAgICAgICAgICAgIGhleCA9IGhleC5zdWJzdHIoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgoaGV4Lmxlbmd0aCA8IDIpIHx8IChoZXgubGVuZ3RoID4gNikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdmFsdWVzID0gaGV4LnNwbGl0KCcnKSxcclxuICAgICAgICAgICAgcixcclxuICAgICAgICAgICAgZyxcclxuICAgICAgICAgICAgYixcclxuICAgICAgICAgICAgYSA9IDI1NTtcclxuXHJcbiAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgciA9IHBhcnNlSW50KHZhbHVlc1swXS50b1N0cmluZygpICsgdmFsdWVzWzFdLnRvU3RyaW5nKCksIDE2KTtcclxuICAgICAgICAgICAgZyA9IHI7XHJcbiAgICAgICAgICAgIGIgPSByO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaGV4Lmxlbmd0aCA9PT0gMykge1xyXG4gICAgICAgICAgICByID0gcGFyc2VJbnQodmFsdWVzWzBdLnRvU3RyaW5nKCkgKyB2YWx1ZXNbMF0udG9TdHJpbmcoKSwgMTYpO1xyXG4gICAgICAgICAgICBnID0gcGFyc2VJbnQodmFsdWVzWzFdLnRvU3RyaW5nKCkgKyB2YWx1ZXNbMV0udG9TdHJpbmcoKSwgMTYpO1xyXG4gICAgICAgICAgICBiID0gcGFyc2VJbnQodmFsdWVzWzJdLnRvU3RyaW5nKCkgKyB2YWx1ZXNbMl0udG9TdHJpbmcoKSwgMTYpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaGV4Lmxlbmd0aCA9PT0gNikge1xyXG4gICAgICAgICAgICByID0gcGFyc2VJbnQodmFsdWVzWzBdLnRvU3RyaW5nKCkgKyB2YWx1ZXNbMV0udG9TdHJpbmcoKSwgMTYpO1xyXG4gICAgICAgICAgICBnID0gcGFyc2VJbnQodmFsdWVzWzJdLnRvU3RyaW5nKCkgKyB2YWx1ZXNbM10udG9TdHJpbmcoKSwgMTYpO1xyXG4gICAgICAgICAgICBiID0gcGFyc2VJbnQodmFsdWVzWzRdLnRvU3RyaW5nKCkgKyB2YWx1ZXNbNV0udG9TdHJpbmcoKSwgMTYpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtyLCBnLCBiLCBhXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdG9Mb3R0aWVSR0JBKGNvbG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3IyUkdCKGNvbG9yKS5tYXAoKGMpID0+IGMgLyAyNTUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b0pTT04obm9kZSkge1xyXG4gICAgICAgIG5vZGUgPSBub2RlIHx8IHRoaXM7XHJcbiAgICAgICAgbGV0IG9iaiA9IHtcclxuICAgICAgICAgICAgbm9kZVR5cGU6IG5vZGUubm9kZVR5cGVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChub2RlLnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgb2JqLnRhZ05hbWUgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIG9iai5ub2RlTmFtZSA9IG5vZGUubm9kZU5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBpZiAobm9kZS5ub2RlVmFsdWUpIHtcclxuICAgICAgICAgICAgb2JqLm5vZGVWYWx1ZSA9IG5vZGUubm9kZVZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgaWYgKGF0dHJzKSB7XHJcbiAgICAgICAgICAgIG9iai5hdHRyID0ge307XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBhdHRyOyBpIDwgYXR0cnMubGVuZ3RoIHwgKGF0dHIgPSBhdHRyc1tpXSk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgb2JqLmF0dHJbYXR0ci5ub2RlTmFtZV0gPSBhdHRyLm5vZGVWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIHRvRE9NKG9iaikge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG9iaiA9IEpTT04ucGFyc2Uob2JqKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5vZGUsIG5vZGVUeXBlID0gb2JqLm5vZGVUeXBlO1xyXG4gICAgICAgIHN3aXRjaCAobm9kZVR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAxOiAvL0VMRU1FTlRfTk9ERVxyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBvYmoudGFnTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXR0cmlidXRlcyA9IG9iai5hdHRyIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGF0dHI7IGkgPCBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5sZW5ndGggfCAoYXR0ciA9IE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJWYWx1ZSA9IHR5cGVvZiBhdHRyaWJ1dGVzW2F0dHJdID09PSAnb2JqZWN0JyA/IEpTT04uc3RyaW5naWZ5KGF0dHJpYnV0ZXNbYXR0cl0sIG51bGwsIDApIDogYXR0cmlidXRlc1thdHRyXTtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG51bGwsIGF0dHIsIGF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOiAvL1RFWFRfTk9ERVxyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG9iai5ub2RlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgODogLy9DT01NRU5UX05PREVcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KG9iai5ub2RlVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgOTogLy9ET0NVTUVOVF9OT0RFXHJcbiAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlRG9jdW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDEwOiAvL0RPQ1VNRU5UX1RZUEVfTk9ERVxyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50VHlwZShvYmoubm9kZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTE6IC8vRE9DVU1FTlRfRlJBR01FTlRfTk9ERVxyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB7Kn0gb2JqIEEgcGFyc2VkIHN2ZyBqc29uIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGRpc2NyZXRpemVQYXRoKG9iaikge1xyXG4gICAgICAgIC8vIG5vcm1hbGl6ZSBhdHRyaWJ1dGVzXHJcbiAgICAgICAgaWYgKG9iai50YWdOYW1lICE9PSAncGF0aCcpIHJldHVybiBudWxsXHJcbiAgICAgICAgbGV0IGF0dHIgPSBvYmouYXR0ciB8fCB7fVxyXG4gICAgICAgIGlmICghYXR0ci5kKSByZXR1cm4gbnVsbFxyXG4gICAgICAgIHJldHVybiB0aGlzLmRpc2NyZXRpemVEKGF0dHIuZCwgYXR0ci5maWxsKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZGlzY3JldGl6ZUQoZCwgZmlsbENvbG9yKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdEdyb3VwID0gW10sXHJcbiAgICAgICAgICAgIHJlZyA9IC9bTW1MbEhoVnZaekNjU3NRcVR0QWFdW15NbUxsSGhWdlp6Q2NTc1FxVHRBYV0qL2dpLFxyXG4gICAgICAgICAgICBncm91cCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB3aGlsZSAoKGdyb3VwID0gcmVnLmV4ZWMoZCkpKSB7XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSByZXN1bHRHcm91cC5yZWR1Y2UoKHAsIGMpID0+IHAgKyBjLmxlbmd0aCwgMCk7XHJcbiAgICAgICAgICAgIHJlc3VsdEdyb3VwLnB1c2goZC5zbGljZShvZmZzZXQsIGdyb3VwLmluZGV4KSk7XHJcbiAgICAgICAgICAgIHJlc3VsdEdyb3VwLnB1c2goZ3JvdXBbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVzdWx0ID0gcmVzdWx0R3JvdXBcclxuICAgICAgICAgICAgLm1hcCh4ID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBjb21tYW5kID0geC5zbGljZSgwLCAxKTtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJzID0geFxyXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZSgxKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zcGxpdCgvWyAsXS8pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihuID0+IG4udHJpbSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAobiA9PiBwYXJzZUZsb2F0KG4pKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kID8ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICAgICAgfSA6IG51bGw7XHJcbiAgICAgICAgICAgIH0pLmZpbHRlcih4ID0+IHgpXHJcbiAgICAgICAgLy8gcG9seWxpbmUgc3R5bGUgcGF0aFxyXG4gICAgICAgIGlmIChyZXN1bHQuZXZlcnkoeCA9PiAnTW1MbEhoVnYnLmluY2x1ZGVzKHguY29tbWFuZCkpICYmICFDYW5pc1V0aWwuY29udmVydENvbG9yKGZpbGxDb2xvcikpIHtcclxuICAgICAgICAgICAgbGV0IGxpbmVzID0gW11cclxuICAgICAgICAgICAgbGV0IHByZXYgPSBudWxsXHJcbiAgICAgICAgICAgIGxldCB2YWxpZCA9IHRydWVcclxuICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm5cclxuICAgICAgICAgICAgICAgIGlmICh4LmNvbW1hbmQgPT09ICdNJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSB4LnBhcmFtZXRlcnMuc2xpY2UoLTIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByZXYpIHJldHVybiB2YWxpZCA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICBpZiAoeC5jb21tYW5kID09PSAnbScpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gcHJldi5tYXAoKHYsIGkpID0+IHYgKyB4LnBhcmFtZXRlcnNbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgZmlyc3RQb2ludCA9IHByZXYsXHJcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kUG9pbnQgPSB4LmNvbW1hbmQgPT09IHguY29tbWFuZC50b0xvd2VyQ2FzZSgpID8gcHJldi5zbGljZSgpIDogWzAsIDBdXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHguY29tbWFuZC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZFBvaW50ID0gc2Vjb25kUG9pbnQubWFwKCh2LCBpKSA9PiB2ICsgeC5wYXJhbWV0ZXJzW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludFswXSArPSB4LnBhcmFtZXRlcnNbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kUG9pbnRbMV0gPSBmaXJzdFBvaW50WzFdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZFBvaW50WzFdICs9IHgucGFyYW1ldGVyc1swXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRQb2ludFswXSA9IGZpcnN0UG9pbnRbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzZWNvbmRQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goW2ZpcnN0UG9pbnQsIHNlY29uZFBvaW50XSlcclxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0gc2Vjb25kUG9pbnRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBpZiAodmFsaWQpIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZXMnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogbGluZXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwaWUgc3R5bGUgcGF0aFxyXG4gICAgICAgIGlmIChyZXN1bHQuZXZlcnkoeCA9PiAnTW1MbEFhWnonLmluY2x1ZGVzKHguY29tbWFuZCkpICYmIHJlc3VsdC5maWx0ZXIoeCA9PiB4LmNvbW1hbmQudG9Mb3dlckNhc2UoKSA9PT0gJ2EnKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGV0IGNpcmNsZXMgPSBbXVxyXG4gICAgICAgICAgICBsZXQgcHJldiA9IG51bGxcclxuICAgICAgICAgICAgbGV0IHZhbGlkID0gdHJ1ZVxyXG4gICAgICAgICAgICByZXN1bHQuZm9yRWFjaCh4ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIHJldHVyblxyXG4gICAgICAgICAgICAgICAgaWYgKHguY29tbWFuZC50b0xvd2VyQ2FzZSgpID09PSAnbScpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2ID0geC5wYXJhbWV0ZXJzLnNsaWNlKC0yKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2KSByZXR1cm4gdmFsaWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgaWYgKHguY29tbWFuZC50b0xvd2VyQ2FzZSgpID09PSAneicpIHJldHVyblxyXG4gICAgICAgICAgICAgICAgbGV0IGZpcnN0UG9pbnQgPSBwcmV2LFxyXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZFBvaW50ID0geC5jb21tYW5kLnRvTG93ZXJDYXNlKCkgPT09IHguY29tbWFuZCA/IHByZXYuc2xpY2UoKSA6IFswLCAwXVxyXG4gICAgICAgICAgICAgICAgaWYgKHguY29tbWFuZC50b0xvd2VyQ2FzZSgpICE9PSAnYScpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldiA9IHNlY29uZFBvaW50Lm1hcCgodiwgaSkgPT4gdiArIHgucGFyYW1ldGVyc1tpXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlY29uZFBvaW50ID0gc2Vjb25kUG9pbnQubWFwKCh2LCBpKSA9PiB2ICsgeC5wYXJhbWV0ZXJzW2kgKyA1XSlcclxuICAgICAgICAgICAgICAgIGxldCB0bXAgPSBDYW5pc1V0aWwuc3ZnQXJjVG9DZW50ZXJQYXJhbS5hcHBseShudWxsLCBmaXJzdFBvaW50LmNvbmNhdCh4LnBhcmFtZXRlcnMuc2xpY2UoMCwgNSkpLmNvbmNhdChzZWNvbmRQb2ludCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih0bXAuY3gpICYmICFpc05hTih0bXAuY3kpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2lyY2xlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4udG1wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByeDogeC5wYXJhbWV0ZXJzWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByeTogeC5wYXJhbWV0ZXJzWzFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGU6IHgucGFyYW1ldGVyc1syXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwcmV2ID0gc2Vjb25kUG9pbnRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgaWYgKGNpcmNsZXMubGVuZ3RoIDw9IDAgfHwgIWNpcmNsZXMuZXZlcnkoeCA9PiBbJ2N4JywgJ2N5J10ucmVkdWNlKChwLCBjKSA9PiBwICsgTWF0aC5hYnMoeFtjXSAtIGNpcmNsZXNbMF1bY10pLCAwKSA8IDFlLTEpKSB2YWxpZCA9IGZhbHNlXHJcbiAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGMgPSBjaXJjbGVzLnJlZHVjZSgocCwgYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcCkgcmV0dXJuIGNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5yeCArIGMucnkgPiBwLnJ4ICsgcC5yeSkgcmV0dXJuIGNcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcFxyXG4gICAgICAgICAgICAgICAgfSwgbnVsbClcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyUmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwaWVzJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN4OiBjLmN4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjeTogYy5jeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogYy5zdGFydEFuZ2xlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRBbmdsZTogYy5lbmRBbmdsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2t3aXNlOiBjLmNsb2Nrd2lzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBjaXJjbGVzLm1hcCh4ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcng6IHgucngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnk6IHgucnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlOiB4LnJvdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBhdHRyUmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG90aGVyIHVuaGFuZGxlZCBzdHlsZSBwYXRoXHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmFkaWFuKHV4LCB1eSwgdngsIHZ5KSB7XHJcbiAgICAgICAgdmFyIGRvdCA9IHV4ICogdnggKyB1eSAqIHZ5O1xyXG4gICAgICAgIHZhciBtb2QgPSBNYXRoLnNxcnQoKHV4ICogdXggKyB1eSAqIHV5KSAqICh2eCAqIHZ4ICsgdnkgKiB2eSkpO1xyXG4gICAgICAgIHZhciByYWQgPSBNYXRoLmFjb3MoZG90IC8gbW9kKTtcclxuICAgICAgICBpZiAodXggKiB2eSAtIHV5ICogdnggPCAwLjApIHtcclxuICAgICAgICAgICAgcmFkID0gLXJhZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJhZDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc3ZnQXJjVG9DZW50ZXJQYXJhbSh4MSwgeTEsIHJ4LCByeSwgcGhpLCBmQSwgZlMsIHgyLCB5Mikge1xyXG4gICAgICAgIHZhciBjeCwgY3ksIHN0YXJ0QW5nbGUsIGRlbHRhQW5nbGUsIGVuZEFuZ2xlO1xyXG4gICAgICAgIHZhciBQSXgyID0gTWF0aC5QSSAqIDIuMDtcclxuXHJcbiAgICAgICAgaWYgKHJ4IDwgMCkge1xyXG4gICAgICAgICAgICByeCA9IC1yeDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJ5IDwgMCkge1xyXG4gICAgICAgICAgICByeSA9IC1yeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgKHJ4ID09IDAuMCB8fCByeSA9PSAwLjApIHsgLy8gaW52YWxpZCBhcmd1bWVudHNcclxuICAgICAgICAvLyAgICAgdGhyb3cgRXJyb3IoJ3J4IGFuZCByeSBjYW4gbm90IGJlIDAnKTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIHZhciBzX3BoaSA9IE1hdGguc2luKHBoaSk7XHJcbiAgICAgICAgdmFyIGNfcGhpID0gTWF0aC5jb3MocGhpKTtcclxuICAgICAgICB2YXIgaGRfeCA9ICh4MSAtIHgyKSAvIDIuMDsgLy8gaGFsZiBkaWZmIG9mIHhcclxuICAgICAgICB2YXIgaGRfeSA9ICh5MSAtIHkyKSAvIDIuMDsgLy8gaGFsZiBkaWZmIG9mIHlcclxuICAgICAgICB2YXIgaHNfeCA9ICh4MSArIHgyKSAvIDIuMDsgLy8gaGFsZiBzdW0gb2YgeFxyXG4gICAgICAgIHZhciBoc195ID0gKHkxICsgeTIpIC8gMi4wOyAvLyBoYWxmIHN1bSBvZiB5XHJcblxyXG4gICAgICAgIC8vIEY2LjUuMVxyXG4gICAgICAgIHZhciB4MV8gPSBjX3BoaSAqIGhkX3ggKyBzX3BoaSAqIGhkX3k7XHJcbiAgICAgICAgdmFyIHkxXyA9IGNfcGhpICogaGRfeSAtIHNfcGhpICogaGRfeDtcclxuXHJcbiAgICAgICAgLy8gRi42LjYgQ29ycmVjdGlvbiBvZiBvdXQtb2YtcmFuZ2UgcmFkaWlcclxuICAgICAgICAvLyAgIFN0ZXAgMzogRW5zdXJlIHJhZGlpIGFyZSBsYXJnZSBlbm91Z2hcclxuICAgICAgICB2YXIgbGFtYmRhID0gKHgxXyAqIHgxXykgLyAocnggKiByeCkgKyAoeTFfICogeTFfKSAvIChyeSAqIHJ5KTtcclxuICAgICAgICBpZiAobGFtYmRhID4gMSkge1xyXG4gICAgICAgICAgICByeCA9IHJ4ICogTWF0aC5zcXJ0KGxhbWJkYSk7XHJcbiAgICAgICAgICAgIHJ5ID0gcnkgKiBNYXRoLnNxcnQobGFtYmRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByeHJ5ID0gcnggKiByeTtcclxuICAgICAgICB2YXIgcnh5MV8gPSByeCAqIHkxXztcclxuICAgICAgICB2YXIgcnl4MV8gPSByeSAqIHgxXztcclxuICAgICAgICB2YXIgc3VtX29mX3NxID0gcnh5MV8gKiByeHkxXyArIHJ5eDFfICogcnl4MV87IC8vIHN1bSBvZiBzcXVhcmVcclxuICAgICAgICAvLyBpZiAoIXN1bV9vZl9zcSkge1xyXG4gICAgICAgIC8vICAgICB0aHJvdyBFcnJvcignc3RhcnQgcG9pbnQgY2FuIG5vdCBiZSBzYW1lIGFzIGVuZCBwb2ludCcpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICB2YXIgY29lID0gTWF0aC5zcXJ0KE1hdGguYWJzKChyeHJ5ICogcnhyeSAtIHN1bV9vZl9zcSkgLyBzdW1fb2Zfc3EpKTtcclxuICAgICAgICBpZiAoZkEgPT0gZlMpIHtcclxuICAgICAgICAgICAgY29lID0gLWNvZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEY2LjUuMlxyXG4gICAgICAgIHZhciBjeF8gPSBjb2UgKiByeHkxXyAvIHJ5O1xyXG4gICAgICAgIHZhciBjeV8gPSAtY29lICogcnl4MV8gLyByeDtcclxuXHJcbiAgICAgICAgLy8gRjYuNS4zXHJcbiAgICAgICAgY3ggPSBjX3BoaSAqIGN4XyAtIHNfcGhpICogY3lfICsgaHNfeDtcclxuICAgICAgICBjeSA9IHNfcGhpICogY3hfICsgY19waGkgKiBjeV8gKyBoc195O1xyXG5cclxuICAgICAgICB2YXIgeGNyMSA9ICh4MV8gLSBjeF8pIC8gcng7XHJcbiAgICAgICAgdmFyIHhjcjIgPSAoeDFfICsgY3hfKSAvIHJ4O1xyXG4gICAgICAgIHZhciB5Y3IxID0gKHkxXyAtIGN5XykgLyByeTtcclxuICAgICAgICB2YXIgeWNyMiA9ICh5MV8gKyBjeV8pIC8gcnk7XHJcblxyXG4gICAgICAgIC8vIEY2LjUuNVxyXG4gICAgICAgIHN0YXJ0QW5nbGUgPSBDYW5pc1V0aWwucmFkaWFuKDEuMCwgMC4wLCB4Y3IxLCB5Y3IxKTtcclxuXHJcbiAgICAgICAgLy8gRjYuNS42XHJcbiAgICAgICAgZGVsdGFBbmdsZSA9IENhbmlzVXRpbC5yYWRpYW4oeGNyMSwgeWNyMSwgLXhjcjIsIC15Y3IyKTtcclxuICAgICAgICB3aGlsZSAoZGVsdGFBbmdsZSA+IFBJeDIpIHtcclxuICAgICAgICAgICAgZGVsdGFBbmdsZSAtPSBQSXgyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAoZGVsdGFBbmdsZSA8IDAuMCkge1xyXG4gICAgICAgICAgICBkZWx0YUFuZ2xlICs9IFBJeDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmUyA9PSBmYWxzZSB8fCBmUyA9PSAwKSB7XHJcbiAgICAgICAgICAgIGRlbHRhQW5nbGUgLT0gUEl4MjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgZGVsdGFBbmdsZTtcclxuICAgICAgICB3aGlsZSAoZW5kQW5nbGUgPiBQSXgyKSB7XHJcbiAgICAgICAgICAgIGVuZEFuZ2xlIC09IFBJeDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChlbmRBbmdsZSA8IDAuMCkge1xyXG4gICAgICAgICAgICBlbmRBbmdsZSArPSBQSXgyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG91dHB1dE9iaiA9IHtcclxuICAgICAgICAgICAgLyogY3gsIGN5LCBzdGFydEFuZ2xlLCBkZWx0YUFuZ2xlICovXHJcbiAgICAgICAgICAgIGN4LFxyXG4gICAgICAgICAgICBjeSxcclxuICAgICAgICAgICAgc3RhcnRBbmdsZSxcclxuICAgICAgICAgICAgZGVsdGFBbmdsZSxcclxuICAgICAgICAgICAgZW5kQW5nbGUsXHJcbiAgICAgICAgICAgIGNsb2Nrd2lzZTogKGZTID09IHRydWUgfHwgZlMgPT0gMSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRwdXRPYmo7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNvbnZlcnRDb2xvcihzdHIsIGZNb2RlLCB0TW9kZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykgcmV0dXJuIHN0clxyXG4gICAgICAgIGlmIChzdHIgPT09ICdub25lJykgcmV0dXJuIG51bGxcclxuICAgICAgICBzdHIgPSBzdHIudHJpbSgpXHJcbiAgICAgICAgbGV0IG1yID0gbnVsbFxyXG4gICAgICAgIGlmICh0TW9kZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRNb2RlID0gZk1vZGVcclxuICAgICAgICAgICAgaWYgKHN0ci5zdGFydHNXaXRoKCcjJykpIHtcclxuICAgICAgICAgICAgICAgIGZNb2RlID0gJ2hleCdcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHIuc3RhcnRzV2l0aCgncmdiJykpIHtcclxuICAgICAgICAgICAgICAgIGZNb2RlID0gJ3JnYidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhc3N1bWUgdXNlciBpbnB1dCBpcyB2YWxpZFxyXG4gICAgICAgIHN3aXRjaCAoZk1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSAncmdiJzpcclxuICAgICAgICAgICAgICAgIG1yID0gc3RyLnNwbGl0KCcoJylbMV0uc3BsaXQoJywnKS5tYXAoeCA9PiBwYXJzZUZsb2F0KHgpKVxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSAnaGV4JzpcclxuICAgICAgICAgICAgICAgIG1yID0gc3RyLnNsaWNlKDEpLm1hdGNoKC8uezEsMn0vZykubWFwKHggPT4gcGFyc2VJbnQoeCwgMTYpKVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0clxyXG4gICAgICAgIH1cclxuICAgICAgICBtciA9IG1yLnNsaWNlKDAsIDMpXHJcbiAgICAgICAgc3dpdGNoICh0TW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlICdoZXgnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcjJyArIG1yLm1hcCh4ID0+IHgudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpXHJcbiAgICAgICAgICAgIGNhc2UgJ3JnYic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYHJnYigke21yLmpvaW4oJywnKX0pYFxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0clxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcG9sYXJUb0NhcnRlc2lhbihjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIGFuZ2xlSW5SYWRpYW5zKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDogTWF0aC5yb3VuZCgoY2VudGVyWCArIChyYWRpdXMgKiBNYXRoLmNvcyhhbmdsZUluUmFkaWFucykpKSAqIDEwMCkgLyAxMDAsXHJcbiAgICAgICAgICAgIHk6IE1hdGgucm91bmQoKGNlbnRlclkgKyAocmFkaXVzICogTWF0aC5zaW4oYW5nbGVJblJhZGlhbnMpKSkgKiAxMDApIC8gMTAwXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgc3RhdGljIGFyYyh4LCB5LCBpbm5lclJhZGl1cywgb3V0dGVyUmFkaXVzLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSkge1xyXG4gICAgICAgIHN0YXJ0QW5nbGUgPSBzdGFydEFuZ2xlIDwgMCA/IHN0YXJ0QW5nbGUgKyAyICogTWF0aC5QSSA6IHN0YXJ0QW5nbGU7XHJcbiAgICAgICAgZW5kQW5nbGUgPSBlbmRBbmdsZSA8IDAgfHwgc3RhcnRBbmdsZSA+IGVuZEFuZ2xlID8gZW5kQW5nbGUgKyAyICogTWF0aC5QSSA6IGVuZEFuZ2xlO1xyXG5cclxuICAgICAgICAvL3RvIGdlbmVyYXRlIGNvdmVyLCBtYWtlIHRoZSBjb3ZlciBhIGxpdHRsZSBiaWdnZXJcclxuICAgICAgICBpbm5lclJhZGl1cyA9IGlubmVyUmFkaXVzID09PSAwID8gMCA6IGlubmVyUmFkaXVzIC0gMTtcclxuICAgICAgICBvdXR0ZXJSYWRpdXMgKz0gMTtcclxuXHJcbiAgICAgICAgbGV0IGxhcmdlQXJjRmxhZyA9IGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSA8PSBNYXRoLlBJID8gMCA6IDE7XHJcblxyXG4gICAgICAgIGxldCBzdGFydDEgPSBDYW5pc1V0aWwucG9sYXJUb0NhcnRlc2lhbih4LCB5LCBvdXR0ZXJSYWRpdXMsIGVuZEFuZ2xlKTtcclxuICAgICAgICBsZXQgZW5kMSA9IENhbmlzVXRpbC5wb2xhclRvQ2FydGVzaWFuKHgsIHksIG91dHRlclJhZGl1cywgc3RhcnRBbmdsZSk7XHJcbiAgICAgICAgbGV0IHN0YXJ0MiA9IENhbmlzVXRpbC5wb2xhclRvQ2FydGVzaWFuKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSk7XHJcbiAgICAgICAgbGV0IGVuZDIgPSBDYW5pc1V0aWwucG9sYXJUb0NhcnRlc2lhbih4LCB5LCBpbm5lclJhZGl1cywgc3RhcnRBbmdsZSk7XHJcblxyXG4gICAgICAgIGxldCBpc1JpbmcgPSBmYWxzZTtcclxuICAgICAgICBpZiAoc3RhcnQxLnggPT09IGVuZDEueCAmJiBzdGFydDEueSA9PT0gZW5kMS55KSB7Ly90aGlzIGlzIGEgcmluZ1xyXG4gICAgICAgICAgICBlbmQxLnkgLT0gMTtcclxuICAgICAgICAgICAgZW5kMi55IC09IDE7XHJcbiAgICAgICAgICAgIGlzUmluZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZDtcclxuICAgICAgICBpZiAoIWlzUmluZykge1xyXG4gICAgICAgICAgICBkID0gW1xyXG4gICAgICAgICAgICAgICAgXCJNXCIgKyBzdGFydDEueCwgc3RhcnQxLnksXHJcbiAgICAgICAgICAgICAgICBcIkFcIiArIG91dHRlclJhZGl1cywgb3V0dGVyUmFkaXVzLCAwLCBsYXJnZUFyY0ZsYWcsIDAsIGVuZDEueCwgZW5kMS55LFxyXG4gICAgICAgICAgICAgICAgXCJMXCIgKyBlbmQyLngsIGVuZDIueSxcclxuICAgICAgICAgICAgICAgIFwiQVwiICsgaW5uZXJSYWRpdXMsIGlubmVyUmFkaXVzLCAwLCBsYXJnZUFyY0ZsYWcsIDEsIHN0YXJ0Mi54LCBzdGFydDIueSxcclxuICAgICAgICAgICAgICAgIFwiTFwiICsgc3RhcnQxLngsIHN0YXJ0MS55ICsgXCJaXCJcclxuICAgICAgICAgICAgXS5qb2luKFwiLFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkID0gW1xyXG4gICAgICAgICAgICAgICAgXCJNXCIgKyBzdGFydDEueCwgc3RhcnQxLnksXHJcbiAgICAgICAgICAgICAgICBcIkFcIiArIG91dHRlclJhZGl1cywgb3V0dGVyUmFkaXVzLCAwLCBsYXJnZUFyY0ZsYWcsIDEsIGVuZDEueCwgZW5kMS55LFxyXG4gICAgICAgICAgICAgICAgXCJNXCIgKyBlbmQyLngsIGVuZDIueSxcclxuICAgICAgICAgICAgICAgIFwiQVwiICsgaW5uZXJSYWRpdXMsIGlubmVyUmFkaXVzLCAwLCBsYXJnZUFyY0ZsYWcsIDAsIHN0YXJ0Mi54LCBzdGFydDIueSArIFwiWlwiXHJcbiAgICAgICAgICAgIF0uam9pbihcIixcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0dXJuIGEgZG9tIG5vZGUgdG8gc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0ge0RPTX0gZG9tTm9kZSBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGRvbU5vZGVUb1N0cmluZyhkb21Ob2RlKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9tTm9kZSk7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuaW5uZXJIVE1MO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdHVybiBhIHN0cmluZyB0byBkb20gbm9kZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0ciBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHN0clRvRG9tTm9kZShzdHIpIHtcclxuICAgICAgICBsZXQgdG1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdG1wRGl2LmlubmVySFRNTCA9IHN0ci50cmltKCk7XHJcbiAgICAgICAgbGV0IGRvbSA9IHRtcERpdi5maXJzdENoaWxkO1xyXG4gICAgICAgIHJldHVybiBkb207XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRyYW5zU2hhcGUodCwgdHgsIHR5KSB7XHJcbiAgICAgICAgaWYgKHQudGFnTmFtZSAhPT0gJ3BhdGgnKSB7XHJcbiAgICAgICAgICAgIGxldCBoYXNQb3NpID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0LmdldEF0dHJpYnV0ZSgneCcpIHx8IHQuZ2V0QXR0cmlidXRlKCd5JykpIHtcclxuICAgICAgICAgICAgICAgIGhhc1Bvc2kgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3gnLCB0LmdldEF0dHJpYnV0ZSgneCcpID8gcGFyc2VGbG9hdCh0LmdldEF0dHJpYnV0ZSgneCcpKSArIHR4IDogdHgpO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3knLCB0LmdldEF0dHJpYnV0ZSgneScpID8gcGFyc2VGbG9hdCh0LmdldEF0dHJpYnV0ZSgneScpKSArIHR5IDogdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LmdldEF0dHJpYnV0ZSgneDEnKSB8fCB0LmdldEF0dHJpYnV0ZSgneTEnKSB8fCB0LmdldEF0dHJpYnV0ZSgneDInKSB8fCB0LmdldEF0dHJpYnV0ZSgneTInKSkge1xyXG4gICAgICAgICAgICAgICAgaGFzUG9zaSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgneDEnLCB0LmdldEF0dHJpYnV0ZSgneDEnKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ3gxJykpICsgdHggOiB0eCk7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgneDInLCB0LmdldEF0dHJpYnV0ZSgneDInKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ3gyJykpICsgdHggOiB0eCk7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgneTEnLCB0LmdldEF0dHJpYnV0ZSgneTEnKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ3kxJykpICsgdHkgOiB0eSk7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgneTInLCB0LmdldEF0dHJpYnV0ZSgneTInKSA/IHBhcnNlRmxvYXQodC5nZXRBdHRyaWJ1dGUoJ3kyJykpICsgdHkgOiB0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuZ2V0QXR0cmlidXRlKCdjeCcpIHx8IHQuZ2V0QXR0cmlidXRlKCdjeScpKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNQb3NpID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCdjeCcsIHQuZ2V0QXR0cmlidXRlKCdjeCcpID8gcGFyc2VGbG9hdCh0LmdldEF0dHJpYnV0ZSgnY3gnKSkgKyB0eCA6IHR4KTtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCdjeScsIHQuZ2V0QXR0cmlidXRlKCdjeScpID8gcGFyc2VGbG9hdCh0LmdldEF0dHJpYnV0ZSgnY3knKSkgKyB0eSA6IHR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWhhc1Bvc2kpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LnRhZ05hbWUgPT09ICdjaXJjbGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ2N4JywgdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKCdjeScsIHR5KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3gnLCB0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3knLCB0eSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodC5nZXRBdHRyaWJ1dGUoJ2QnKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdENtZCA9IENhbmlzVXRpbC5zZXRQYXRoRFZhbHVlKHQuZ2V0QXR0cmlidXRlKCdkJyksIGZhbHNlLCB0eCwgdHkpO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ2QnLCByZXN1bHRDbWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzcGxpdFBhdGgoZCkge1xyXG4gICAgICAgIGxldCB0bXBQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbiAgICAgICAgdG1wUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsIGQpO1xyXG4gICAgICAgIGxldCB0bXBQYXRoTGVuID0gdG1wUGF0aC5nZXRUb3RhbExlbmd0aCgpO1xyXG4gICAgICAgIGxldCBzdGVwTnVtID0gMzAwLCBwYXRoU3RlcExlbiA9IHRtcFBhdGhMZW4gLyBzdGVwTnVtO1xyXG4gICAgICAgIGxldCBkaXNjcml0UGF0aCA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RlcE51bTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBQbnQgPSB0bXBQYXRoLmdldFBvaW50QXRMZW5ndGgocGF0aFN0ZXBMZW4gKiBpKTtcclxuICAgICAgICAgICAgaSA9PT0gMCA/IGRpc2NyaXRQYXRoICs9ICdNJyArIHRtcFBudC54ICsgJywnICsgdG1wUG50LnkgOiBkaXNjcml0UGF0aCArPSAnTCcgKyB0bXBQbnQueCArICcsJyArIHRtcFBudC55XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRpc2NyaXRQYXRoICs9ICdaJztcclxuICAgICAgICByZXR1cm4gZGlzY3JpdFBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFBhdGhPZmZzZXQoZCkge1xyXG4gICAgICAgIGNvbnN0IHBhdGhEYXRhID0gZFxyXG4gICAgICAgIGNvbnN0IHBhdGhEYXRhU2VyaWVzID0gcGFyc2VTVkcocGF0aERhdGEpXHJcbiAgICAgICAgY29uc3QgcGF0aE1ha2VyID0gbmV3IFBhdGhNYWtlcigpXHJcbiAgICAgICAgbGV0IHBhdGhEYXRhV2l0aFR5cGU7XHJcbiAgICAgICAgcGF0aERhdGFTZXJpZXMuZm9yRWFjaChwYXRoRGF0YUl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHBhdGhEYXRhSXRlbS5jb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLm1vdmVUbyhwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5saW5lVG8ocGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIubGluZVRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0gnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuaG9yaXpvbnRhbFRvKHBhdGhEYXRhV2l0aFR5cGUueClcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5ob3Jpem9udGFsVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1YnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIudmVydGljYWxUbyhwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIudmVydGljYWxUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQyc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5jdWJpY0JlemllckN1cnZlVG8ocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54MiwgcGF0aERhdGFXaXRoVHlwZS55MiwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuY3ViaWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54MiwgcGF0aERhdGFXaXRoVHlwZS55MiwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIucXVhZHJhdGljQmV6aWVyQ3VydmVUbyhwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5xdWFkcmF0aWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuYXJjVG8ocGF0aERhdGFXaXRoVHlwZS5yeCwgcGF0aERhdGFXaXRoVHlwZS5yeSwgcGF0aERhdGFXaXRoVHlwZS54QXhpc1JvdGF0aW9uLCB+fnBhdGhEYXRhV2l0aFR5cGUubGFyZ2VBcmMsIH5+cGF0aERhdGFXaXRoVHlwZS5zd2VlcCwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuYXJjVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLnJ4LCBwYXRoRGF0YVdpdGhUeXBlLnJ5LCBwYXRoRGF0YVdpdGhUeXBlLnhBeGlzUm90YXRpb24sIH5+cGF0aERhdGFXaXRoVHlwZS5sYXJnZUFyYywgfn5wYXRoRGF0YVdpdGhUeXBlLnN3ZWVwLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd6JzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuY2xvc2VQYXRoKClcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHBhdGhEYXRhSXRlbSlcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGltcGxlbWVudGF0aW9uIGZvdW5kIGZvciB0aGlzIHBhdGggY29tbWFuZC4nKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gW3BhdGhNYWtlci5vZmZzZXRYLCBwYXRoTWFrZXIub2Zmc2V0WV07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRyYW5zRFRvTG90dGllU3BlYyhkKSB7XHJcbiAgICAgICAgbGV0IHBvc2lPZmZzZXQgPSB0aGlzLmdldFBhdGhPZmZzZXQoZCk7XHJcbiAgICAgICAgbGV0IHBtID0gbmV3IFBhdGhNYWtlcihkKTtcclxuICAgICAgICBwbS51bmlmb3JtKCk7XHJcbiAgICAgICAgcmV0dXJuIFtwb3NpT2Zmc2V0LCBwbV07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldFBhdGhEVmFsdWUoZCwgcmVzZXQsIHR4ID0gMCwgdHkgPSAwLCBkaWZmQ21kcyA9IG5ldyBNYXAoKSkge1xyXG4gICAgICAgIGQgPSBkLnJlcGxhY2UoLyg/PD1cXGQpXFxzKD89W21NbExoSHZWY0NzU3FRdFRhQXpaXSkvZywgJycpLnJlcGxhY2UoLyg/PD1bbU1sTGhIdlZjQ3NTcVF0VGFBXSlcXHMoPz0oXFxkfFstK10pKS9nLCAnJykucmVwbGFjZSgvXFxzL2csICcsJyk7XHJcbiAgICAgICAgbGV0IGNtZFJlZ0V4cCA9IG5ldyBSZWdFeHAoL1ttTWxMaEh2VmNDc1NxUXRUYUF6Wl1bXm1NbExoSHZWY0NzU3FRdFRhQXpaXSovZyk7XHJcbiAgICAgICAgbGV0IHJlc3VsdENtZCA9ICcnO1xyXG4gICAgICAgIGxldCBjbWRzID0gZC5tYXRjaChjbWRSZWdFeHApO1xyXG4gICAgICAgIGlmIChjbWRzKSB7XHJcbiAgICAgICAgICAgIC8vZ2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3QgbW92ZSBjbWQgaWYgdGhlcmUgaXMgb25lXHJcbiAgICAgICAgICAgIGxldCBmaXJzdENtZE5hbWUgPSBjbWRzWzBdLnN1YnN0cmluZygwLCAxKTtcclxuICAgICAgICAgICAgbGV0IHJlc2V0WCA9ICcwJywgcmVzZXRZID0gJzAnO1xyXG4gICAgICAgICAgICBpZiAoZmlyc3RDbWROYW1lID09PSAnbScgfHwgZmlyc3RDbWROYW1lID09PSAnTScpIHtcclxuICAgICAgICAgICAgICAgIGxldCBmaXJzdENtZFZhbHVlcyA9IGNtZHNbMF0uc3Vic3RyaW5nKDEpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICByZXNldFggPSBmaXJzdENtZFZhbHVlc1swXTtcclxuICAgICAgICAgICAgICAgIHJlc2V0WSA9IGZpcnN0Q21kVmFsdWVzWzFdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNtZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBjbWROYW1lID0gY21kc1tpXS5zdWJzdHJpbmcoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY21kVmFsdWUgPSBjbWRzW2ldLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSBjbWROYW1lO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChjbWROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnSCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgY21kVmFsdWUsIHJlc2V0LCByZXNldFgsIHR4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgY21kVmFsdWUsIHJlc2V0LCAnMCcsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdWJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kID0gdGhpcy5jYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBpLCBjbWROYW1lLCBjbWRWYWx1ZSwgcmVzZXQsIHJlc2V0WSwgdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kID0gdGhpcy5jYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBpLCBjbWROYW1lLCBjbWRWYWx1ZSwgcmVzZXQsICcwJywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0wnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1QnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1MnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtcyA9IGNtZFZhbHVlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG5pID0gMDsgbmkgPCBudW1zLmxlbmd0aDsgbmkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5pICUgMiA9PT0gMCkgey8veFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgbnVtc1tuaV0sIHJlc2V0LCByZXNldFgsIHR4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly95XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kID0gdGhpcy5jYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBpLCBjbWROYW1lLCBudW1zW25pXSwgcmVzZXQsIHJlc2V0WSwgdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5pICE9PSBudW1zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3MnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbnVtczIgPSBjbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuaSA9IDA7IG5pIDwgbnVtczIubGVuZ3RoOyBuaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgPSB0aGlzLmNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGksIGNtZE5hbWUsIG51bXMyW25pXSwgcmVzZXQsICcwJywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmkgIT09IG51bXMyLmxlbmd0aCAtIDEgJiYgbnVtczJbbmldICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnQSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbnVtcyA9IGNtZFZhbHVlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG5pID0gMDsgbmkgPCBhbnVtcy5sZW5ndGg7IG5pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuaSA9PT0gYW51bXMubGVuZ3RoIC0gMikgey8veFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgYW51bXNbbmldLCByZXNldCwgcGFyc2VGbG9hdChyZXNldFgpICsgMSwgdHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5pID09PSBhbnVtcy5sZW5ndGggLSAxKSB7Ly95XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kID0gdGhpcy5jYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBpLCBjbWROYW1lLCBhbnVtc1tuaV0sIHJlc2V0LCBwYXJzZUZsb2F0KHJlc2V0WSkgKyAxLCB0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSBhbnVtc1tuaV0gKyAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbnVtczIgPSBjbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuaSA9IDA7IG5pIDwgYW51bXMyLmxlbmd0aDsgbmkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5pID09PSBhbnVtczIubGVuZ3RoIC0gMikgey8veFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdENtZCA9IHRoaXMuY2FsTnVtVHJhbnMocmVzdWx0Q21kLCBkaWZmQ21kcywgaSwgY21kTmFtZSwgYW51bXMyW25pXSwgcmVzZXQsICcxJywgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9ICcgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmkgPT09IGFudW1zMi5sZW5ndGggLSAxKSB7Ly95XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kID0gdGhpcy5jYWxOdW1UcmFucyhyZXN1bHRDbWQsIGRpZmZDbWRzLCBpLCBjbWROYW1lLCBhbnVtczJbbmldLCByZXNldCwgJzEnLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IGFudW1zMltuaV0gKyAnICc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneic6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnWic6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkLmNoYXJBdChkLmxlbmd0aCAtIDEpID09PSAneicgfHwgZC5jaGFyQXQoZC5sZW5ndGggLSAxKSA9PT0gJ1onKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gJ1onO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRDbWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNhbE51bVRyYW5zKHJlc3VsdENtZCwgZGlmZkNtZHMsIGN1cnJlbnRDbWRJZHgsIGNtZE5hbWUsIGNtZFZhbHVlLCByZXNldCwgcmVzZXRWYWwsIHRWYWwpIHtcclxuICAgICAgICBjbWROYW1lID0gY21kTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGlmIChyZXNldCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRpZmZDbWRzLmdldChjbWROYW1lKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkaWZmQ21kSWR4cyA9IGRpZmZDbWRzLmdldChjbWROYW1lKTtcclxuICAgICAgICAgICAgICAgIGxldCBmbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRpZmZDbWRJZHhzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpZmZDbWRJZHhzW2pdLmNtZElkeCA9PT0gY3VycmVudENtZElkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gcmVzZXRWYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZsYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gY21kVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRDbWQgKz0gY21kVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY21kVmFsdWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Q21kICs9IChwYXJzZUZsb2F0KGNtZFZhbHVlKSArIHRWYWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRDbWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBkb2luZyB0cmFuc2l0aW9uIHdpdGggcGF0aFxyXG4gICAgICogQHBhcmFtIHsqfSBzdGFydEQgXHJcbiAgICAgKiBAcGFyYW0geyp9IGVuZEQgXHJcbiAgICAgKiBAcGFyYW0geyp9IHJhdGlvIFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY2FsVHJhbnNEKHN0YXJ0RCwgZW5kRCwgcmF0aW8sIHN0YXJ0RGlzRCwgZW5kRGlzRCkge1xyXG4gICAgICAgIHN0YXJ0RCA9IHN0YXJ0RC5yZXBsYWNlKC8oPzw9XFxkKVxccyg/PVttTWxMaEh2VmNDc1NxUXRUYUF6Wl0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21NbExoSHZWY0NzU3FRdFRhQV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgIGVuZEQgPSBlbmRELnJlcGxhY2UoLyg/PD1cXGQpXFxzKD89W21NbExoSHZWY0NzU3FRdFRhQXpaXSkvZywgJycpLnJlcGxhY2UoLyg/PD1bbU1sTGhIdlZjQ3NTcVF0VGFBXSlcXHMoPz0oXFxkfFstK10pKS9nLCAnJykucmVwbGFjZSgvXFxzL2csICcsJyk7XHJcbiAgICAgICAgbGV0IHJlc3VsdENtZCA9ICcnO1xyXG4gICAgICAgIGlmIChyYXRpbyA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXN1bHRDbWQgPSBzdGFydEQ7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyYXRpbyA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXN1bHRDbWQgPSBlbmREO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzdGFydERpc0QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdENtZCArPSAoaSA9PT0gMCA/ICdNJyA6ICdMJykgKyAoKGVuZERpc0RbaV1bMF0gLSBzdGFydERpc0RbaV1bMF0pICogcmF0aW8gKyBzdGFydERpc0RbaV1bMF0pICsgJywnICsgKChlbmREaXNEW2ldWzFdIC0gc3RhcnREaXNEW2ldWzFdKSAqIHJhdGlvICsgc3RhcnREaXNEW2ldWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0RC5jaGFyQXQoc3RhcnRELmxlbmd0aCAtIDEpID09PSAneicgfHwgc3RhcnRELmNoYXJBdChzdGFydEQubGVuZ3RoIC0gMSkgPT09ICdaJykge1xyXG4gICAgICAgICAgICByZXN1bHRDbWQgKz0gJ1onO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0Q21kO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBzdGFydEFuZ2xlIHNob3VsZCBzbWFsbGVyIHRoYW4gZW5kQW5nbGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tU3RhcnRBbmdsZSBzdGFydCBzdGF0ZSBvZiBzdGFydCBhbmdsZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21FbmRBbmdsZSBzdGFydCBzdGF0ZSBvZiBlbmQgYW5nbGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b1N0YXJ0QW5nbGUgZW5kIHN0YXRlIG9mIHN0YXJ0IGFuZ2xlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9FbmRBbmdsZSBlbmQgc3RhdGUgb2YgZW5kIGFuZ2xlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmF0aW8gMC0xIGZsb2F0IG51bWJlclxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbjxudW1iZXIsbnVtYmVyLG51bWJlcj59IGludGVycG9sYXRlRm4gY3VzdG9taXplIGludGVycG9sYXRlIGZ1bmN0aW9uLCBpbnB1dCBpcyAoc3RhcnQsIGVuZCwgcmF0aW8pLCBkZWZhdWx0IGlzIGxpbmVhclxyXG4gICAgICogQHJldHVybnMge0FycmF5PG51bWJlcj59IFtzdGFydEFuZ2xlLCBlbmRBbmdsZV0gb2YgZ2l2ZW4gcmF0aW9cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFyY1RyYW5zaXRpb24oZnJvbVN0YXJ0QW5nbGUsIGZyb21FbmRBbmdsZSwgdG9TdGFydEFuZ2xlLCB0b0VuZEFuZ2xlLCByYXRpbywgaW50ZXJwb2xhdGVGbikge1xyXG4gICAgICAgIGxldCB2YWxpZEFuZ2xlID0gKHMsIGUpID0+IGUgPCBzID8gKCgpID0+IHsgdGhyb3cgJ3N0YXJ0QW5nbGUgc2hvdWxkIHNtYWxsZXIgdGhhbiBlbmRBbmdsZScgfSkoKSA6IG51bGxcclxuICAgICAgICB2YWxpZEFuZ2xlKGZyb21TdGFydEFuZ2xlLCBmcm9tRW5kQW5nbGUpXHJcbiAgICAgICAgdmFsaWRBbmdsZSh0b1N0YXJ0QW5nbGUsIHRvRW5kQW5nbGUpXHJcbiAgICAgICAgbGV0IG1pbmltYWxBbmdsZSA9IChzLCBlKSA9PiBlIC0gTWF0aC5QSSAqIDIgKiBNYXRoLmZsb29yKChlIC0gcykgLyBNYXRoLlBJIC8gMilcclxuICAgICAgICAvLyB1bmlmb3JtIGFuZ2xlIGRvbWFpbiB3aXRoaW4gMipQSVxyXG4gICAgICAgIGZyb21FbmRBbmdsZSA9IG1pbmltYWxBbmdsZShmcm9tU3RhcnRBbmdsZSwgZnJvbUVuZEFuZ2xlKVxyXG4gICAgICAgIHRvU3RhcnRBbmdsZSA9IG1pbmltYWxBbmdsZShmcm9tU3RhcnRBbmdsZSwgdG9TdGFydEFuZ2xlKVxyXG4gICAgICAgIHRvRW5kQW5nbGUgPSBtaW5pbWFsQW5nbGUodG9TdGFydEFuZ2xlLCB0b0VuZEFuZ2xlKVxyXG4gICAgICAgIC8vIGZpbmQgdGhlIGNsb2VzdCBkb21haW5cclxuICAgICAgICB0b1N0YXJ0QW5nbGUgLT0gTWF0aC5hYnModG9TdGFydEFuZ2xlIC0gZnJvbVN0YXJ0QW5nbGUpICsgTWF0aC5hYnModG9FbmRBbmdsZSAtIGZyb21FbmRBbmdsZSkgPCAyICogTWF0aC5QSSA/IDAgOiBNYXRoLlBJICogMlxyXG4gICAgICAgIHRvRW5kQW5nbGUgPSBtaW5pbWFsQW5nbGUodG9TdGFydEFuZ2xlLCB0b0VuZEFuZ2xlKVxyXG4gICAgICAgIGxldCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlRm4gfHwgKChzLCBlLCByKSA9PiByICogKGUgLSBzKSArIHMpXHJcbiAgICAgICAgcmV0dXJuIFtpbnRlcnBvbGF0ZShmcm9tU3RhcnRBbmdsZSwgdG9TdGFydEFuZ2xlLCByYXRpbyksIGludGVycG9sYXRlKGZyb21FbmRBbmdsZSwgdG9FbmRBbmdsZSwgcmF0aW8pXVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmaW5kRGlmZkNtZHMobWFya1N0YXR1cykge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgbWFya1N0YXR1cy5mb3JFYWNoKChzdGF0dXNBcnIsIG1hcmtJZCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdG1wRFJlY29yZGVyID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdHVzQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXR1c0FycltpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBEUmVjb3JkZXIucHVzaCghc3RhdHVzQXJyW2ldLmQgPyAnbTAsMCcgOiBzdGF0dXNBcnJbaV0uZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRtcERSZWNvcmRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBDYW5pc1V0aWwuY29tcGFyZUQodG1wRFJlY29yZGVyLCByZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb21wYXJlRChkQXJyLCByZXN1bHQpIHtcclxuICAgICAgICBsZXQgY21kUmVnRXhwID0gbmV3IFJlZ0V4cCgvW21saHZjc3F0YV1bXm1saHZjc3F0YXpdKi9nKTtcclxuICAgICAgICBsZXQgZmlyc3REID0gZEFyclswXTtcclxuICAgICAgICBmaXJzdEQgPSBmaXJzdEQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBmaXJzdEQgPSBmaXJzdEQucmVwbGFjZSgvKD88PVxcZClcXHMoPz1bbWxodmNzcXRhel0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21saHZjc3F0YV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgIGxldCBmaXJzdERDbWRzID0gZmlyc3RELm1hdGNoKGNtZFJlZ0V4cCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBEID0gZEFycltpXTtcclxuICAgICAgICAgICAgdG1wRCA9IHRtcEQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgdG1wRCA9IHRtcEQucmVwbGFjZSgvKD88PVxcZClcXHMoPz1bbWxodmNzcXRhel0pL2csICcnKS5yZXBsYWNlKC8oPzw9W21saHZjc3F0YV0pXFxzKD89KFxcZHxbLStdKSkvZywgJycpLnJlcGxhY2UoL1xccy9nLCAnLCcpO1xyXG4gICAgICAgICAgICBsZXQgdG1wRENtZHMgPSB0bXBELm1hdGNoKGNtZFJlZ0V4cCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZmlyc3REQ21kcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0bXBEQ21kc1tqXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY21kTmFtZSA9IGZpcnN0RENtZHNbal0uc3Vic3RyaW5nKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0LmdldChjbWROYW1lKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldChjbWROYW1lLCBbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvYmogPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBvYmouY21kSWR4ID0gajtcclxuICAgICAgICAgICAgICAgICAgICBvYmouZGlmZkF0dHJJZHhzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpcnN0RENtZFZhbHVlID0gZmlyc3REQ21kc1tqXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpcnN0RENtZFZhbHVlcyA9IGZpcnN0RENtZFZhbHVlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPCBmaXJzdERDbWRWYWx1ZXMubGVuZ3RoOyBtKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRpZmZBdHRySWR4cy5wdXNoKG0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuZ2V0KGNtZE5hbWUpLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNtZE5hbWUgPSB0bXBEQ21kc1tqXS5zdWJzdHJpbmcoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcERDbWRWYWx1ZSA9IHRtcERDbWRzW2pdLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3REQ21kVmFsdWUgPSBmaXJzdERDbWRzW2pdLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodG1wRENtZFZhbHVlICE9PSBmaXJzdERDbWRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdC5nZXQoY21kTmFtZSkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc2V0KGNtZE5hbWUsIFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2JqID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5jbWRJZHggPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZGlmZkF0dHJJZHhzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBEQ21kVmFsdWVzID0gdG1wRENtZFZhbHVlLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdERDbWRWYWx1ZXMgPSBmaXJzdERDbWRWYWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gMDsgbSA8IHRtcERDbWRWYWx1ZXMubGVuZ3RoOyBtKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmZsb29yKHBhcnNlRmxvYXQodG1wRENtZFZhbHVlc1ttXSkgKiAxMDAwKSAhPT0gTWF0aC5mbG9vcihwYXJzZUZsb2F0KGZpcnN0RENtZFZhbHVlc1ttXSkgKiAxMDAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kaWZmQXR0cklkeHMucHVzaChtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgaGF2ZSBhbHJlYWR5IGFkZGVkIHRoaXMgY21kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoYXNGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG0gPSAwOyBtIDwgcmVzdWx0LmdldChjbWROYW1lKS5sZW5ndGg7IG0rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5nZXQoY21kTmFtZSlbbV0uY21kSWR4ID09PSBvYmouY21kSWR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmdldChjbWROYW1lKVttXS5kaWZmQXR0cklkeHMgPSBbLi4ubmV3IFNldChbLi4ucmVzdWx0LmdldChjbWROYW1lKVttXS5kaWZmQXR0cklkeHMsIC4uLm9iai5kaWZmQXR0cklkeHNdKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNGbGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZ2V0KGNtZE5hbWUpLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFRyYW5zZm9ybUF0dHJzKGRvbSkge1xyXG4gICAgICAgIGxldCB0ciA9IGRvbS5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpO1xyXG4gICAgICAgIGlmICh0cikge1xyXG4gICAgICAgICAgICB0ciA9IHRyLnJlcGxhY2UoL3RyYW5zbGF0ZXxzY2FsZXxyb3RhdGV8XFxzL2csIChtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbSA9PT0gJyAnID8gJycgOiAnQCcgKyBtO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdHIgPSB0ci5yZXBsYWNlKC8oXkAqKXwoQCokKS9nLCAnJykuc3BsaXQoJ0AnKTtcclxuICAgICAgICAgICAgbGV0IHNjYWxlU3RyID0gJycsIHRyYW5zU3RyID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0cltpXS5pbmRleE9mKCd0cmFuc2xhdGUnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNTdHIgPSB0cltpXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJbaV0uaW5kZXhPZignc2NhbGUnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVTdHIgPSB0cltpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdHJhbnNQb3NpU3RyID0gWycwJywgJzAnXSwgc2NhbGVOdW1TdHIgPSAnMSc7XHJcbiAgICAgICAgICAgIGlmICh0cmFuc1N0ciAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zUG9zaVN0ciA9IHRyYW5zU3RyLnJlcGxhY2UoL3RyYW5zbGF0ZVxcKHwgfFxcKS9nLCAnJykuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2NhbGVTdHIgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBzY2FsZU51bVN0ciA9IHNjYWxlU3RyLnJlcGxhY2UoL3NjYWxlXFwofCB8XFwpL2csICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4geyB0cmFuc051bXM6IFtwYXJzZUZsb2F0KHRyYW5zUG9zaVN0clswXSksIHBhcnNlRmxvYXQodHJhbnNQb3NpU3RyWzFdKV0sIHNjYWxlTnVtOiBwYXJzZUZsb2F0KHNjYWxlTnVtU3RyKSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB0cmFuc051bXM6IFswLjAsIDAuMF0sIHNjYWxlTnVtOiAxLjAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNoZWNrIGlmIHRoZSBpbnB1dCBwcm9wIGlzIGEgdmFsaWQgcHJvcGVydHkgb2YgdGhlIGlucHV0IHRhZ1xyXG4gICAgICogQHBhcmFtIHsqfSB0YWdOYW1lIFxyXG4gICAgICogQHBhcmFtIHsqfSBwcm9wTmFtZSBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNoZWNrVmFsaWRQcm9wKHRhZ05hbWUsIHByb3BOYW1lKSB7XHJcbiAgICAgICAgc3dpdGNoICh0YWdOYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2NpcmNsZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ2N4JywgJ2N5JywgJ3InLCAnc3Ryb2tlJywgJ3N0cm9rZS13aWR0aCcsICdmaWxsJ10uaW5jbHVkZXMocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlICdlbGxpcHNlJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ29wYWNpdHknLCAnY3gnLCAnY3knLCAncngnLCAncnknLCAnc3Ryb2tlJywgJ3N0cm9rZS13aWR0aCcsICdmaWxsJ10uaW5jbHVkZXMocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlICdpbWFnZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWyd4JywgJ3knLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ2hyZWYnLCAneGxpbms6aHJlZicsICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJ10uaW5jbHVkZXMocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlICdsaW5lJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ29wYWNpdHknLCAneDEnLCAneDInLCAneTEnLCAneTInLCAnc3Ryb2tlJywgJ3N0cm9rZS13aWR0aCcsICdmaWxsJ10uaW5jbHVkZXMocHJvcE5hbWUpO1xyXG4gICAgICAgICAgICBjYXNlICdwYXRoJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ29wYWNpdHknLCAnZCcsICdzdHJva2UnLCAnc3Ryb2tlLXdpZHRoJywgJ2ZpbGwnXS5pbmNsdWRlcyhwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ3BvbHlnb24nOlxyXG4gICAgICAgICAgICBjYXNlICdwb2x5bGluZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ3BvaW50cycsICdzdHJva2UnLCAnc3Ryb2tlLXdpZHRoJywgJ2ZpbGwnXS5pbmNsdWRlcyhwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JlY3QnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnb3BhY2l0eScsICd4JywgJ3knLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3J4JywgJ3J5JywgJ3N0cm9rZScsICdzdHJva2Utd2lkdGgnLCAnZmlsbCddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgY2FzZSAndGV4dCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydvcGFjaXR5JywgJ3gnLCAneScsICdkeCcsICdkeScsICd0ZXh0Q29udGVudCddLmluY2x1ZGVzKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjaGVjayBpZiBhIHN0cmluZyBjb250YWlucyBodG1sIHRhZ1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY2hlY2tIVE1MKHN0cikge1xyXG4gICAgICAgIHZhciByZWcgPSAvPFtePl0rPi9nO1xyXG4gICAgICAgIHJldHVybiByZWcudGVzdChzdHIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5DYW5pc1V0aWwuY29sb3JOYW1lcyA9IG5ldyBNYXAoW1snYWxpY2VibHVlJywgJyNmMGY4ZmYnXSwgWydhbnRpcXVld2hpdGUnLCAnI2ZhZWJkNyddLCBbJ2FxdWEnLCAnIzAwZmZmZiddLCBbJ2FxdWFtYXJpbmUnLCAnIzdmZmZkNCddLCBbJ2F6dXJlJywgJyNmMGZmZmYnXSwgWydiZWlnZScsICcjZjVmNWRjJ10sIFsnYmlzcXVlJywgJyNmZmU0YzQnXSwgWydibGFjaycsICcjMDAwMDAwJ10sIFsnYmxhbmNoZWRhbG1vbmQnLCAnI2ZmZWJjZCddLCBbJ2JsdWUnLCAnIzAwMDBmZiddLCBbJ2JsdWV2aW9sZXQnLCAnIzhhMmJlMiddLCBbJ2Jyb3duJywgJyNhNTJhMmEnXSwgWydidXJseXdvb2QnLCAnI2RlYjg4NyddLCBbJ2NhZGV0Ymx1ZScsICcjNWY5ZWEwJ10sIFsnY2hhcnRyZXVzZScsICcjN2ZmZjAwJ10sIFsnY2hvY29sYXRlJywgJyNkMjY5MWUnXSwgWydjb3JhbCcsICcjZmY3ZjUwJ10sIFsnY29ybmZsb3dlcmJsdWUnLCAnIzY0OTVlZCddLCBbJ2Nvcm5zaWxrJywgJyNmZmY4ZGMnXSwgWydjcmltc29uJywgJyNkYzE0M2MnXSwgWydjeWFuJywgJyMwMGZmZmYnXSwgWydkYXJrYmx1ZScsICcjMDAwMDhiJ10sIFsnZGFya2N5YW4nLCAnIzAwOGI4YiddLCBbJ2Rhcmtnb2xkZW5yb2QnLCAnI2I4ODYwYiddLCBbJ2RhcmtncmF5JywgJyNhOWE5YTknXSwgWydkYXJrZ3JleScsICcjYTlhOWE5J10sIFsnZGFya2dyZWVuJywgJyMwMDY0MDAnXSwgWydkYXJra2hha2knLCAnI2JkYjc2YiddLCBbJ2RhcmttYWdlbnRhJywgJyM4YjAwOGInXSwgWydkYXJrb2xpdmVncmVlbicsICcjNTU2YjJmJ10sIFsnZGFya29yYW5nZScsICcjZmY4YzAwJ10sIFsnZGFya29yY2hpZCcsICcjOTkzMmNjJ10sIFsnZGFya3JlZCcsICcjOGIwMDAwJ10sIFsnZGFya3NhbG1vbicsICcjZTk5NjdhJ10sIFsnZGFya3NlYWdyZWVuJywgJyM4ZmJjOGYnXSwgWydkYXJrc2xhdGVibHVlJywgJyM0ODNkOGInXSwgWydkYXJrc2xhdGVncmF5JywgJyMyZjRmNGYnXSwgWydkYXJrc2xhdGVncmV5JywgJyMyZjRmNGYnXSwgWydkYXJrdHVycXVvaXNlJywgJyMwMGNlZDEnXSwgWydkYXJrdmlvbGV0JywgJyM5NDAwZDMnXSwgWydkZWVwcGluaycsICcjZmYxNDkzJ10sIFsnZGVlcHNreWJsdWUnLCAnIzAwYmZmZiddLCBbJ2RpbWdyYXknLCAnIzY5Njk2OSddLCBbJ2RpbWdyZXknLCAnIzY5Njk2OSddLCBbJ2RvZGdlcmJsdWUnLCAnIzFlOTBmZiddLCBbJ2ZpcmVicmljaycsICcjYjIyMjIyJ10sIFsnZmxvcmFsd2hpdGUnLCAnI2ZmZmFmMCddLCBbJ2ZvcmVzdGdyZWVuJywgJyMyMjhiMjInXSwgWydmdWNoc2lhJywgJyNmZjAwZmYnXSwgWydnYWluc2Jvcm8nLCAnI2RjZGNkYyddLCBbJ2dob3N0d2hpdGUnLCAnI2Y4ZjhmZiddLCBbJ2dvbGQnLCAnI2ZmZDcwMCddLCBbJ2dvbGRlbnJvZCcsICcjZGFhNTIwJ10sIFsnZ3JheScsICcjODA4MDgwJ10sIFsnZ3JleScsICcjODA4MDgwJ10sIFsnZ3JlZW4nLCAnIzAwODAwMCddLCBbJ2dyZWVueWVsbG93JywgJyNhZGZmMmYnXSwgWydob25leWRldycsICcjZjBmZmYwJ10sIFsnaG90cGluaycsICcjZmY2OWI0J10sIFsnaW5kaWFucmVkICcsICcjY2Q1YzVjJ10sIFsnaW5kaWdvICAnLCAnIzRiMDA4MiddLCBbJ2l2b3J5JywgJyNmZmZmZjAnXSwgWydraGFraScsICcjZjBlNjhjJ10sIFsnbGF2ZW5kZXInLCAnI2U2ZTZmYSddLCBbJ2xhdmVuZGVyYmx1c2gnLCAnI2ZmZjBmNSddLCBbJ2xhd25ncmVlbicsICcjN2NmYzAwJ10sIFsnbGVtb25jaGlmZm9uJywgJyNmZmZhY2QnXSwgWydsaWdodGJsdWUnLCAnI2FkZDhlNiddLCBbJ2xpZ2h0Y29yYWwnLCAnI2YwODA4MCddLCBbJ2xpZ2h0Y3lhbicsICcjZTBmZmZmJ10sIFsnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnLCAnI2ZhZmFkMiddLCBbJ2xpZ2h0Z3JheScsICcjZDNkM2QzJ10sIFsnbGlnaHRncmV5JywgJyNkM2QzZDMnXSwgWydsaWdodGdyZWVuJywgJyM5MGVlOTAnXSwgWydsaWdodHBpbmsnLCAnI2ZmYjZjMSddLCBbJ2xpZ2h0c2FsbW9uJywgJyNmZmEwN2EnXSwgWydsaWdodHNlYWdyZWVuJywgJyMyMGIyYWEnXSwgWydsaWdodHNreWJsdWUnLCAnIzg3Y2VmYSddLCBbJ2xpZ2h0c2xhdGVncmF5JywgJyM3Nzg4OTknXSwgWydsaWdodHNsYXRlZ3JleScsICcjNzc4ODk5J10sIFsnbGlnaHRzdGVlbGJsdWUnLCAnI2IwYzRkZSddLCBbJ2xpZ2h0eWVsbG93JywgJyNmZmZmZTAnXSwgWydsaW1lJywgJyMwMGZmMDAnXSwgWydsaW1lZ3JlZW4nLCAnIzMyY2QzMiddLCBbJ2xpbmVuJywgJyNmYWYwZTYnXSwgWydtYWdlbnRhJywgJyNmZjAwZmYnXSwgWydtYXJvb24nLCAnIzgwMDAwMCddLCBbJ21lZGl1bWFxdWFtYXJpbmUnLCAnIzY2Y2RhYSddLCBbJ21lZGl1bWJsdWUnLCAnIzAwMDBjZCddLCBbJ21lZGl1bW9yY2hpZCcsICcjYmE1NWQzJ10sIFsnbWVkaXVtcHVycGxlJywgJyM5MzcwZGInXSwgWydtZWRpdW1zZWFncmVlbicsICcjM2NiMzcxJ10sIFsnbWVkaXVtc2xhdGVibHVlJywgJyM3YjY4ZWUnXSwgWydtZWRpdW1zcHJpbmdncmVlbicsICcjMDBmYTlhJ10sIFsnbWVkaXVtdHVycXVvaXNlJywgJyM0OGQxY2MnXSwgWydtZWRpdW12aW9sZXRyZWQnLCAnI2M3MTU4NSddLCBbJ21pZG5pZ2h0Ymx1ZScsICcjMTkxOTcwJ10sIFsnbWludGNyZWFtJywgJyNmNWZmZmEnXSwgWydtaXN0eXJvc2UnLCAnI2ZmZTRlMSddLCBbJ21vY2Nhc2luJywgJyNmZmU0YjUnXSwgWyduYXZham93aGl0ZScsICcjZmZkZWFkJ10sIFsnbmF2eScsICcjMDAwMDgwJ10sIFsnb2xkbGFjZScsICcjZmRmNWU2J10sIFsnb2xpdmUnLCAnIzgwODAwMCddLCBbJ29saXZlZHJhYicsICcjNmI4ZTIzJ10sIFsnb3JhbmdlJywgJyNmZmE1MDAnXSwgWydvcmFuZ2VyZWQnLCAnI2ZmNDUwMCddLCBbJ29yY2hpZCcsICcjZGE3MGQ2J10sIFsncGFsZWdvbGRlbnJvZCcsICcjZWVlOGFhJ10sIFsncGFsZWdyZWVuJywgJyM5OGZiOTgnXSwgWydwYWxldHVycXVvaXNlJywgJyNhZmVlZWUnXSwgWydwYWxldmlvbGV0cmVkJywgJyNkYjcwOTMnXSwgWydwYXBheWF3aGlwJywgJyNmZmVmZDUnXSwgWydwZWFjaHB1ZmYnLCAnI2ZmZGFiOSddLCBbJ3BlcnUnLCAnI2NkODUzZiddLCBbJ3BpbmsnLCAnI2ZmYzBjYiddLCBbJ3BsdW0nLCAnI2RkYTBkZCddLCBbJ3Bvd2RlcmJsdWUnLCAnI2IwZTBlNiddLCBbJ3B1cnBsZScsICcjODAwMDgwJ10sIFsncmViZWNjYXB1cnBsZScsICcjNjYzMzk5J10sIFsncmVkJywgJyNmZjAwMDAnXSwgWydyb3N5YnJvd24nLCAnI2JjOGY4ZiddLCBbJ3JveWFsYmx1ZScsICcjNDE2OWUxJ10sIFsnc2FkZGxlYnJvd24nLCAnIzhiNDUxMyddLCBbJ3NhbG1vbicsICcjZmE4MDcyJ10sIFsnc2FuZHlicm93bicsICcjZjRhNDYwJ10sIFsnc2VhZ3JlZW4nLCAnIzJlOGI1NyddLCBbJ3NlYXNoZWxsJywgJyNmZmY1ZWUnXSwgWydzaWVubmEnLCAnI2EwNTIyZCddLCBbJ3NpbHZlcicsICcjYzBjMGMwJ10sIFsnc2t5Ymx1ZScsICcjODdjZWViJ10sIFsnc2xhdGVibHVlJywgJyM2YTVhY2QnXSwgWydzbGF0ZWdyYXknLCAnIzcwODA5MCddLCBbJ3NsYXRlZ3JleScsICcjNzA4MDkwJ10sIFsnc25vdycsICcjZmZmYWZhJ10sIFsnc3ByaW5nZ3JlZW4nLCAnIzAwZmY3ZiddLCBbJ3N0ZWVsYmx1ZScsICcjNDY4MmI0J10sIFsndGFuJywgJyNkMmI0OGMnXSwgWyd0ZWFsJywgJyMwMDgwODAnXSwgWyd0aGlzdGxlJywgJyNkOGJmZDgnXSwgWyd0b21hdG8nLCAnI2ZmNjM0NyddLCBbJ3R1cnF1b2lzZScsICcjNDBlMGQwJ10sIFsndmlvbGV0JywgJyNlZTgyZWUnXSwgWyd3aGVhdCcsICcjZjVkZWIzJ10sIFsnd2hpdGUnLCAnI2ZmZmZmZiddLCBbJ3doaXRlc21va2UnLCAnI2Y1ZjVmNSddLCBbJ3llbGxvdycsICcjZmZmZjAwJ10sIFsneWVsbG93Z3JlZW4nLCAnIzlhY2QzMiddXSlcclxuXHJcbmV4cG9ydCBjbGFzcyBWaWV3cG9ydCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNoYXJ0V2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMuY2hhcnRIZWlnaHQgPSAwO1xyXG4gICAgfVxyXG4gICAgc2V0Vmlld3BvcnQodywgaCkge1xyXG4gICAgICAgIHRoaXMuY2hhcnRXaWR0aCA9IHc7XHJcbiAgICAgICAgdGhpcy5jaGFydEhlaWdodCA9IGg7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBc3NldFRlbXBsYXRlIHtcclxuICAgIGNvbnN0cnVjb3IodGFnTmFtZSwgdmlzdWFsUHJvcHMsIGFuaW1hdGVQcm9wcywgYm91bmRpbmdCb3gsIGpzTW92aW5MYXllcklkeCkge1xyXG4gICAgICAgIC8vdXNlIHRvIGNvbXBhcmVcclxuICAgICAgICB0aGlzLnRhZ05hbWUgPSB0YWdOYW1lO1xyXG4gICAgICAgIHRoaXMudmlzdWFsUHJvcHMgPSB2aXN1YWxQcm9wcztcclxuICAgICAgICB0aGlzLmFuaW1hdGVQcm9wcyA9IGFuaW1hdGVQcm9wcztcclxuICAgICAgICAvL3VzZSB0byBjYWxjdWxhdGUgb2Zmc2V0cyBhbmQgcmVmZXJlbmNlXHJcbiAgICAgICAgdGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94O1xyXG4gICAgICAgIHRoaXMuanNNb3ZpbkxheWVySWR4ID0ganNNb3ZpbkxheWVySWR4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29tcGFyZSB0aGUgbmV3IGFzc2V0IHRlbXBsYXRlIHdpdGggdGhlIGV4aXN0aW5nIHRlbXBhbHRlIFxyXG4gICAgICogQHBhcmFtIHsqfSBjYW5kaWRhdGVBdCA6IGNhbmRpZGF0ZSBhc3NldCB0ZW1wbGF0ZVxyXG4gICAgICogQHBhcmFtIHsqfSBhdCA6IGFzc2V0IHRlbXBsYXRlXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjb21wYXJlVGVtcGxhdGUoY2FuZGlkYXRlQXQsIGF0KSB7XHJcbiAgICAgICAgaWYgKGNhbmRpZGF0ZUF0LnRhZ05hbWUgIT09IGF0LnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuY29tcGFyZVZpc3VhbFByb3BzKGNhbmRpZGF0ZUF0LnZpc3VhbFByb3BzLCBhdC52aXN1YWxQcm9wcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29tcGFyZVZpc3VhbFByb3BzKHAxLCBwMikge1xyXG4gICAgICAgIGNvbnN0IHNhZmVQcm9wcyA9IFsneCcsICd5JywgJ3dpZHRoJywgJ2hlaWdodCcsICdyJywgJ29wYWNpdHknLCAnZCddXHJcbiAgICAgICAgY29uc3QgYWxsS2V5cyA9IFsuLi5PYmplY3Qua2V5cyhwMSksIC4uLk9iamVjdC5rZXlzKHAyKV07XHJcbiAgICAgICAgY29uc3QgZGlmZmVyZW50S2V5cyA9IGFsbEtleXMuZmlsdGVyKChrKSA9PiB7XHJcbiAgICAgICAgICAgIHR5cGVvZiBwMVtrXSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHAyW2tdID09PSAndW5kZWZpbmVkJyB8fCBwMVtrXSAhPT0gcDJba107XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgaWYgKGRpZmZlcmVudEtleXMuaW5jbHVkZXMoJ2QnKSkge1xyXG4gICAgICAgICAgICBjb25zdCByZW1vdmVOdW1SZWdFeHAgPSBuZXcgUmVnRXhwKC9bMC05XFwuLFxcc10vZyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHMxID0gJ00wLDBMMCwwJztcclxuICAgICAgICAgICAgY29uc3QgczIgPSAnTSAwLDAgTCAwLDAnO1xyXG4gICAgICAgICAgICBjb25zdCBzMyA9ICdNIDAuNSwwIEwgMCwwLjknO1xyXG4gICAgICAgICAgICBjb25zdCBzNCA9ICdNMC41LDBMMCwwLjknO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzMS5yZXBsYWNlKHJlbW92ZU51bVJlZ0V4cCwgJycpLCBzMi5yZXBsYWNlKHJlbW92ZU51bVJlZ0V4cCwgJycpLCBzMy5yZXBsYWNlKHJlbW92ZU51bVJlZ0V4cCwgJycpLCBzNC5yZXBsYWNlKHJlbW92ZU51bVJlZ0V4cCwgJycpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHAxWydkJ10ucmVwbGFjZShyZW1vdmVOdW1SZWdFeHAsICcnKSA9PT0gcDJbJ2QnXS5yZXBsYWNlKHJlbW92ZU51bVJlZ0V4cCwgJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVudEtleXMuZXZlcnkoKGspID0+IHNhZmVQcm9wcy5pbmRleE9mKGspID49IDApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjaGVja0VsZW1lbnRzU2VsZWN0ZWQoc3RyKSB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHN0cik7XHJcbiAgICB9XHJcbn0iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5leHBvcnRzLlBhdGhNYWtlciA9IHZvaWQgMDtcclxuXHJcbnZhciBfc3ZnUGF0aFBhcnNlciA9IHJlcXVpcmUoXCJzdmctcGF0aC1wYXJzZXJcIik7XHJcblxyXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cclxuXHJcbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XHJcblxyXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxyXG5cclxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XHJcblxyXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxyXG5cclxudmFyIFBhdGhNYWtlciA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIC8vIGZvciBkaXNjb250aW51b3VzIHBhdGhzXHJcbiAgZnVuY3Rpb24gUGF0aE1ha2VyKHBhdGhEYXRhKSB7XHJcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGF0aE1ha2VyKTtcclxuXHJcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYXRoXCIsIHtcclxuICAgICAgYzogZmFsc2UsXHJcbiAgICAgIGk6IFtdLFxyXG4gICAgICBvOiBbXSxcclxuICAgICAgdjogW11cclxuICAgIH0pO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImN1cnJlbnRYXCIsIDApO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImN1cnJlbnRZXCIsIDApO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9mZnNldFhcIiwgSW5maW5pdHkpO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9mZnNldFlcIiwgSW5maW5pdHkpO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhdGhSZWFkeVwiLCBmYWxzZSk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicGF0aFN0YXJ0XCIsIFswLCAwXSk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicGF0aENoYWluXCIsIFtdKTtcclxuXHJcbiAgICBpZiAocGF0aERhdGEpIHtcclxuICAgICAgdGhpcy5wYXJzZShwYXRoRGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfY3JlYXRlQ2xhc3MoUGF0aE1ha2VyLCBbe1xyXG4gICAga2V5OiBcInVwZGF0ZVhZXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlWFkoeCwgeSkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRYID0geDtcclxuICAgICAgdGhpcy5jdXJyZW50WSA9IHk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WCA9IE1hdGgubWluKHRoaXMub2Zmc2V0WCwgeCk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WSA9IE1hdGgubWluKHRoaXMub2Zmc2V0WSwgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNhbGN1bGF0ZUJlemllck1pbk1heFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZUJlemllck1pbk1heChwMCwgcDEsIHAyLCBwMykge1xyXG4gICAgICB2YXIgYSA9IDMgKiAocDMgLSAzICogcDIgKyAzICogcDEgLSBwMCk7XHJcbiAgICAgIHZhciBiID0gNiAqIChwMiAtIDIgKiBwMSArIHAwKTtcclxuICAgICAgdmFyIGMgPSAzICogKHAxIC0gcDApO1xyXG4gICAgICB2YXIgbWluID0gSW5maW5pdHksXHJcbiAgICAgICAgICBtYXggPSAtSW5maW5pdHk7XHJcblxyXG4gICAgICBpZiAoYiAqIGIgLSA0ICogYSAqIGMgPj0gMCkge1xyXG4gICAgICAgIHZhciBzcXJ0ID0gTWF0aC5zcXJ0KGIgKiBiIC0gNCAqIGEgKiBjKTtcclxuICAgICAgICB2YXIgcm9vdHMgPSBbMSwgLTFdLm1hcChmdW5jdGlvbiAobXVsdGkpIHtcclxuICAgICAgICAgIHJldHVybiAobXVsdGkgKiBzcXJ0IC0gYikgLyAyIC8gYTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByb290cy5mb3JFYWNoKGZ1bmN0aW9uIChyb290KSB7XHJcbiAgICAgICAgICBpZiAocm9vdCA+IDAgJiYgcm9vdCA8IDEpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gTWF0aC5wb3coMSAtIHJvb3QsIDMpICogcDAgKyAzICogTWF0aC5wb3coMSAtIHJvb3QsIDIpICogcm9vdCAqIHAxICsgMyAqICgxIC0gcm9vdCkgKiByb290ICogcm9vdCAqIHAyICsgTWF0aC5wb3cocm9vdCwgMykgKiBwMztcclxuICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgdmFsdWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHAwLCBwMyk7XHJcbiAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgcDAsIHAzKTtcclxuICAgICAgcmV0dXJuIFttaW4sIG1heF07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNhbGN1bGF0ZUhpZ2hseU9yZGVyXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY3VsYXRlSGlnaGx5T3JkZXIoYXJyLCByYXRpbykge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XHJcbiAgICAgICAgaWYgKGkgPj0gYS5sZW5ndGggLSAxKSByZXR1cm47XHJcbiAgICAgICAgcmVzdWx0LnB1c2godiAqICgxIC0gcmF0aW8pICsgYVtpICsgMV0gKiByYXRpbyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjYWxjdWxhdGVCZXppZXJTcGxpdFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGN1bGF0ZUJlemllclNwbGl0KHJhdGlvKSB7XHJcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBvcmRlcjAgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgICAgIG9yZGVyMFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBvcmRlcjEgPSB0aGlzLmNhbGN1bGF0ZUhpZ2hseU9yZGVyKG9yZGVyMCwgcmF0aW8pO1xyXG4gICAgICB2YXIgb3JkZXIyID0gdGhpcy5jYWxjdWxhdGVIaWdobHlPcmRlcihvcmRlcjEsIHJhdGlvKTtcclxuICAgICAgdmFyIG9yZGVyMyA9IHRoaXMuY2FsY3VsYXRlSGlnaGx5T3JkZXIob3JkZXIyLCByYXRpbyk7XHJcbiAgICAgIHJldHVybiBbb3JkZXIxWzBdLCBvcmRlcjJbMF0sIG9yZGVyM1swXSwgb3JkZXIyWzFdLCBvcmRlcjFbMl0sIG9yZGVyMFszXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcIm1vdmVUb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVUbyh4LCB5KSB7XHJcbiAgICAgIGlmICghdGhpcy5wYXRoUmVhZHkpIHtcclxuICAgICAgICB0aGlzLnBhdGguYyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGF0aC5pID0gW1swLCAwXV07XHJcbiAgICAgICAgdGhpcy5wYXRoLm8gPSBbXTtcclxuICAgICAgICB0aGlzLnBhdGgudiA9IFtbeCwgeV1dO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFggPSB4O1xyXG4gICAgICAgIHRoaXMuY3VycmVudFkgPSB5O1xyXG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IHg7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRZID0geTtcclxuICAgICAgICB0aGlzLnBhdGhSZWFkeSA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5saW5lVG8uYXBwbHkodGhpcywgX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMucGF0aFN0YXJ0KSk7XHJcbiAgICAgICAgdGhpcy5saW5lVG8oeCwgeSk7XHJcbiAgICAgICAgdGhpcy5wYXRoQ2hhaW4ucHVzaCh0aGlzLnBhdGhTdGFydCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMucGF0aFN0YXJ0ID0gW3gsIHldO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJtb3ZlVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdmVUb1JlbGF0aXZlKHgsIHkpIHtcclxuICAgICAgdGhpcy5tb3ZlVG8odGhpcy5jdXJyZW50WCArIHgsIHRoaXMuY3VycmVudFkgKyB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwibGluZVRvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGluZVRvKHgsIHkpIHtcclxuICAgICAgdGhpcy5wYXRoLmkucHVzaChbMCwgMF0pO1xyXG4gICAgICB0aGlzLnBhdGguby5wdXNoKFswLCAwXSk7XHJcbiAgICAgIHRoaXMucGF0aC52LnB1c2goW3gsIHldKTtcclxuICAgICAgdGhpcy51cGRhdGVYWSh4LCB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwibGluZVRvUmVsYXRpdmVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBsaW5lVG9SZWxhdGl2ZSh4LCB5KSB7XHJcbiAgICAgIHRoaXMubGluZVRvKHRoaXMuY3VycmVudFggKyB4LCB0aGlzLmN1cnJlbnRZICsgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImhvcml6b250YWxUb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhvcml6b250YWxUbyh4KSB7XHJcbiAgICAgIHRoaXMubGluZVRvKHgsIHRoaXMuY3VycmVudFkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJob3Jpem9udGFsVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhvcml6b250YWxUb1JlbGF0aXZlKHgpIHtcclxuICAgICAgdGhpcy5ob3Jpem9udGFsVG8odGhpcy5jdXJyZW50WCArIHgpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ2ZXJ0aWNhbFRvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmVydGljYWxUbyh5KSB7XHJcbiAgICAgIHRoaXMubGluZVRvKHRoaXMuY3VycmVudFgsIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ2ZXJ0aWNhbFRvUmVsYXRpdmVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB2ZXJ0aWNhbFRvUmVsYXRpdmUoeSkge1xyXG4gICAgICB0aGlzLnZlcnRpY2FsVG8odGhpcy5jdXJyZW50WSArIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjdWJpY0JlemllckN1cnZlVG9cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjdWJpY0JlemllckN1cnZlVG8oYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5KSB7XHJcbiAgICAgIHRoaXMucGF0aC5pLnB1c2goW2MyeCAtIHgsIGMyeSAtIHldKTtcclxuICAgICAgdGhpcy5wYXRoLm8ucHVzaChbYzF4IC0gdGhpcy5jdXJyZW50WCwgYzF5IC0gdGhpcy5jdXJyZW50WV0pO1xyXG4gICAgICB0aGlzLnBhdGgudi5wdXNoKFt4LCB5XSk7XHJcbiAgICAgIHRoaXMub2Zmc2V0WCA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFt0aGlzLm9mZnNldFhdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WCwgYzF4LCBjMngsIHgpKSkpO1xyXG4gICAgICB0aGlzLm9mZnNldFkgPSBNYXRoLm1pbi5hcHBseShNYXRoLCBbdGhpcy5vZmZzZXRZXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuY2FsY3VsYXRlQmV6aWVyTWluTWF4KHRoaXMuY3VycmVudFksIGMxeSwgYzJ5LCB5KSkpKTtcclxuICAgICAgdGhpcy51cGRhdGVYWSh4LCB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY3ViaWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZShjMXgsIGMxeSwgYzJ4LCBjMnksIHgsIHkpIHtcclxuICAgICAgdGhpcy5jdWJpY0JlemllckN1cnZlVG8odGhpcy5jdXJyZW50WCArIGMxeCwgdGhpcy5jdXJyZW50WSArIGMxeSwgdGhpcy5jdXJyZW50WCArIGMyeCwgdGhpcy5jdXJyZW50WSArIGMyeSwgdGhpcy5jdXJyZW50WCArIHgsIHRoaXMuY3VycmVudFkgKyB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwicXVhZHJhdGljQmV6aWVyQ3VydmVUb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHF1YWRyYXRpY0JlemllckN1cnZlVG8oY3gsIGN5LCB4LCB5KSB7XHJcbiAgICAgIHRoaXMucGF0aC5pLnB1c2goW2N4IC0geCwgY3kgLSB5XSk7XHJcbiAgICAgIHRoaXMucGF0aC5vLnB1c2goW2N4IC0gdGhpcy5jdXJyZW50WCwgY3kgLSB0aGlzLmN1cnJlbnRZXSk7XHJcbiAgICAgIHRoaXMucGF0aC52LnB1c2goW3gsIHldKTtcclxuICAgICAgdGhpcy5vZmZzZXRYID0gTWF0aC5taW4uYXBwbHkoTWF0aCwgW3RoaXMub2Zmc2V0WF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRYLCBjeCwgY3gsIHgpKSkpO1xyXG4gICAgICB0aGlzLm9mZnNldFkgPSBNYXRoLm1pbi5hcHBseShNYXRoLCBbdGhpcy5vZmZzZXRZXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuY2FsY3VsYXRlQmV6aWVyTWluTWF4KHRoaXMuY3VycmVudFksIGN5LCBjeSwgeSkpKSk7XHJcbiAgICAgIHRoaXMudXBkYXRlWFkoeCwgeSk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcInF1YWRyYXRpY0JlemllckN1cnZlVG9SZWxhdGl2ZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHF1YWRyYXRpY0JlemllckN1cnZlVG9SZWxhdGl2ZShjeCwgY3ksIHgsIHkpIHtcclxuICAgICAgdGhpcy5xdWFkcmF0aWNCZXppZXJDdXJ2ZVRvKHRoaXMuY3VycmVudFggKyBjeCwgdGhpcy5jdXJyZW50WSArIGN5LCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJhcmNUb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFyY1RvKHJ4LCByeSwgeEF4aXNSb3RhdGlvbiwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpIHtcclxuICAgICAgdmFyIGNTZXJpZXMgPSBQYXRoTWFrZXIuYTJjKHRoaXMuY3VycmVudFgsIHRoaXMuY3VycmVudFksIHJ4LCByeSwgeEF4aXNSb3RhdGlvbiwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpO1xyXG5cclxuICAgICAgd2hpbGUgKGNTZXJpZXMubGVuZ3RoID49IDYpIHtcclxuICAgICAgICB2YXIgaW92TGlzdCA9IGNTZXJpZXMuc3BsaWNlKDAsIDYpO1xyXG4gICAgICAgIHRoaXMucGF0aC5pLnB1c2goW2lvdkxpc3RbMl0gLSBpb3ZMaXN0WzRdLCBpb3ZMaXN0WzNdIC0gaW92TGlzdFs1XV0pO1xyXG4gICAgICAgIHRoaXMucGF0aC5vLnB1c2goW2lvdkxpc3RbMF0gLSB0aGlzLmN1cnJlbnRYLCBpb3ZMaXN0WzFdIC0gdGhpcy5jdXJyZW50WV0pO1xyXG4gICAgICAgIHRoaXMucGF0aC52LnB1c2goW2lvdkxpc3RbNF0sIGlvdkxpc3RbNV1dKTtcclxuICAgICAgICB0aGlzLm9mZnNldFggPSBNYXRoLm1pbi5hcHBseShNYXRoLCBbdGhpcy5vZmZzZXRYXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMuY2FsY3VsYXRlQmV6aWVyTWluTWF4KHRoaXMuY3VycmVudFgsIGlvdkxpc3RbMF0sIGlvdkxpc3RbMl0sIGlvdkxpc3RbNF0pKSkpO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IE1hdGgubWluLmFwcGx5KE1hdGgsIFt0aGlzLm9mZnNldFldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WSwgaW92TGlzdFsxXSwgaW92TGlzdFszXSwgaW92TGlzdFs1XSkpKSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVYWShpb3ZMaXN0WzRdLCBpb3ZMaXN0WzVdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJhcmNUb1JlbGF0aXZlXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXJjVG9SZWxhdGl2ZShyeCwgcnksIHhBeGlzUm90YXRpb24sIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCB4LCB5KSB7XHJcbiAgICAgIHRoaXMuYXJjVG8ocngsIHJ5LCB4QXhpc1JvdGF0aW9uLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZywgdGhpcy5jdXJyZW50WCArIHgsIHRoaXMuY3VycmVudFkgKyB5KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY2xvc2VQYXRoXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VQYXRoKCkge1xyXG4gICAgICB0aGlzLnBhdGguYyA9IHRydWU7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcInVuaWZvcm1cIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmlmb3JtKCkge1xyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgaWYgKHRoaXMucGF0aENoYWluLmxlbmd0aCAmJiAhKHRoaXMuY3VycmVudFggPT0gdGhpcy5wYXRoU3RhcnRbMF0gJiYgdGhpcy5jdXJyZW50WSA9PSB0aGlzLnBhdGhTdGFydFsxXSkpIHtcclxuICAgICAgICB0aGlzLmxpbmVUby5hcHBseSh0aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5wYXRoU3RhcnQpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgd2hpbGUgKHRoaXMucGF0aENoYWluLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBwYXRoUmVmID0gdGhpcy5wYXRoQ2hhaW4ucG9wKCk7XHJcbiAgICAgICAgdGhpcy5saW5lVG8uYXBwbHkodGhpcywgX3RvQ29uc3VtYWJsZUFycmF5KHBhdGhSZWYpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgd2hpbGUgKHRoaXMucGF0aC5vLmxlbmd0aCA8IHRoaXMucGF0aC5pLmxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMucGF0aC5vLnB1c2goWzAsIDBdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5wYXRoLnYuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YWx1ZVswXSAtPSBfdGhpcy5vZmZzZXRYO1xyXG4gICAgICAgIHZhbHVlWzFdIC09IF90aGlzLm9mZnNldFk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLm9mZnNldFggPSAwO1xyXG4gICAgICB0aGlzLm9mZnNldFkgPSAwO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJwYXJzZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlKHBhdGhEYXRhKSB7XHJcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuICAgICAgdmFyIHBhdGhEYXRhU2VyaWVzID0gKDAsIF9zdmdQYXRoUGFyc2VyLnBhcnNlU1ZHKShwYXRoRGF0YSk7XHJcbiAgICAgIHZhciBwYXRoRGF0YVdpdGhUeXBlO1xyXG4gICAgICBwYXRoRGF0YVNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChwYXRoRGF0YUl0ZW0pIHtcclxuICAgICAgICBzd2l0Y2ggKHBhdGhEYXRhSXRlbS5jb2RlKSB7XHJcbiAgICAgICAgICBjYXNlICdNJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5tb3ZlVG8ocGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpO1xyXG5cclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnbSc6XHJcbiAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW07XHJcblxyXG4gICAgICAgICAgICBfdGhpczIubW92ZVRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0wnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmxpbmVUbyhwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdsJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5saW5lVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdIJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5ob3Jpem9udGFsVG8ocGF0aERhdGFXaXRoVHlwZS54KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmhvcml6b250YWxUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueCk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdWJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi52ZXJ0aWNhbFRvKHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICd2JzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi52ZXJ0aWNhbFRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0MnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLmN1YmljQmV6aWVyQ3VydmVUbyhwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngyLCBwYXRoRGF0YVdpdGhUeXBlLnkyLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5jdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngyLCBwYXRoRGF0YVdpdGhUeXBlLnkyLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdRJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5xdWFkcmF0aWNCZXppZXJDdXJ2ZVRvKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ3EnOlxyXG4gICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMyLnF1YWRyYXRpY0JlemllckN1cnZlVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdBJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5hcmNUbyhwYXRoRGF0YVdpdGhUeXBlLnJ4LCBwYXRoRGF0YVdpdGhUeXBlLnJ5LCBwYXRoRGF0YVdpdGhUeXBlLnhBeGlzUm90YXRpb24sIH5+cGF0aERhdGFXaXRoVHlwZS5sYXJnZUFyYywgfn5wYXRoRGF0YVdpdGhUeXBlLnN3ZWVwLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSk7XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdhJzpcclxuICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzMi5hcmNUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUucngsIHBhdGhEYXRhV2l0aFR5cGUucnksIHBhdGhEYXRhV2l0aFR5cGUueEF4aXNSb3RhdGlvbiwgfn5wYXRoRGF0YVdpdGhUeXBlLmxhcmdlQXJjLCB+fnBhdGhEYXRhV2l0aFR5cGUuc3dlZXAsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgY2FzZSAneic6XHJcbiAgICAgICAgICAgIF90aGlzMi5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocGF0aERhdGFJdGVtKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbXBsZW1lbnRhdGlvbiBmb3VuZCBmb3IgdGhpcyBwYXRoIGNvbW1hbmQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwidXBzYW1wbGVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cHNhbXBsZShyYXRpbykge1xyXG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcclxuXHJcbiAgICAgIC8vIHVzZSBEZSBDYXN0ZWxqYXUncyBhbGdvcml0aG0gdG8gZG8gdGhlIHVwc2FtcGxpbmdcclxuICAgICAgLy8gUmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EZV9DYXN0ZWxqYXUlMjdzX2FsZ29yaXRobVxyXG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocmF0aW8pKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdXBzYW1wbGluZyByYXRpbyBzaG91bGQgYmUgYW4gaW50ZWdlci4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy51bmlmb3JtKCk7XHJcbiAgICAgIGlmIChyYXRpbyA8PSAxKSByZXR1cm47XHJcbiAgICAgIHZhciBjb3B5UGF0aCA9IHtcclxuICAgICAgICBjOiB0aGlzLnBhdGguYyxcclxuICAgICAgICBpOiBbXSxcclxuICAgICAgICBvOiBbXSxcclxuICAgICAgICB2OiBbXVxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLnBhdGgudi5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpLCBhKSB7XHJcbiAgICAgICAgaWYgKGkgPD0gMCkge1xyXG4gICAgICAgICAgY29weVBhdGgudi5wdXNoKHYpO1xyXG4gICAgICAgICAgY29weVBhdGguaS5wdXNoKF90aGlzMy5wYXRoLmlbaV0pO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9BcnJheSA9IF90aGlzMy5wYXRoLm87XHJcbiAgICAgICAgdmFyIGlBcnJheSA9IF90aGlzMy5wYXRoLmk7XHJcbiAgICAgICAgdmFyIHhBcnJheSA9IFthW2kgLSAxXVswXSwgb0FycmF5W2kgLSAxXVswXSArIGFbaSAtIDFdWzBdLCBpQXJyYXlbaV1bMF0gKyB2WzBdLCB2WzBdXTtcclxuICAgICAgICB2YXIgeUFycmF5ID0gW2FbaSAtIDFdWzFdLCBvQXJyYXlbaSAtIDFdWzFdICsgYVtpIC0gMV1bMV0sIGlBcnJheVtpXVsxXSArIHZbMV0sIHZbMV1dO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgcmF0aW87IGluZGV4KyspIHtcclxuICAgICAgICAgIHZhciBzdGVwUmF0aW8gPSAxIC8gKHJhdGlvIC0gaW5kZXggKyAxKTtcclxuXHJcbiAgICAgICAgICB2YXIgeFNwbGl0QXJyYXkgPSBfdGhpczMuY2FsY3VsYXRlQmV6aWVyU3BsaXQuYXBwbHkoX3RoaXMzLCBbc3RlcFJhdGlvXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHhBcnJheSkpKTtcclxuXHJcbiAgICAgICAgICB2YXIgeVNwbGl0QXJyYXkgPSBfdGhpczMuY2FsY3VsYXRlQmV6aWVyU3BsaXQuYXBwbHkoX3RoaXMzLCBbc3RlcFJhdGlvXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHlBcnJheSkpKTtcclxuXHJcbiAgICAgICAgICB2YXIgX3AweCA9IHhBcnJheVswXSxcclxuICAgICAgICAgICAgICBfcDF4ID0geFNwbGl0QXJyYXkuc2hpZnQoKSAtIF9wMHgsXHJcbiAgICAgICAgICAgICAgX3AzeCA9IHhTcGxpdEFycmF5WzFdLFxyXG4gICAgICAgICAgICAgIF9wMnggPSB4U3BsaXRBcnJheS5zaGlmdCgpIC0gX3AzeCxcclxuICAgICAgICAgICAgICBfcDB5ID0geUFycmF5WzBdLFxyXG4gICAgICAgICAgICAgIF9wMXkgPSB5U3BsaXRBcnJheS5zaGlmdCgpIC0gX3AweSxcclxuICAgICAgICAgICAgICBfcDN5ID0geVNwbGl0QXJyYXlbMV0sXHJcbiAgICAgICAgICAgICAgX3AyeSA9IHlTcGxpdEFycmF5LnNoaWZ0KCkgLSBfcDN5O1xyXG5cclxuICAgICAgICAgIGNvcHlQYXRoLm8ucHVzaChbX3AxeCwgX3AxeV0pO1xyXG4gICAgICAgICAgY29weVBhdGguaS5wdXNoKFtfcDJ4LCBfcDJ5XSk7XHJcbiAgICAgICAgICBjb3B5UGF0aC52LnB1c2goW19wM3gsIF9wM3ldKTtcclxuICAgICAgICAgIHhBcnJheSA9IHhTcGxpdEFycmF5O1xyXG4gICAgICAgICAgeUFycmF5ID0geVNwbGl0QXJyYXk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcDB4ID0geEFycmF5LnNoaWZ0KCksXHJcbiAgICAgICAgICAgIHAxeCA9IHhBcnJheS5zaGlmdCgpIC0gcDB4LFxyXG4gICAgICAgICAgICBwM3ggPSB4QXJyYXlbMV0sXHJcbiAgICAgICAgICAgIHAyeCA9IHhBcnJheS5zaGlmdCgpIC0gcDN4LFxyXG4gICAgICAgICAgICBwMHkgPSB5QXJyYXkuc2hpZnQoKSxcclxuICAgICAgICAgICAgcDF5ID0geUFycmF5LnNoaWZ0KCkgLSBwMHksXHJcbiAgICAgICAgICAgIHAzeSA9IHlBcnJheVsxXSxcclxuICAgICAgICAgICAgcDJ5ID0geUFycmF5LnNoaWZ0KCkgLSBwM3k7XHJcbiAgICAgICAgY29weVBhdGguby5wdXNoKFtwMXgsIHAxeV0pO1xyXG4gICAgICAgIGNvcHlQYXRoLmkucHVzaChbcDJ4LCBwMnldKTtcclxuICAgICAgICBjb3B5UGF0aC52LnB1c2goW3AzeCwgcDN5XSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnBhdGggPSBjb3B5UGF0aDtcclxuICAgICAgdGhpcy51bmlmb3JtKCk7XHJcbiAgICB9XHJcbiAgfV0sIFt7XHJcbiAgICBrZXk6IFwiYTJjXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYTJjKHgxLCB5MSwgcngsIHJ5LCBhbmdsZSwgbGFyZ2VfYXJjX2ZsYWcsIHN3ZWVwX2ZsYWcsIHgyLCB5MiwgcmVjdXJzaXZlKSB7XHJcbiAgICAgIC8vIGZvciBtb3JlIGluZm9ybWF0aW9uIG9mIHdoZXJlIHRoaXMgTWF0aCBjYW1lIGZyb20gdmlzaXQ6XHJcbiAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ltcGxub3RlLmh0bWwjQXJjSW1wbGVtZW50YXRpb25Ob3Rlc1xyXG4gICAgICB2YXIgXzEyMCA9IE1hdGguUEkgKiAxMjAgLyAxODAsXHJcbiAgICAgICAgICByYWQgPSBNYXRoLlBJIC8gMTgwICogKCthbmdsZSB8fCAwKSxcclxuICAgICAgICAgIHJlcyA9IFtdLFxyXG4gICAgICAgICAgeHksXHJcbiAgICAgICAgICByb3RhdGUgPSBmdW5jdGlvbiByb3RhdGUoeCwgeSwgcmFkKSB7XHJcbiAgICAgICAgdmFyIFggPSB4ICogTWF0aC5jb3MocmFkKSAtIHkgKiBNYXRoLnNpbihyYWQpLFxyXG4gICAgICAgICAgICBZID0geCAqIE1hdGguc2luKHJhZCkgKyB5ICogTWF0aC5jb3MocmFkKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgeDogWCxcclxuICAgICAgICAgIHk6IFlcclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKCFyeCB8fCAhcnkpIHtcclxuICAgICAgICByZXR1cm4gW3gxLCB5MSwgeDIsIHkyLCB4MiwgeTJdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXJlY3Vyc2l2ZSkge1xyXG4gICAgICAgIHh5ID0gcm90YXRlKHgxLCB5MSwgLXJhZCk7XHJcbiAgICAgICAgeDEgPSB4eS54O1xyXG4gICAgICAgIHkxID0geHkueTtcclxuICAgICAgICB4eSA9IHJvdGF0ZSh4MiwgeTIsIC1yYWQpO1xyXG4gICAgICAgIHgyID0geHkueDtcclxuICAgICAgICB5MiA9IHh5Lnk7XHJcbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKE1hdGguUEkgLyAxODAgKiBhbmdsZSksXHJcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKE1hdGguUEkgLyAxODAgKiBhbmdsZSksXHJcbiAgICAgICAgICAgIHggPSAoeDEgLSB4MikgLyAyLFxyXG4gICAgICAgICAgICB5ID0gKHkxIC0geTIpIC8gMjtcclxuICAgICAgICB2YXIgaCA9IHggKiB4IC8gKHJ4ICogcngpICsgeSAqIHkgLyAocnkgKiByeSk7XHJcblxyXG4gICAgICAgIGlmIChoID4gMSkge1xyXG4gICAgICAgICAgaCA9IE1hdGguc3FydChoKTtcclxuICAgICAgICAgIHJ4ID0gaCAqIHJ4O1xyXG4gICAgICAgICAgcnkgPSBoICogcnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcngyID0gcnggKiByeCxcclxuICAgICAgICAgICAgcnkyID0gcnkgKiByeSxcclxuICAgICAgICAgICAgayA9IChsYXJnZV9hcmNfZmxhZyA9PSBzd2VlcF9mbGFnID8gLTEgOiAxKSAqIE1hdGguc3FydChNYXRoLmFicygocngyICogcnkyIC0gcngyICogeSAqIHkgLSByeTIgKiB4ICogeCkgLyAocngyICogeSAqIHkgKyByeTIgKiB4ICogeCkpKSxcclxuICAgICAgICAgICAgY3ggPSBrICogcnggKiB5IC8gcnkgKyAoeDEgKyB4MikgLyAyLFxyXG4gICAgICAgICAgICBjeSA9IGsgKiAtcnkgKiB4IC8gcnggKyAoeTEgKyB5MikgLyAyLFxyXG4gICAgICAgICAgICBmMSA9IE1hdGguYXNpbigoeTEgLSBjeSkgLyByeSksXHJcbiAgICAgICAgICAgIGYyID0gTWF0aC5hc2luKCh5MiAtIGN5KSAvIHJ5KTtcclxuICAgICAgICBmMSA9IHgxIDwgY3ggPyBNYXRoLlBJIC0gZjEgOiBmMTtcclxuICAgICAgICBmMiA9IHgyIDwgY3ggPyBNYXRoLlBJIC0gZjIgOiBmMjtcclxuICAgICAgICBmMSA8IDAgJiYgKGYxID0gTWF0aC5QSSAqIDIgKyBmMSk7XHJcbiAgICAgICAgZjIgPCAwICYmIChmMiA9IE1hdGguUEkgKiAyICsgZjIpO1xyXG5cclxuICAgICAgICBpZiAoc3dlZXBfZmxhZyAmJiBmMSA+IGYyKSB7XHJcbiAgICAgICAgICBmMSA9IGYxIC0gTWF0aC5QSSAqIDI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXN3ZWVwX2ZsYWcgJiYgZjIgPiBmMSkge1xyXG4gICAgICAgICAgZjIgPSBmMiAtIE1hdGguUEkgKiAyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmMSA9IHJlY3Vyc2l2ZVswXTtcclxuICAgICAgICBmMiA9IHJlY3Vyc2l2ZVsxXTtcclxuICAgICAgICBjeCA9IHJlY3Vyc2l2ZVsyXTtcclxuICAgICAgICBjeSA9IHJlY3Vyc2l2ZVszXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGRmID0gZjIgLSBmMTtcclxuXHJcbiAgICAgIGlmIChNYXRoLmFicyhkZikgPiBfMTIwKSB7XHJcbiAgICAgICAgdmFyIGYyb2xkID0gZjIsXHJcbiAgICAgICAgICAgIHgyb2xkID0geDIsXHJcbiAgICAgICAgICAgIHkyb2xkID0geTI7XHJcbiAgICAgICAgZjIgPSBmMSArIF8xMjAgKiAoc3dlZXBfZmxhZyAmJiBmMiA+IGYxID8gMSA6IC0xKTtcclxuICAgICAgICB4MiA9IGN4ICsgcnggKiBNYXRoLmNvcyhmMik7XHJcbiAgICAgICAgeTIgPSBjeSArIHJ5ICogTWF0aC5zaW4oZjIpO1xyXG4gICAgICAgIHJlcyA9IHRoaXMuYTJjKHgyLCB5MiwgcngsIHJ5LCBhbmdsZSwgMCwgc3dlZXBfZmxhZywgeDJvbGQsIHkyb2xkLCBbZjIsIGYyb2xkLCBjeCwgY3ldKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGYgPSBmMiAtIGYxO1xyXG4gICAgICB2YXIgYzEgPSBNYXRoLmNvcyhmMSksXHJcbiAgICAgICAgICBzMSA9IE1hdGguc2luKGYxKSxcclxuICAgICAgICAgIGMyID0gTWF0aC5jb3MoZjIpLFxyXG4gICAgICAgICAgczIgPSBNYXRoLnNpbihmMiksXHJcbiAgICAgICAgICB0ID0gTWF0aC50YW4oZGYgLyA0KSxcclxuICAgICAgICAgIGh4ID0gNCAvIDMgKiByeCAqIHQsXHJcbiAgICAgICAgICBoeSA9IDQgLyAzICogcnkgKiB0LFxyXG4gICAgICAgICAgbTEgPSBbeDEsIHkxXSxcclxuICAgICAgICAgIG0yID0gW3gxICsgaHggKiBzMSwgeTEgLSBoeSAqIGMxXSxcclxuICAgICAgICAgIG0zID0gW3gyICsgaHggKiBzMiwgeTIgLSBoeSAqIGMyXSxcclxuICAgICAgICAgIG00ID0gW3gyLCB5Ml07XHJcbiAgICAgIG0yWzBdID0gMiAqIG0xWzBdIC0gbTJbMF07XHJcbiAgICAgIG0yWzFdID0gMiAqIG0xWzFdIC0gbTJbMV07XHJcblxyXG4gICAgICBpZiAocmVjdXJzaXZlKSB7XHJcbiAgICAgICAgcmV0dXJuIFttMiwgbTMsIG00XS5jb25jYXQocmVzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXMgPSBbbTIsIG0zLCBtNF0uY29uY2F0KHJlcykuam9pbigpLnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24gKHgpIHtcclxuICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBuZXdyZXMgPSBbXTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcclxuICAgICAgICAgIG5ld3Jlc1tpXSA9IGkgJSAyID8gcm90YXRlKHJlc1tpIC0gMV0sIHJlc1tpXSwgcmFkKS55IDogcm90YXRlKHJlc1tpXSwgcmVzW2kgKyAxXSwgcmFkKS54O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ld3JlcztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1dKTtcclxuXHJcbiAgcmV0dXJuIFBhdGhNYWtlcjtcclxufSgpO1xyXG5cclxuZXhwb3J0cy5QYXRoTWFrZXIgPSBQYXRoTWFrZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5d1lYUm9MblJ6SWwwc0ltNWhiV1Z6SWpwYklsQmhkR2hOWVd0bGNpSXNJbkJoZEdoRVlYUmhJaXdpWXlJc0lta2lMQ0p2SWl3aWRpSXNJa2x1Wm1sdWFYUjVJaXdpY0dGeWMyVWlMQ0o0SWl3aWVTSXNJbU4xY25KbGJuUllJaXdpWTNWeWNtVnVkRmtpTENKdlptWnpaWFJZSWl3aVRXRjBhQ0lzSW0xcGJpSXNJbTltWm5ObGRGa2lMQ0p3TUNJc0luQXhJaXdpY0RJaUxDSndNeUlzSW1FaUxDSmlJaXdpYldGNElpd2ljM0Z5ZENJc0luSnZiM1J6SWl3aWJXRndJaXdpYlhWc2RHa2lMQ0ptYjNKRllXTm9JaXdpY205dmRDSXNJblpoYkhWbElpd2ljRzkzSWl3aVlYSnlJaXdpY21GMGFXOGlMQ0p5WlhOMWJIUWlMQ0pzWlc1bmRHZ2lMQ0p3ZFhOb0lpd2liM0prWlhJd0lpd2liM0prWlhJeElpd2lZMkZzWTNWc1lYUmxTR2xuYUd4NVQzSmtaWElpTENKdmNtUmxjaklpTENKdmNtUmxjak1pTENKd1lYUm9VbVZoWkhraUxDSndZWFJvSWl3aWJHbHVaVlJ2SWl3aWNHRjBhRk4wWVhKMElpd2ljR0YwYUVOb1lXbHVJaXdpYlc5MlpWUnZJaXdpZFhCa1lYUmxXRmtpTENKb2IzSnBlbTl1ZEdGc1ZHOGlMQ0oyWlhKMGFXTmhiRlJ2SWl3aVl6RjRJaXdpWXpGNUlpd2lZeko0SWl3aVl6SjVJaXdpWTJGc1kzVnNZWFJsUW1WNmFXVnlUV2x1VFdGNElpd2lZM1ZpYVdOQ1pYcHBaWEpEZFhKMlpWUnZJaXdpWTNnaUxDSmplU0lzSW5GMVlXUnlZWFJwWTBKbGVtbGxja04xY25abFZHOGlMQ0p5ZUNJc0luSjVJaXdpZUVGNGFYTlNiM1JoZEdsdmJpSXNJbXhoY21kbFFYSmpSbXhoWnlJc0luTjNaV1Z3Um14aFp5SXNJbU5UWlhKcFpYTWlMQ0poTW1NaUxDSnBiM1pNYVhOMElpd2ljM0JzYVdObElpd2lZWEpqVkc4aUxDSndZWFJvVW1WbUlpd2ljRzl3SWl3aWNHRjBhRVJoZEdGVFpYSnBaWE1pTENKd1lYUm9SR0YwWVZkcGRHaFVlWEJsSWl3aWNHRjBhRVJoZEdGSmRHVnRJaXdpWTI5a1pTSXNJbTF2ZG1WVWIxSmxiR0YwYVhabElpd2liR2x1WlZSdlVtVnNZWFJwZG1VaUxDSm9iM0pwZW05dWRHRnNWRzlTWld4aGRHbDJaU0lzSW5abGNuUnBZMkZzVkc5U1pXeGhkR2wyWlNJc0luZ3hJaXdpZVRFaUxDSjRNaUlzSW5reUlpd2lZM1ZpYVdOQ1pYcHBaWEpEZFhKMlpWUnZVbVZzWVhScGRtVWlMQ0p4ZFdGa2NtRjBhV05DWlhwcFpYSkRkWEoyWlZSdlVtVnNZWFJwZG1VaUxDSnNZWEpuWlVGeVl5SXNJbk4zWldWd0lpd2lZWEpqVkc5U1pXeGhkR2wyWlNJc0ltTnNiM05sVUdGMGFDSXNJbU52Ym5OdmJHVWlMQ0psY25KdmNpSXNJa1Z5Y205eUlpd2lUblZ0WW1WeUlpd2lhWE5KYm5SbFoyVnlJaXdpZFc1cFptOXliU0lzSW1OdmNIbFFZWFJvSWl3aWIwRnljbUY1SWl3aWFVRnljbUY1SWl3aWVFRnljbUY1SWl3aWVVRnljbUY1SWl3aWFXNWtaWGdpTENKemRHVndVbUYwYVc4aUxDSjRVM0JzYVhSQmNuSmhlU0lzSW1OaGJHTjFiR0YwWlVKbGVtbGxjbE53YkdsMElpd2llVk53YkdsMFFYSnlZWGtpTENKd01IZ2lMQ0p3TVhnaUxDSnphR2xtZENJc0luQXplQ0lzSW5BeWVDSXNJbkF3ZVNJc0luQXhlU0lzSW5BemVTSXNJbkF5ZVNJc0ltRnVaMnhsSWl3aWJHRnlaMlZmWVhKalgyWnNZV2NpTENKemQyVmxjRjltYkdGbklpd2ljbVZqZFhKemFYWmxJaXdpWHpFeU1DSXNJbEJKSWl3aWNtRmtJaXdpY21Weklpd2llSGtpTENKeWIzUmhkR1VpTENKWUlpd2lZMjl6SWl3aWMybHVJaXdpV1NJc0ltZ2lMQ0p5ZURJaUxDSnllVElpTENKcklpd2lZV0p6SWl3aVpqRWlMQ0poYzJsdUlpd2laaklpTENKa1ppSXNJbVl5YjJ4a0lpd2llREp2YkdRaUxDSjVNbTlzWkNJc0ltTXhJaXdpY3pFaUxDSmpNaUlzSW5NeUlpd2lkQ0lzSW5SaGJpSXNJbWg0SWl3aWFIa2lMQ0p0TVNJc0ltMHlJaXdpYlRNaUxDSnROQ0lzSW1OdmJtTmhkQ0lzSW1wdmFXNGlMQ0p6Y0d4cGRDSXNJbkJoY25ObFJteHZZWFFpTENKdVpYZHlaWE1pTENKcGFTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenRCUVVOQk96czdPenM3T3pzN096czdPenM3T3pzN1NVRkZZVUVzVXpzN08wRkJZVlE3UVVGTFFTeHhRa0ZCV1VNc1VVRkJXaXhGUVVFclFqdEJRVUZCT3p0QlFVRkJMR3REUVdwQ1VqdEJRVU51UWtNc1RVRkJRVUVzUTBGQlF5eEZRVUZGTEV0QlJHZENPMEZCUlc1Q1F5eE5RVUZCUVN4RFFVRkRMRVZCUVVVc1JVRkdaMEk3UVVGSGJrSkRMRTFCUVVGQkxFTkJRVU1zUlVGQlJTeEZRVWhuUWp0QlFVbHVRa01zVFVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCU21kQ0xFdEJhVUpST3p0QlFVRkJMSE5EUVZaS0xFTkJWVWs3TzBGQlFVRXNjME5CVkVvc1EwRlRTVHM3UVVGQlFTeHhRMEZTVEVNc1VVRlJTenM3UVVGQlFTeHhRMEZRVEVFc1VVRlBTenM3UVVGQlFTeDFRMEZLV0N4TFFVbFhPenRCUVVGQkxIVkRRVWhQTEVOQlFVTXNRMEZCUkN4RlFVRkpMRU5CUVVvc1EwRkhVRHM3UVVGQlFTeDFRMEZHVXl4RlFVVlVPenRCUVVNelFpeFJRVUZKVEN4UlFVRktMRVZCUVdNN1FVRkRWaXhYUVVGTFRTeExRVUZNTEVOQlFWZE9MRkZCUVZnN1FVRkRTRHRCUVVOS096czdPelpDUVVWblFrOHNReXhGUVVGWFF5eERMRVZCUVZjN1FVRkRia01zVjBGQlMwTXNVVUZCVEN4SFFVRm5Ra1lzUTBGQmFFSTdRVUZEUVN4WFFVRkxSeXhSUVVGTUxFZEJRV2RDUml4RFFVRm9RanRCUVVOQkxGZEJRVXRITEU5QlFVd3NSMEZCWlVNc1NVRkJTU3hEUVVGRFF5eEhRVUZNTEVOQlFWTXNTMEZCUzBZc1QwRkJaQ3hGUVVGMVFrb3NRMEZCZGtJc1EwRkJaanRCUVVOQkxGZEJRVXRQTEU5QlFVd3NSMEZCWlVZc1NVRkJTU3hEUVVGRFF5eEhRVUZNTEVOQlFWTXNTMEZCUzBNc1QwRkJaQ3hGUVVGMVFrNHNRMEZCZGtJc1EwRkJaanRCUVVOSU96czdNRU5CUlRaQ1R5eEZMRVZCUVZsRExFVXNSVUZCV1VNc1JTeEZRVUZaUXl4RkxFVkJRVGhDTzBGQlF6VkdMRlZCUVUxRExFTkJRVU1zUjBGQlJ5eExRVUZMUkN4RlFVRkZMRWRCUVVjc1NVRkJTVVFzUlVGQlZDeEhRVUZqTEVsQlFVbEVMRVZCUVd4Q0xFZEJRWFZDUkN4RlFVRTFRaXhEUVVGV08wRkJRMEVzVlVGQlRVc3NRMEZCUXl4SFFVRkhMRXRCUVV0SUxFVkJRVVVzUjBGQlJ5eEpRVUZKUkN4RlFVRlVMRWRCUVdORUxFVkJRVzVDTEVOQlFWWTdRVUZEUVN4VlFVRk5aQ3hEUVVGRExFZEJRVWNzUzBGQlMyVXNSVUZCUlN4SFFVRkhSQ3hGUVVGV0xFTkJRVlk3UVVGRFFTeFZRVUZKUml4SFFVRkhMRWRCUVVkU0xGRkJRVlk3UVVGQlFTeFZRVUZ2UW1kQ0xFZEJRVWNzUjBGQlJ5eERRVUZEYUVJc1VVRkJNMEk3TzBGQlEwRXNWVUZCU1dVc1EwRkJReXhIUVVGSFFTeERRVUZLTEVkQlFWRXNTVUZCU1VRc1EwRkJTaXhIUVVGUmJFSXNRMEZCYUVJc1NVRkJjVUlzUTBGQmVrSXNSVUZCTkVJN1FVRkRlRUlzV1VGQlRYRkNMRWxCUVVrc1IwRkJSMVlzU1VGQlNTeERRVUZEVlN4SlFVRk1MRU5CUVZWR0xFTkJRVU1zUjBGQlIwRXNRMEZCU2l4SFFVRlJMRWxCUVVsRUxFTkJRVW9zUjBGQlVXeENMRU5CUVRGQ0xFTkJRV0k3UVVGRFFTeFpRVUZOYzBJc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVTXNRMEZCVEN4RlFVRlJReXhIUVVGU0xFTkJRVmtzVlVGQlFVTXNTMEZCU3p0QlFVRkJMR2xDUVVGSkxFTkJRVU5CTEV0QlFVc3NSMEZCUjBnc1NVRkJVaXhIUVVGbFJpeERRVUZvUWl4SlFVRnhRaXhEUVVGeVFpeEhRVUY1UWtRc1EwRkJOMEk3UVVGQlFTeFRRVUZxUWl4RFFVRmtPMEZCUTBGSkxGRkJRVUZCTEV0QlFVc3NRMEZCUTBjc1QwRkJUaXhEUVVGakxGVkJRVUZETEVsQlFVa3NSVUZCU1R0QlFVTnNRaXhqUVVGSlFTeEpRVUZKTEVkQlFVY3NRMEZCVUN4SlFVRlpRU3hKUVVGSkxFZEJRVWNzUTBGQmRrSXNSVUZCTUVJN1FVRkRkRUlzWjBKQlFVMURMRXRCUVVzc1IwRkJSMmhDTEVsQlFVa3NRMEZCUTJsQ0xFZEJRVXdzUTBGQlV5eEpRVUZKUml4SlFVRmlMRVZCUVcxQ0xFTkJRVzVDTEVsQlFYZENXaXhGUVVGNFFpeEhRVUUyUWl4SlFVRkpTQ3hKUVVGSkxFTkJRVU5wUWl4SFFVRk1MRU5CUVZNc1NVRkJTVVlzU1VGQllpeEZRVUZ0UWl4RFFVRnVRaXhEUVVGS0xFZEJRVFJDUVN4SlFVRTFRaXhIUVVGdFExZ3NSVUZCYUVVc1IwRkJjVVVzUzBGQlN5eEpRVUZKVnl4SlFVRlVMRWxCUVdsQ1FTeEpRVUZxUWl4SFFVRjNRa0VzU1VGQmVFSXNSMEZCSzBKV0xFVkJRWEJITEVkQlFYbEhUQ3hKUVVGSkxFTkJRVU5wUWl4SFFVRk1MRU5CUVZOR0xFbEJRVlFzUlVGQlpTeERRVUZtTEVsQlFXOUNWQ3hGUVVFelNUdEJRVU5CVEN4WlFVRkJRU3hIUVVGSExFZEJRVWRFTEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hEUVVGVFFTeEhRVUZVTEVWQlFXTmxMRXRCUVdRc1EwRkJUanRCUVVOQlVDeFpRVUZCUVN4SFFVRkhMRWRCUVVkVUxFbEJRVWtzUTBGQlExTXNSMEZCVEN4RFFVRlRRU3hIUVVGVUxFVkJRV05QTEV0QlFXUXNRMEZCVGp0QlFVTklPMEZCUTBvc1UwRk9SRHRCUVU5SU96dEJRVU5FWml4TlFVRkJRU3hIUVVGSExFZEJRVWRFTEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hEUVVGVFFTeEhRVUZVTEVWQlFXTkZMRVZCUVdRc1JVRkJhMEpITEVWQlFXeENMRU5CUVU0N1FVRkRRVWNzVFVGQlFVRXNSMEZCUnl4SFFVRkhWQ3hKUVVGSkxFTkJRVU5UTEVkQlFVd3NRMEZCVTBFc1IwRkJWQ3hGUVVGalRpeEZRVUZrTEVWQlFXdENSeXhGUVVGc1FpeERRVUZPTzBGQlEwRXNZVUZCVHl4RFFVRkRUQ3hIUVVGRUxFVkJRVTFSTEVkQlFVNHNRMEZCVUR0QlFVTklPenM3ZVVOQlJUUkNVeXhITEVWQlFXVkRMRXNzUlVGQmVVSTdRVUZEYWtVc1ZVRkJTVU1zVFVGQlowSXNSMEZCUnl4RlFVRjJRanRCUVVOQlJpeE5RVUZCUVN4SFFVRkhMRU5CUVVOS0xFOUJRVW9zUTBGQldTeFZRVUZEZEVJc1EwRkJSQ3hGUVVGSlJpeERRVUZLTEVWQlFVOXBRaXhEUVVGUUxFVkJRV0U3UVVGRGNrSXNXVUZCU1dwQ0xFTkJRVU1zU1VGQlNXbENMRU5CUVVNc1EwRkJRMk1zVFVGQlJpeEhRVUZYTEVOQlFYQkNMRVZCUVhWQ08wRkJRM1pDUkN4UlFVRkJRU3hOUVVGTkxFTkJRVU5GTEVsQlFWQXNRMEZCV1RsQ0xFTkJRVU1zU1VGQlNTeEpRVUZKTWtJc1MwRkJVaXhEUVVGRUxFZEJRV3RDV2l4RFFVRkRMRU5CUVVOcVFpeERRVUZETEVkQlFVY3NRMEZCVEN4RFFVRkVMRWRCUVZjMlFpeExRVUY2UXp0QlFVTklMRTlCU0VRN1FVRkpRU3hoUVVGUFF5eE5RVUZRTzBGQlEwZzdPenQ1UTBGRk5FSkVMRXNzUlVGQk9FTTdRVUZCUVN4M1EwRkJOVUpKTEUxQlFUUkNPMEZCUVRWQ1FTeFJRVUZCUVN4TlFVRTBRanRCUVVGQk96dEJRVU4yUlN4VlFVRkpReXhOUVVGTkxFZEJRVWNzUzBGQlMwTXNiMEpCUVV3c1EwRkJNRUpHTEUxQlFURkNMRVZCUVd0RFNpeExRVUZzUXl4RFFVRmlPMEZCUTBFc1ZVRkJTVThzVFVGQlRTeEhRVUZITEV0QlFVdEVMRzlDUVVGTUxFTkJRVEJDUkN4TlFVRXhRaXhGUVVGclEwd3NTMEZCYkVNc1EwRkJZanRCUVVOQkxGVkJRVWxSTEUxQlFVMHNSMEZCUnl4TFFVRkxSaXh2UWtGQlRDeERRVUV3UWtNc1RVRkJNVUlzUlVGQmEwTlFMRXRCUVd4RExFTkJRV0k3UVVGRFFTeGhRVUZQTEVOQlFVTkxMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVkFzUlVGQldVVXNUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJiRUlzUlVGQmRVSkRMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVGRDTEVWQlFXdERSQ3hOUVVGTkxFTkJRVU1zUTBGQlJDeERRVUY0UXl4RlFVRTJRMFlzVFVGQlRTeERRVUZETEVOQlFVUXNRMEZCYmtRc1JVRkJkMFJFTEUxQlFVMHNRMEZCUXl4RFFVRkVMRU5CUVRsRUxFTkJRVkE3UVVGRFNEczdPekpDUVVWaE5VSXNReXhGUVVGWFF5eERMRVZCUVZjN1FVRkRhRU1zVlVGQlNTeERRVUZETEV0QlFVdG5ReXhUUVVGV0xFVkJRWEZDTzBGQlEycENMR0ZCUVV0RExFbEJRVXdzUTBGQlZYaERMRU5CUVZZc1IwRkJZeXhMUVVGa08wRkJRMEVzWVVGQlMzZERMRWxCUVV3c1EwRkJWWFpETEVOQlFWWXNSMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUTBGQlJDeERRVUZrTzBGQlEwRXNZVUZCUzNWRExFbEJRVXdzUTBGQlZYUkRMRU5CUVZZc1IwRkJZeXhGUVVGa08wRkJRMEVzWVVGQlMzTkRMRWxCUVV3c1EwRkJWWEpETEVOQlFWWXNSMEZCWXl4RFFVRkRMRU5CUVVOSExFTkJRVVFzUlVGQlNVTXNRMEZCU2l4RFFVRkVMRU5CUVdRN1FVRkRRU3hoUVVGTFF5eFJRVUZNTEVkQlFXZENSaXhEUVVGb1FqdEJRVU5CTEdGQlFVdEhMRkZCUVV3c1IwRkJaMEpHTEVOQlFXaENPMEZCUTBFc1lVRkJTMGNzVDBGQlRDeEhRVUZsU2l4RFFVRm1PMEZCUTBFc1lVRkJTMDhzVDBGQlRDeEhRVUZsVGl4RFFVRm1PMEZCUTBFc1lVRkJTMmRETEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3UVVGRFNDeFBRVlpFTEUxQlZVODdRVUZEU0N4aFFVRkxSU3hOUVVGTUxHZERRVUZsTEV0QlFVdERMRk5CUVhCQ08wRkJRMEVzWVVGQlMwUXNUVUZCVEN4RFFVRlpia01zUTBGQldpeEZRVUZsUXl4RFFVRm1PMEZCUTBFc1lVRkJTMjlETEZOQlFVd3NRMEZCWlZZc1NVRkJaaXhEUVVGdlFpeExRVUZMVXl4VFFVRjZRanRCUVVOSU96dEJRVU5FTEZkQlFVdEJMRk5CUVV3c1IwRkJhVUlzUTBGQlEzQkRMRU5CUVVRc1JVRkJTVU1zUTBGQlNpeERRVUZxUWp0QlFVTklPenM3YlVOQlEzRkNSQ3hETEVWQlFWZERMRU1zUlVGQlZ6dEJRVU40UXl4WFFVRkxjVU1zVFVGQlRDeERRVUZaTEV0QlFVdHdReXhSUVVGTUxFZEJRV2RDUml4RFFVRTFRaXhGUVVFclFpeExRVUZMUnl4UlFVRk1MRWRCUVdkQ1JpeERRVUV2UXp0QlFVTklPenM3TWtKQlEyRkVMRU1zUlVGQlYwTXNReXhGUVVGWE8wRkJRMmhETEZkQlFVdHBReXhKUVVGTUxFTkJRVlYyUXl4RFFVRldMRU5CUVdGblF5eEpRVUZpTEVOQlFXdENMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUTBGQmJFSTdRVUZEUVN4WFFVRkxUeXhKUVVGTUxFTkJRVlYwUXl4RFFVRldMRU5CUVdFclFpeEpRVUZpTEVOQlFXdENMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUTBGQmJFSTdRVUZEUVN4WFFVRkxUeXhKUVVGTUxFTkJRVlZ5UXl4RFFVRldMRU5CUVdFNFFpeEpRVUZpTEVOQlFXdENMRU5CUVVNelFpeERRVUZFTEVWQlFVbERMRU5CUVVvc1EwRkJiRUk3UVVGRFFTeFhRVUZMYzBNc1VVRkJUQ3hEUVVGamRrTXNRMEZCWkN4RlFVRnBRa01zUTBGQmFrSTdRVUZEU0RzN08yMURRVU54UWtRc1F5eEZRVUZYUXl4RExFVkJRVmM3UVVGRGVFTXNWMEZCUzJ0RExFMUJRVXdzUTBGQldTeExRVUZMYWtNc1VVRkJUQ3hIUVVGblFrWXNRMEZCTlVJc1JVRkJLMElzUzBGQlMwY3NVVUZCVEN4SFFVRm5Ra1lzUTBGQkwwTTdRVUZEU0RzN08ybERRVU50UWtRc1F5eEZRVUZYTzBGQlF6TkNMRmRCUVV0dFF5eE5RVUZNTEVOQlFWbHVReXhEUVVGYUxFVkJRV1VzUzBGQlMwY3NVVUZCY0VJN1FVRkRTRHM3TzNsRFFVTXlRa2dzUXl4RlFVRlhPMEZCUTI1RExGZEJRVXQzUXl4WlFVRk1MRU5CUVd0Q0xFdEJRVXQwUXl4UlFVRk1MRWRCUVdkQ1JpeERRVUZzUXp0QlFVTklPenM3SzBKQlEybENReXhETEVWQlFWYzdRVUZEZWtJc1YwRkJTMnRETEUxQlFVd3NRMEZCV1N4TFFVRkxha01zVVVGQmFrSXNSVUZCTWtKRUxFTkJRVE5DTzBGQlEwZzdPenQxUTBGRGVVSkJMRU1zUlVGQlZ6dEJRVU5xUXl4WFFVRkxkME1zVlVGQlRDeERRVUZuUWl4TFFVRkxkRU1zVVVGQlRDeEhRVUZuUWtZc1EwRkJhRU03UVVGRFNEczdPM1ZEUVVWSGVVTXNSeXhGUVVOQlF5eEhMRVZCUTBGRExFY3NSVUZEUVVNc1J5eEZRVU5CTjBNc1F5eEZRVU5CUXl4RExFVkJRMFk3UVVGRFJTeFhRVUZMYVVNc1NVRkJUQ3hEUVVGVmRrTXNRMEZCVml4RFFVRmhaME1zU1VGQllpeERRVUZyUWl4RFFVRkRhVUlzUjBGQlJ5eEhRVUZITlVNc1EwRkJVQ3hGUVVGVk5rTXNSMEZCUnl4SFFVRkhOVU1zUTBGQmFFSXNRMEZCYkVJN1FVRkRRU3hYUVVGTGFVTXNTVUZCVEN4RFFVRlZkRU1zUTBGQlZpeERRVUZoSzBJc1NVRkJZaXhEUVVGclFpeERRVUZEWlN4SFFVRkhMRWRCUVVjc1MwRkJTM2hETEZGQlFWb3NSVUZCYzBKNVF5eEhRVUZITEVkQlFVY3NTMEZCUzNoRExGRkJRV3BETEVOQlFXeENPMEZCUTBFc1YwRkJTeXRDTEVsQlFVd3NRMEZCVlhKRExFTkJRVllzUTBGQllUaENMRWxCUVdJc1EwRkJhMElzUTBGQlF6TkNMRU5CUVVRc1JVRkJTVU1zUTBGQlNpeERRVUZzUWp0QlFVTkJMRmRCUVV0SExFOUJRVXdzUjBGQlpVTXNTVUZCU1N4RFFVRkRReXhIUVVGTUxFOUJRVUZFTEVsQlFVa3NSMEZCU3l4TFFVRkxSQ3hQUVVGV0xEUkNRVUZ6UWl4TFFVRkxNRU1zY1VKQlFVd3NRMEZCTWtJc1MwRkJTelZETEZGQlFXaERMRVZCUVRCRGQwTXNSMEZCTVVNc1JVRkJLME5GTEVkQlFTOURMRVZCUVc5RU5VTXNRMEZCY0VRc1EwRkJkRUlzUjBGQmJrSTdRVUZEUVN4WFFVRkxUeXhQUVVGTUxFZEJRV1ZHTEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hQUVVGQlJDeEpRVUZKTEVkQlFVc3NTMEZCUzBVc1QwRkJWaXcwUWtGQmMwSXNTMEZCUzNWRExIRkNRVUZNTEVOQlFUSkNMRXRCUVVzelF5eFJRVUZvUXl4RlFVRXdRM2RETEVkQlFURkRMRVZCUVN0RFJTeEhRVUV2UXl4RlFVRnZSRFZETEVOQlFYQkVMRU5CUVhSQ0xFZEJRVzVDTzBGQlEwRXNWMEZCUzNORExGRkJRVXdzUTBGQlkzWkRMRU5CUVdRc1JVRkJhVUpETEVOQlFXcENPMEZCUTBnN096c3JRMEZGUjNsRExFY3NSVUZEUVVNc1J5eEZRVU5CUXl4SExFVkJRMEZETEVjc1JVRkRRVGRETEVNc1JVRkRRVU1zUXl4RlFVTkdPMEZCUTBVc1YwRkJTemhETEd0Q1FVRk1MRU5CUVhkQ0xFdEJRVXMzUXl4UlFVRk1MRWRCUVdkQ2QwTXNSMEZCZUVNc1JVRkJOa01zUzBGQlMzWkRMRkZCUVV3c1IwRkJaMEozUXl4SFFVRTNSQ3hGUVVGclJTeExRVUZMZWtNc1VVRkJUQ3hIUVVGblFqQkRMRWRCUVd4R0xFVkJRWFZHTEV0QlFVdDZReXhSUVVGTUxFZEJRV2RDTUVNc1IwRkJka2NzUlVGQk5FY3NTMEZCU3pORExGRkJRVXdzUjBGQlowSkdMRU5CUVRWSUxFVkJRU3RJTEV0QlFVdEhMRkZCUVV3c1IwRkJaMEpHTEVOQlFTOUpPMEZCUTBnN096c3lRMEZETmtJclF5eEZMRVZCUVZsRExFVXNSVUZCV1dwRUxFTXNSVUZCVjBNc1F5eEZRVUZYTzBGQlEzaEZMRmRCUVV0cFF5eEpRVUZNTEVOQlFWVjJReXhEUVVGV0xFTkJRV0ZuUXl4SlFVRmlMRU5CUVd0Q0xFTkJRVU54UWl4RlFVRkZMRWRCUVVkb1JDeERRVUZPTEVWQlFWTnBSQ3hGUVVGRkxFZEJRVWRvUkN4RFFVRmtMRU5CUVd4Q08wRkJRMEVzVjBGQlMybERMRWxCUVV3c1EwRkJWWFJETEVOQlFWWXNRMEZCWVN0Q0xFbEJRV0lzUTBGQmEwSXNRMEZCUTNGQ0xFVkJRVVVzUjBGQlJ5eExRVUZMT1VNc1VVRkJXQ3hGUVVGeFFpdERMRVZCUVVVc1IwRkJSeXhMUVVGTE9VTXNVVUZCTDBJc1EwRkJiRUk3UVVGRFFTeFhRVUZMSzBJc1NVRkJUQ3hEUVVGVmNrTXNRMEZCVml4RFFVRmhPRUlzU1VGQllpeERRVUZyUWl4RFFVRkRNMElzUTBGQlJDeEZRVUZKUXl4RFFVRktMRU5CUVd4Q08wRkJRMEVzVjBGQlMwY3NUMEZCVEN4SFFVRmxReXhKUVVGSkxFTkJRVU5ETEVkQlFVd3NUMEZCUVVRc1NVRkJTU3hIUVVGTExFdEJRVXRFTEU5QlFWWXNORUpCUVhOQ0xFdEJRVXN3UXl4eFFrRkJUQ3hEUVVFeVFpeExRVUZMTlVNc1VVRkJhRU1zUlVGQk1FTTRReXhGUVVFeFF5eEZRVUU0UTBFc1JVRkJPVU1zUlVGQmEwUm9SQ3hEUVVGc1JDeERRVUYwUWl4SFFVRnVRanRCUVVOQkxGZEJRVXRQTEU5QlFVd3NSMEZCWlVZc1NVRkJTU3hEUVVGRFF5eEhRVUZNTEU5QlFVRkVMRWxCUVVrc1IwRkJTeXhMUVVGTFJTeFBRVUZXTERSQ1FVRnpRaXhMUVVGTGRVTXNjVUpCUVV3c1EwRkJNa0lzUzBGQlN6TkRMRkZCUVdoRExFVkJRVEJET0VNc1JVRkJNVU1zUlVGQk9FTkJMRVZCUVRsRExFVkJRV3RFYUVRc1EwRkJiRVFzUTBGQmRFSXNSMEZCYmtJN1FVRkRRU3hYUVVGTGMwTXNVVUZCVEN4RFFVRmpka01zUTBGQlpDeEZRVUZwUWtNc1EwRkJha0k3UVVGRFNEczdPMjFFUVVOeFF5dERMRVVzUlVGQldVTXNSU3hGUVVGWmFrUXNReXhGUVVGWFF5eERMRVZCUVZjN1FVRkRhRVlzVjBGQlMybEVMSE5DUVVGTUxFTkJRVFJDTEV0QlFVdG9SQ3hSUVVGTUxFZEJRV2RDT0VNc1JVRkJOVU1zUlVGQlowUXNTMEZCU3pkRExGRkJRVXdzUjBGQlowSTRReXhGUVVGb1JTeEZRVUZ2UlN4TFFVRkxMME1zVVVGQlRDeEhRVUZuUWtZc1EwRkJjRVlzUlVGQmRVWXNTMEZCUzBjc1VVRkJUQ3hIUVVGblFrWXNRMEZCZGtjN1FVRkRTRHM3T3pCQ1FVVkhhMFFzUlN4RlFVTkJReXhGTEVWQlEwRkRMR0VzUlVGRFFVTXNXU3hGUVVOQlF5eFRMRVZCUTBGMlJDeERMRVZCUTBGRExFTXNSVUZEUmp0QlFVTkZMRlZCUVUxMVJDeFBRVUZQTEVkQlFVZG9SU3hUUVVGVExFTkJRVU5wUlN4SFFVRldMRU5CUVdNc1MwRkJTM1pFTEZGQlFXNUNMRVZCUVRaQ0xFdEJRVXRETEZGQlFXeERMRVZCUVRSRFowUXNSVUZCTlVNc1JVRkJaMFJETEVWQlFXaEVMRVZCUVc5RVF5eGhRVUZ3UkN4RlFVRnRSVU1zV1VGQmJrVXNSVUZCYVVaRExGTkJRV3BHTEVWQlFUUkdka1FzUTBGQk5VWXNSVUZCSzBaRExFTkJRUzlHTEVOQlFXaENPenRCUVVOQkxHRkJRVTkxUkN4UFFVRlBMRU5CUVVNNVFpeE5RVUZTTEVsQlFXdENMRU5CUVhwQ0xFVkJRVFJDTzBGQlEzaENMRmxCUVUxblF5eFBRVUZQTEVkQlFVZEdMRTlCUVU4c1EwRkJRMGNzVFVGQlVpeERRVUZsTEVOQlFXWXNSVUZCYTBJc1EwRkJiRUlzUTBGQmFFSTdRVUZEUVN4aFFVRkxla0lzU1VGQlRDeERRVUZWZGtNc1EwRkJWaXhEUVVGaFowTXNTVUZCWWl4RFFVRnJRaXhEUVVGREswSXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkJVQ3hIUVVGaFFTeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRnlRaXhGUVVFd1FrRXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkJVQ3hIUVVGaFFTeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRTVReXhEUVVGc1FqdEJRVU5CTEdGQlFVdDRRaXhKUVVGTUxFTkJRVlYwUXl4RFFVRldMRU5CUVdFclFpeEpRVUZpTEVOQlFXdENMRU5CUVVNclFpeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRlFMRWRCUVdFc1MwRkJTM2hFTEZGQlFXNUNMRVZCUVRaQ2QwUXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkJVQ3hIUVVGaExFdEJRVXQyUkN4UlFVRXZReXhEUVVGc1FqdEJRVU5CTEdGQlFVc3JRaXhKUVVGTUxFTkJRVlZ5UXl4RFFVRldMRU5CUVdFNFFpeEpRVUZpTEVOQlFXdENMRU5CUVVNclFpeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRlNMRVZCUVdGQkxFOUJRVThzUTBGQlF5eERRVUZFTEVOQlFYQkNMRU5CUVd4Q08wRkJRMEVzWVVGQlMzUkVMRTlCUVV3c1IwRkJaVU1zU1VGQlNTeERRVUZEUXl4SFFVRk1MRTlCUVVGRUxFbEJRVWtzUjBGQlN5eExRVUZMUkN4UFFVRldMRFJDUVVGelFpeExRVUZMTUVNc2NVSkJRVXdzUTBGQk1rSXNTMEZCU3pWRExGRkJRV2hETEVWQlFUQkRkMFFzVDBGQlR5eERRVUZETEVOQlFVUXNRMEZCYWtRc1JVRkJjMFJCTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVRkRUxFVkJRV3RGUVN4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGNlJTeERRVUYwUWl4SFFVRnVRanRCUVVOQkxHRkJRVXR1UkN4UFFVRk1MRWRCUVdWR0xFbEJRVWtzUTBGQlEwTXNSMEZCVEN4UFFVRkJSQ3hKUVVGSkxFZEJRVXNzUzBGQlMwVXNUMEZCVml3MFFrRkJjMElzUzBGQlMzVkRMSEZDUVVGTUxFTkJRVEpDTEV0QlFVc3pReXhSUVVGb1F5eEZRVUV3UTNWRUxFOUJRVThzUTBGQlF5eERRVUZFTEVOQlFXcEVMRVZCUVhORVFTeFBRVUZQTEVOQlFVTXNRMEZCUkN4RFFVRTNSQ3hGUVVGclJVRXNUMEZCVHl4RFFVRkRMRU5CUVVRc1EwRkJla1VzUTBGQmRFSXNSMEZCYmtJN1FVRkRRU3hoUVVGTGJrSXNVVUZCVEN4RFFVRmpiVUlzVDBGQlR5eERRVUZETEVOQlFVUXNRMEZCY2tJc1JVRkJNRUpCTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVdwRE8wRkJRMGc3UVVGRFNqczdPMnREUVVWSFVDeEZMRVZCUTBGRExFVXNSVUZEUVVNc1lTeEZRVU5CUXl4WkxFVkJRMEZETEZNc1JVRkRRWFpFTEVNc1JVRkRRVU1zUXl4RlFVTkdPMEZCUTBVc1YwRkJTekpFTEV0QlFVd3NRMEZCVjFRc1JVRkJXQ3hGUVVGbFF5eEZRVUZtTEVWQlFXMUNReXhoUVVGdVFpeEZRVUZyUTBNc1dVRkJiRU1zUlVGQlowUkRMRk5CUVdoRUxFVkJRVEpFTEV0QlFVdHlSQ3hSUVVGTUxFZEJRV2RDUml4RFFVRXpSU3hGUVVFNFJTeExRVUZMUnl4UlFVRk1MRWRCUVdkQ1JpeERRVUU1Ump0QlFVTklPenM3WjBOQkswWnJRanRCUVVObUxGZEJRVXRwUXl4SlFVRk1MRU5CUVZWNFF5eERRVUZXTEVkQlFXTXNTVUZCWkR0QlFVTklPenM3T0VKQlJXZENPMEZCUVVFN08wRkJRMklzVlVGQlNTeExRVUZMTWtNc1UwRkJUQ3hEUVVGbFdDeE5RVUZtTEVsQlFYbENMRVZCUVVVc1MwRkJTM2hDTEZGQlFVd3NTVUZCYVVJc1MwRkJTMnRETEZOQlFVd3NRMEZCWlN4RFFVRm1MRU5CUVdwQ0xFbEJRWE5ETEV0QlFVdHFReXhSUVVGTUxFbEJRV2xDTEV0QlFVdHBReXhUUVVGTUxFTkJRV1VzUTBGQlppeERRVUY2UkN4RFFVRTNRaXhGUVVFd1J6dEJRVU4wUnl4aFFVRkxSQ3hOUVVGTUxHZERRVUZsTEV0QlFVdERMRk5CUVhCQ08wRkJRMGc3TzBGQlEwUXNZVUZCVHl4TFFVRkxReXhUUVVGTUxFTkJRV1ZZTEUxQlFYUkNMRVZCUVRoQ08wRkJRekZDTEZsQlFVMXRReXhQUVVGUExFZEJRVWNzUzBGQlMzaENMRk5CUVV3c1EwRkJaWGxDTEVkQlFXWXNSVUZCYUVJN1FVRkRRU3hoUVVGTE0wSXNUVUZCVEN4blEwRkJaVEJDTEU5QlFXWTdRVUZEU0RzN1FVRkRSQ3hoUVVGUExFdEJRVXN6UWl4SlFVRk1MRU5CUVZWMFF5eERRVUZXTEVOQlFXRTRRaXhOUVVGaUxFZEJRWE5DTEV0QlFVdFJMRWxCUVV3c1EwRkJWWFpETEVOQlFWWXNRMEZCWVN0Q0xFMUJRVEZETzBGQlEwa3NZVUZCUzFFc1NVRkJUQ3hEUVVGVmRFTXNRMEZCVml4RFFVRmhLMElzU1VGQllpeERRVUZyUWl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFTkJRV3hDTzBGQlJFbzdPMEZCUlVFc1YwRkJTMDhzU1VGQlRDeERRVUZWY2tNc1EwRkJWaXhEUVVGaGMwSXNUMEZCWWl4RFFVRnhRaXhWUVVGQlJTeExRVUZMTEVWQlFVazdRVUZETVVKQkxGRkJRVUZCTEV0QlFVc3NRMEZCUXl4RFFVRkVMRU5CUVV3c1NVRkJXU3hMUVVGSkxFTkJRVU5xUWl4UFFVRnFRanRCUVVOQmFVSXNVVUZCUVVFc1MwRkJTeXhEUVVGRExFTkJRVVFzUTBGQlRDeEpRVUZaTEV0QlFVa3NRMEZCUTJRc1QwRkJha0k3UVVGRFNDeFBRVWhFTzBGQlNVRXNWMEZCUzBnc1QwRkJUQ3hIUVVGbExFTkJRV1k3UVVGRFFTeFhRVUZMUnl4UFFVRk1MRWRCUVdVc1EwRkJaanRCUVVOSU96czdNRUpCUlZsa0xGRXNSVUZCYTBJN1FVRkJRVHM3UVVGRE0wSXNWVUZCVFhORkxHTkJRV01zUjBGQlJ5dzJRa0ZCVTNSRkxGRkJRVlFzUTBGQmRrSTdRVUZEUVN4VlFVRkpkVVVzWjBKQlFVbzdRVUZEUVVRc1RVRkJRVUVzWTBGQll5eERRVUZETlVNc1QwRkJaaXhEUVVGMVFpeFZRVUZCT0VNc1dVRkJXU3hGUVVGSk8wRkJRMjVETEdkQ1FVRlJRU3haUVVGWkxFTkJRVU5ETEVsQlFYSkNPMEZCUTBrc1pVRkJTeXhIUVVGTU8wRkJRMGxHTEZsQlFVRkJMR2RDUVVGblFpeEhRVUZIUXl4WlFVRnVRanM3UVVGRFFTeFpRVUZCTEUxQlFVa3NRMEZCUXpOQ0xFMUJRVXdzUTBGQldUQkNMR2RDUVVGblFpeERRVUZEYUVVc1EwRkJOMElzUlVGQlowTm5SU3huUWtGQlowSXNRMEZCUXk5RUxFTkJRV3BFT3p0QlFVTkJPenRCUVVOS0xHVkJRVXNzUjBGQlREdEJRVU5KSzBRc1dVRkJRVUVzWjBKQlFXZENMRWRCUVVkRExGbEJRVzVDT3p0QlFVTkJMRmxCUVVFc1RVRkJTU3hEUVVGRFJTeGpRVUZNTEVOQlFXOUNTQ3huUWtGQlowSXNRMEZCUTJoRkxFTkJRWEpETEVWQlFYZERaMFVzWjBKQlFXZENMRU5CUVVNdlJDeERRVUY2UkRzN1FVRkRTaXhsUVVGTExFZEJRVXc3UVVGRFNTdEVMRmxCUVVGQkxHZENRVUZuUWl4SFFVRkhReXhaUVVGdVFqczdRVUZEUVN4WlFVRkJMRTFCUVVrc1EwRkJRemxDTEUxQlFVd3NRMEZCV1RaQ0xHZENRVUZuUWl4RFFVRkRhRVVzUTBGQk4wSXNSVUZCWjBOblJTeG5Ra0ZCWjBJc1EwRkJReTlFTEVOQlFXcEVPenRCUVVOQk96dEJRVU5LTEdWQlFVc3NSMEZCVER0QlFVTkpLMFFzV1VGQlFVRXNaMEpCUVdkQ0xFZEJRVWRETEZsQlFXNUNPenRCUVVOQkxGbEJRVUVzVFVGQlNTeERRVUZEUnl4alFVRk1MRU5CUVc5Q1NpeG5Ra0ZCWjBJc1EwRkJRMmhGTEVOQlFYSkRMRVZCUVhkRFowVXNaMEpCUVdkQ0xFTkJRVU12UkN4RFFVRjZSRHM3UVVGRFFUczdRVUZEU2l4bFFVRkxMRWRCUVV3N1FVRkRTU3RFTEZsQlFVRkJMR2RDUVVGblFpeEhRVUZIUXl4WlFVRnVRanM3UVVGRFFTeFpRVUZCTEUxQlFVa3NRMEZCUTNwQ0xGbEJRVXdzUTBGQmEwSjNRaXhuUWtGQlowSXNRMEZCUTJoRkxFTkJRVzVET3p0QlFVTkJPenRCUVVOS0xHVkJRVXNzUjBGQlREdEJRVU5KWjBVc1dVRkJRVUVzWjBKQlFXZENMRWRCUVVkRExGbEJRVzVDT3p0QlFVTkJMRmxCUVVFc1RVRkJTU3hEUVVGRFNTeHZRa0ZCVEN4RFFVRXdRa3dzWjBKQlFXZENMRU5CUVVOb1JTeERRVUV6UXpzN1FVRkRRVHM3UVVGRFNpeGxRVUZMTEVkQlFVdzdRVUZEU1dkRkxGbEJRVUZCTEdkQ1FVRm5RaXhIUVVGSFF5eFpRVUZ1UWpzN1FVRkRRU3haUVVGQkxFMUJRVWtzUTBGQlEzaENMRlZCUVV3c1EwRkJaMEoxUWl4blFrRkJaMElzUTBGQlF5OUVMRU5CUVdwRE96dEJRVU5CT3p0QlFVTktMR1ZCUVVzc1IwRkJURHRCUVVOSkswUXNXVUZCUVVFc1owSkJRV2RDTEVkQlFVZERMRmxCUVc1Q096dEJRVU5CTEZsQlFVRXNUVUZCU1N4RFFVRkRTeXhyUWtGQlRDeERRVUYzUWs0c1owSkJRV2RDTEVOQlFVTXZSQ3hEUVVGNlF6czdRVUZEUVRzN1FVRkRTaXhsUVVGTExFZEJRVXc3UVVGRFNTdEVMRmxCUVVGQkxHZENRVUZuUWl4SFFVRkhReXhaUVVGdVFqczdRVUZEUVN4WlFVRkJMRTFCUVVrc1EwRkJRMnhDTEd0Q1FVRk1MRU5CUVhkQ2FVSXNaMEpCUVdkQ0xFTkJRVU5QTEVWQlFYcERMRVZCUVRaRFVDeG5Ra0ZCWjBJc1EwRkJRMUVzUlVGQk9VUXNSVUZCYTBWU0xHZENRVUZuUWl4RFFVRkRVeXhGUVVGdVJpeEZRVUYxUmxRc1owSkJRV2RDTEVOQlFVTlZMRVZCUVhoSExFVkJRVFJIVml4blFrRkJaMElzUTBGQlEyaEZMRU5CUVRkSUxFVkJRV2RKWjBVc1owSkJRV2RDTEVOQlFVTXZSQ3hEUVVGcVNqczdRVUZEUVRzN1FVRkRTaXhsUVVGTExFZEJRVXc3UVVGRFNTdEVMRmxCUVVGQkxHZENRVUZuUWl4SFFVRkhReXhaUVVGdVFqczdRVUZEUVN4WlFVRkJMRTFCUVVrc1EwRkJRMVVzTUVKQlFVd3NRMEZCWjBOWUxHZENRVUZuUWl4RFFVRkRUeXhGUVVGcVJDeEZRVUZ4UkZBc1owSkJRV2RDTEVOQlFVTlJMRVZCUVhSRkxFVkJRVEJGVWl4blFrRkJaMElzUTBGQlExTXNSVUZCTTBZc1JVRkJLMFpVTEdkQ1FVRm5RaXhEUVVGRFZTeEZRVUZvU0N4RlFVRnZTRllzWjBKQlFXZENMRU5CUVVOb1JTeERRVUZ5U1N4RlFVRjNTV2RGTEdkQ1FVRm5RaXhEUVVGREwwUXNRMEZCZWtvN08wRkJRMEU3TzBGQlEwb3NaVUZCU3l4SFFVRk1PMEZCUTBrclJDeFpRVUZCUVN4blFrRkJaMElzUjBGQlIwTXNXVUZCYmtJN08wRkJRMEVzV1VGQlFTeE5RVUZKTEVOQlFVTm1MSE5DUVVGTUxFTkJRVFJDWXl4blFrRkJaMElzUTBGQlEwOHNSVUZCTjBNc1JVRkJhVVJRTEdkQ1FVRm5RaXhEUVVGRFVTeEZRVUZzUlN4RlFVRnpSVklzWjBKQlFXZENMRU5CUVVOb1JTeERRVUYyUml4RlFVRXdSbWRGTEdkQ1FVRm5RaXhEUVVGREwwUXNRMEZCTTBjN08wRkJRMEU3TzBGQlEwb3NaVUZCU3l4SFFVRk1PMEZCUTBrclJDeFpRVUZCUVN4blFrRkJaMElzUjBGQlIwTXNXVUZCYmtJN08wRkJRMEVzV1VGQlFTeE5RVUZKTEVOQlFVTlhMRGhDUVVGTUxFTkJRVzlEV2l4blFrRkJaMElzUTBGQlEwOHNSVUZCY2tRc1JVRkJlVVJRTEdkQ1FVRm5RaXhEUVVGRFVTeEZRVUV4UlN4RlFVRTRSVklzWjBKQlFXZENMRU5CUVVOb1JTeERRVUV2Uml4RlFVRnJSMmRGTEdkQ1FVRm5RaXhEUVVGREwwUXNRMEZCYmtnN08wRkJRMEU3TzBGQlEwb3NaVUZCU3l4SFFVRk1PMEZCUTBrclJDeFpRVUZCUVN4blFrRkJaMElzUjBGQlIwTXNXVUZCYmtJN08wRkJRMEVzV1VGQlFTeE5RVUZKTEVOQlFVTk1MRXRCUVV3c1EwRkJWMGtzWjBKQlFXZENMRU5CUVVOaUxFVkJRVFZDTEVWQlFXZERZU3huUWtGQlowSXNRMEZCUTFvc1JVRkJha1FzUlVGQmNVUlpMR2RDUVVGblFpeERRVUZEV0N4aFFVRjBSU3hGUVVGeFJpeERRVUZETEVOQlFVTlhMR2RDUVVGblFpeERRVUZEWVN4UlFVRjRSeXhGUVVGclNDeERRVUZETEVOQlFVTmlMR2RDUVVGblFpeERRVUZEWXl4TFFVRnlTU3hGUVVFMFNXUXNaMEpCUVdkQ0xFTkJRVU5vUlN4RFFVRTNTaXhGUVVGblMyZEZMR2RDUVVGblFpeERRVUZETDBRc1EwRkJha3c3TzBGQlEwRTdPMEZCUTBvc1pVRkJTeXhIUVVGTU8wRkJRMGtyUkN4WlFVRkJRU3huUWtGQlowSXNSMEZCUjBNc1dVRkJia0k3TzBGQlEwRXNXVUZCUVN4TlFVRkpMRU5CUVVOakxHRkJRVXdzUTBGQmJVSm1MR2RDUVVGblFpeERRVUZEWWl4RlFVRndReXhGUVVGM1EyRXNaMEpCUVdkQ0xFTkJRVU5hTEVWQlFYcEVMRVZCUVRaRVdTeG5Ra0ZCWjBJc1EwRkJRMWdzWVVGQk9VVXNSVUZCTmtZc1EwRkJReXhEUVVGRFZ5eG5Ra0ZCWjBJc1EwRkJRMkVzVVVGQmFFZ3NSVUZCTUVnc1EwRkJReXhEUVVGRFlpeG5Ra0ZCWjBJc1EwRkJRMk1zUzBGQk4wa3NSVUZCYjBwa0xHZENRVUZuUWl4RFFVRkRhRVVzUTBGQmNrc3NSVUZCZDB0blJTeG5Ra0ZCWjBJc1EwRkJReTlFTEVOQlFYcE1PenRCUVVOQk96dEJRVU5LTEdWQlFVc3NSMEZCVER0QlFVTkJMR1ZCUVVzc1IwRkJURHRCUVVOSkxGbEJRVUVzVFVGQlNTeERRVUZESzBVc1UwRkJURHM3UVVGRFFUczdRVUZEU2p0QlFVTkpReXhaUVVGQlFTeFBRVUZQTEVOQlFVTkRMRXRCUVZJc1EwRkJZMnBDTEZsQlFXUTdRVUZEUVN4clFrRkJUU3hKUVVGSmEwSXNTMEZCU2l4RFFVRlZMR2RFUVVGV0xFTkJRVTQ3UVVFNVJGSTdRVUZuUlVnc1QwRnFSVVE3UVVGclJVZzdPenMyUWtGRlpUTkVMRXNzUlVGQlpUdEJRVUZCT3p0QlFVTXpRanRCUVVOQk8wRkJSVUVzVlVGQlNTeERRVUZETkVRc1RVRkJUU3hEUVVGRFF5eFRRVUZRTEVOQlFXbENOMFFzUzBGQmFrSXNRMEZCVEN4RlFVRTRRanRCUVVNeFFpeGpRVUZOTEVsQlFVa3lSQ3hMUVVGS0xFTkJRVlVzTkVOQlFWWXNRMEZCVGp0QlFVTklPenRCUVVORUxGZEJRVXRITEU5QlFVdzdRVUZEUVN4VlFVRkpPVVFzUzBGQlN5eEpRVUZKTEVOQlFXSXNSVUZCWjBJN1FVRkRhRUlzVlVGQlRTdEVMRkZCUVdsQ0xFZEJRVWM3UVVGRGRFSTNSaXhSUVVGQlFTeERRVUZETEVWQlFVVXNTMEZCUzNkRExFbEJRVXdzUTBGQlZYaERMRU5CUkZNN1FVRkZkRUpETEZGQlFVRkJMRU5CUVVNc1JVRkJSU3hGUVVadFFqdEJRVWQwUWtNc1VVRkJRVUVzUTBGQlF5eEZRVUZGTEVWQlNHMUNPMEZCU1hSQ1F5eFJRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRktiVUlzVDBGQk1VSTdRVUZOUVN4WFFVRkxjVU1zU1VGQlRDeERRVUZWY2tNc1EwRkJWaXhEUVVGaGMwSXNUMEZCWWl4RFFVRnhRaXhWUVVGRGRFSXNRMEZCUkN4RlFVRkpSaXhEUVVGS0xFVkJRVTlwUWl4RFFVRlFMRVZCUVdFN1FVRkRPVUlzV1VGQlNXcENMRU5CUVVNc1NVRkJTU3hEUVVGVUxFVkJRVms3UVVGRFVqUkdMRlZCUVVGQkxGRkJRVkVzUTBGQlF6RkdMRU5CUVZRc1EwRkJXVGhDTEVsQlFWb3NRMEZCYVVJNVFpeERRVUZxUWp0QlFVTkJNRVlzVlVGQlFVRXNVVUZCVVN4RFFVRkROVVlzUTBGQlZDeERRVUZaWjBNc1NVRkJXaXhEUVVGcFFpeE5RVUZKTEVOQlFVTlBMRWxCUVV3c1EwRkJWWFpETEVOQlFWWXNRMEZCWVVFc1EwRkJZaXhEUVVGcVFqdEJRVU5CTzBGQlEwZzdPMEZCUTBRc1dVRkJUVFpHTEUxQlFVMHNSMEZCUnl4TlFVRkpMRU5CUVVOMFJDeEpRVUZNTEVOQlFWVjBReXhEUVVGNlFqdEJRVU5CTEZsQlFVMDJSaXhOUVVGTkxFZEJRVWNzVFVGQlNTeERRVUZEZGtRc1NVRkJUQ3hEUVVGVmRrTXNRMEZCZWtJN1FVRkRRU3haUVVGSkswWXNUVUZCVFN4SFFVRkhMRU5CUVVNNVJTeERRVUZETEVOQlFVTnFRaXhEUVVGRExFZEJRVWNzUTBGQlRDeERRVUZFTEVOQlFWTXNRMEZCVkN4RFFVRkVMRVZCUVdNMlJpeE5RVUZOTEVOQlFVTTNSaXhEUVVGRExFZEJRVWNzUTBGQlRDeERRVUZPTEVOQlFXTXNRMEZCWkN4SlFVRnRRbWxDTEVOQlFVTXNRMEZCUTJwQ0xFTkJRVU1zUjBGQlJ5eERRVUZNTEVOQlFVUXNRMEZCVXl4RFFVRlVMRU5CUVdwRExFVkJRVGhET0VZc1RVRkJUU3hEUVVGRE9VWXNRMEZCUkN4RFFVRk9MRU5CUVZVc1EwRkJWaXhKUVVGbFJTeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRTVSQ3hGUVVGdFJVRXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJjRVVzUTBGQllqdEJRVU5CTEZsQlFVazRSaXhOUVVGTkxFZEJRVWNzUTBGQlF5OUZMRU5CUVVNc1EwRkJRMnBDTEVOQlFVTXNSMEZCUnl4RFFVRk1MRU5CUVVRc1EwRkJVeXhEUVVGVUxFTkJRVVFzUlVGQll6WkdMRTFCUVUwc1EwRkJRemRHTEVOQlFVTXNSMEZCUnl4RFFVRk1MRU5CUVU0c1EwRkJZeXhEUVVGa0xFbEJRVzFDYVVJc1EwRkJReXhEUVVGRGFrSXNRMEZCUXl4SFFVRkhMRU5CUVV3c1EwRkJSQ3hEUVVGVExFTkJRVlFzUTBGQmFrTXNSVUZCT0VNNFJpeE5RVUZOTEVOQlFVTTVSaXhEUVVGRUxFTkJRVTRzUTBGQlZTeERRVUZXTEVsQlFXVkZMRU5CUVVNc1EwRkJReXhEUVVGRUxFTkJRVGxFTEVWQlFXMUZRU3hEUVVGRExFTkJRVU1zUTBGQlJDeERRVUZ3UlN4RFFVRmlPenRCUVVOQkxHRkJRVXNzU1VGQlNTdEdMRXRCUVVzc1IwRkJSeXhEUVVGcVFpeEZRVUZ2UWtFc1MwRkJTeXhIUVVGSGNFVXNTMEZCTlVJc1JVRkJiVU52UlN4TFFVRkxMRVZCUVhoRExFVkJRVFJETzBGQlEzaERMR05CUVUxRExGTkJRVk1zUjBGQlJ5eExRVUZMY2tVc1MwRkJTeXhIUVVGSGIwVXNTMEZCVWl4SFFVRm5RaXhEUVVGeVFpeERRVUZzUWpzN1FVRkRRU3hqUVVGTlJTeFhRVUZYTEVkQlFVY3NUVUZCU1N4RFFVRkRReXh2UWtGQlRDeFBRVUZCTEUxQlFVa3NSMEZCYzBKR0xGTkJRWFJDTERSQ1FVRnZRMGdzVFVGQmNFTXNSMEZCZUVJN08wRkJRMEVzWTBGQlRVMHNWMEZCVnl4SFFVRkhMRTFCUVVrc1EwRkJRMFFzYjBKQlFVd3NUMEZCUVN4TlFVRkpMRWRCUVhOQ1JpeFRRVUYwUWl3MFFrRkJiME5HTEUxQlFYQkRMRWRCUVhoQ096dEJRVU5CTEdOQlFVMU5MRWxCUVVjc1IwRkJSMUFzVFVGQlRTeERRVUZETEVOQlFVUXNRMEZCYkVJN1FVRkJRU3hqUVVGMVFsRXNTVUZCUnl4SFFVRkhTaXhYUVVGWExFTkJRVU5MTEV0QlFWb3NTMEZCZFVKR0xFbEJRWEJFTzBGQlFVRXNZMEZCZVVSSExFbEJRVWNzUjBGQlIwNHNWMEZCVnl4RFFVRkRMRU5CUVVRc1EwRkJNVVU3UVVGQlFTeGpRVUVyUlU4c1NVRkJSeXhIUVVGSFVDeFhRVUZYTEVOQlFVTkxMRXRCUVZvc1MwRkJkVUpETEVsQlFUVkhPMEZCUVVFc1kwRkRTVVVzU1VGQlJ5eEhRVUZIV0N4TlFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVSb1FqdEJRVUZCTEdOQlEzRkNXU3hKUVVGSExFZEJRVWRRTEZkQlFWY3NRMEZCUTBjc1MwRkJXaXhMUVVGMVFrY3NTVUZFYkVRN1FVRkJRU3hqUVVOMVJFVXNTVUZCUnl4SFFVRkhVaXhYUVVGWExFTkJRVU1zUTBGQlJDeERRVVI0UlR0QlFVRkJMR05CUXpaRlV5eEpRVUZITEVkQlFVZFVMRmRCUVZjc1EwRkJRMGNzUzBGQldpeExRVUYxUWtzc1NVRkVNVWM3TzBGQlJVRnFRaXhWUVVGQlFTeFJRVUZSTEVOQlFVTXpSaXhEUVVGVUxFTkJRVmtyUWl4SlFVRmFMRU5CUVdsQ0xFTkJRVU4xUlN4SlFVRkVMRVZCUVUxTExFbEJRVTRzUTBGQmFrSTdRVUZEUVdoQ0xGVkJRVUZCTEZGQlFWRXNRMEZCUXpWR0xFTkJRVlFzUTBGQldXZERMRWxCUVZvc1EwRkJhVUlzUTBGQlF6QkZMRWxCUVVRc1JVRkJUVWtzU1VGQlRpeERRVUZxUWp0QlFVTkJiRUlzVlVGQlFVRXNVVUZCVVN4RFFVRkRNVVlzUTBGQlZDeERRVUZaT0VJc1NVRkJXaXhEUVVGcFFpeERRVUZEZVVVc1NVRkJSQ3hGUVVGTlNTeEpRVUZPTEVOQlFXcENPMEZCUTBGa0xGVkJRVUZCTEUxQlFVMHNSMEZCUjBrc1YwRkJWRHRCUVVOQlNDeFZRVUZCUVN4TlFVRk5MRWRCUVVkTExGZEJRVlE3UVVGRFNEczdRVUZEUkN4WlFVRk5ReXhIUVVGSExFZEJRVWRRTEUxQlFVMHNRMEZCUTFNc1MwRkJVQ3hGUVVGYU8wRkJRVUVzV1VGQk5rSkVMRWRCUVVjc1IwRkJSMUlzVFVGQlRTeERRVUZEVXl4TFFVRlFMRXRCUVd0Q1JpeEhRVUZ5UkR0QlFVRkJMRmxCUVRCRVJ5eEhRVUZITEVkQlFVZFdMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRWFJGTzBGQlFVRXNXVUZCTWtWWExFZEJRVWNzUjBGQlIxZ3NUVUZCVFN4RFFVRkRVeXhMUVVGUUxFdEJRV3RDUXl4SFFVRnVSenRCUVVGQkxGbEJRMGxGTEVkQlFVY3NSMEZCUjFnc1RVRkJUU3hEUVVGRFVTeExRVUZRTEVWQlJGWTdRVUZCUVN4WlFVTXlRa2tzUjBGQlJ5eEhRVUZIV2l4TlFVRk5MRU5CUVVOUkxFdEJRVkFzUzBGQmEwSkhMRWRCUkc1RU8wRkJRVUVzV1VGRGQwUkZMRWRCUVVjc1IwRkJSMklzVFVGQlRTeERRVUZETEVOQlFVUXNRMEZFY0VVN1FVRkJRU3haUVVONVJXTXNSMEZCUnl4SFFVRkhaQ3hOUVVGTkxFTkJRVU5STEV0QlFWQXNTMEZCYTBKTExFZEJSR3BITzBGQlJVRnFRaXhSUVVGQlFTeFJRVUZSTEVOQlFVTXpSaXhEUVVGVUxFTkJRVmtyUWl4SlFVRmFMRU5CUVdsQ0xFTkJRVU4xUlN4SFFVRkVMRVZCUVUxTExFZEJRVTRzUTBGQmFrSTdRVUZEUVdoQ0xGRkJRVUZCTEZGQlFWRXNRMEZCUXpWR0xFTkJRVlFzUTBGQldXZERMRWxCUVZvc1EwRkJhVUlzUTBGQlF6QkZMRWRCUVVRc1JVRkJUVWtzUjBGQlRpeERRVUZxUWp0QlFVTkJiRUlzVVVGQlFVRXNVVUZCVVN4RFFVRkRNVVlzUTBGQlZDeERRVUZaT0VJc1NVRkJXaXhEUVVGcFFpeERRVUZEZVVVc1IwRkJSQ3hGUVVGTlNTeEhRVUZPTEVOQlFXcENPMEZCUTBnc1QwRXpRa1E3UVVFMFFrRXNWMEZCUzNSRkxFbEJRVXdzUjBGQldYRkVMRkZCUVZvN1FVRkRRU3hYUVVGTFJDeFBRVUZNTzBGQlEwZzdPenQzUWtGMlQydENaaXhGTEVWQlFWbERMRVVzUlVGQldYSkNMRVVzUlVGQldVTXNSU3hGUVVGWmMwUXNTeXhGUVVGbFF5eGpMRVZCUVhkQ1F5eFZMRVZCUVc5Q2JrTXNSU3hGUVVGWlF5eEZMRVZCUVZsdFF5eFRMRVZCUVRaRE8wRkJReTlNTzBGQlEwRTdRVUZEUVN4VlFVRkpReXhKUVVGSkxFZEJRVWQ2Unl4SlFVRkpMRU5CUVVNd1J5eEZRVUZNTEVkQlFWVXNSMEZCVml4SFFVRm5RaXhIUVVFelFqdEJRVUZCTEZWQlEwbERMRWRCUVVjc1IwRkJSek5ITEVsQlFVa3NRMEZCUXpCSExFVkJRVXdzUjBGQlZTeEhRVUZXTEVsQlFXbENMRU5CUVVOTUxFdEJRVVFzU1VGQlZTeERRVUV6UWl4RFFVUldPMEZCUVVFc1ZVRkZTVThzUjBGQllTeEhRVUZITEVWQlJuQkNPMEZCUVVFc1ZVRkhTVU1zUlVGSVNqdEJRVUZCTEZWQlNVbERMRTFCUVUwc1IwRkJSeXhUUVVGVVFTeE5RVUZUTEVOQlFVTnVTQ3hEUVVGRUxFVkJRVmxETEVOQlFWb3NSVUZCZFVJclJ5eEhRVUYyUWl4RlFVRjFRenRCUVVNMVF5eFpRVUZKU1N4RFFVRkRMRWRCUVVkd1NDeERRVUZETEVkQlFVZExMRWxCUVVrc1EwRkJRMmRJTEVkQlFVd3NRMEZCVTB3c1IwRkJWQ3hEUVVGS0xFZEJRVzlDTDBjc1EwRkJReXhIUVVGSFNTeEpRVUZKTEVOQlFVTnBTQ3hIUVVGTUxFTkJRVk5PTEVkQlFWUXNRMEZCYUVNN1FVRkJRU3haUVVOSlR5eERRVUZETEVkQlFVZDJTQ3hEUVVGRExFZEJRVWRMTEVsQlFVa3NRMEZCUTJsSUxFZEJRVXdzUTBGQlUwNHNSMEZCVkN4RFFVRktMRWRCUVc5Q0wwY3NRMEZCUXl4SFFVRkhTU3hKUVVGSkxFTkJRVU5uU0N4SFFVRk1MRU5CUVZOTUxFZEJRVlFzUTBGRWFFTTdRVUZGUVN4bFFVRlBPMEZCUVVWb1NDeFZRVUZCUVN4RFFVRkRMRVZCUVVWdlNDeERRVUZNTzBGQlFWRnVTQ3hWUVVGQlFTeERRVUZETEVWQlFVVnpTRHRCUVVGWUxGTkJRVkE3UVVGRFNDeFBRVkpNT3p0QlFWTkJMRlZCUVVrc1EwRkJRM0JGTEVWQlFVUXNTVUZCVHl4RFFVRkRReXhGUVVGYUxFVkJRV2RDTzBGQlExb3NaVUZCVHl4RFFVRkRiVUlzUlVGQlJDeEZRVUZMUXl4RlFVRk1MRVZCUVZORExFVkJRVlFzUlVGQllVTXNSVUZCWWl4RlFVRnBRa1FzUlVGQmFrSXNSVUZCY1VKRExFVkJRWEpDTEVOQlFWQTdRVUZEU0RzN1FVRkRSQ3hWUVVGSkxFTkJRVU50UXl4VFFVRk1MRVZCUVdkQ08wRkJRMXBMTEZGQlFVRkJMRVZCUVVVc1IwRkJSME1zVFVGQlRTeERRVUZETlVNc1JVRkJSQ3hGUVVGTFF5eEZRVUZNTEVWQlFWTXNRMEZCUTNkRExFZEJRVllzUTBGQldEdEJRVU5CZWtNc1VVRkJRVUVzUlVGQlJTeEhRVUZITWtNc1JVRkJSU3hEUVVGRGJFZ3NRMEZCVWp0QlFVTkJkMFVzVVVGQlFVRXNSVUZCUlN4SFFVRkhNRU1zUlVGQlJTeERRVUZEYWtnc1EwRkJVanRCUVVOQmFVZ3NVVUZCUVVFc1JVRkJSU3hIUVVGSFF5eE5RVUZOTEVOQlFVTXhReXhGUVVGRUxFVkJRVXRETEVWQlFVd3NSVUZCVXl4RFFVRkRjME1zUjBGQlZpeERRVUZZTzBGQlEwRjJReXhSUVVGQlFTeEZRVUZGTEVkQlFVZDVReXhGUVVGRkxFTkJRVU5zU0N4RFFVRlNPMEZCUTBFd1JTeFJRVUZCUVN4RlFVRkZMRWRCUVVkM1F5eEZRVUZGTEVOQlFVTnFTQ3hEUVVGU08wRkJRMEVzV1VGQlNXOUlMRWRCUVVjc1IwRkJSMmhJTEVsQlFVa3NRMEZCUTJkSUxFZEJRVXdzUTBGQlUyaElMRWxCUVVrc1EwRkJRekJITEVWQlFVd3NSMEZCVlN4SFFVRldMRWRCUVdkQ1RDeExRVUY2UWl4RFFVRldPMEZCUVVFc1dVRkRTVmtzUjBGQlJ5eEhRVUZIYWtnc1NVRkJTU3hEUVVGRGFVZ3NSMEZCVEN4RFFVRlRha2dzU1VGQlNTeERRVUZETUVjc1JVRkJUQ3hIUVVGVkxFZEJRVllzUjBGQlowSk1MRXRCUVhwQ0xFTkJSRlk3UVVGQlFTeFpRVVZKTVVjc1EwRkJReXhIUVVGSExFTkJRVU4xUlN4RlFVRkZMRWRCUVVkRkxFVkJRVTRzU1VGQldTeERRVVp3UWp0QlFVRkJMRmxCUjBsNFJTeERRVUZETEVkQlFVY3NRMEZCUTNWRkxFVkJRVVVzUjBGQlIwVXNSVUZCVGl4SlFVRlpMRU5CU0hCQ08wRkJTVUVzV1VGQlNUaERMRU5CUVVNc1IwRkJSM2hJTEVOQlFVTXNSMEZCUjBFc1EwRkJTaXhKUVVGVGJVUXNSVUZCUlN4SFFVRkhRU3hGUVVGa0xFbEJRVzlDYkVRc1EwRkJReXhIUVVGSFFTeERRVUZLTEVsQlFWTnRSQ3hGUVVGRkxFZEJRVWRCTEVWQlFXUXNRMEZCTlVJN08wRkJRMEVzV1VGQlNXOUZMRU5CUVVNc1IwRkJSeXhEUVVGU0xFVkJRVmM3UVVGRFVFRXNWVUZCUVVFc1EwRkJReXhIUVVGSGJrZ3NTVUZCU1N4RFFVRkRWU3hKUVVGTUxFTkJRVlY1Unl4RFFVRldMRU5CUVVvN1FVRkRRWEpGTEZWQlFVRkJMRVZCUVVVc1IwRkJSM0ZGTEVOQlFVTXNSMEZCUjNKRkxFVkJRVlE3UVVGRFFVTXNWVUZCUVVFc1JVRkJSU3hIUVVGSGIwVXNRMEZCUXl4SFFVRkhjRVVzUlVGQlZEdEJRVU5JT3p0QlFVTkVMRmxCUVVseFJTeEhRVUZITEVkQlFVZDBSU3hGUVVGRkxFZEJRVWRCTEVWQlFXWTdRVUZCUVN4WlFVTkpkVVVzUjBGQlJ5eEhRVUZIZEVVc1JVRkJSU3hIUVVGSFFTeEZRVVJtTzBGQlFVRXNXVUZGU1hWRkxFTkJRVU1zUjBGQlJ5eERRVUZEYUVJc1kwRkJZeXhKUVVGSlF5eFZRVUZzUWl4SFFVRXJRaXhEUVVGRExFTkJRV2hETEVkQlFXOURMRU5CUVhKRExFbEJRMEYyUnl4SlFVRkpMRU5CUVVOVkxFbEJRVXdzUTBGQlZWWXNTVUZCU1N4RFFVRkRkVWdzUjBGQlRDeERRVUZUTEVOQlFVTklMRWRCUVVjc1IwRkJSME1zUjBGQlRpeEhRVUZaUkN4SFFVRkhMRWRCUVVkNFNDeERRVUZPTEVkQlFWVkJMRU5CUVhSQ0xFZEJRVEJDZVVnc1IwRkJSeXhIUVVGSE1VZ3NRMEZCVGl4SFFVRlZRU3hEUVVGeVF5eExRVUV5UTNsSUxFZEJRVWNzUjBGQlIzaElMRU5CUVU0c1IwRkJWVUVzUTBGQlZpeEhRVUZqZVVnc1IwRkJSeXhIUVVGSE1VZ3NRMEZCVGl4SFFVRlZRU3hEUVVGdVJTeERRVUZVTEVOQlFWWXNRMEZJVWp0QlFVRkJMRmxCU1VsblJDeEZRVUZGTEVkQlFVY3lSU3hEUVVGRExFZEJRVWQ0UlN4RlFVRktMRWRCUVZOc1JDeERRVUZVTEVkQlFXRnRSQ3hGUVVGaUxFZEJRV3RDTEVOQlFVTnRRaXhGUVVGRkxFZEJRVWRGTEVWQlFVNHNTVUZCV1N4RFFVcDJRenRCUVVGQkxGbEJTMGw0UWl4RlFVRkZMRWRCUVVjd1JTeERRVUZETEVkQlFVY3NRMEZCUTNaRkxFVkJRVXdzUjBGQlZYQkVMRU5CUVZZc1IwRkJZMjFFTEVWQlFXUXNSMEZCYlVJc1EwRkJRM0ZDTEVWQlFVVXNSMEZCUjBVc1JVRkJUaXhKUVVGWkxFTkJUSGhETzBGQlFVRXNXVUZOU1cxRUxFVkJRVVVzUjBGQlIzaElMRWxCUVVrc1EwRkJRM2xJTEVsQlFVd3NRMEZCVlN4RFFVRkRkRVFzUlVGQlJTeEhRVUZIZGtJc1JVRkJUaXhKUVVGWlJ5eEZRVUYwUWl4RFFVNVVPMEZCUVVFc1dVRlBTVEpGTEVWQlFVVXNSMEZCUnpGSUxFbEJRVWtzUTBGQlEzbElMRWxCUVV3c1EwRkJWU3hEUVVGRGNFUXNSVUZCUlN4SFFVRkhla0lzUlVGQlRpeEpRVUZaUnl4RlFVRjBRaXhEUVZCVU8wRkJVMEY1UlN4UlFVRkJRU3hGUVVGRkxFZEJRVWQwUkN4RlFVRkZMRWRCUVVkMlFpeEZRVUZNTEVkQlFWVXpReXhKUVVGSkxFTkJRVU13Unl4RlFVRk1MRWRCUVZWakxFVkJRWEJDTEVkQlFYbENRU3hGUVVFNVFqdEJRVU5CUlN4UlFVRkJRU3hGUVVGRkxFZEJRVWQwUkN4RlFVRkZMRWRCUVVkNlFpeEZRVUZNTEVkQlFWVXpReXhKUVVGSkxFTkJRVU13Unl4RlFVRk1MRWRCUVZWblFpeEZRVUZ3UWl4SFFVRjVRa0VzUlVGQk9VSTdRVUZEUVVZc1VVRkJRVUVzUlVGQlJTeEhRVUZITEVOQlFVd3NTMEZCVjBFc1JVRkJSU3hIUVVGSGVFZ3NTVUZCU1N4RFFVRkRNRWNzUlVGQlRDeEhRVUZWTEVOQlFWWXNSMEZCWTJNc1JVRkJPVUk3UVVGRFFVVXNVVUZCUVVFc1JVRkJSU3hIUVVGSExFTkJRVXdzUzBGQlYwRXNSVUZCUlN4SFFVRkhNVWdzU1VGQlNTeERRVUZETUVjc1JVRkJUQ3hIUVVGVkxFTkJRVllzUjBGQlkyZENMRVZCUVRsQ096dEJRVU5CTEZsQlFVbHVRaXhWUVVGVkxFbEJRVWxwUWl4RlFVRkZMRWRCUVVkRkxFVkJRWFpDTEVWQlFUSkNPMEZCUTNaQ1JpeFZRVUZCUVN4RlFVRkZMRWRCUVVkQkxFVkJRVVVzUjBGQlIzaElMRWxCUVVrc1EwRkJRekJITEVWQlFVd3NSMEZCVlN4RFFVRndRanRCUVVOSU96dEJRVU5FTEZsQlFVa3NRMEZCUTBnc1ZVRkJSQ3hKUVVGbGJVSXNSVUZCUlN4SFFVRkhSaXhGUVVGNFFpeEZRVUUwUWp0QlFVTjRRa1VzVlVGQlFVRXNSVUZCUlN4SFFVRkhRU3hGUVVGRkxFZEJRVWN4U0N4SlFVRkpMRU5CUVVNd1J5eEZRVUZNTEVkQlFWVXNRMEZCY0VJN1FVRkRTRHRCUVVOS0xFOUJjRU5FTEUxQmIwTlBPMEZCUTBoakxGRkJRVUZCTEVWQlFVVXNSMEZCUjJoQ0xGTkJRVk1zUTBGQlF5eERRVUZFTEVOQlFXUTdRVUZEUVd0Q0xGRkJRVUZCTEVWQlFVVXNSMEZCUjJ4Q0xGTkJRVk1zUTBGQlF5eERRVUZFTEVOQlFXUTdRVUZEUVRkRUxGRkJRVUZCTEVWQlFVVXNSMEZCUnpaRUxGTkJRVk1zUTBGQlF5eERRVUZFTEVOQlFXUTdRVUZEUVRWRUxGRkJRVUZCTEVWQlFVVXNSMEZCUnpSRUxGTkJRVk1zUTBGQlF5eERRVUZFTEVOQlFXUTdRVUZEU0RzN1FVRkRSQ3hWUVVGSmJVSXNSVUZCUlN4SFFVRkhSQ3hGUVVGRkxFZEJRVWRHTEVWQlFXUTdPMEZCUTBFc1ZVRkJTWGhJTEVsQlFVa3NRMEZCUTNWSUxFZEJRVXdzUTBGQlUwa3NSVUZCVkN4SlFVRmxiRUlzU1VGQmJrSXNSVUZCZVVJN1FVRkRja0lzV1VGQlNXMUNMRXRCUVVzc1IwRkJSMFlzUlVGQldqdEJRVUZCTEZsQlEwbEhMRXRCUVVzc1IwRkJSM3BFTEVWQlJGbzdRVUZCUVN4WlFVVkpNRVFzUzBGQlN5eEhRVUZIZWtRc1JVRkdXanRCUVVkQmNVUXNVVUZCUVVFc1JVRkJSU3hIUVVGSFJpeEZRVUZGTEVkQlFVZG1MRWxCUVVrc1NVRkJTVVlzVlVGQlZTeEpRVUZKYlVJc1JVRkJSU3hIUVVGSFJpeEZRVUZ1UWl4SFFVRjNRaXhEUVVGNFFpeEhRVUUwUWl4RFFVRkRMRU5CUVdwRExFTkJRV1E3UVVGRFFYQkVMRkZCUVVGQkxFVkJRVVVzUjBGQlIzcENMRVZCUVVVc1IwRkJSMGNzUlVGQlJTeEhRVUZIT1VNc1NVRkJTU3hEUVVGRFowZ3NSMEZCVEN4RFFVRlRWU3hGUVVGVUxFTkJRV1k3UVVGRFFYSkVMRkZCUVVGQkxFVkJRVVVzUjBGQlIzcENMRVZCUVVVc1IwRkJSMGNzUlVGQlJTeEhRVUZITDBNc1NVRkJTU3hEUVVGRGFVZ3NSMEZCVEN4RFFVRlRVeXhGUVVGVUxFTkJRV1k3UVVGRFFXUXNVVUZCUVVFc1IwRkJSeXhIUVVGSExFdEJRVXQ0UkN4SFFVRk1MRU5CUVZOblFpeEZRVUZVTEVWQlFXRkRMRVZCUVdJc1JVRkJhVUoyUWl4RlFVRnFRaXhGUVVGeFFrTXNSVUZCY2tJc1JVRkJlVUp6UkN4TFFVRjZRaXhGUVVGblF5eERRVUZvUXl4RlFVRnRRMFVzVlVGQmJrTXNSVUZCSzBOelFpeExRVUV2UXl4RlFVRnpSRU1zUzBGQmRFUXNSVUZCTmtRc1EwRkJRMG9zUlVGQlJDeEZRVUZMUlN4TFFVRk1MRVZCUVZscVJpeEZRVUZhTEVWQlFXZENReXhGUVVGb1FpeERRVUUzUkN4RFFVRk9PMEZCUTBnN08wRkJRMFFyUlN4TlFVRkJRU3hGUVVGRkxFZEJRVWRFTEVWQlFVVXNSMEZCUjBZc1JVRkJWanRCUVVOQkxGVkJRVWxQTEVWQlFVVXNSMEZCUnk5SUxFbEJRVWtzUTBGQlEyZElMRWRCUVV3c1EwRkJVMUVzUlVGQlZDeERRVUZVTzBGQlFVRXNWVUZEU1ZFc1JVRkJSU3hIUVVGSGFFa3NTVUZCU1N4RFFVRkRhVWdzUjBGQlRDeERRVUZUVHl4RlFVRlVMRU5CUkZRN1FVRkJRU3hWUVVWSlV5eEZRVUZGTEVkQlFVZHFTU3hKUVVGSkxFTkJRVU5uU0N4SFFVRk1MRU5CUVZOVkxFVkJRVlFzUTBGR1ZEdEJRVUZCTEZWQlIwbFJMRVZCUVVVc1IwRkJSMnhKTEVsQlFVa3NRMEZCUTJsSUxFZEJRVXdzUTBGQlUxTXNSVUZCVkN4RFFVaFVPMEZCUVVFc1ZVRkpTVk1zUTBGQlF5eEhRVUZIYmtrc1NVRkJTU3hEUVVGRGIwa3NSMEZCVEN4RFFVRlRWQ3hGUVVGRkxFZEJRVWNzUTBGQlpDeERRVXBTTzBGQlFVRXNWVUZMU1ZVc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlNpeEhRVUZSZGtZc1JVRkJVaXhIUVVGaGNVWXNRMEZNZEVJN1FVRkJRU3hWUVUxSlJ5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRktMRWRCUVZGMlJpeEZRVUZTTEVkQlFXRnZSaXhEUVU1MFFqdEJRVUZCTEZWQlQwbEpMRVZCUVVVc1IwRkJSeXhEUVVGRGNrVXNSVUZCUkN4RlFVRkxReXhGUVVGTUxFTkJVRlE3UVVGQlFTeFZRVkZKY1VVc1JVRkJSU3hIUVVGSExFTkJRVU4wUlN4RlFVRkZMRWRCUVVkdFJTeEZRVUZGTEVkQlFVZE1MRVZCUVZnc1JVRkJaVGRFTEVWQlFVVXNSMEZCUjIxRkxFVkJRVVVzUjBGQlIxQXNSVUZCZWtJc1EwRlNWRHRCUVVGQkxGVkJVMGxWTEVWQlFVVXNSMEZCUnl4RFFVRkRja1VzUlVGQlJTeEhRVUZIYVVVc1JVRkJSU3hIUVVGSFNDeEZRVUZZTEVWQlFXVTNSQ3hGUVVGRkxFZEJRVWRwUlN4RlFVRkZMRWRCUVVkTUxFVkJRWHBDTEVOQlZGUTdRVUZCUVN4VlFWVkpVeXhGUVVGRkxFZEJRVWNzUTBGQlEzUkZMRVZCUVVRc1JVRkJTME1zUlVGQlRDeERRVlpVTzBGQlYwRnRSU3hOUVVGQlFTeEZRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRkdMRWRCUVZFc1NVRkJTVVFzUlVGQlJTeERRVUZETEVOQlFVUXNRMEZCVGl4SFFVRlpReXhGUVVGRkxFTkJRVU1zUTBGQlJDeERRVUYwUWp0QlFVTkJRU3hOUVVGQlFTeEZRVUZGTEVOQlFVTXNRMEZCUkN4RFFVRkdMRWRCUVZFc1NVRkJTVVFzUlVGQlJTeERRVUZETEVOQlFVUXNRMEZCVGl4SFFVRlpReXhGUVVGRkxFTkJRVU1zUTBGQlJDeERRVUYwUWpzN1FVRkRRU3hWUVVGSmFFTXNVMEZCU2l4RlFVRmxPMEZCUTFnc1pVRkJUeXhEUVVGRFowTXNSVUZCUkN4RlFVRkxReXhGUVVGTUxFVkJRVk5ETEVWQlFWUXNSVUZCWVVNc1RVRkJZaXhEUVVGdlFpOUNMRWRCUVhCQ0xFTkJRVkE3UVVGRFNDeFBRVVpFTEUxQlJVODdRVUZEU0VFc1VVRkJRVUVzUjBGQlJ5eEhRVUZITEVOQlFVTTBRaXhGUVVGRUxFVkJRVXRETEVWQlFVd3NSVUZCVTBNc1JVRkJWQ3hGUVVGaFF5eE5RVUZpTEVOQlFXOUNMMElzUjBGQmNFSXNSVUZCZVVKblF5eEpRVUY2UWl4SFFVRm5RME1zUzBGQmFFTXNRMEZCYzBNc1IwRkJkRU1zUlVGQk1rTnFTU3hIUVVFelF5eERRVUVyUXl4VlFVRkJha0lzUTBGQlF6dEJRVUZCTEdsQ1FVRkpiVW9zVlVGQlZTeERRVUZEYmtvc1EwRkJSQ3hEUVVGa08wRkJRVUVzVTBGQmFFUXNRMEZCVGp0QlFVTkJMRmxCUVVsdlNpeE5RVUZOTEVkQlFVY3NSVUZCWWpzN1FVRkRRU3hoUVVGTExFbEJRVWw2U2l4RFFVRkRMRWRCUVVjc1EwRkJVaXhGUVVGWE1Fb3NSVUZCUlN4SFFVRkhjRU1zUjBGQlJ5eERRVUZEZGtZc1RVRkJla0lzUlVGQmFVTXZRaXhEUVVGRExFZEJRVWN3U2l4RlFVRnlReXhGUVVGNVF6RktMRU5CUVVNc1JVRkJNVU1zUlVGQk9FTTdRVUZETVVONVNpeFZRVUZCUVN4TlFVRk5MRU5CUVVONlNpeERRVUZFTEVOQlFVNHNSMEZCV1VFc1EwRkJReXhIUVVGSExFTkJRVW9zUjBGQlVYZElMRTFCUVUwc1EwRkJRMFlzUjBGQlJ5eERRVUZEZEVnc1EwRkJReXhIUVVGSExFTkJRVXdzUTBGQlNpeEZRVUZoYzBnc1IwRkJSeXhEUVVGRGRFZ3NRMEZCUkN4RFFVRm9RaXhGUVVGeFFuRklMRWRCUVhKQ0xFTkJRVTRzUTBGQlowTXZSeXhEUVVGNFF5eEhRVUUwUTJ0SUxFMUJRVTBzUTBGQlEwWXNSMEZCUnl4RFFVRkRkRWdzUTBGQlJDeERRVUZLTEVWQlFWTnpTQ3hIUVVGSExFTkJRVU4wU0N4RFFVRkRMRWRCUVVjc1EwRkJUQ3hEUVVGYUxFVkJRWEZDY1Vnc1IwRkJja0lzUTBGQlRpeERRVUZuUTJoSUxFTkJRWGhHTzBGQlEwZzdPMEZCUTBRc1pVRkJUMjlLTEUxQlFWQTdRVUZEU0R0QlFVTktJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHNnVUdGMGFFUmxaaUI5SUdaeWIyMGdKeTR2WVc1cGJXRjBhVzl1SjF4dWFXMXdiM0owSUhzZ2NHRnljMlZUVmtjc0lFMXZkbVZVYjBOdmJXMWhibVFzSUV4cGJtVlViME52YlcxaGJtUXNJRWh2Y21sNmIyNTBZV3hNYVc1bFZHOURiMjF0WVc1a0xDQldaWEowYVdOaGJFeHBibVZVYjBOdmJXMWhibVFzSUVOMWNuWmxWRzlEYjIxdFlXNWtMQ0JSZFdGa2NtRjBhV05EZFhKMlpWUnZRMjl0YldGdVpDd2dSV3hzYVhCMGFXTmhiRUZ5WTBOdmJXMWhibVFnZlNCbWNtOXRJQ2R6ZG1jdGNHRjBhQzF3WVhKelpYSW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVR0YwYUUxaGEyVnlJSHRjYmlBZ0lDQndkV0pzYVdNZ2NHRjBhRG9nVUdGMGFFUmxaaUE5SUh0Y2JpQWdJQ0FnSUNBZ1l6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lHazZJRnRkTEZ4dUlDQWdJQ0FnSUNCdk9pQmJYU3hjYmlBZ0lDQWdJQ0FnZGpvZ1cxMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NISnBkbUYwWlNCamRYSnlaVzUwV0RvZ2JuVnRZbVZ5SUQwZ01EdGNiaUFnSUNCd2NtbDJZWFJsSUdOMWNuSmxiblJaT2lCdWRXMWlaWElnUFNBd08xeHVJQ0FnSUhCeWFYWmhkR1VnYjJabWMyVjBXRG9nYm5WdFltVnlJRDBnU1c1bWFXNXBkSGs3WEc0Z0lDQWdjSEpwZG1GMFpTQnZabVp6WlhSWk9pQnVkVzFpWlhJZ1BTQkpibVpwYm1sMGVUdGNibHh1SUNBZ0lDOHZJR1p2Y2lCa2FYTmpiMjUwYVc1MWIzVnpJSEJoZEdoelhHNGdJQ0FnY0hKcGRtRjBaU0J3WVhSb1VtVmhaSGtnUFNCbVlXeHpaVnh1SUNBZ0lIQnlhWFpoZEdVZ2NHRjBhRk4wWVhKME9pQmJiblZ0WW1WeUxDQnVkVzFpWlhKZElEMGdXekFzSURCZFhHNGdJQ0FnY0hKcGRtRjBaU0J3WVhSb1EyaGhhVzQ2SUZ0dWRXMWlaWElzSUc1MWJXSmxjbDFiWFNBOUlGdGRYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh3WVhSb1JHRjBZVDg2SUhOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9jR0YwYUVSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dGeWMyVW9jR0YwYUVSaGRHRXBYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQndjbWwyWVhSbElIVndaR0YwWlZoWktIZzZJRzUxYldKbGNpd2dlVG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRGZ2dQU0I0WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRGa2dQU0I1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMlptYzJWMFdDQTlJRTFoZEdndWJXbHVLSFJvYVhNdWIyWm1jMlYwV0N3Z2VDbGNiaUFnSUNBZ0lDQWdkR2hwY3k1dlptWnpaWFJaSUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTV2Wm1aelpYUlpMQ0I1S1Z4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YVhaaGRHVWdZMkZzWTNWc1lYUmxRbVY2YVdWeVRXbHVUV0Y0S0hBd09pQnVkVzFpWlhJc0lIQXhPaUJ1ZFcxaVpYSXNJSEF5T2lCdWRXMWlaWElzSUhBek9pQnVkVzFpWlhJcE9pQmJiblZ0WW1WeUxDQnVkVzFpWlhKZElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1lTQTlJRE1nS2lBb2NETWdMU0F6SUNvZ2NESWdLeUF6SUNvZ2NERWdMU0J3TUNsY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWWlBOUlEWWdLaUFvY0RJZ0xTQXlJQ29nY0RFZ0t5QndNQ2xjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZeUE5SURNZ0tpQW9jREVnTFNCd01DbGNiaUFnSUNBZ0lDQWdiR1YwSUcxcGJpQTlJRWx1Wm1sdWFYUjVMQ0J0WVhnZ1BTQXRTVzVtYVc1cGRIbGNiaUFnSUNBZ0lDQWdhV1lnS0dJZ0tpQmlJQzBnTkNBcUlHRWdLaUJqSUQ0OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOeGNuUWdQU0JOWVhSb0xuTnhjblFvWWlBcUlHSWdMU0EwSUNvZ1lTQXFJR01wWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCeWIyOTBjeUE5SUZzeExDQXRNVjB1YldGd0tHMTFiSFJwSUQwK0lDaHRkV3gwYVNBcUlITnhjblFnTFNCaUtTQXZJRElnTHlCaEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY205dmRITXVabTl5UldGamFDaHliMjkwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY205dmRDQStJREFnSmlZZ2NtOXZkQ0E4SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdVZ1BTQk5ZWFJvTG5CdmR5Z3hJQzBnY205dmRDd2dNeWtnS2lCd01DQXJJRE1nS2lCTllYUm9MbkJ2ZHlneElDMGdjbTl2ZEN3Z01pa2dLaUJ5YjI5MElDb2djREVnS3lBeklDb2dLREVnTFNCeWIyOTBLU0FxSUhKdmIzUWdLaUJ5YjI5MElDb2djRElnS3lCTllYUm9MbkJ2ZHloeWIyOTBMQ0F6S1NBcUlIQXpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGJpQTlJRTFoZEdndWJXbHVLRzFwYml3Z2RtRnNkV1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlQ0E5SUUxaGRHZ3ViV0Y0S0cxaGVDd2dkbUZzZFdVcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnRhVzRnUFNCTllYUm9MbTFwYmlodGFXNHNJSEF3TENCd015bGNiaUFnSUNBZ0lDQWdiV0Y0SUQwZ1RXRjBhQzV0WVhnb2JXRjRMQ0J3TUN3Z2NETXBYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJiV2x1TENCdFlYaGRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NISnBkbUYwWlNCallXeGpkV3hoZEdWSWFXZG9iSGxQY21SbGNpaGhjbkk2SUc1MWJXSmxjbHRkTENCeVlYUnBiem9nYm5WdFltVnlLVG9nYm5WdFltVnlXMTBnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ6ZFd4ME9pQnVkVzFpWlhKYlhTQTlJRnRkWEc0Z0lDQWdJQ0FnSUdGeWNpNW1iM0pGWVdOb0tDaDJMQ0JwTENCaEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBK1BTQmhMbXhsYm1kMGFDQXRJREVwSUhKbGRIVnlibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG5CMWMyZ29kaUFxSUNneElDMGdjbUYwYVc4cElDc2dZVnRwSUNzZ01WMGdLaUJ5WVhScGJ5bGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2RGeHVJQ0FnSUgxY2JseHVJQ0FnSUhCeWFYWmhkR1VnWTJGc1kzVnNZWFJsUW1WNmFXVnlVM0JzYVhRb2NtRjBhVzg2SUc1MWJXSmxjaXdnTGk0dWIzSmtaWEl3T2lCdWRXMWlaWEpiWFNrNklHNTFiV0psY2x0ZElIdGNiaUFnSUNBZ0lDQWdiR1YwSUc5eVpHVnlNU0E5SUhSb2FYTXVZMkZzWTNWc1lYUmxTR2xuYUd4NVQzSmtaWElvYjNKa1pYSXdMQ0J5WVhScGJ5bGNiaUFnSUNBZ0lDQWdiR1YwSUc5eVpHVnlNaUE5SUhSb2FYTXVZMkZzWTNWc1lYUmxTR2xuYUd4NVQzSmtaWElvYjNKa1pYSXhMQ0J5WVhScGJ5bGNiaUFnSUNBZ0lDQWdiR1YwSUc5eVpHVnlNeUE5SUhSb2FYTXVZMkZzWTNWc1lYUmxTR2xuYUd4NVQzSmtaWElvYjNKa1pYSXlMQ0J5WVhScGJ5bGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdHZjbVJsY2pGYk1GMHNJRzl5WkdWeU1sc3dYU3dnYjNKa1pYSXpXekJkTENCdmNtUmxjakpiTVYwc0lHOXlaR1Z5TVZzeVhTd2diM0prWlhJd1d6TmRYVnh1SUNBZ0lIMWNibHh1SUNBZ0lIQjFZbXhwWXlCdGIzWmxWRzhvZURvZ2JuVnRZbVZ5TENCNU9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbkJoZEdoU1pXRmtlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1lYUm9MbU1nUFNCbVlXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xta2dQU0JiV3pBc0lEQmRYVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xtOGdQU0JiWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1lYUm9MbllnUFNCYlczZ3NJSGxkWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amRYSnlaVzUwV0NBOUlIaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRGa2dQU0I1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05bVpuTmxkRmdnUFNCNFhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOW1abk5sZEZrZ1BTQjVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJoZEdoU1pXRmtlU0E5SUhSeWRXVmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViR2x1WlZSdktDNHVMblJvYVhNdWNHRjBhRk4wWVhKMEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNhVzVsVkc4b2VDd2dlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dGMGFFTm9ZV2x1TG5CMWMyZ29kR2hwY3k1d1lYUm9VM1JoY25RcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lYUm9VM1JoY25RZ1BTQmJlQ3dnZVYxY2JpQWdJQ0I5WEc0Z0lDQWdjSFZpYkdsaklHMXZkbVZVYjFKbGJHRjBhWFpsS0hnNklHNTFiV0psY2l3Z2VUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXOTJaVlJ2S0hSb2FYTXVZM1Z5Y21WdWRGZ2dLeUI0TENCMGFHbHpMbU4xY25KbGJuUlpJQ3NnZVNsY2JpQWdJQ0I5WEc0Z0lDQWdjSFZpYkdsaklHeHBibVZVYnloNE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmhkR2d1YVNFdWNIVnphQ2hiTUN3Z01GMHBYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHRjBhQzV2SVM1d2RYTm9LRnN3TENBd1hTbGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lYUm9MblloTG5CMWMyZ29XM2dzSUhsZEtWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVmhaS0hnc0lIa3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUJzYVc1bFZHOVNaV3hoZEdsMlpTaDRPaUJ1ZFcxaVpYSXNJSGs2SUc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbXhwYm1WVWJ5aDBhR2x6TG1OMWNuSmxiblJZSUNzZ2VDd2dkR2hwY3k1amRYSnlaVzUwV1NBcklIa3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUJvYjNKcGVtOXVkR0ZzVkc4b2VEb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHbHVaVlJ2S0hnc0lIUm9hWE11WTNWeWNtVnVkRmtwWEc0Z0lDQWdmVnh1SUNBZ0lIQjFZbXhwWXlCb2IzSnBlbTl1ZEdGc1ZHOVNaV3hoZEdsMlpTaDRPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW9iM0pwZW05dWRHRnNWRzhvZEdocGN5NWpkWEp5Wlc1MFdDQXJJSGdwWEc0Z0lDQWdmVnh1SUNBZ0lIQjFZbXhwWXlCMlpYSjBhV05oYkZSdktIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxteHBibVZVYnloMGFHbHpMbU4xY25KbGJuUllMQ0I1S1Z4dUlDQWdJSDFjYmlBZ0lDQndkV0pzYVdNZ2RtVnlkR2xqWVd4VWIxSmxiR0YwYVhabEtIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWmxjblJwWTJGc1ZHOG9kR2hwY3k1amRYSnlaVzUwV1NBcklIa3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCMVlteHBZeUJqZFdKcFkwSmxlbWxsY2tOMWNuWmxWRzhvWEc0Z0lDQWdJQ0FnSUdNeGVEb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQmpNWGs2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnWXpKNE9pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lHTXllVG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0I0T2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUhrNklHNTFiV0psY2x4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWFTRXVjSFZ6YUNoYll6SjRJQzBnZUN3Z1l6SjVJQzBnZVYwcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGMGFDNXZJUzV3ZFhOb0tGdGpNWGdnTFNCMGFHbHpMbU4xY25KbGJuUllMQ0JqTVhrZ0xTQjBhR2x6TG1OMWNuSmxiblJaWFNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WVhSb0xuWWhMbkIxYzJnb1czZ3NJSGxkS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbTltWm5ObGRGZ2dQU0JOWVhSb0xtMXBiaWgwYUdsekxtOW1abk5sZEZnc0lDNHVMblJvYVhNdVkyRnNZM1ZzWVhSbFFtVjZhV1Z5VFdsdVRXRjRLSFJvYVhNdVkzVnljbVZ1ZEZnc0lHTXhlQ3dnWXpKNExDQjRLU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXZabVp6WlhSWklEMGdUV0YwYUM1dGFXNG9kR2hwY3k1dlptWnpaWFJaTENBdUxpNTBhR2x6TG1OaGJHTjFiR0YwWlVKbGVtbGxjazFwYmsxaGVDaDBhR2x6TG1OMWNuSmxiblJaTENCak1Ya3NJR015ZVN3Z2VTa3BYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsV0Zrb2VDd2dlU2xjYmlBZ0lDQjlYRzRnSUNBZ2NIVmliR2xqSUdOMVltbGpRbVY2YVdWeVEzVnlkbVZVYjFKbGJHRjBhWFpsS0Z4dUlDQWdJQ0FnSUNCak1YZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdZekY1T2lCdWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUdNeWVEb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQmpNbms2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCNU9pQnVkVzFpWlhKY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqZFdKcFkwSmxlbWxsY2tOMWNuWmxWRzhvZEdocGN5NWpkWEp5Wlc1MFdDQXJJR014ZUN3Z2RHaHBjeTVqZFhKeVpXNTBXU0FySUdNeGVTd2dkR2hwY3k1amRYSnlaVzUwV0NBcklHTXllQ3dnZEdocGN5NWpkWEp5Wlc1MFdTQXJJR015ZVN3Z2RHaHBjeTVqZFhKeVpXNTBXQ0FySUhnc0lIUm9hWE11WTNWeWNtVnVkRmtnS3lCNUtWeHVJQ0FnSUgxY2JpQWdJQ0J3ZFdKc2FXTWdjWFZoWkhKaGRHbGpRbVY2YVdWeVEzVnlkbVZVYnloamVEb2diblZ0WW1WeUxDQmplVG9nYm5WdFltVnlMQ0I0T2lCdWRXMWlaWElzSUhrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGRHZ3VhU0V1Y0hWemFDaGJZM2dnTFNCNExDQmplU0F0SUhsZEtWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CaGRHZ3VieUV1Y0hWemFDaGJZM2dnTFNCMGFHbHpMbU4xY25KbGJuUllMQ0JqZVNBdElIUm9hWE11WTNWeWNtVnVkRmxkS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWRpRXVjSFZ6YUNoYmVDd2dlVjBwWEc0Z0lDQWdJQ0FnSUhSb2FYTXViMlptYzJWMFdDQTlJRTFoZEdndWJXbHVLSFJvYVhNdWIyWm1jMlYwV0N3Z0xpNHVkR2hwY3k1allXeGpkV3hoZEdWQ1pYcHBaWEpOYVc1TllYZ29kR2hwY3k1amRYSnlaVzUwV0N3Z1kzZ3NJR040TENCNEtTbGNiaUFnSUNBZ0lDQWdkR2hwY3k1dlptWnpaWFJaSUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTV2Wm1aelpYUlpMQ0F1TGk1MGFHbHpMbU5oYkdOMWJHRjBaVUpsZW1sbGNrMXBiazFoZUNoMGFHbHpMbU4xY25KbGJuUlpMQ0JqZVN3Z1kza3NJSGtwS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMblZ3WkdGMFpWaFpLSGdzSUhrcFhHNGdJQ0FnZlZ4dUlDQWdJSEIxWW14cFl5QnhkV0ZrY21GMGFXTkNaWHBwWlhKRGRYSjJaVlJ2VW1Wc1lYUnBkbVVvWTNnNklHNTFiV0psY2l3Z1kzazZJRzUxYldKbGNpd2dlRG9nYm5WdFltVnlMQ0I1T2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV4ZFdGa2NtRjBhV05DWlhwcFpYSkRkWEoyWlZSdktIUm9hWE11WTNWeWNtVnVkRmdnS3lCamVDd2dkR2hwY3k1amRYSnlaVzUwV1NBcklHTjVMQ0IwYUdsekxtTjFjbkpsYm5SWUlDc2dlQ3dnZEdocGN5NWpkWEp5Wlc1MFdTQXJJSGtwWEc0Z0lDQWdmVnh1SUNBZ0lIQjFZbXhwWXlCaGNtTlVieWhjYmlBZ0lDQWdJQ0FnY25nNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2NuazZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdlRUY0YVhOU2IzUmhkR2x2YmpvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNCc1lYSm5aVUZ5WTBac1lXYzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdjM2RsWlhCR2JHRm5PaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJSGc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZVRvZ2JuVnRZbVZ5WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR05UWlhKcFpYTWdQU0JRWVhSb1RXRnJaWEl1WVRKaktIUm9hWE11WTNWeWNtVnVkRmdzSUhSb2FYTXVZM1Z5Y21WdWRGa3NJSEo0TENCeWVTd2dlRUY0YVhOU2IzUmhkR2x2Yml3Z2JHRnlaMlZCY21OR2JHRm5MQ0J6ZDJWbGNFWnNZV2NzSUhnc0lIa3BJR0Z6SUc1MWJXSmxjbHRkWEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hqVTJWeWFXVnpMbXhsYm1kMGFDQStQU0EyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBiM1pNYVhOMElEMGdZMU5sY21sbGN5NXpjR3hwWTJVb01Dd2dOaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dGMGFDNXBJUzV3ZFhOb0tGdHBiM1pNYVhOMFd6SmRJQzBnYVc5MlRHbHpkRnMwWFN3Z2FXOTJUR2x6ZEZzelhTQXRJR2x2ZGt4cGMzUmJOVjFkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1lYUm9MbThoTG5CMWMyZ29XMmx2ZGt4cGMzUmJNRjBnTFNCMGFHbHpMbU4xY25KbGJuUllMQ0JwYjNaTWFYTjBXekZkSUMwZ2RHaHBjeTVqZFhKeVpXNTBXVjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CaGRHZ3VkaUV1Y0hWemFDaGJhVzkyVEdsemRGczBYU3dnYVc5MlRHbHpkRnMxWFYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOW1abk5sZEZnZ1BTQk5ZWFJvTG0xcGJpaDBhR2x6TG05bVpuTmxkRmdzSUM0dUxuUm9hWE11WTJGc1kzVnNZWFJsUW1WNmFXVnlUV2x1VFdGNEtIUm9hWE11WTNWeWNtVnVkRmdzSUdsdmRreHBjM1JiTUYwc0lHbHZka3hwYzNSYk1sMHNJR2x2ZGt4cGMzUmJORjBwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dlptWnpaWFJaSUQwZ1RXRjBhQzV0YVc0b2RHaHBjeTV2Wm1aelpYUlpMQ0F1TGk1MGFHbHpMbU5oYkdOMWJHRjBaVUpsZW1sbGNrMXBiazFoZUNoMGFHbHpMbU4xY25KbGJuUlpMQ0JwYjNaTWFYTjBXekZkTENCcGIzWk1hWE4wV3pOZExDQnBiM1pNYVhOMFd6VmRLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxXRmtvYVc5MlRHbHpkRnMwWFN3Z2FXOTJUR2x6ZEZzMVhTbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCd2RXSnNhV01nWVhKalZHOVNaV3hoZEdsMlpTaGNiaUFnSUNBZ0lDQWdjbmc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnY25rNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2VFRjRhWE5TYjNSaGRHbHZiam9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0JzWVhKblpVRnlZMFpzWVdjNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2MzZGxaWEJHYkdGbk9pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lIZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdlVG9nYm5WdFltVnlYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlYSmpWRzhvY25nc0lISjVMQ0I0UVhocGMxSnZkR0YwYVc5dUxDQnNZWEpuWlVGeVkwWnNZV2NzSUhOM1pXVndSbXhoWnl3Z2RHaHBjeTVqZFhKeVpXNTBXQ0FySUhnc0lIUm9hWE11WTNWeWNtVnVkRmtnS3lCNUtWeHVJQ0FnSUgxY2JseHVJQ0FnSUhCeWFYWmhkR1VnYzNSaGRHbGpJR0V5WXloNE1Ub2diblZ0WW1WeUxDQjVNVG9nYm5WdFltVnlMQ0J5ZURvZ2JuVnRZbVZ5TENCeWVUb2diblZ0WW1WeUxDQmhibWRzWlRvZ2JuVnRZbVZ5TENCc1lYSm5aVjloY21OZlpteGhaem9nYm5WdFltVnlMQ0J6ZDJWbGNGOW1iR0ZuT2lCdWRXMWlaWElzSUhneU9pQnVkVzFpWlhJc0lIa3lPaUJ1ZFcxaVpYSXNJSEpsWTNWeWMybDJaVDg2SUc1MWJXSmxjbHRkS1RvZ2JuVnRZbVZ5VzEwZ2ZDQnVkVzFpWlhKYlhWdGRJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1ptOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNGdiMllnZDJobGNtVWdkR2hwY3lCTllYUm9JR05oYldVZ1puSnZiU0IyYVhOcGREcGNiaUFnSUNBZ0lDQWdMeThnYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2VkZJdlUxWkhNVEV2YVcxd2JHNXZkR1V1YUhSdGJDTkJjbU5KYlhCc1pXMWxiblJoZEdsdmJrNXZkR1Z6WEc0Z0lDQWdJQ0FnSUhaaGNpQmZNVEl3SUQwZ1RXRjBhQzVRU1NBcUlERXlNQ0F2SURFNE1DeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKaFpDQTlJRTFoZEdndVVFa2dMeUF4T0RBZ0tpQW9LMkZ1WjJ4bElIeDhJREFwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6T2lCdWRXMWlaWEpiWFNBOUlGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2VIa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCeWIzUmhkR1VnUFNBb2VEb2diblZ0WW1WeUxDQjVPaUJ1ZFcxaVpYSXNJSEpoWkRvZ2JuVnRZbVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUZnZ1BTQjRJQ29nVFdGMGFDNWpiM01vY21Ga0tTQXRJSGtnS2lCTllYUm9Mbk5wYmloeVlXUXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWklEMGdlQ0FxSUUxaGRHZ3VjMmx1S0hKaFpDa2dLeUI1SUNvZ1RXRjBhQzVqYjNNb2NtRmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdleUI0T2lCWUxDQjVPaUJaSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCcFppQW9JWEo0SUh4OElDRnllU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGdDRNU3dnZVRFc0lIZ3lMQ0I1TWl3Z2VESXNJSGt5WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVhKbFkzVnljMmwyWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZUhrZ1BTQnliM1JoZEdVb2VERXNJSGt4TENBdGNtRmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZ3hJRDBnZUhrdWVEdGNiaUFnSUNBZ0lDQWdJQ0FnSUhreElEMGdlSGt1ZVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGg1SUQwZ2NtOTBZWFJsS0hneUxDQjVNaXdnTFhKaFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCNE1pQTlJSGg1TG5nN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I1TWlBOUlIaDVMbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTI5eklEMGdUV0YwYUM1amIzTW9UV0YwYUM1UVNTQXZJREU0TUNBcUlHRnVaMnhsS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFXNGdQU0JOWVhSb0xuTnBiaWhOWVhSb0xsQkpJQzhnTVRnd0lDb2dZVzVuYkdVcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dQU0FvZURFZ0xTQjRNaWtnTHlBeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIa2dQU0FvZVRFZ0xTQjVNaWtnTHlBeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHZ2dQU0I0SUNvZ2VDQXZJQ2h5ZUNBcUlISjRLU0FySUhrZ0tpQjVJQzhnS0hKNUlDb2djbmtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dnZ1BpQXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUNBOUlFMWhkR2d1YzNGeWRDaG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5ZUNBOUlHZ2dLaUJ5ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWVTQTlJR2dnS2lCeWVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeWVESWdQU0J5ZUNBcUlISjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEo1TWlBOUlISjVJQ29nY25rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2hzWVhKblpWOWhjbU5mWm14aFp5QTlQU0J6ZDJWbGNGOW1iR0ZuSUQ4Z0xURWdPaUF4S1NBcVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTFoZEdndWMzRnlkQ2hOWVhSb0xtRmljeWdvY25neUlDb2djbmt5SUMwZ2NuZ3lJQ29nZVNBcUlIa2dMU0J5ZVRJZ0tpQjRJQ29nZUNrZ0x5QW9jbmd5SUNvZ2VTQXFJSGtnS3lCeWVUSWdLaUI0SUNvZ2VDa3BLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZUNBOUlHc2dLaUJ5ZUNBcUlIa2dMeUJ5ZVNBcklDaDRNU0FySUhneUtTQXZJRElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNrZ1BTQnJJQ29nTFhKNUlDb2dlQ0F2SUhKNElDc2dLSGt4SUNzZ2VUSXBJQzhnTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbU1TQTlJRTFoZEdndVlYTnBiaWdvZVRFZ0xTQmplU2tnTHlCeWVTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaaklnUFNCTllYUm9MbUZ6YVc0b0tIa3lJQzBnWTNrcElDOGdjbmtwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtTVNBOUlIZ3hJRHdnWTNnZ1B5Qk5ZWFJvTGxCSklDMGdaakVnT2lCbU1UdGNiaUFnSUNBZ0lDQWdJQ0FnSUdZeUlEMGdlRElnUENCamVDQS9JRTFoZEdndVVFa2dMU0JtTWlBNklHWXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pqRWdQQ0F3SUNZbUlDaG1NU0E5SUUxaGRHZ3VVRWtnS2lBeUlDc2daakVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaaklnUENBd0lDWW1JQ2htTWlBOUlFMWhkR2d1VUVrZ0tpQXlJQ3NnWmpJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjNaV1Z3WDJac1lXY2dKaVlnWmpFZ1BpQm1NaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdZeElEMGdaakVnTFNCTllYUm9MbEJKSUNvZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMzZGxaWEJmWm14aFp5QW1KaUJtTWlBK0lHWXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWmpJZ1BTQm1NaUF0SUUxaGRHZ3VVRWtnS2lBeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaakVnUFNCeVpXTjFjbk5wZG1WYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbU1pQTlJSEpsWTNWeWMybDJaVnN4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR040SUQwZ2NtVmpkWEp6YVhabFd6SmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kza2dQU0J5WldOMWNuTnBkbVZiTTEwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUdSbUlEMGdaaklnTFNCbU1UdGNiaUFnSUNBZ0lDQWdhV1lnS0UxaGRHZ3VZV0p6S0dSbUtTQStJRjh4TWpBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1NbTlzWkNBOUlHWXlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGd5YjJ4a0lEMGdlRElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVRKdmJHUWdQU0I1TWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1l5SUQwZ1pqRWdLeUJmTVRJd0lDb2dLSE4zWldWd1gyWnNZV2NnSmlZZ1pqSWdQaUJtTVNBL0lERWdPaUF0TVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I0TWlBOUlHTjRJQ3NnY25nZ0tpQk5ZWFJvTG1OdmN5aG1NaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjVNaUE5SUdONUlDc2djbmtnS2lCTllYUm9Mbk5wYmlobU1pazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0IwYUdsekxtRXlZeWg0TWl3Z2VUSXNJSEo0TENCeWVTd2dZVzVuYkdVc0lEQXNJSE4zWldWd1gyWnNZV2NzSUhneWIyeGtMQ0I1TW05c1pDd2dXMll5TENCbU1tOXNaQ3dnWTNnc0lHTjVYU2tnWVhNZ2JuVnRZbVZ5VzEwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaR1lnUFNCbU1pQXRJR1l4TzF4dUlDQWdJQ0FnSUNCMllYSWdZekVnUFNCTllYUm9MbU52Y3lobU1Ta3NYRzRnSUNBZ0lDQWdJQ0FnSUNCek1TQTlJRTFoZEdndWMybHVLR1l4S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR015SUQwZ1RXRjBhQzVqYjNNb1pqSXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2N6SWdQU0JOWVhSb0xuTnBiaWhtTWlrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwSUQwZ1RXRjBhQzUwWVc0b1pHWWdMeUEwS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2g0SUQwZ05DQXZJRE1nS2lCeWVDQXFJSFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9lU0E5SURRZ0x5QXpJQ29nY25rZ0tpQjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JURWdQU0JiZURFc0lIa3hYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMHlJRDBnVzNneElDc2dhSGdnS2lCek1Td2dlVEVnTFNCb2VTQXFJR014WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzB6SUQwZ1czZ3lJQ3NnYUhnZ0tpQnpNaXdnZVRJZ0xTQm9lU0FxSUdNeVhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUcwMElEMGdXM2d5TENCNU1sMDdYRzRnSUNBZ0lDQWdJRzB5V3pCZElEMGdNaUFxSUcweFd6QmRJQzBnYlRKYk1GMDdYRzRnSUNBZ0lDQWdJRzB5V3pGZElEMGdNaUFxSUcweFd6RmRJQzBnYlRKYk1WMDdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpXTjFjbk5wZG1VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiYlRJc0lHMHpMQ0J0TkYwdVkyOXVZMkYwS0hKbGN5azdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTWdQU0JiYlRJc0lHMHpMQ0J0TkYwdVkyOXVZMkYwS0hKbGN5a3VhbTlwYmlncExuTndiR2wwS0Z3aUxGd2lLUzV0WVhBb2VDQTlQaUJ3WVhKelpVWnNiMkYwS0hncEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnVaWGR5WlhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcGFTQTlJSEpsY3k1c1pXNW5kR2c3SUdrZ1BDQnBhVHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzY21WelcybGRJRDBnYVNBbElESWdQeUJ5YjNSaGRHVW9jbVZ6VzJrZ0xTQXhYU3dnY21WelcybGRMQ0J5WVdRcExua2dPaUJ5YjNSaGRHVW9jbVZ6VzJsZExDQnlaWE5iYVNBcklERmRMQ0J5WVdRcExuZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzY21Wek8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NIVmliR2xqSUdOc2IzTmxVR0YwYUNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1lYUm9MbU1nUFNCMGNuVmxYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NIVmliR2xqSUhWdWFXWnZjbTBvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuQmhkR2hEYUdGcGJpNXNaVzVuZEdnZ0ppWWdJU2gwYUdsekxtTjFjbkpsYm5SWUlEMDlJSFJvYVhNdWNHRjBhRk4wWVhKMFd6QmRJQ1ltSUhSb2FYTXVZM1Z5Y21WdWRGa2dQVDBnZEdocGN5NXdZWFJvVTNSaGNuUmJNVjBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxteHBibVZVYnlndUxpNTBhR2x6TG5CaGRHaFRkR0Z5ZENsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2RHaHBjeTV3WVhSb1EyaGhhVzR1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYUm9VbVZtSUQwZ2RHaHBjeTV3WVhSb1EyaGhhVzR1Y0c5d0tDa2hYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXhwYm1WVWJ5Z3VMaTV3WVhSb1VtVm1LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2gwYUdsekxuQmhkR2d1YnlFdWJHVnVaM1JvSUR3Z2RHaHBjeTV3WVhSb0xta2hMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR0YwYUM1dklTNXdkWE5vS0Zzd0xDQXdYU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NXdZWFJvTG5ZaExtWnZja1ZoWTJnb2RtRnNkV1VnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVmJNRjBnTFQwZ2RHaHBjeTV2Wm1aelpYUllYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVnN4WFNBdFBTQjBhR2x6TG05bVpuTmxkRmxjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ2RHaHBjeTV2Wm1aelpYUllJRDBnTUZ4dUlDQWdJQ0FnSUNCMGFHbHpMbTltWm5ObGRGa2dQU0F3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjSFZpYkdsaklIQmhjbk5sS0hCaGRHaEVZWFJoT2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGMGFFUmhkR0ZUWlhKcFpYTWdQU0J3WVhKelpWTldSeWh3WVhSb1JHRjBZU2xjYmlBZ0lDQWdJQ0FnYkdWMElIQmhkR2hFWVhSaFYybDBhRlI1Y0dVN1hHNGdJQ0FnSUNBZ0lIQmhkR2hFWVhSaFUyVnlhV1Z6TG1admNrVmhZMmdvY0dGMGFFUmhkR0ZKZEdWdElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2NHRjBhRVJoZEdGSmRHVnRMbU52WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkTkp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaU0E5SUhCaGRHaEVZWFJoU1hSbGJTQmhjeUJOYjNabFZHOURiMjF0WVc1a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOTJaVlJ2S0hCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZUN3Z2NHRjBhRVJoZEdGWGFYUm9WSGx3WlM1NUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjIwbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxJRDBnY0dGMGFFUmhkR0ZKZEdWdElHRnpJRTF2ZG1WVWIwTnZiVzFoYm1SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGIzWmxWRzlTWld4aGRHbDJaU2h3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmdzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RNSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5Qk1hVzVsVkc5RGIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YkdsdVpWUnZLSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlQ3dnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaUzU1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMnduT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFJvUkdGMFlWZHBkR2hVZVhCbElEMGdjR0YwYUVSaGRHRkpkR1Z0SUdGeklFeHBibVZVYjBOdmJXMWhibVJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVzYVc1bFZHOVNaV3hoZEdsMlpTaHdZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3NJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZElKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRVJoZEdGWGFYUm9WSGx3WlNBOUlIQmhkR2hFWVhSaFNYUmxiU0JoY3lCSWIzSnBlbTl1ZEdGc1RHbHVaVlJ2UTI5dGJXRnVaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWh2Y21sNmIyNTBZV3hVYnlod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5ncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYUNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVWdQU0J3WVhSb1JHRjBZVWwwWlcwZ1lYTWdTRzl5YVhwdmJuUmhiRXhwYm1WVWIwTnZiVzFoYm1SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b2IzSnBlbTl1ZEdGc1ZHOVNaV3hoZEdsMlpTaHdZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblZpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1VnUFNCd1lYUm9SR0YwWVVsMFpXMGdZWE1nVm1WeWRHbGpZV3hNYVc1bFZHOURiMjF0WVc1a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtVnlkR2xqWVd4VWJ5aHdZWFJvUkdGMFlWZHBkR2hVZVhCbExua3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1VnUFNCd1lYUm9SR0YwWVVsMFpXMGdZWE1nVm1WeWRHbGpZV3hNYVc1bFZHOURiMjF0WVc1a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtVnlkR2xqWVd4VWIxSmxiR0YwYVhabEtIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkREp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaU0E5SUhCaGRHaEVZWFJoU1hSbGJTQmhjeUJEZFhKMlpWUnZRMjl0YldGdVpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTjFZbWxqUW1WNmFXVnlRM1Z5ZG1WVWJ5aHdZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3hMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmt4TENCd1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5neUxDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExua3lMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmdzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RqSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5QkRkWEoyWlZSdlEyOXRiV0Z1WkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OMVltbGpRbVY2YVdWeVEzVnlkbVZVYjFKbGJHRjBhWFpsS0hCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZURFc0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVURXNJSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVlRElzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVRJc0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVDd2djR0YwYUVSaGRHRlhhWFJvVkhsd1pTNTVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oxRW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9SR0YwWVZkcGRHaFVlWEJsSUQwZ2NHRjBhRVJoZEdGSmRHVnRJR0Z6SUZGMVlXUnlZWFJwWTBOMWNuWmxWRzlEYjIxdFlXNWtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjWFZoWkhKaGRHbGpRbVY2YVdWeVEzVnlkbVZVYnlod1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5neExDQndZWFJvUkdGMFlWZHBkR2hVZVhCbExua3hMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmdzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2R4SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUVSaGRHRlhhWFJvVkhsd1pTQTlJSEJoZEdoRVlYUmhTWFJsYlNCaGN5QlJkV0ZrY21GMGFXTkRkWEoyWlZSdlEyOXRiV0Z1WkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5GMVlXUnlZWFJwWTBKbGVtbGxja04xY25abFZHOVNaV3hoZEdsMlpTaHdZWFJvUkdGMFlWZHBkR2hVZVhCbExuZ3hMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmt4TENCd1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5nc0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkQkp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaU0E5SUhCaGRHaEVZWFJoU1hSbGJTQmhjeUJGYkd4cGNIUnBZMkZzUVhKalEyOXRiV0Z1WkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GeVkxUnZLSEJoZEdoRVlYUmhWMmwwYUZSNWNHVXVjbmdzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1Y25rc0lIQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWVFRjRhWE5TYjNSaGRHbHZiaXdnZm41d1lYUm9SR0YwWVZkcGRHaFVlWEJsTG14aGNtZGxRWEpqTENCK2ZuQmhkR2hFWVhSaFYybDBhRlI1Y0dVdWMzZGxaWEFzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZUN3Z2NHRjBhRVJoZEdGWGFYUm9WSGx3WlM1NUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJFbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxJRDBnY0dGMGFFUmhkR0ZKZEdWdElHRnpJRVZzYkdsd2RHbGpZV3hCY21ORGIyMXRZVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WVhKalZHOVNaV3hoZEdsMlpTaHdZWFJvUkdGMFlWZHBkR2hVZVhCbExuSjRMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbko1TENCd1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5oQmVHbHpVbTkwWVhScGIyNHNJSDUrY0dGMGFFUmhkR0ZYYVhSb1ZIbHdaUzVzWVhKblpVRnlZeXdnZm41d1lYUm9SR0YwWVZkcGRHaFVlWEJsTG5OM1pXVndMQ0J3WVhSb1JHRjBZVmRwZEdoVWVYQmxMbmdzSUhCaGRHaEVZWFJoVjJsMGFGUjVjR1V1ZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RhSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2Q2SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amJHOXpaVkJoZEdnb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb2NHRjBhRVJoZEdGSmRHVnRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjA1dklHbHRjR3hsYldWdWRHRjBhVzl1SUdadmRXNWtJR1p2Y2lCMGFHbHpJSEJoZEdnZ1kyOXRiV0Z1WkM0bktWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JseHVJQ0FnSUhCMVlteHBZeUIxY0hOaGJYQnNaU2h5WVhScGJ6b2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJQzh2SUhWelpTQkVaU0JEWVhOMFpXeHFZWFVuY3lCaGJHZHZjbWwwYUcwZ2RHOGdaRzhnZEdobElIVndjMkZ0Y0d4cGJtZGNiaUFnSUNBZ0lDQWdMeThnVW1WbVpYSmxibU5sT2lCb2RIUndjem92TDJWdUxuZHBhMmx3WldScFlTNXZjbWN2ZDJscmFTOUVaVjlEWVhOMFpXeHFZWFVsTWpkelgyRnNaMjl5YVhSb2JWeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaFRuVnRZbVZ5TG1selNXNTBaV2RsY2loeVlYUnBieWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25WR2hsSUhWd2MyRnRjR3hwYm1jZ2NtRjBhVzhnYzJodmRXeGtJR0psSUdGdUlHbHVkR1ZuWlhJdUp5bGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxuVnVhV1p2Y20wb0tWeHVJQ0FnSUNBZ0lDQnBaaUFvY21GMGFXOGdQRDBnTVNrZ2NtVjBkWEp1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR052Y0hsUVlYUm9PaUJRWVhSb1JHVm1JRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZem9nZEdocGN5NXdZWFJvTG1Nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwT2lCYlhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc4NklGdGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2Rqb2dXMTFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZEdndWRpRXVabTl5UldGamFDZ29kaXdnYVN3Z1lTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0drZ1BEMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmNIbFFZWFJvTG5ZaExuQjFjMmdvZGlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIzQjVVR0YwYUM1cElTNXdkWE5vS0hSb2FYTXVjR0YwYUM1cElWdHBYU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHOUJjbkpoZVNBOUlIUm9hWE11Y0dGMGFDNXZJVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYVVGeWNtRjVJRDBnZEdocGN5NXdZWFJvTG1raFhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VFRnljbUY1SUQwZ1cyRmJhU0F0SURGZFd6QmRMQ0J2UVhKeVlYbGJhU0F0SURGZFd6QmRJQ3NnWVZ0cElDMGdNVjFiTUYwc0lHbEJjbkpoZVZ0cFhWc3dYU0FySUhaYk1GMHNJSFpiTUYxZFhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2VVRnljbUY1SUQwZ1cyRmJhU0F0SURGZFd6RmRMQ0J2UVhKeVlYbGJhU0F0SURGZFd6RmRJQ3NnWVZ0cElDMGdNVjFiTVYwc0lHbEJjbkpoZVZ0cFhWc3hYU0FySUhaYk1WMHNJSFpiTVYxZFhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQTlJREU3SUdsdVpHVjRJRHdnY21GMGFXODdJR2x1WkdWNEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnpkR1Z3VW1GMGFXOGdQU0F4SUM4Z0tISmhkR2x2SUMwZ2FXNWtaWGdnS3lBeEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhoVGNHeHBkRUZ5Y21GNUlEMGdkR2hwY3k1allXeGpkV3hoZEdWQ1pYcHBaWEpUY0d4cGRDaHpkR1Z3VW1GMGFXOHNJQzR1TG5oQmNuSmhlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjVVM0JzYVhSQmNuSmhlU0E5SUhSb2FYTXVZMkZzWTNWc1lYUmxRbVY2YVdWeVUzQnNhWFFvYzNSbGNGSmhkR2x2TENBdUxpNTVRWEp5WVhrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0RCNElEMGdlRUZ5Y21GNVd6QmRMQ0J3TVhnZ1BTQjRVM0JzYVhSQmNuSmhlUzV6YUdsbWRDZ3BJU0F0SUhBd2VDd2djRE40SUQwZ2VGTndiR2wwUVhKeVlYbGJNVjBzSUhBeWVDQTlJSGhUY0d4cGRFRnljbUY1TG5Ob2FXWjBLQ2toSUMwZ2NETjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd01Ia2dQU0I1UVhKeVlYbGJNRjBzSUhBeGVTQTlJSGxUY0d4cGRFRnljbUY1TG5Ob2FXWjBLQ2toSUMwZ2NEQjVMQ0J3TTNrZ1BTQjVVM0JzYVhSQmNuSmhlVnN4WFN3Z2NESjVJRDBnZVZOd2JHbDBRWEp5WVhrdWMyaHBablFvS1NFZ0xTQndNM2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVVHRjBhQzV2SVM1d2RYTm9LRnR3TVhnc0lIQXhlVjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5d2VWQmhkR2d1YVNFdWNIVnphQ2hiY0RKNExDQndNbmxkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmNIbFFZWFJvTG5ZaExuQjFjMmdvVzNBemVDd2djRE41WFNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNFFYSnlZWGtnUFNCNFUzQnNhWFJCY25KaGVWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIbEJjbkpoZVNBOUlIbFRjR3hwZEVGeWNtRjVYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndNSGdnUFNCNFFYSnlZWGt1YzJocFpuUW9LU0VzSUhBeGVDQTlJSGhCY25KaGVTNXphR2xtZENncElTQXRJSEF3ZUN3Z2NETjRJRDBnZUVGeWNtRjVXekZkTENCd01uZ2dQU0I0UVhKeVlYa3VjMmhwWm5Rb0tTRWdMU0J3TTNnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NEQjVJRDBnZVVGeWNtRjVMbk5vYVdaMEtDa2hMQ0J3TVhrZ1BTQjVRWEp5WVhrdWMyaHBablFvS1NFZ0xTQndNSGtzSUhBemVTQTlJSGxCY25KaGVWc3hYU3dnY0RKNUlEMGdlVUZ5Y21GNUxuTm9hV1owS0NraElDMGdjRE41WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM0I1VUdGMGFDNXZJUzV3ZFhOb0tGdHdNWGdzSUhBeGVWMHBYRzRnSUNBZ0lDQWdJQ0FnSUNCamIzQjVVR0YwYUM1cElTNXdkWE5vS0Z0d01uZ3NJSEF5ZVYwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVVHRjBhQzUySVM1d2RYTm9LRnR3TTNnc0lIQXplVjBwWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGMGFDQTlJR052Y0hsUVlYUm9YRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXBabTl5YlNncFhHNGdJQ0FnZlZ4dVhHNTlJbDE5IiwidmFyIHJuZyA9IHJlcXVpcmUoJy4vbGliL3JuZycpO1xudmFyIGJ5dGVzVG9VdWlkID0gcmVxdWlyZSgnLi9saWIvYnl0ZXNUb1V1aWQnKTtcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgaWYgKHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJykge1xuICAgIGJ1ZiA9IG9wdGlvbnMgPT09ICdiaW5hcnknID8gbmV3IEFycmF5KDE2KSA6IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHtcbiAgICAgIGJ1ZltpICsgaWldID0gcm5kc1tpaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBieXRlc1RvVXVpZChybmRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2NDtcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuY2FsY3VsYXRlQmFzZVRyYW5zZm9ybSA9IGNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm07XHJcbmV4cG9ydHMuZ2V0Qm91bmRpbmdCb3ggPSBnZXRCb3VuZGluZ0JveDtcclxuZXhwb3J0cy5nZXRMZWFmTm9kZXMgPSBnZXRMZWFmTm9kZXM7XHJcbmV4cG9ydHMuZ2V0QmFzZWxpbmVIZWlnaHQgPSBnZXRCYXNlbGluZUhlaWdodDtcclxuZXhwb3J0cy5lbmNvZGVMaW5lQ2FwID0gZW5jb2RlTGluZUNhcDtcclxuZXhwb3J0cy5lbmNvZGVMaW5lSm9pbiA9IGVuY29kZUxpbmVKb2luO1xyXG5leHBvcnRzLmVuY29kZVRleHRBbmNob3IgPSBlbmNvZGVUZXh0QW5jaG9yO1xyXG5leHBvcnRzLmdyZWF0ZXN0Q29tbW9uRGl2aXNvciA9IGdyZWF0ZXN0Q29tbW9uRGl2aXNvcjtcclxuZXhwb3J0cy5sZWFzdENvbW1vbk11bHRpcGxlID0gbGVhc3RDb21tb25NdWx0aXBsZTtcclxuXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm0oZG9tLCByb290KSB7XHJcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2RhZ3JlanMvZGFncmUtZDMvaXNzdWVzLzIwMlxyXG4gIHJldHVybiByb290LmdldFNjcmVlbkNUTSgpLmludmVyc2UoKS5tdWx0aXBseShkb20uZ2V0U2NyZWVuQ1RNKCkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0JveChkb20pIHtcclxuICB2YXIgc3ZnUm9vdCA9IGRvbTtcclxuXHJcbiAgd2hpbGUgKHRydWUpIHtcclxuICAgIGlmIChzdmdSb290LnBhcmVudEVsZW1lbnQgaW5zdGFuY2VvZiBTVkdHcmFwaGljc0VsZW1lbnQpIHtcclxuICAgICAgc3ZnUm9vdCA9IHN2Z1Jvb3QucGFyZW50RWxlbWVudDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIGJhc2VCb3ggPSBjYWxjdWxhdGVCYXNlVHJhbnNmb3JtKGRvbSwgc3ZnUm9vdCk7XHJcbiAgdmFyIHJlZkJCb3ggPSBkb20uZ2V0QkJveCgpO1xyXG4gIHZhciBjb29yZGluYXRlID0gW2Jhc2VCb3guZSArIHJlZkJCb3gueCwgYmFzZUJveC5mICsgcmVmQkJveC55LCByZWZCQm94LndpZHRoICsgMSwgcmVmQkJveC5oZWlnaHQgKyAxXTtcclxuICByZXR1cm4gY29vcmRpbmF0ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TGVhZk5vZGVzKG1hc3Rlcikge1xyXG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyMjg5MzkxL2hvdy10by1jcmVhdGUtYW4tYXJyYXktb2YtbGVhZi1ub2Rlcy1vZi1hbi1odG1sLWRvbS11c2luZy1qYXZhc2NyaXB0XHJcbiAgdmFyIG5vZGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobWFzdGVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSwgMCk7XHJcbiAgdmFyIGxlYWZOb2RlcyA9IG5vZGVzLmZpbHRlcihmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgaWYgKGVsZW0uaGFzQ2hpbGROb2RlcygpKSB7XHJcbiAgICAgIC8vIHNlZSBpZiBhbnkgb2YgdGhlIGNoaWxkIG5vZGVzIGFyZSBlbGVtZW50c1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChlbGVtLmNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT0gMSkge1xyXG4gICAgICAgICAgLy8gdGhlcmUgaXMgYSBjaGlsZCBlbGVtZW50LCBzbyByZXR1cm4gZmFsc2UgdG8gbm90IGluY2x1ZGVcclxuICAgICAgICAgIC8vIHRoaXMgcGFyZW50IGVsZW1lbnRcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9KTtcclxuICByZXR1cm4gbGVhZk5vZGVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCYXNlbGluZUhlaWdodChkb20pIHtcclxuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gIHZhciBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkb20pO1xyXG4gIHZhciBmb250U2V0dGluZ3MgPSBjb21wdXRlZFN0eWxlLmZvbnQ7XHJcbiAgY3R4LmZvbnQgPSBmb250U2V0dGluZ3M7XHJcbiAgdmFyIHRleHRNZXRyaXggPSBjdHgubWVhc3VyZVRleHQoJ3lwZmdq4paIJyk7XHJcbiAgcmV0dXJuIHRleHRNZXRyaXguYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IHx8IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuY29kZUxpbmVDYXAodHlwZSkge1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSAnc3F1YXJlJzpcclxuICAgICAgcmV0dXJuIDM7XHJcblxyXG4gICAgY2FzZSAnYnV0dCc6XHJcbiAgICAgIHJldHVybiAxO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiAyO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZW5jb2RlTGluZUpvaW4odHlwZSkge1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSAnbWl0ZXInOlxyXG4gICAgICByZXR1cm4gMTtcclxuXHJcbiAgICBjYXNlICdiZXZlbCc6XHJcbiAgICAgIHJldHVybiAzO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiAyO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZW5jb2RlVGV4dEFuY2hvcih0eXBlKSB7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlICdtaWRkbGUnOlxyXG4gICAgICByZXR1cm4gMjtcclxuXHJcbiAgICBjYXNlICdlbmQnOlxyXG4gICAgICByZXR1cm4gMTtcclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gMDtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdyZWF0ZXN0Q29tbW9uRGl2aXNvcih4LCB5KSB7XHJcbiAgeCA9IE1hdGguYWJzKHgpO1xyXG4gIHkgPSBNYXRoLmFicyh5KTtcclxuXHJcbiAgd2hpbGUgKHkpIHtcclxuICAgIHZhciB0ID0geTtcclxuICAgIHkgPSB4ICUgeTtcclxuICAgIHggPSB0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxlYXN0Q29tbW9uTXVsdGlwbGUoeCwgeSkge1xyXG4gIHJldHVybiAheCB8fCAheSA/IDAgOiBNYXRoLmFicyh4ICogeSAvIGdyZWF0ZXN0Q29tbW9uRGl2aXNvcih4LCB5KSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlvWld4d1pYSXVkSE1pWFN3aWJtRnRaWE1pT2xzaVkyRnNZM1ZzWVhSbFFtRnpaVlJ5WVc1elptOXliU0lzSW1SdmJTSXNJbkp2YjNRaUxDSm5aWFJUWTNKbFpXNURWRTBpTENKcGJuWmxjbk5sSWl3aWJYVnNkR2x3YkhraUxDSm5aWFJDYjNWdVpHbHVaMEp2ZUNJc0luTjJaMUp2YjNRaUxDSndZWEpsYm5SRmJHVnRaVzUwSWl3aVUxWkhSM0poY0docFkzTkZiR1Z0Wlc1MElpd2lZbUZ6WlVKdmVDSXNJbkpsWmtKQ2IzZ2lMQ0puWlhSQ1FtOTRJaXdpWTI5dmNtUnBibUYwWlNJc0ltVWlMQ0o0SWl3aVppSXNJbmtpTENKM2FXUjBhQ0lzSW1obGFXZG9kQ0lzSW1kbGRFeGxZV1pPYjJSbGN5SXNJbTFoYzNSbGNpSXNJbTV2WkdWeklpd2lRWEp5WVhraUxDSndjbTkwYjNSNWNHVWlMQ0p6YkdsalpTSXNJbU5oYkd3aUxDSm5aWFJGYkdWdFpXNTBjMEo1VkdGblRtRnRaU0lzSW14bFlXWk9iMlJsY3lJc0ltWnBiSFJsY2lJc0ltVnNaVzBpTENKb1lYTkRhR2xzWkU1dlpHVnpJaXdpYVNJc0ltTm9hV3hrVG05a1pYTWlMQ0pzWlc1bmRHZ2lMQ0p1YjJSbFZIbHdaU0lzSW1kbGRFSmhjMlZzYVc1bFNHVnBaMmgwSWl3aVkyRnVkbUZ6SWl3aVpHOWpkVzFsYm5RaUxDSmpjbVZoZEdWRmJHVnRaVzUwSWl3aVkzUjRJaXdpWjJWMFEyOXVkR1Y0ZENJc0ltTnZiWEIxZEdWa1UzUjViR1VpTENKblpYUkRiMjF3ZFhSbFpGTjBlV3hsSWl3aVptOXVkRk5sZEhScGJtZHpJaXdpWm05dWRDSXNJblJsZUhSTlpYUnlhWGdpTENKdFpXRnpkWEpsVkdWNGRDSXNJbUZqZEhWaGJFSnZkVzVrYVc1blFtOTRSR1Z6WTJWdWRDSXNJbVZ1WTI5a1pVeHBibVZEWVhBaUxDSjBlWEJsSWl3aVpXNWpiMlJsVEdsdVpVcHZhVzRpTENKbGJtTnZaR1ZVWlhoMFFXNWphRzl5SWl3aVozSmxZWFJsYzNSRGIyMXRiMjVFYVhacGMyOXlJaXdpVFdGMGFDSXNJbUZpY3lJc0luUWlMQ0pzWldGemRFTnZiVzF2YmsxMWJIUnBjR3hsSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN1FVRkJUeXhUUVVGVFFTeHpRa0ZCVkN4RFFVRm5RME1zUjBGQmFFTXNSVUZCZVVSRExFbEJRWHBFTEVWQlFXMUdPMEZCUTNSR08wRkJSVUVzVTBGQlQwRXNTVUZCU1N4RFFVRkRReXhaUVVGTUxFZEJRWEZDUXl4UFFVRnlRaXhIUVVFclFrTXNVVUZCTDBJc1EwRkJkME5LTEVkQlFVY3NRMEZCUTBVc1dVRkJTaXhGUVVGNFF5eERRVUZRTzBGQlEwZzdPMEZCUlUwc1UwRkJVMGNzWTBGQlZDeERRVUYzUWt3c1IwRkJlRUlzUlVGQmFVUTdRVUZEY0VRc1RVRkJTVTBzVDBGQk1rSXNSMEZCUjA0c1IwRkJiRU03TzBGQlEwRXNVMEZCVHl4SlFVRlFMRVZCUVdFN1FVRkRWQ3hSUVVGSlRTeFBRVUZQTEVOQlFVTkRMR0ZCUVZJc1dVRkJhVU5ETEd0Q1FVRnlReXhGUVVGNVJEdEJRVU55UkVZc1RVRkJRVUVzVDBGQlR5eEhRVUZIUVN4UFFVRlBMRU5CUVVORExHRkJRV3hDTzBGQlEwZ3NTMEZHUkN4TlFVVlBPMEZCUTBnN1FVRkRTRHRCUVVOS096dEJRVU5FTEUxQlFVMUZMRTlCUVU4c1IwRkJSMVlzYzBKQlFYTkNMRU5CUVVORExFZEJRVVFzUlVGQlRVMHNUMEZCVGl4RFFVRjBRenRCUVVOQkxFMUJRVTFKTEU5QlFVOHNSMEZCUjFZc1IwRkJSeXhEUVVGRFZ5eFBRVUZLTEVWQlFXaENPMEZCUTBFc1RVRkJUVU1zVlVGQk5FTXNSMEZCUnl4RFFVRkRTQ3hQUVVGUExFTkJRVU5KTEVOQlFWSXNSMEZCV1Vnc1QwRkJUeXhEUVVGRFNTeERRVUZ5UWl4RlFVRjNRa3dzVDBGQlR5eERRVUZEVFN4RFFVRlNMRWRCUVZsTUxFOUJRVThzUTBGQlEwMHNRMEZCTlVNc1JVRkJLME5PTEU5QlFVOHNRMEZCUTA4c1MwRkJVaXhIUVVGblFpeERRVUV2UkN4RlFVRnJSVkFzVDBGQlR5eERRVUZEVVN4TlFVRlNMRWRCUVdsQ0xFTkJRVzVHTEVOQlFYSkVPMEZCUTBFc1UwRkJUMDRzVlVGQlVEdEJRVU5JT3p0QlFVVk5MRk5CUVZOUExGbEJRVlFzUTBGQmMwSkRMRTFCUVhSQ0xFVkJRWGRGTzBGQlF6TkZPMEZCUlVFc1RVRkJTVU1zUzBGQlN5eEhRVUZIUXl4TFFVRkxMRU5CUVVORExGTkJRVTRzUTBGQlowSkRMRXRCUVdoQ0xFTkJRWE5DUXl4SlFVRjBRaXhEUVVFeVFrd3NUVUZCVFN4RFFVRkRUU3h2UWtGQlVDeERRVUUwUWl4SFFVRTFRaXhEUVVFelFpeEZRVUUyUkN4RFFVRTNSQ3hEUVVGYU8wRkJRMEVzVFVGQlNVTXNVMEZCVXl4SFFVRkhUaXhMUVVGTExFTkJRVU5QTEUxQlFVNHNRMEZCWVN4VlFVRlZReXhKUVVGV0xFVkJRV2RDTzBGQlEzcERMRkZCUVVsQkxFbEJRVWtzUTBGQlEwTXNZVUZCVEN4RlFVRktMRVZCUVRCQ08wRkJRM1JDTzBGQlEwRXNWMEZCU3l4SlFVRkpReXhEUVVGRExFZEJRVWNzUTBGQllpeEZRVUZuUWtFc1EwRkJReXhIUVVGSFJpeEpRVUZKTEVOQlFVTkhMRlZCUVV3c1EwRkJaMEpETEUxQlFYQkRMRVZCUVRSRFJpeERRVUZETEVWQlFUZERMRVZCUVdsRU8wRkJRemRETEZsQlFVbEdMRWxCUVVrc1EwRkJRMGNzVlVGQlRDeERRVUZuUWtRc1EwRkJhRUlzUlVGQmJVSkhMRkZCUVc1Q0xFbEJRU3RDTEVOQlFXNURMRVZCUVhORE8wRkJRMnhETzBGQlEwRTdRVUZEUVN4cFFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5LT3p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFZEJXbVVzUTBGQmFFSTdRVUZoUVN4VFFVRlBVQ3hUUVVGUU8wRkJRMGc3TzBGQlJVMHNVMEZCVTFFc2FVSkJRVlFzUTBGQk1rSnVReXhIUVVFelFpeEZRVUZuUkR0QlFVTnVSQ3hOUVVGTmIwTXNUVUZCVFN4SFFVRkhReXhSUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1VVRkJka0lzUTBGQlpqdEJRVU5CTEUxQlFVMURMRWRCUVVjc1IwRkJSMGdzVFVGQlRTeERRVUZEU1N4VlFVRlFMRU5CUVd0Q0xFbEJRV3hDTEVOQlFWbzdRVUZEUVN4TlFVRk5ReXhoUVVGaExFZEJRVWRETEdkQ1FVRm5RaXhEUVVGRE1VTXNSMEZCUkN4RFFVRjBRenRCUVVOQkxFMUJRVTB5UXl4WlFVRlpMRWRCUVVkR0xHRkJRV0VzUTBGQlEwY3NTVUZCYmtNN1FVRkZRVXdzUlVGQlFVRXNSMEZCUnl4RFFVRkRTeXhKUVVGS0xFZEJRVmRFTEZsQlFWZzdRVUZEUVN4TlFVRk5SU3hWUVVGVkxFZEJRVWRPTEVkQlFVY3NRMEZCUTA4c1YwRkJTaXhEUVVGblFpeFJRVUZvUWl4RFFVRnVRanRCUVVOQkxGTkJRVTlFTEZWQlFWVXNRMEZCUTBVc2QwSkJRVmdzU1VGQmRVTXNRMEZCT1VNN1FVRkRTRHM3UVVGRlRTeFRRVUZUUXl4aFFVRlVMRU5CUVhWQ1F5eEpRVUYyUWl4RlFVRnhSRHRCUVVONFJDeFZRVUZSUVN4SlFVRlNPMEZCUTBrc1UwRkJTeXhSUVVGTU8wRkJRMGtzWVVGQlR5eERRVUZRT3p0QlFVTktMRk5CUVVzc1RVRkJURHRCUVVOSkxHRkJRVThzUTBGQlVEczdRVUZEU2p0QlFVTkpMR0ZCUVU4c1EwRkJVRHRCUVU1U08wRkJVVWc3TzBGQlJVMHNVMEZCVTBNc1kwRkJWQ3hEUVVGM1FrUXNTVUZCZUVJc1JVRkJjMFE3UVVGRGVrUXNWVUZCVVVFc1NVRkJVanRCUVVOSkxGTkJRVXNzVDBGQlREdEJRVU5KTEdGQlFVOHNRMEZCVURzN1FVRkRTaXhUUVVGTExFOUJRVXc3UVVGRFNTeGhRVUZQTEVOQlFWQTdPMEZCUTBvN1FVRkRTU3hoUVVGUExFTkJRVkE3UVVGT1VqdEJRVkZJT3p0QlFVVk5MRk5CUVZORkxHZENRVUZVTEVOQlFUQkNSaXhKUVVFeFFpeEZRVUYzUkR0QlFVTXpSQ3hWUVVGUlFTeEpRVUZTTzBGQlEwa3NVMEZCU3l4UlFVRk1PMEZCUTBrc1lVRkJUeXhEUVVGUU96dEJRVU5LTEZOQlFVc3NTMEZCVER0QlFVTkpMR0ZCUVU4c1EwRkJVRHM3UVVGRFNqdEJRVU5KTEdGQlFVOHNRMEZCVUR0QlFVNVNPMEZCVVVnN08wRkJSVTBzVTBGQlUwY3NjVUpCUVZRc1EwRkJLMEowUXl4RFFVRXZRaXhGUVVFd1EwVXNRMEZCTVVNc1JVRkJOa1E3UVVGRGFFVkdMRVZCUVVGQkxFTkJRVU1zUjBGQlIzVkRMRWxCUVVrc1EwRkJRME1zUjBGQlRDeERRVUZUZUVNc1EwRkJWQ3hEUVVGS08wRkJRMEZGTEVWQlFVRkJMRU5CUVVNc1IwRkJSM0ZETEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hEUVVGVGRFTXNRMEZCVkN4RFFVRktPenRCUVVOQkxGTkJRVTlCTEVOQlFWQXNSVUZCVlR0QlFVTk9MRkZCUVVsMVF5eERRVUZETEVkQlFVZDJReXhEUVVGU08wRkJRMEZCTEVsQlFVRkJMRU5CUVVNc1IwRkJSMFlzUTBGQlF5eEhRVUZIUlN4RFFVRlNPMEZCUTBGR0xFbEJRVUZCTEVOQlFVTXNSMEZCUjNsRExFTkJRVW83UVVGRFNEczdRVUZEUkN4VFFVRlBla01zUTBGQlVEdEJRVU5JT3p0QlFVVk5MRk5CUVZNd1F5eHRRa0ZCVkN4RFFVRTJRakZETEVOQlFUZENMRVZCUVhkRFJTeERRVUY0UXl4RlFVRXlSRHRCUVVNNVJDeFRRVUZSTEVOQlFVTkdMRU5CUVVRc1NVRkJUU3hEUVVGRFJTeERRVUZTTEVkQlFXRXNRMEZCWWl4SFFVRnBRbkZETEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hEUVVGVmVFTXNRMEZCUXl4SFFVRkhSU3hEUVVGTUxFZEJRVlZ2UXl4eFFrRkJjVUlzUTBGQlEzUkRMRU5CUVVRc1JVRkJTVVVzUTBGQlNpeERRVUY0UXl4RFFVRjRRanRCUVVOSUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElHWjFibU4wYVc5dUlHTmhiR04xYkdGMFpVSmhjMlZVY21GdWMyWnZjbTBvWkc5dE9pQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUXNJSEp2YjNRNklGTldSMGR5WVhCb2FXTnpSV3hsYldWdWRDa2dlMXh1SUNBZ0lDOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzlrWVdkeVpXcHpMMlJoWjNKbExXUXpMMmx6YzNWbGN5OHlNREpjYmx4dUlDQWdJSEpsZEhWeWJpQnliMjkwTG1kbGRGTmpjbVZsYmtOVVRTZ3BJUzVwYm5abGNuTmxLQ2t1YlhWc2RHbHdiSGtvWkc5dExtZGxkRk5qY21WbGJrTlVUU2dwSVNsY2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEVKdmRXNWthVzVuUW05NEtHUnZiVG9nVTFaSFIzSmhjR2hwWTNORmJHVnRaVzUwS1NCN1hHNGdJQ0FnYkdWMElITjJaMUp2YjNRNklGTldSMGR5WVhCb2FXTnpSV3hsYldWdWRDQTlJR1J2YlZ4dUlDQWdJSGRvYVd4bElDaDBjblZsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZG1kU2IyOTBMbkJoY21WdWRFVnNaVzFsYm5RZ2FXNXpkR0Z1WTJWdlppQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjJaMUp2YjNRZ1BTQnpkbWRTYjI5MExuQmhjbVZ1ZEVWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ1ltRnpaVUp2ZUNBOUlHTmhiR04xYkdGMFpVSmhjMlZVY21GdWMyWnZjbTBvWkc5dExDQnpkbWRTYjI5MEtWeHVJQ0FnSUdOdmJuTjBJSEpsWmtKQ2IzZ2dQU0JrYjIwdVoyVjBRa0p2ZUNncFhHNGdJQ0FnWTI5dWMzUWdZMjl2Y21ScGJtRjBaVG9nVzI1MWJXSmxjaXdnYm5WdFltVnlMQ0J1ZFcxaVpYSXNJRzUxYldKbGNsMGdQU0JiWW1GelpVSnZlQzVsSUNzZ2NtVm1Ra0p2ZUM1NExDQmlZWE5sUW05NExtWWdLeUJ5WldaQ1FtOTRMbmtzSUhKbFprSkNiM2d1ZDJsa2RHZ2dLeUF4TENCeVpXWkNRbTk0TG1obGFXZG9kQ0FySURGZFhHNGdJQ0FnY21WMGRYSnVJR052YjNKa2FXNWhkR1ZjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRXhsWVdaT2IyUmxjeWh0WVhOMFpYSTZJRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkQ2s2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZEZ0ZElIdGNiaUFnSUNBdkx5Qm9kSFJ3Y3pvdkwzTjBZV05yYjNabGNtWnNiM2N1WTI5dEwzRjFaWE4wYVc5dWN5OHlNakk0T1RNNU1TOW9iM2N0ZEc4dFkzSmxZWFJsTFdGdUxXRnljbUY1TFc5bUxXeGxZV1l0Ym05a1pYTXRiMll0WVc0dGFIUnRiQzFrYjIwdGRYTnBibWN0YW1GMllYTmpjbWx3ZEZ4dVhHNGdJQ0FnZG1GeUlHNXZaR1Z6SUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxMbU5oYkd3b2JXRnpkR1Z5TG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtGd2lLbHdpS1N3Z01DazdYRzRnSUNBZ2RtRnlJR3hsWVdaT2IyUmxjeUE5SUc1dlpHVnpMbVpwYkhSbGNpaG1kVzVqZEdsdmJpQW9aV3hsYlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWld4bGJTNW9ZWE5EYUdsc1pFNXZaR1Z6S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmxaU0JwWmlCaGJua2diMllnZEdobElHTm9hV3hrSUc1dlpHVnpJR0Z5WlNCbGJHVnRaVzUwYzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JsYkdWdExtTm9hV3hrVG05a1pYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aV3hsYlM1amFHbHNaRTV2WkdWelcybGRMbTV2WkdWVWVYQmxJRDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGxjbVVnYVhNZ1lTQmphR2xzWkNCbGJHVnRaVzUwTENCemJ5QnlaWFIxY200Z1ptRnNjMlVnZEc4Z2JtOTBJR2x1WTJ4MVpHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaHBjeUJ3WVhKbGJuUWdaV3hsYldWdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCc1pXRm1UbTlrWlhNN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSQ1lYTmxiR2x1WlVobGFXZG9kQ2hrYjIwNklGTldSMVJsZUhSRmJHVnRaVzUwS1NCN1hHNGdJQ0FnWTI5dWMzUWdZMkZ1ZG1GeklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblkyRnVkbUZ6SnlsY2JpQWdJQ0JqYjI1emRDQmpkSGdnUFNCallXNTJZWE11WjJWMFEyOXVkR1Y0ZENnbk1tUW5LU0ZjYmlBZ0lDQmpiMjV6ZENCamIyMXdkWFJsWkZOMGVXeGxJRDBnWjJWMFEyOXRjSFYwWldSVGRIbHNaU2hrYjIwcFhHNGdJQ0FnWTI5dWMzUWdabTl1ZEZObGRIUnBibWR6SUQwZ1kyOXRjSFYwWldSVGRIbHNaUzVtYjI1MFhHNWNiaUFnSUNCamRIZ3VabTl1ZENBOUlHWnZiblJUWlhSMGFXNW5jMXh1SUNBZ0lHTnZibk4wSUhSbGVIUk5aWFJ5YVhnZ1BTQmpkSGd1YldWaGMzVnlaVlJsZUhRb0ozbHdabWRxNHBhSUp5bGNiaUFnSUNCeVpYUjFjbTRnZEdWNGRFMWxkSEpwZUM1aFkzUjFZV3hDYjNWdVpHbHVaMEp2ZUVSbGMyTmxiblFnZkh3Z01GeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWlc1amIyUmxUR2x1WlVOaGNDaDBlWEJsUHpvZ2MzUnlhVzVuSUh3Z2JuVnNiQ2s2SUc1MWJXSmxjaUI3WEc0Z0lDQWdjM2RwZEdOb0lDaDBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjNOeGRXRnlaU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z00xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkaWRYUjBKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBeFhHNGdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdNbHh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdWdVkyOWtaVXhwYm1WS2IybHVLSFI1Y0dVL09pQnpkSEpwYm1jZ2ZDQnVkV3hzS1RvZ2JuVnRZbVZ5SUh0Y2JpQWdJQ0J6ZDJsMFkyZ2dLSFI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmJXbDBaWEluT2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlERmNiaUFnSUNBZ0lDQWdZMkZ6WlNBblltVjJaV3duT2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlETmNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF5WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1pXNWpiMlJsVkdWNGRFRnVZMmh2Y2loMGVYQmxQem9nYzNSeWFXNW5JSHdnYm5Wc2JDazZJRzUxYldKbGNpQjdYRzRnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMjFwWkdSc1pTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTWx4dUlDQWdJQ0FnSUNCallYTmxJQ2RsYm1Rbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJREZjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBd1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaM0psWVhSbGMzUkRiMjF0YjI1RWFYWnBjMjl5S0hnNklHNTFiV0psY2l3Z2VUb2diblZ0WW1WeUtUb2diblZ0WW1WeUlIdGNiaUFnSUNCNElEMGdUV0YwYUM1aFluTW9lQ2s3WEc0Z0lDQWdlU0E5SUUxaGRHZ3VZV0p6S0hrcE8xeHVJQ0FnSUhkb2FXeGxJQ2g1S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIwSUQwZ2VUdGNiaUFnSUNBZ0lDQWdlU0E5SUhnZ0pTQjVPMXh1SUNBZ0lDQWdJQ0I0SUQwZ2REdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSGc3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnNaV0Z6ZEVOdmJXMXZiazExYkhScGNHeGxLSGc2SUc1MWJXSmxjaXdnZVRvZ2JuVnRZbVZ5S1RvZ2JuVnRZbVZ5SUh0Y2JpQWdJQ0J5WlhSMWNtNGdLQ0Y0SUh4OElDRjVLU0EvSURBZ09pQk5ZWFJvTG1GaWN5Z29lQ0FxSUhrcElDOGdaM0psWVhSbGMzUkRiMjF0YjI1RWFYWnBjMjl5S0hnc0lIa3BLVHRjYm4waVhYMD0iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJpbXBvcnQgQ2hhcnRTcGVjIGZyb20gJy4vQ2hhcnRTcGVjLmpzJztcclxuaW1wb3J0IEZhY2V0U3BlYyBmcm9tICcuL0ZhY2V0U3BlYy5qcyc7XHJcbmltcG9ydCBUaW1pbmdTcGVjIGZyb20gJy4vVGltaW5nU3BlYy5qcyc7XHJcbmltcG9ydCBBbmltYXRpb24gZnJvbSBcIi4vQW5pbWF0aW9uU3BlYy5qc1wiO1xyXG5pbXBvcnQgeyBDYW5pc1V0aWwgfSBmcm9tICcuL3V0aWwvVXRpbC5qcyc7XHJcbmltcG9ydCB7IGdsb2JhbFZhciB9IGZyb20gJy4vdXRpbC9HbG9iYWxWYXIuanMnO1xyXG5pbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcclxuaW1wb3J0IEdyb3VwaW5nU3BlYyBmcm9tICcuL0dyb3VwaW5nU3BlYy5qcyc7XHJcbmltcG9ydCBBY3Rpb25TcGVjIGZyb20gJy4vQWN0aW9uU3BlYy5qcyc7XHJcblxyXG5jbGFzcyBDYW5pc1NwZWMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50U3BlYyA9IHt9O1xyXG4gICAgICAgIHRoaXMuY2FuaXNPYmogPSB7fTtcclxuICAgICAgICB0aGlzLl9jb25zdGFudHMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5jaGFydFNwZWNzO1xyXG4gICAgICAgIHRoaXMuZmFjZXQ7XHJcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9ucztcclxuICAgICAgICB0aGlzLmNoYXJ0V2lkdGg7XHJcbiAgICAgICAgdGhpcy5jaGFydEhlaWdodDtcclxuICAgICAgICB0aGlzLmhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGNvbnN0YW50cyhjb25BcnIpIHtcclxuICAgICAgICB0aGlzLl9jb25zdGFudHMuY2xlYXIoKTtcclxuICAgICAgICBjb25BcnIuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fY29uc3RhbnRzLnNldChjLm5hbWUsIGMudmFsdWUpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5fY29uc3RhbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29uc3RhbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25zdGFudHM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGFuaW1hdGlvbnMoYW5pSnNvbikge1xyXG4gICAgICAgIGxldCBpZHhBbmlKc29uID0gYW5pSnNvbi5tYXAodG1wQW5pID0+IHtcclxuICAgICAgICAgICAgdG1wQW5pLmNoYXJ0SWR4ID0gMFxyXG4gICAgICAgICAgICByZXR1cm4gdG1wQW5pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCBjaGFydE51bSA9IDA7Ly9udW1iZXIgb2YgY2hhcnRzXHJcbiAgICAgICAgaWYgKHRoaXMuZmFjZXQpIHtcclxuICAgICAgICAgICAgY2hhcnROdW0gPSB0aGlzLmZhY2V0LnZpZXdzWzBdLmZyYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2hhcnROdW0gPSB0aGlzLmNoYXJ0U3BlY3MubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hhcnROdW0gPiAxKSB7Ly9tb3JlIHRoYW4gMSBpbnB1dCBjaGFydFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNoYXJ0TnVtIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wQW5pSnNvbiA9IENhbmlzVXRpbC5kZWVwQ2xvbmUoYW5pSnNvbik7XHJcbiAgICAgICAgICAgICAgICB0bXBBbmlKc29uWzBdLnJlZmVyZW5jZSA9IFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzRW5kO1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcElkeEFuaUpzb24gPSB0bXBBbmlKc29uLm1hcCh0bXBBbmkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcEFuaS5jaGFydElkeCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRtcEFuaTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBpZHhBbmlKc29uLnB1c2goLi4udG1wSWR4QW5pSnNvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9ucyA9IGlkeEFuaUpzb247XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGFuaW1hdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FuaW1hdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc3RhdGljIGxvYWRTcGVjKHVybCwgY2FsbGJhY2spIHtcclxuICAgIC8vICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXHJcbiAgICAvLyAgICAgICAgIG9rU3RhdHVzID0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPT09IFwiZmlsZTpcIiA/IDAgOiAyMDA7XHJcbiAgICAvLyAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgZmFsc2UpO1xyXG4gICAgLy8gICAgIHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9odG1sO2NoYXJzZXQ9dXRmLThcIik7XHJcbiAgICAvLyAgICAgeGhyLnNlbmQobnVsbCk7XHJcbiAgICAvLyAgICAgaWYgKHhoci5zdGF0dXMgPT09IG9rU3RhdHVzKSB7XHJcbiAgICAvLyAgICAgICAgIGxldCBzcGVjID0geGhyLnJlc3BvbnNlVGV4dDtcclxuICAgIC8vICAgICAgICAgY2FsbGJhY2soSlNPTi5wYXJzZShzcGVjKSk7XHJcbiAgICAvLyAgICAgfSBlbHNlIGlmICh4aHIuc3RhdHVzID09PSA0MDQpIHtcclxuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ2NhbiBub3QgZmluZCAnICsgdXJsICsgJyAhIFBsZWFzZSBjaGVjayB0aGUgdXJsLicpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICBwcmVwcm9jZXNzQ2hhcnRzKHNwZWMsIGRpZmZDaGFydCwgc3RhdHVzID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnNvbGUudGltZSgncHJlcGVvY2VzcyBjaGFydHMnKTtcclxuICAgICAgICB0aGlzLmNoYXJ0U3BlY3MgPSBbXTtcclxuICAgICAgICBsZXQgY2FuaXNPYmogPSBzcGVjO1xyXG5cclxuICAgICAgICBpZiAoZGlmZkNoYXJ0KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd1c2luZyBkaWZmZXJlbnQgY2hhcnQsIHByb2Nlc3NpbmcgY2hhcnRzJyk7XHJcbiAgICAgICAgICAgIFtjYW5pc09iai5jaGFydHMsIHRoaXMuaGFzRXJyb3JdID0gQ2hhcnRTcGVjLmNoYXJ0UHJlUHJvY2Vzc2luZyhjYW5pc09iai5jaGFydHMsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0Vycm9yKSByZXR1cm4gY2FuaXNPYmo7XHJcbiAgICAgICAgICAgIC8vZGVhbCB3aXRoIGlucHV0IGNoYXJ0c1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNhbmlzT2JqLmNoYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hhcnROYW1lID0gdHlwZW9mIGNhbmlzT2JqLmNoYXJ0c1tpXS5pZCA9PT0gJ3VuZGVmaW5lZCcgPyAnY2hhcnQnICsgaSA6IGNhbmlzT2JqLmNoYXJ0c1tpXS5pZDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJ0VHlwZSA9IHR5cGVvZiBjYW5pc09iai5jaGFydHNbaV0udHlwZSA9PT0gJ3VuZGVmaW5lZCcgPyBDaGFydFNwZWMuQ0hBUlRfVVJMIDogY2FuaXNPYmouY2hhcnRzW2ldLnR5cGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0bXBDaGFydCA9IG5ldyBDaGFydFNwZWMoY2hhcnROYW1lLCBjaGFydFR5cGUsIGNhbmlzT2JqLmNoYXJ0c1tpXS5zb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydFNwZWNzLnB1c2godG1wQ2hhcnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vaW5pdCBmYWNldFxyXG4gICAgICAgICAgICBpZiAoY2FuaXNPYmouZmFjZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFjZXQgPSBuZXcgRmFjZXRTcGVjKGNhbmlzT2JqLmZhY2V0LnR5cGUsIGNhbmlzT2JqLmZhY2V0LnZpZXdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmhhc0Vycm9yID0gQ2hhcnRTcGVjLmxvYWRDaGFydHModGhpcy5jaGFydFNwZWNzLCB0aGlzLmZhY2V0LCBzdGF0dXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNFcnJvcikgcmV0dXJuIGNhbmlzT2JqO1xyXG5cclxuICAgICAgICAgICAgLy9zZXQgdmlld3BvcnQgZm9yIGpzbW92aW5cclxuICAgICAgICAgICAgZ2xvYmFsVmFyLmpzTW92aW4uc2V0Vmlld3BvcnQoQ2hhcnRTcGVjLnZpZXdwb3J0LmNoYXJ0V2lkdGgsIENoYXJ0U3BlYy52aWV3cG9ydC5jaGFydEhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBDaGFydFNwZWMucmVtb3ZlVHJhbnNBbmRNZXJnZSgpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRDb250YWluZXInKS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Q29udGFpbmVyJykuYXBwZW5kQ2hpbGQoQ2hhcnRTcGVjLnN2Z0NoYXJ0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2xvYmFsVmFyLmpzTW92aW4uY2xlYXJMYXllcnMoKTtcclxuICAgICAgICBDaGFydFNwZWMuYWRkTG90dGllTWFya0xheWVycyhDaGFydFNwZWMuc3ZnQ2hhcnQpO1xyXG5cclxuICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ3ByZXBlb2Nlc3MgY2hhcnRzJyk7XHJcbiAgICAgICAgcmV0dXJuIGNhbmlzT2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXBhcmVTcGVjKHNwZWMpIHtcclxuICAgICAgICBsZXQgZGlmZkNoYXJ0ID0gZmFsc2U7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2NvbXBhcmluZzogJywgdGhpcy5jdXJyZW50U3BlYy5jaGFydHMsIHNwZWMuY2hhcnN0KTtcclxuICAgICAgICBpZiAoKHR5cGVvZiB0aGlzLmN1cnJlbnRTcGVjLmNvbnN0YW50cyAhPT0gJ3VuZGVmaW5lZCcgJiYgSlNPTi5zdHJpbmdpZnkoc3BlYy5jb25zdGFudHMpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLmN1cnJlbnRTcGVjLmNvbnN0YW50cykpIHx8XHJcbiAgICAgICAgICAgICh0eXBlb2YgdGhpcy5jdXJyZW50U3BlYy5jaGFydHMgIT09ICd1bmRlZmluZWQnICYmIEpTT04uc3RyaW5naWZ5KHNwZWMuY2hhcnRzKSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy5jdXJyZW50U3BlYy5jaGFydHMpKSB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5jdXJyZW50U3BlYy5jaGFydHMgPT09ICd1bmRlZmluZWQnIHx8XHJcbiAgICAgICAgICAgICh0eXBlb2Ygc3BlYy5mYWNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMuY3VycmVudFNwZWMuZmFjZXQgIT09ICd1bmRlZmluZWQnICYmIEpTT04uc3RyaW5naWZ5KHNwZWMuZmFjZXQpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLmN1cnJlbnRTcGVjLmZhY2V0KSkgfHxcclxuICAgICAgICAgICAgKCh0eXBlb2YgdGhpcy5jdXJyZW50U3BlYy5mYWNldCA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHNwZWMuZmFjZXQgPT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiB0aGlzLmN1cnJlbnRTcGVjLmZhY2V0ID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygc3BlYy5mYWNldCA9PT0gJ3VuZGVmaW5lZCcpKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBkaWZmQ2hhcnQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlmZkNoYXJ0KSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjaGFydHMgYXJlIGRpZmZlcmVudCcpO1xyXG4gICAgICAgICAgICBBbmltYXRpb24uZG9tTWFya3MuY2xlYXIoKTtcclxuICAgICAgICAgICAgQ2hhcnRTcGVjLmRhdGFNYXJrRGF0dW0uY2xlYXIoKTtcclxuICAgICAgICAgICAgQ2hhcnRTcGVjLm5vbkRhdGFNYXJrRGF0dW0uY2xlYXIoKTtcclxuICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYXJ0VW5kZXJzdGFuZGluZyA9IHt9O1xyXG4gICAgICAgICAgICBBbmltYXRpb24uYW5pbWF0aW9ucy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRTcGVjID0gc3BlYztcclxuICAgICAgICByZXR1cm4gZGlmZkNoYXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrQXR0cnMobGVnYWxBdHRycywgb2JqLCBzdGF0dXMpIHtcclxuICAgICAgICBjb25zdCBhdHRycyA9IE9iamVjdC5rZXlzKG9iaik7XHJcbiAgICAgICAgbGV0IGhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbjIgPSBhdHRycy5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcclxuICAgICAgICAgICAgaWYgKCFsZWdhbEF0dHJzLmluY2x1ZGVzKGF0dHJzW2pdKSkge1xyXG4gICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdG1wVmFsdWUgPSBvYmpbYXR0cnNbal1dO1xyXG4gICAgICAgICAgICAgICAgbGV0IGVyclNwZWNTdHIgPSAnXCInICsgYXR0cnNbal0gKyAnXCI6JztcclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKHRtcFZhbHVlKSkpIHsvL3RoZSB2YWx1ZSBpcyBhIG51bWJlclxyXG4gICAgICAgICAgICAgICAgICAgIGVyclNwZWNTdHIgKz0gJycgKyB0bXBWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRtcFZhbHVlID09PSAnb2JqZWN0Jykgey8vdGhlIHZhbHVlIGlzIGFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyU3BlY1N0ciArPSBKU09OLnN0cmluZ2lmeSh0bXBWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Ugey8vdGhlIHZhbHVlIGlzIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGVyclNwZWNTdHIgKz0gJ1wiJyArIHRtcFZhbHVlICsgJ1wiJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdJbGxlZ2FsIGF0dHJpYnV0ZSBuYW1lIFwiJyArIGF0dHJzW2pdICsgJ1wiLicsIGVyclNwZWM6IGVyclNwZWNTdHIucmVwbGFjZSgvXFxzL2csICcnKSB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc0Vycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2hlY2sgdGhlIHZhbGlkYXR5IG9mIHRoZSBzcGVjXHJcbiAgICAgKiBAcGFyYW0geyp9IHNwZWMgXHJcbiAgICAgKi9cclxuICAgIGNoZWNrU3BlYyhzcGVjLCBzdGF0dXMpIHtcclxuICAgICAgICBsZXQgaGFzRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICAvL2NoZWNrIGNoYXJ0c1xyXG4gICAgICAgIGlmIChzcGVjLmNoYXJ0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnVGhlcmUgYXJlIG5vIGlucHV0IGNoYXJ0cy4nLCBlcnJTcGVjOiAnXCJjaGFydHNcIjpbXScgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9jaGVjayBjaGFydCBzb3VyY2VcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gc3BlYy5jaGFydHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgLy9jaGVjayBmb3Igd3JvbmcgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhDaGFydFNwZWMuYXR0cnMsIHNwZWMuY2hhcnRzW2ldLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXNwZWMuY2hhcnRzW2ldLnNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ05vIGNoYXJ0IHNvdXJjZSBmb3VuZCBpbiBjaGFydCBpdGVtLicsIGVyclNwZWM6IEpTT04uc3RyaW5naWZ5KHNwZWMuY2hhcnRzW2ldKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZVN0ciA9IHNwZWMuY2hhcnRzW2ldLnNvdXJjZTtcclxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VTdHIuaW5kZXhPZignLmRzdmcnKSA8IDAgJiYgIShzcGVjLmNoYXJ0c1tpXS5zdGFydCAmJiBzcGVjLmNoYXJ0c1tpXS5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdObyByYW5nZSBzcGVjaWZpY2F0aW9uIGZvdW5kIGZvciBpbnB1dCBjaGFydCBpbmRleCAuJywgZXJyU3BlYzogSlNPTi5zdHJpbmdpZnkoc3BlYy5jaGFydHNbaV0pLnJlcGxhY2UoL1xccy9nLCAnJykgfTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NoZWNrIGFuaW1hdGlvblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzcGVjLmFuaW1hdGlvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgLy9jaGVjayBmb3Igd3JvbmcgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhBbmltYXRpb24uYXR0cnMsIHNwZWMuYW5pbWF0aW9uc1tpXSwgc3RhdHVzKTtcclxuICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFzcGVjLmFuaW1hdGlvbnNbaV0uc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdObyBzZWxlY3RvciBmb3VuZCBpbiBhbmltYXRpb24gdW5pdC4nLCBlcnJTcGVjOiBKU09OLnN0cmluZ2lmeShzcGVjLmFuaW1hdGlvbnNbaV0pLnJlcGxhY2UoL1xccy9nLCAnJykgfTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0cykge1xyXG4gICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ05vIGVmZmVjdHMgZm91bmQgaW4gYW5pbWF0aW9uIHVuaXQuJywgZXJyU3BlYzogSlNPTi5zdHJpbmdpZnkoc3BlYy5hbmltYXRpb25zW2ldKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgcmVmZXJlbmNlXHJcbiAgICAgICAgICAgICAgICBpZiAoc3BlYy5hbmltYXRpb25zW2ldLnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMoVGltaW5nU3BlYy50aW1pbmdSZWYpLmluY2x1ZGVzKFRpbWluZ1NwZWMudHJhbnNSZWYoc3BlYy5hbmltYXRpb25zW2ldLnJlZmVyZW5jZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZSB2YWx1ZSBvZiB0aGUgcmVmZXJlbmNlIGhhcyB0byBiZSBvbmUgb2Y6IHN0YXJ0IHdpdGggcHJldmlvdXMgb3Igc3RhcnQgYWZ0ZXIgcHJldmlvdXMuJywgZXJyU3BlYzogJ1wicmVmZXJlbmNlXCI6XCInICsgc3BlYy5hbmltYXRpb25zW2ldLnJlZmVyZW5jZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIG9mZnNldCBvYmplY3RcclxuICAgICAgICAgICAgICAgIGlmIChzcGVjLmFuaW1hdGlvbnNbaV0ub2Zmc2V0ICYmIHR5cGVvZiBzcGVjLmFuaW1hdGlvbnNbaV0ub2Zmc2V0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0F0dHJzKFRpbWluZ1NwZWMuZGF0YUJpbmRBdHRycywgc3BlYy5hbmltYXRpb25zW2ldLm9mZnNldCwgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBncm91cGluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKHNwZWMuYW5pbWF0aW9uc1tpXS5ncm91cGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0dyb3VwaW5nU3BlYyhzcGVjLmFuaW1hdGlvbnNbaV0uZ3JvdXBpbmcsIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgZWZmZWN0c1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbjIgPSBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0cy5sZW5ndGg7IGogPCBsZW4yOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGZvciB3cm9uZyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0aGlzLmNoZWNrQXR0cnMoQWN0aW9uU3BlYy5hdHRycywgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0sIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ05vIGVmZmVjdCB0eXBlIGZvdW5kIGluIGVmZmVjdCBpdGVtLicsIGVyclNwZWM6IEpTT04uc3RyaW5naWZ5KHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdKS5yZXBsYWNlKC9cXHMvZywgJycpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIU9iamVjdC52YWx1ZXMoQWN0aW9uU3BlYy5hY3Rpb25UeXBlcykuaW5jbHVkZXMoc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0udHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnSW52YWxpZCBlZmZlY3QgdHlwZSBcIicgKyBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS50eXBlICsgJ1wiLicsIGVyclNwZWM6ICdcInR5cGVcIjpcIicgKyBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS50eXBlLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0ub2Zmc2V0ICYmIHR5cGVvZiBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS5vZmZzZXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0F0dHJzKFRpbWluZ1NwZWMuZGF0YUJpbmRBdHRycywgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0ub2Zmc2V0LCBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS5kdXJhdGlvbiAmJiB0eXBlb2Ygc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0uZHVyYXRpb24gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdGhpcy5jaGVja0F0dHJzKFRpbWluZ1NwZWMuZGF0YUJpbmRBdHRycywgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0uZHVyYXRpb24sIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLmVhc2luZyAmJiAhT2JqZWN0LnZhbHVlcyhBY3Rpb25TcGVjLmVhc2luZ1R5cGUpLmluY2x1ZGVzKHNwZWMuYW5pbWF0aW9uc1tpXS5lZmZlY3RzW2pdLmVhc2luZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnSW52YWxpZCBlYXNpbmcgdHlwZSBcIicgKyBzcGVjLmFuaW1hdGlvbnNbaV0uZWZmZWN0c1tqXS5lYXNpbmcgKyAnXCIuJywgZXJyU3BlYzogJ1wiZWFzaW5nXCI6XCInICsgc3BlYy5hbmltYXRpb25zW2ldLmVmZmVjdHNbal0uZWFzaW5nLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzRXJyb3I7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tHcm91cGluZ1NwZWMoZ3JvdXBpbmdTcGVjLCBzdGF0dXMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGdyb3VwaW5nU3BlYyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGdyb3VwaW5nU3BlYyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgY29uc3QgZXJyU3RyID0gdHlwZW9mIGdyb3VwaW5nU3BlYyA9PT0gJ251bWJlcicgPyAnXCJncm91cGluZ1wiOicgKyBncm91cGluZ1NwZWMgOiAnXCJncm91cGluZ1wiOlwiJyArIGdyb3VwaW5nU3BlYy5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJztcclxuICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0ludmFsaWQgZ3JvdXBpbmcgdmFsdWUuJywgZXJyU3BlYzogZXJyU3RyIH07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9jaGVjayBmb3Igd3JvbmcgYXR0cmlidXRlc1xyXG4gICAgICAgIGxldCBoYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhHcm91cGluZ1NwZWMuYXR0cnMsIGdyb3VwaW5nU3BlYywgc3RhdHVzKTtcclxuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZ3JvdXBpbmdTcGVjLnJlZmVyZW5jZSkge1xyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKFRpbWluZ1NwZWMudGltaW5nUmVmKS5pbmNsdWRlcyhUaW1pbmdTcGVjLnRyYW5zUmVmKGdyb3VwaW5nU3BlYy5yZWZlcmVuY2UpKSkge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1RoZSB2YWx1ZSBvZiB0aGUgcmVmZXJlbmNlIGhhcyB0byBiZSBvbmUgb2Y6IHN0YXJ0IHdpdGggcHJldmlvdXMgb3Igc3RhcnQgYWZ0ZXIgcHJldmlvdXMuJywgZXJyU3BlYzogJ1wicmVmZXJlbmNlXCI6XCInICsgZ3JvdXBpbmdTcGVjLnJlZmVyZW5jZS5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdyb3VwaW5nU3BlYy5zb3J0ICYmIHR5cGVvZiBncm91cGluZ1NwZWMuc29ydCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgbGV0IHNvcnRIYXNFcnJvciA9IHRoaXMuY2hlY2tBdHRycyhHcm91cGluZ1NwZWMuc29ydEF0dHJzLCBncm91cGluZ1NwZWMuc29ydCwgc3RhdHVzKTtcclxuICAgICAgICAgICAgaWYgKHNvcnRIYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBncm91cGluZ1NwZWMuc29ydCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ0ludmFsaWQgc29ydCB2YWx1ZS4nLCBlcnJTcGVjOiAnXCJzb3J0XCI6JyArIGdyb3VwaW5nU3BlYy5zb3J0IH07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZ3JvdXBpbmdTcGVjLmdyb3VwaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrR3JvdXBpbmdTcGVjKGdyb3VwaW5nU3BlYy5ncm91cGluZywgc3RhdHVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGluaXQoc3BlYywgc3RhdHVzID0gbnVsbCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHNwZWMpO1xyXG4gICAgICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgdGhpcy5oYXNFcnJvciA9IHRoaXMuY2hlY2tTcGVjKHNwZWMsIHN0YXR1cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaGFzRXJyb3IpIHtcclxuICAgICAgICAgICAgQW5pbWF0aW9uLnJlc2V0QWxsKCk7XHJcbiAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXMuY2xlYXIoKTsvL2NsZWFyIGtleWZyYW1lIHJlY29yZDtcclxuICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lc01hcmsuY2xlYXIoKTsvL2NsZWFyIGtleWZyYW1lIHJlY29yZDtcclxuICAgICAgICAgICAgaWYgKHNwZWMuY2hhcnRzLmxlbmd0aCA9PT0gMCkgey8vbm8gY2hhcnRzIHNwZWNpZmllZFxyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uLmRvbU1hcmtzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBDaGFydFNwZWMuZGF0YU1hcmtEYXR1bS5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgQ2hhcnRTcGVjLm5vbkRhdGFNYXJrRGF0dW0uY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIENoYXJ0U3BlYy5jaGFydFVuZGVyc3RhbmRpbmcgPSB7fTtcclxuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmltYXRpb25zLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Q29udGFpbmVyJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRDb250YWluZXInKS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vc2V0IGZyYW1lcmF0ZSBmb3IganNtb3ZpblxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsVmFyLmpzTW92aW4uc2V0RnJhbWVSYXRlKFRpbWluZ1NwZWMuRlJBTUVfUkFURSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlmZkNoYXJ0ID0gdGhpcy5jb21wYXJlU3BlYyhzcGVjKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdkaWZmIGNoYXJ0OiAnLCBkaWZmQ2hhcnQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNhbmlzT2JqID0gYXdhaXQgdGhpcy5wcmVwcm9jZXNzQ2hhcnRzKHNwZWMsIGRpZmZDaGFydCwgc3RhdHVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2luaXQgdXNlciBkZWZpbmVkIHZhcmlhYmxlc1xyXG4gICAgICAgICAgICAgICAgaWYoY2FuaXNPYmouY29uc3RhbnRzICYmIHR5cGVvZiBjYW5pc09iai5jb25zdGFudHMgIT09ICd1bmRlZmluZWQnKXtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0YW50cyA9IGNhbmlzT2JqLmNvbnN0YW50cztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2RlYWwgd2l0aCBhbmltYXRpb25zXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBjYW5pc09iai5hbmltYXRpb25zO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuYW5pbWF0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdEFuaW1hdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBhbmlJZHggPSAwOyBhbmlJZHggPCB0aGlzLmFuaW1hdGlvbnMubGVuZ3RoOyBhbmlJZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYW5pbWF0aW9uSnNvbiA9IHRoaXMuYW5pbWF0aW9uc1thbmlJZHhdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS50aW1lKCd1c2luZyBkb20nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy91c2UgdGhlIHNlbGVjdG9yIGluIGFuaW1hdGlvbiB0byBzZWxlY3QgbWFya3MgYW5kIHJlY29yZCBkb20gYXR0cnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS50aW1lKCdxdWVyeSBkb20nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRtcENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcENvbnRhaW5lci5pbm5lckhUTUwgPSBDaGFydFNwZWMuY2hhcnRzW2FuaW1hdGlvbkpzb24uY2hhcnRJZHhdLm91dGVySFRNTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtzID0gdG1wQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoYW5pbWF0aW9uSnNvbi5zZWxlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYW5pbWF0aW9uSnNvbi5zZWxlY3RvciA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnVGhlIHNlbGVjdG9yIG5lZWQgdG8gYmUgYSBDU1Mgc2VsZWN0b3InLCBlcnJTcGVjOiAnXCJzZWxlY3RvclwiOicgKyBhbmltYXRpb25Kc29uLnNlbGVjdG9yIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdUaGUgc2VsZWN0b3IgJyArIGFuaW1hdGlvbkpzb24uc2VsZWN0b3IgKyAnIHNlbGVjdHMgbm8gbWFya3MnLCBlcnJTcGVjOiAnXCJzZWxlY3RvclwiOlwiJyArIGFuaW1hdGlvbkpzb24uc2VsZWN0b3IucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ3F1ZXJ5IGRvbScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVzZWRDaGFuZ2VkQXR0cnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDaGFydFNwZWMuY2hhbmdlZEF0dHJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkQ2hhbmdlZEF0dHJzLnB1c2goQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGUgYW5pbWF0aW9uIGlzIGV4aXN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiByZW1vdmUgbm9uIGV4aXN0ZWQgYW5pbWF0aW9ucyBpbiB0aGUgY3VycmVudCBzcGVjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZWxlY3RvciBvZiB0aGlzIGFuaW1hdGlvbjogJywgYW5pbWF0aW9uSnNvbi5zZWxlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbmltYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQW5pbWF0aW9uLmFuaW1hdGlvbnMuZ2V0KGFuaW1hdGlvbkpzb24uc2VsZWN0b3IpICE9PSAndW5kZWZpbmVkJykgey8vYWxyZWFkeSBoYXZlIHRoaXMgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBBbmltYXRpb24uYW5pbWF0aW9ucy5nZXQoYW5pbWF0aW9uSnNvbi5zZWxlY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udHJhbnNsYXRlKGFuaW1hdGlvbkpzb24sIHVzZWRDaGFuZ2VkQXR0cnMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRyYW5zbGF0ZShhbmltYXRpb25Kc29uLCB1c2VkQ2hhbmdlZEF0dHJzKTsvL3RyYW5zbGF0ZSBmcm9tIGpzb24gb2JqIHRvIEFuaW1hdGlvbiBvYmpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5hbmltYXRpb25zLnNldChhbmltYXRpb25Kc29uLnNlbGVjdG9yLCBhbmltYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVwbGFjZSBjb250YW50IHZhcmlhYmxlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmNvbnN0YW50cy5zaXplID4gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24ucmVwbGFjZUNvbnN0YW50cyh0aGlzLmNvbnN0YW50cywgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0cmFuc2xhdGVkIGFuaW1hdGlvbjogJywgYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS50aW1lRW5kKCd1c2luZyBkb20nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtJZHMgPSBbXTsvL3JlY29yZCBhbGwgaWRzIG9mIHNlbGVjdGVkIG1hcmtzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWUoJ2V4dHJhY3QgbWFyayBkb20nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChtYXJrcywgZnVuY3Rpb24gKG1hcmspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyay5jbGFzc0xpc3QuY29udGFpbnMoJ21hcmsnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0lkID0gbWFyay5nZXRBdHRyaWJ1dGUoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtJZHMucHVzaChtYXJrSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFuaW1hdGlvbi5kb21NYXJrcy5nZXQobWFya0lkKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJvY2VzcyBwYXRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyay50YWdOYW1lID09PSAncGF0aCcpIHsvL2NvbnNpZGVyIHRoZSBsaW5rYWdlIHNoYXBlIGxhdGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtKU09OID0gQ2FuaXNVdGlsLnRvSlNPTihtYXJrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtZWRBdHRycyA9IENhbmlzVXRpbC5kaXNjcmV0aXplUGF0aChtYXJrSlNPTik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZEF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZEF0dHJzLnR5cGUgPT09ICdsaW5lcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNmb3JtZWRBdHRycy5kYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0clsneCcgKyAoMSArIDIgKiBpKV0gPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbaV1bMF1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0clsneScgKyAoMSArIDIgKiBpKV0gPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbaV1bMF1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0clsneCcgKyAoMiArIDIgKiBpKV0gPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbaV1bMV1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0pTT04uYXR0clsneScgKyAoMiArIDIgKiBpKV0gPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbaV1bMV1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGZBdHRyc0RhdGFLZXlzID0gT2JqZWN0LmtleXModHJhbnNmb3JtZWRBdHRycy5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRmQXR0cnNEYXRhS2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0QXR0ciA9IHRmQXR0cnNEYXRhS2V5c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodEF0dHIgPT09ICdyYWRpdXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbdEF0dHJdLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtKU09OLmF0dHIuaW5uZXJSYWRpdXMgPSB0cmFuc2Zvcm1lZEF0dHJzLmRhdGFbdEF0dHJdWzBdLnJ4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtKU09OLmF0dHIub3V0dGVyUmFkaXVzID0gdHJhbnNmb3JtZWRBdHRycy5kYXRhW3RBdHRyXVsxXS5yeCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrSlNPTi5hdHRyLmlubmVyUmFkaXVzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtKU09OLmF0dHIub3V0dGVyUmFkaXVzID0gdHJhbnNmb3JtZWRBdHRycy5kYXRhW3RBdHRyXVswXS5yeCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrSlNPTi5hdHRyW3RBdHRyXSA9IHRyYW5zZm9ybWVkQXR0cnMuZGF0YVt0QXR0cl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1hcmtKU09OKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyayA9IENhbmlzVXRpbC50b0RPTShtYXJrSlNPTik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBEb21BdHRyT2JqID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0ckFyciA9IFsuLi5tYXJrLmF0dHJpYnV0ZXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF0dHJOYW1lID0gYXR0ckFycltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqW2F0dHJOYW1lLm5hbWVdID0gbWFyay5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hcmtJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydiYldpZHRoJ10gPSBtYXJrRG9tLmdldEJCb3goKS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2JiSGVpZ2h0J10gPSBtYXJrRG9tLmdldEJCb3goKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydiYlgnXSA9IG1hcmtEb20uZ2V0QkJveCgpLng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydiYlknXSA9IG1hcmtEb20uZ2V0QkJveCgpLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydjb250ZW50J10gPSBtYXJrLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnaWQnXSA9IG1hcmtJZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhRGF0dW1BdHRyVmFsdWUgPSBKU09OLnBhcnNlKG1hcmsuZ2V0QXR0cmlidXRlKCdkYXRhLWRhdHVtJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YURhdHVtQXR0clZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFEYXR1bUF0dHJWYWx1ZSA9IGRhdGFEYXR1bUF0dHJWYWx1ZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2RhdGEtZGF0dW0nXSA9IGRhdGFEYXR1bUF0dHJWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbmlzU3BlYy5tYXJrRGF0YS5zZXQobWFya0lkLCBkYXRhRGF0dW1BdHRyVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsndGFnTmFtZSddID0gbWFyay50YWdOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmsudGFnTmFtZSA9PT0gJ3BhdGgnIHx8IG1hcmsudGFnTmFtZSA9PT0gJ2xpbmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnc3Ryb2tlLWRhc2hhcnJheSddID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobWFya0lkKS5nZXRUb3RhbExlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ3N0cm9rZS1kYXNob2Zmc2V0J10gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtYXJrSWQpLmdldFRvdGFsTGVuZ3RoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmsudGFnTmFtZSA9PT0gJ3BhdGgnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkaXNjRCA9IENhbmlzVXRpbC5kaXNjcmV0aXplRChtYXJrLmdldEF0dHJpYnV0ZSgnZCcpLCAnIzAwMCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRpc2NEICE9PSAndW5kZWZpbmVkJyAmJiBkaXNjRCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc2NELnR5cGUgPT09ICdwaWVzJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2N4J10gPSBkaXNjRC5kYXRhLmN4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2N5J10gPSBkaXNjRC5kYXRhLmN5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ3N0YXJ0QW5nbGUnXSA9IChkaXNjRC5kYXRhLmNsb2Nrd2lzZSA/IGRpc2NELmRhdGEuc3RhcnRBbmdsZSA6IGRpc2NELmRhdGEuZW5kQW5nbGUpIC0gMSAvIChNYXRoLlBJICogMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnZW5kQW5nbGUnXSA9ICghZGlzY0QuZGF0YS5jbG9ja3dpc2UgPyBkaXNjRC5kYXRhLnN0YXJ0QW5nbGUgOiBkaXNjRC5kYXRhLmVuZEFuZ2xlKSArIE1hdGguUEkgKiA0ICsgMSAvIChNYXRoLlBJICogMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc2NELmRhdGEucmFkaXVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRG9tQXR0ck9ialsnaW5uZXJSYWRpdXMnXSA9IGRpc2NELmRhdGEucmFkaXVzWzBdLnJ4ID4gZGlzY0QuZGF0YS5yYWRpdXNbMV0ucnggPyBkaXNjRC5kYXRhLnJhZGl1c1sxXS5yeCA6IGRpc2NELmRhdGEucmFkaXVzWzBdLnJ4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydvdXR0ZXJSYWRpdXMnXSA9IGRpc2NELmRhdGEucmFkaXVzWzBdLnJ4ID4gZGlzY0QuZGF0YS5yYWRpdXNbMV0ucnggPyBkaXNjRC5kYXRhLnJhZGl1c1swXS5yeCA6IGRpc2NELmRhdGEucmFkaXVzWzFdLnJ4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydvdXR0ZXJSYWRpdXMnXSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcERvbUF0dHJPYmpbJ2lubmVyUmFkaXVzJ10gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb21BdHRyT2JqWydvdXR0ZXJSYWRpdXMnXSA9IGRpc2NELmRhdGEucmFkaXVzWzBdLnJ4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbmltYXRpb24uZG9tTWFya3Muc2V0KG1hcmtJZCwgdG1wRG9tQXR0ck9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdhZnRlcicsIEFuaW1hdGlvbi5kb21NYXJrcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ2V4dHJhY3QgbWFyayBkb20nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY2FsQW5pVGltZShtYXJrSWRzLCBsYXN0QW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0bXBDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKGNhbGxiYWNrLCBzdGF0dXMgPSBudWxsKSB7XHJcbiAgICAgICAgY29uc29sZS50aW1lKCdyZW5kZXJpbmcnKTtcclxuICAgICAgICBBbmltYXRpb24ucmVuZGVyQW5pbWF0aW9uKHN0YXR1cyk7XHJcbiAgICAgICAgQW5pbWF0aW9uLmZpbmRLZXlmcmFtZXMoKTtcclxuICAgICAgICAvL21hcCBhbmltYXRpb24ga2V5ZnJhbWVzIHRvIGxvdHRpZSBzcGVjXHJcbiAgICAgICAgQW5pbWF0aW9uLm1hcFRvTG90dGllU3BlYygpO1xyXG5cclxuICAgICAgICAvL2V4cG9ydCBsb3R0aWUgSlNPTlxyXG4gICAgICAgIGxldCBsb3R0aWVKU09OID0gZ2xvYmFsVmFyLmpzTW92aW4udG9KU09OKCk7XHJcbiAgICAgICAgQ2FuaXNTcGVjLmxvdHRpZUpTT04gPSBsb3R0aWVKU09OO1xyXG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgncmVuZGVyaW5nJyk7XHJcbiAgICAgICAgaWYgKHN0YXR1cykge1xyXG4gICAgICAgICAgICBzdGF0dXMuaW5mbyA9ICdEb25lIHJlbmRlcmluZy4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGxvdHRpZUpTT04pO1xyXG4gICAgfVxyXG59XHJcblxyXG5DYW5pc1NwZWMubG90dGllSlNPTiA9ICcnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2FuaXNTcGVjOyIsImltcG9ydCB7IENhbmlzVXRpbCwgVmlld3BvcnQgfSBmcm9tIFwiLi91dGlsL1V0aWxcIjtcclxuaW1wb3J0IEZhY2V0U3BlYyBmcm9tIFwiLi9GYWNldFNwZWNcIjtcclxuaW1wb3J0IHsgZ2xvYmFsVmFyIH0gZnJvbSAnLi91dGlsL0dsb2JhbFZhci5qcyc7XHJcblxyXG5jbGFzcyBDaGFydFNwZWMge1xyXG4gICAgY29uc3RydWN0b3IoaWQsIHR5cGUsIHNvdXJjZSkge1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjaGFydFByZVByb2Nlc3NpbmcoY2hhcnRTcGVjcywgc3RhdHVzKSB7XHJcbiAgICAgICAgbGV0IGlucHV0U3BlY3MgPSBbXTtcclxuICAgICAgICBsZXQgaGFzRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0U3BlY3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGlucHV0U3BlYyA9IGNoYXJ0U3BlY3NbaV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXRTcGVjLnN0YXJ0ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgaW5wdXRTcGVjLmVuZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzdGFydElkeCA9IHBhcnNlSW50KGlucHV0U3BlYy5zdGFydCksIGVuZElkeCA9IHBhcnNlSW50KGlucHV0U3BlYy5lbmQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVuZElkeCA8IHN0YXJ0SWR4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyBzdGFydCBhbmQgZW5kIGNoYXJ0IGluZGV4LicsIGVyclNwZWM6IEpTT04uc3RyaW5naWZ5KGlucHV0U3BlY3MpLnJlcGxhY2UoL1xccy9nLCAnJykgfTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEJsb2NrcyA9IGlucHV0U3BlYy5zb3VyY2Uuc3BsaXQoJy8nKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnROYW1lID0gdHlwZW9mIGlucHV0U3BlYy5pZCA9PT0gJ3VuZGVmaW5lZCcgPyB0bXBCbG9ja3NbdG1wQmxvY2tzLmxlbmd0aCAtIDFdIDogaW5wdXRTcGVjLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBzdGFydElkeDsgaiA8PSBlbmRJZHg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFNwZWNzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBjaGFydE5hbWUgKyBqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzb3VyY2VcIjogaW5wdXRTcGVjLnNvdXJjZSArIGogKyAnLmRzdmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaW5wdXRTcGVjcy5wdXNoKGlucHV0U3BlYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtpbnB1dFNwZWNzLCBoYXNFcnJvcl07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGxvYWRDaGFydHMoY2hhcnRTcGVjcywgZmFjZXQsIHN0YXR1cykge1xyXG4gICAgICAgIGxldCBuYW1lQ2hhcnRzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIENoYXJ0U3BlYy5jaGFydHMgPSBbXTtcclxuICAgICAgICBsZXQgbnVsbENoYXJ0cyA9IFtdO1xyXG4gICAgICAgIGxldCBkZWZhdWx0V2lkdGggPSAwO1xyXG4gICAgICAgIGxldCBkZWZhdWx0SGVpZ2h0ID0gMDtcclxuICAgICAgICBsZXQgaGFzRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0U3BlY3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGNoYXJ0U3BlY3NbaV0udHlwZSA9PT0gQ2hhcnRTcGVjLkNIQVJUX1VSTCkgey8vbG9hZCBjaGFydCB3aXRoIHVybFxyXG4gICAgICAgICAgICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIG9rU3RhdHVzID0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPT09IFwiZmlsZTpcIiA/IDAgOiAyMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3ZnQ29udGVudDtcclxuICAgICAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCBjaGFydFNwZWNzW2ldLnNvdXJjZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgeGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L2h0bWw7Y2hhcnNldD11dGYtOFwiKTtcclxuICAgICAgICAgICAgICAgIHhoci5zZW5kKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IG9rU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcERpdi5pbm5lckhUTUwgPSB4aHIucmVzcG9uc2VUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIHN2Z0NvbnRlbnQgPSB0bXBEaXYuY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZpZXdCb3hOdW1zID0gc3ZnQ29udGVudC5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKS5zcGxpdCgnICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRXaWR0aCA9IHBhcnNlRmxvYXQodmlld0JveE51bXNbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRIZWlnaHQgPSBwYXJzZUZsb2F0KHZpZXdCb3hOdW1zWzNdKTtcclxuICAgICAgICAgICAgICAgICAgICBDaGFydFNwZWMuY2hhcnRzLnB1c2goc3ZnQ29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZUNoYXJ0cy5zZXQoY2hhcnRTcGVjc1tpXS5pZCwgQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnVsbENoYXJ0cy51bnNoaWZ0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnXCJzb3VyY2VcIjonICsgY2hhcnRTcGVjc1tpXS5zb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdDYW4gbm90IGZpbmQgJyArIGNoYXJ0U3BlY3NbaV0uc291cmNlICsgJyAhIFBsZWFzZSBjaGVjayB0aGUgdXJsLicsIGVyclNwZWM6ICdcInNvdXJjZVwiOlwiJyArIGNoYXJ0U3BlY3NbaV0uc291cmNlLnJlcGxhY2UoL1xccy9nLCAnJykgKyAnXCInIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjaGFydFNwZWNzW2ldLnNvdXJjZSwgdHlwZW9mIGNoYXJ0U3BlY3NbaV0uc291cmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9yZW1vdmUgdGhlIGVtcHR5IGNoYXJ0cyBcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bGxDaGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY2hhcnRTcGVjcy5zbGljZShudWxsQ2hhcnRzW2ldLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vZ2VuZXJhdGUgY2hhcnQgZmFjZXRzXHJcbiAgICAgICAgdHlwZW9mIGZhY2V0ICE9PSAndW5kZWZpbmVkJyA/IENoYXJ0U3BlYy5mYWNldFZpZXdzKG5hbWVDaGFydHMsIGZhY2V0KSA6IHRoaXMudmlld3BvcnQuc2V0Vmlld3BvcnQoZGVmYXVsdFdpZHRoLCBkZWZhdWx0SGVpZ2h0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGhhc0Vycm9yO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZW1vdmVUcmFuc0FuZE1lcmdlKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBDaGFydFNwZWMuY2hhcnRzW2ldLnNldEF0dHJpYnV0ZSgndHJhbnMnLCAnMCwwJyk7XHJcbiAgICAgICAgICAgIENoYXJ0U3BlYy5yZW1vdmVUcmFuc2l0aW9ucyhDaGFydFNwZWMuY2hhcnRzW2ldLmNoaWxkcmVuWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdmdDaGFydCA9IENoYXJ0U3BlYy5tZXJnZUNoYXJ0cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmYWNldFZpZXdzKG5hbWVDaGFydHMsIGZhY2V0KSB7XHJcbiAgICAgICAgaWYgKGZhY2V0LnZpZXdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGNoYXJ0c1RvQ29tYmluZSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZhY2V0LnZpZXdzWzBdLmZyYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcFJlY29yZGVyID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZhY2V0LnZpZXdzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0TmFtZSA9IGZhY2V0LnZpZXdzW2pdLmZyYW1lc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWVDaGFydHMuZ2V0KGNoYXJ0TmFtZSkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJlY29yZGVyLnB1c2goQ2hhcnRTcGVjLmNoYXJ0c1tuYW1lQ2hhcnRzLmdldChjaGFydE5hbWUpXS5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGFydCBuYW1lICcgKyBjaGFydE5hbWUgKyAnIGlzIHVuZGVmaW5lZCAhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRtcFJlY29yZGVyLmxlbmd0aCA9PT0gZmFjZXQudmlld3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRzVG9Db21iaW5lLnB1c2godG1wUmVjb3JkZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIENoYXJ0U3BlYy5jb21iaW5lQ2hhcnRzKGZhY2V0LnR5cGUsIGZhY2V0LnZpZXdzLmxlbmd0aCwgY2hhcnRzVG9Db21iaW5lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNvbWJpbmVDaGFydHMoZmFjZXRUeXBlLCBmYWNldE51bSwgY2hhcnRzVG9Db21iaW5lKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdENoYXJ0cyA9IFtdLFxyXG4gICAgICAgICAgICBjaGFydE1hcmdpbiA9IDIwLFxyXG4gICAgICAgICAgICBvcmlXaWR0aCA9IDAsIG9yaUhlaWdodCA9IDAsXHJcbiAgICAgICAgICAgIHdpZHRoQWZ0ZXJGYWNldCA9IG9yaVdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHRBZnRlckZhY2V0ID0gb3JpSGVpZ2h0O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnRzVG9Db21iaW5lLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBDaGFydHMgPSBjaGFydHNUb0NvbWJpbmVbaV07XHJcbiAgICAgICAgICAgIG9yaVdpZHRoID0gcGFyc2VGbG9hdCh0bXBDaGFydHNbMF0uZ2V0QXR0cmlidXRlKCd3aWR0aCcpKTtcclxuICAgICAgICAgICAgb3JpSGVpZ2h0ID0gcGFyc2VGbG9hdCh0bXBDaGFydHNbMF0uZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSk7XHJcbiAgICAgICAgICAgIHdpZHRoQWZ0ZXJGYWNldCA9IG9yaVdpZHRoO1xyXG4gICAgICAgICAgICBoZWlnaHRBZnRlckZhY2V0ID0gb3JpSGVpZ2h0O1xyXG4gICAgICAgICAgICBsZXQgdmlld0JveE51bXMgPSB0bXBDaGFydHNbMF0uZ2V0QXR0cmlidXRlKCd2aWV3Qm94Jykuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgbGV0IHZpZXdCb3hXID0gcGFyc2VGbG9hdCh2aWV3Qm94TnVtc1syXSk7XHJcbiAgICAgICAgICAgIGxldCB2aWV3Qm94SCA9IHBhcnNlRmxvYXQodmlld0JveE51bXNbM10pO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNoYXJ0VHJhbnNGb3JtID0gQ2FuaXNVdGlsLmdldFRyYW5zZm9ybUF0dHJzKHRtcENoYXJ0c1swXS5jaGlsZHJlblswXSk7XHJcbiAgICAgICAgICAgIHRtcENoYXJ0c1swXS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIGNoYXJ0VHJhbnNGb3JtLnRyYW5zTnVtc1swXSArICcsJyArIGNoYXJ0VHJhbnNGb3JtLnRyYW5zTnVtc1sxXSArICcpJyk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZmFjZXRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZhY2V0U3BlYy5mYWNldFR5cGUucm93OlxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodEFmdGVyRmFjZXQgKj0gdG1wQ2hhcnRzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB0bXBDaGFydHNbMF0uc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBvcmlIZWlnaHQgKiB0bXBDaGFydHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBDaGFydHNbMF0uc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAnICsgdmlld0JveFcgKyAnICcgKyBvcmlIZWlnaHQgKiB0bXBDaGFydHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgRmFjZXRTcGVjLmZhY2V0VHlwZS5jb2w6XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGhBZnRlckZhY2V0ICo9IHRtcENoYXJ0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wQ2hhcnRzWzBdLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBvcmlXaWR0aCAqIHRtcENoYXJ0cy5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcENoYXJ0c1swXS5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCAnMCAwICcgKyBvcmlXaWR0aCAqIHRtcENoYXJ0cy5sZW5ndGggKyAnICcgKyB2aWV3Qm94SCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdG1wQ2hhcnRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wQ2hhcnQgPSB0bXBDaGFydHNbal07XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wTWFya3MgPSB0bXBDaGFydC5xdWVyeVNlbGVjdG9yQWxsKCcubWFyaycpO1xyXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHRtcE1hcmtzLCAobSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpZE51bSA9IHBhcnNlSW50KG0uZ2V0QXR0cmlidXRlKCdpZCcpLnN1YnN0cmluZyg0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ21hcmsnICsgKGlkTnVtICsgaiAqIDEwMDAwMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG0uY2xhc3NMaXN0LmFkZCgnZmFjZXQnICsgaik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7Ly9wdXQgdGhlIG1hcmtzIGluIHRoZSBmb2xsb3dpbmcgY2hhcnRzIHRvIHRoZSAxc3QgY2hhcnRcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRDb250ZW50RyA9IHRtcENoYXJ0LmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFydENoaWxkcmVuID0gY2hhcnRDb250ZW50Ry5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtID0gMDsgbSA8IGNoYXJ0Q2hpbGRyZW4ubGVuZ3RoOyBtKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcERvbSA9IGNoYXJ0Q2hpbGRyZW5bbV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm1BdHRycyA9IENhbmlzVXRpbC5nZXRUcmFuc2Zvcm1BdHRycyh0bXBEb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZhY2V0VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBGYWNldFNwZWMuZmFjZXRUeXBlLnJvdzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb20uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyB0cmFuc2Zvcm1BdHRycy50cmFuc051bXNbMF0gKyAnLCcgKyAodHJhbnNmb3JtQXR0cnMudHJhbnNOdW1zWzFdICsgKG9yaUhlaWdodCArIGNoYXJ0TWFyZ2luKSAqIGopICsgJykgJyArICdzY2FsZSgnICsgdHJhbnNmb3JtQXR0cnMuc2NhbGVOdW0gKyAnKScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBGYWNldFNwZWMuZmFjZXRUeXBlLmNvbDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBEb20uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyAodHJhbnNmb3JtQXR0cnMudHJhbnNOdW1zWzBdICsgKG9yaVdpZHRoICsgY2hhcnRNYXJnaW4pICogaikgKyAnLCcgKyB0cmFuc2Zvcm1BdHRycy50cmFuc051bXNbMV0gKyAnKSAnICsgJ3NjYWxlKCcgKyB0cmFuc2Zvcm1BdHRycy5zY2FsZU51bSArICcpJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wQ2hhcnRzWzBdLmNoaWxkcmVuWzBdLmFwcGVuZENoaWxkKHRtcERvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdENoYXJ0cy5wdXNoKHRtcENoYXJ0c1swXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIENoYXJ0U3BlYy5jaGFydHMgPSByZXN1bHRDaGFydHM7XHJcbiAgICAgICAgdGhpcy52aWV3cG9ydC5zZXRWaWV3cG9ydCh3aWR0aEFmdGVyRmFjZXQsIGhlaWdodEFmdGVyRmFjZXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBtZXJnZUNoYXJ0cygpIHtcclxuICAgICAgICBsZXQgYWxsTWFya3MgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgbGV0IG1hcmtTdGF0dXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgbGV0IG1hcmtUZW1wbGV0ZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgbGV0IGF0dHJOYW1lcyA9IFsneCcsICd5JywgJ2N4JywgJ2N5JywgJ3gxJywgJ3kxJywgJ3gyJywgJ3kyJywgJ2QnLCAncicsICd3aWR0aCcsICdoZWlnaHQnLCAndGV4dENvbnRlbnQnLCAnZmlsbCcsICdzdHJva2UnLCAnb3BhY2l0eSddO1xyXG4gICAgICAgIGxldCBudWxsU3RhdHVzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhdHRyTmFtZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgbnVsbFN0YXR1c1thdHRyTmFtZXNbal1dID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDaGFydFNwZWMuY2hhcnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBDaGFydCA9IENoYXJ0U3BlYy5jaGFydHNbaV07XHJcbiAgICAgICAgICAgIGxldCBtYXJrcyA9IHRtcENoYXJ0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tYXJrJyk7XHJcbiAgICAgICAgICAgIGlmIChtYXJrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobWFya3MsIChtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmtJZCA9IG0uZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbGxNYXJrcy5hZGQobWFya0lkKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhdHVzT2JqID0ge307Ly9zdGF0dXMgb2Ygb25lIG1hcmsgaW4gY2hhcnQgaVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXR0ck5hbWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyTmFtZXNbal0gPT09ICd0ZXh0Q29udGVudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09ialthdHRyTmFtZXNbal1dID0gbS5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmpbYXR0ck5hbWVzW2pdXSA9IG0uZ2V0QXR0cmlidXRlKGF0dHJOYW1lc1tqXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXJrU3RhdHVzLmdldChtYXJrSWQpID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrU3RhdHVzLnNldChtYXJrSWQsIG5ldyBBcnJheShDaGFydFNwZWMuY2hhcnRzLmxlbmd0aCkuZmlsbChudWxsU3RhdHVzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBtYXJrU3RhdHVzLmdldChtYXJrSWQpW2ldID0gc3RhdHVzT2JqO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtUZW1wbGV0ZXMuc2V0KG1hcmtJZCwgbS5vdXRlckhUTUwpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9maW5kIHRoZSBjaGFuZ2VkIGF0dHJpYnV0ZXNcclxuICAgICAgICBDaGFydFNwZWMuY2hhbmdlZEF0dHJzID0gW107XHJcbiAgICAgICAgbGV0IGF0dHJOYW1lc0NvcHkgPSBDYW5pc1V0aWwuZGVlcENsb25lKGF0dHJOYW1lcyk7XHJcbiAgICAgICAgbWFya1N0YXR1cy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0dXNBcnIsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJOYW1lc0NvcHkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBmbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBjb21wYXJlU3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdGF0dXNBcnIubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXR1c0FycltqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVN0YXR1cyA9IHN0YXR1c0FycltqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdGF0dXNBcnIubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXR1c0FycltqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1c0FycltqXVthdHRyTmFtZXNDb3B5W2ldXSAhPT0gY29tcGFyZVN0YXR1c1thdHRyTmFtZXNDb3B5W2ldXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYW5nZWRBdHRycy5wdXNoKGF0dHJOYW1lc0NvcHlbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZsYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZXNDb3B5LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vZmluZCBkaWZmZXJlbnQgY21kcyBpZiB0aGVyZSBpcyBkIGluIGNoYW5nZWRBdHRyc1xyXG4gICAgICAgIGxldCBkaWZmQ21kcyA9IG5ldyBNYXAoKTsvL2tleTpjbWQgbmFtZSwgdmFsdWU6IHtjbWRJZHgsIGRpZmZBdHRySWR4c31cclxuICAgICAgICBpZiAoQ2hhcnRTcGVjLmNoYW5nZWRBdHRycy5pbmRleE9mKCdkJykgPj0gMCkge1xyXG4gICAgICAgICAgICBkaWZmQ21kcyA9IENhbmlzVXRpbC5maW5kRGlmZkNtZHMobWFya1N0YXR1cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjaGFuZ2VkIGF0dHJpYnV0ZXM6ICcsIENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMpO1xyXG5cclxuICAgICAgICAvL2FkZCBtaXNzaW5nIG1hcmtzIHRvIGVhY2ggY2hhcnRcclxuICAgICAgICBhbGxNYXJrcyA9IEFycmF5LmZyb20oYWxsTWFya3MpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgQ2hhcnRTcGVjLmNoYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFsbE1hcmtzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQ2hhcnRTcGVjLmNoYXJ0c1tpXS5xdWVyeVNlbGVjdG9yQWxsKCcjJyArIGFsbE1hcmtzW2pdKS5sZW5ndGggPT09IDApIHsvL2NoYXJ0IGkgZG9lcyBub3QgaGF2ZSBtYXJrIGpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWFya1N0ciA9IG1hcmtUZW1wbGV0ZXMuZ2V0KGFsbE1hcmtzW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wRGl2LmlubmVySFRNTCA9IG1hcmtTdHI7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1hcmsgPSB0bXBEaXYuY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXR1c09iaiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc2V0IHRoZSBjaGFuZ2VkIGF0dHJpYnV0ZXMgdG8gdGhlIGluaXQgc3RhdGVcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMubGVuZ3RoOyBhKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0gPT09ICd5JyAmJiBDaGFydFNwZWMuY2hhbmdlZEF0dHJzLmluZGV4T2YoJ2hlaWdodCcpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrWSA9ICFtYXJrLmdldEF0dHJpYnV0ZSgneScpID8gMCA6IHBhcnNlRmxvYXQobWFyay5nZXRBdHRyaWJ1dGUoJ3knKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0hlaWdodCA9ICFtYXJrLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykgPyAwIDogcGFyc2VGbG9hdChtYXJrLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRhcmdldFZhbHVlID0gbWFya1kgKyBtYXJrSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyay5zZXRBdHRyaWJ1dGUoJ3knLCB0YXJnZXRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmoueSA9IHRhcmdldFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0gPT09ICdkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdEQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFyay5nZXRBdHRyaWJ1dGUoJ2QnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEQgPSBDYW5pc1V0aWwuc2V0UGF0aERWYWx1ZShtYXJrLmdldEF0dHJpYnV0ZSgnZCcpLCB0cnVlLCAwLCAwLCBkaWZmQ21kcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrLnNldEF0dHJpYnV0ZSgnZCcsIHJlc3VsdEQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqLmQgPSByZXN1bHREO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0gPT09ICd0ZXh0Q29udGVudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNPYmoudGV4dENvbnRlbnQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdID09PSAnZmlsbCcgfHwgQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSA9PT0gJ3N0cm9rZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWFyay5nZXRBdHRyaWJ1dGUoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSkgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyay5zZXRBdHRyaWJ1dGUoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSwgJyNGRkZGRkYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09ialtDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXSA9IG1hcmsuZ2V0QXR0cmlidXRlKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFsneCcsICd5JywgJ2N4JywgJ2N5JywgJ3gxJywgJ3kxJywgJ3gyJywgJ3kyJ10uaW5jbHVkZXMoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSA9PT0gJ3gyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrLnNldEF0dHJpYnV0ZSgneDInLCBwYXJzZUZsb2F0KG1hcmsuZ2V0QXR0cmlidXRlKCd4MScpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09ialsneDInXSA9IHBhcnNlRmxvYXQobWFyay5nZXRBdHRyaWJ1dGUoJ3gxJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSA9PT0gJ3kyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrLnNldEF0dHJpYnV0ZSgneTInLCBwYXJzZUZsb2F0KG1hcmsuZ2V0QXR0cmlidXRlKCd5MScpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09ialsneTInXSA9IHBhcnNlRmxvYXQobWFyay5nZXRBdHRyaWJ1dGUoJ3kxJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c09ialtDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXSA9IHBhcnNlRmxvYXQobWFyay5nZXRBdHRyaWJ1dGUoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyay5zZXRBdHRyaWJ1dGUoQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzT2JqW0NoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV1dID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya1N0ciA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjUwMFwiIGhlaWdodD1cIjUwMFwiPicgKyBtYXJrLm91dGVySFRNTCArICc8L3N2Zz4nO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN2Z01hcmsgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKG1hcmtTdHIsIFwiaW1hZ2Uvc3ZnK3htbFwiKS5sYXN0Q2hpbGQuY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgQ2hhcnRTcGVjLmNoYXJ0c1tpXS5xdWVyeVNlbGVjdG9yKCcjY2hhcnRDb250ZW50JykuYXBwZW5kQ2hpbGQoc3ZnTWFyayk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya1N0YXR1cy5nZXQoYWxsTWFya3Nbal0pW2ldID0gc3RhdHVzT2JqO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9zZXQgZGF0YS10cmFucyBvZiBjaGFydCAwXHJcbiAgICAgICAgQ2hhcnRTcGVjLmRhdGFUcmFucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFsbE1hcmtzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGxldCBzdGF0dXNBcnIgPSBtYXJrU3RhdHVzLmdldChhbGxNYXJrc1tqXSk7XHJcbiAgICAgICAgICAgIGxldCBkYXRhVHJhbnNBcnIgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHNpID0gMDsgc2kgPCBzdGF0dXNBcnIubGVuZ3RoOyBzaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wU3RhdHVzID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMubGVuZ3RoOyBhKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAnciddLmluY2x1ZGVzKENoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFN0YXR1c1tDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXSA9IDEwMCAqIHN0YXR1c0FycltzaV1bQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXV0gLyBzdGF0dXNBcnJbMF1bQ2hhcnRTcGVjLmNoYW5nZWRBdHRyc1thXV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wU3RhdHVzW0NoYXJ0U3BlYy5jaGFuZ2VkQXR0cnNbYV1dID0gc3RhdHVzQXJyW3NpXVtDaGFydFNwZWMuY2hhbmdlZEF0dHJzW2FdXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkYXRhVHJhbnNBcnIucHVzaCh0bXBTdGF0dXMpOy8vbWFyayBzdGF0dXMgaW4gY2hhcnRzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9jb3B5IHRoZSBzdGF0dXMgb2YgdGhlIDFzdCBjaGFydCBhcyB0aGUgaW5pdCBzdGF0dXNcclxuICAgICAgICAgICAgQ2hhcnRTcGVjLmRhdGFUcmFucy5zZXQoYWxsTWFya3Nbal0sIGRhdGFUcmFuc0Fycik7XHJcbiAgICAgICAgICAgIGxldCBtYXJrRG9tID0gQ2hhcnRTcGVjLmNoYXJ0c1swXS5xdWVyeVNlbGVjdG9yKCcjJyArIGFsbE1hcmtzW2pdKTtcclxuICAgICAgICAgICAgbWFya0RvbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdHJhbnNpdGlvbicsIEpTT04uc3RyaW5naWZ5KHsgXCJkYXRhVHJhbnNcIjogZGF0YVRyYW5zQXJyIH0sIG51bGwsICdcXHQnKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBDaGFydFNwZWMuY2hhcnRzWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRCQm94ZXMoKSB7XHJcbiAgICAgICAgbGV0IHN2ZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydENvbnRhaW5lcicpLmNoaWxkcmVuWzBdO1xyXG4gICAgICAgIGxldCBtYXJrcyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsKCdbaWRePVwibWFya1wiXScpO1xyXG4gICAgICAgIGxldCBiQm94ZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgaWYgKG1hcmtzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKG1hcmtzLCAobSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hcmtJZCA9IG0uZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBiQm94O1xyXG4gICAgICAgICAgICAgICAgaWYgKG0udGFnTmFtZSA9PT0gJ3RleHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYkJveCA9IG0uZ2V0QkJveCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJCb3gud2lkdGggKz0gMTA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJCb3ggPSBtLmdldEJCb3goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJCb3hlcy5zZXQobWFya0lkLCBiQm94KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJCb3hlcztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcmVtb3ZlVHJhbnNpdGlvbnModCkge1xyXG4gICAgICAgIGxldCB0ciA9IHQuZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKTtcclxuICAgICAgICBsZXQgcGFyZW50VHJhbnMgPSB0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCd0cmFucycpLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgaWYgKHQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtYXJrJykpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFEYXR1bUF0dHJWYWx1ZSA9IEpTT04ucGFyc2UodC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0dW0nKSk7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGFEYXR1bUF0dHJWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGRhdGFEYXR1bUF0dHJWYWx1ZSA9IGRhdGFEYXR1bUF0dHJWYWx1ZVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgaXNOb25EYXRhTWFyayA9IGZhbHNlO1xyXG4gICAgICAgICAgICBBcnJheS5mcm9tKHQuY2xhc3NMaXN0KS5mb3JFYWNoKChjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjID0gYy50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMuaW5jbHVkZXMoJ2F4aXMnKSB8fCBjLmluY2x1ZGVzKCdsZWdlbmQnKSB8fCBjLmluY2x1ZGVzKCd0aXRsZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNOb25EYXRhTWFyayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGlmIChpc05vbkRhdGFNYXJrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vbkRhdGFNYXJrRGF0dW0uc2V0KHQuZ2V0QXR0cmlidXRlKCdpZCcpLCBkYXRhRGF0dW1BdHRyVmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhTWFya0RhdHVtLnNldCh0LmdldEF0dHJpYnV0ZSgnaWQnKSwgZGF0YURhdHVtQXR0clZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHQuY2xhc3NMaXN0LmNvbnRhaW5zKCdheGlzJykgfHwgdC5jbGFzc0xpc3QuY29udGFpbnMoJ2xlZ2VuZCcpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcERhdGFEYXR1bSA9IEpTT04ucGFyc2UodC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0dW0nKSk7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRtcERhdGFEYXR1bSkpIHtcclxuICAgICAgICAgICAgICAgIHRtcERhdGFEYXR1bSA9IHRtcERhdGFEYXR1bVswXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5jbGFzc0xpc3QuY29udGFpbnMoJ2F4aXMnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFydFVuZGVyc3RhbmRpbmdbdG1wRGF0YURhdHVtLnBvc2l0aW9uXSA9ICdwb3NpdGlvbic7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodC5jbGFzc0xpc3QuY29udGFpbnMoJ2xlZ2VuZCcpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjaGFubmVsIGluIHRtcERhdGFEYXR1bSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRVbmRlcnN0YW5kaW5nW3RtcERhdGFEYXR1bVtjaGFubmVsXV0gPSBjaGFubmVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHIpIHtcclxuICAgICAgICAgICAgdHIgPSB0ci5yZXBsYWNlKC90cmFuc2xhdGV8c2NhbGV8cm90YXRlfFxccy9nLCAobSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG0gPT09ICcgJyA/ICcnIDogJ0AnICsgbTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRyID0gdHIucmVwbGFjZSgvKF5AKil8KEAqJCkvZywgJycpLnNwbGl0KCdAJyk7XHJcbiAgICAgICAgICAgIGxldCBzY2FsZVN0ciA9ICcnLCB0cmFuc1N0ciA9ICcnO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJbaV0uaW5kZXhPZigndHJhbnNsYXRlJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zU3RyID0gdHJbaV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyW2ldLmluZGV4T2YoJ3NjYWxlJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlU3RyID0gdHJbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHRyYW5zUG9zaVN0ciA9IHRyYW5zU3RyLnJlcGxhY2UoL3RyYW5zbGF0ZVxcKHwgfFxcKS9nLCAnJykuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIHNjYWxlU3RyKTtcclxuICAgICAgICAgICAgaWYgKHQudGFnTmFtZSA9PT0gJ2cnKSB7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgndHJhbnMnLCAocGFyc2VGbG9hdCh0cmFuc1Bvc2lTdHJbMF0pICsgcGFyc2VGbG9hdChwYXJlbnRUcmFuc1swXSkpICsgJywnICsgKHBhcnNlRmxvYXQodHJhbnNQb3NpU3RyWzFdKSArIHBhcnNlRmxvYXQocGFyZW50VHJhbnNbMV0pKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBDYW5pc1V0aWwudHJhbnNTaGFwZSh0LCBwYXJzZUZsb2F0KHRyYW5zUG9zaVN0clswXSkgKyBwYXJzZUZsb2F0KHBhcmVudFRyYW5zWzBdKSwgcGFyc2VGbG9hdCh0cmFuc1Bvc2lTdHJbMV0pICsgcGFyc2VGbG9hdChwYXJlbnRUcmFuc1sxXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHQudGFnTmFtZSA9PT0gJ2cnKSB7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSgndHJhbnMnLCBwYXJlbnRUcmFucy5qb2luKCcsJykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgQ2FuaXNVdGlsLnRyYW5zU2hhcGUodCwgcGFyc2VGbG9hdChwYXJlbnRUcmFuc1swXSksIHBhcnNlRmxvYXQocGFyZW50VHJhbnNbMV0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgQ2hhcnRTcGVjLnJlbW92ZVRyYW5zaXRpb25zKHQuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhZGRMb3R0aWVNYXJrTGF5ZXJzKHQpIHtcclxuICAgICAgICBpZiAodC50YWdOYW1lICE9PSAnZycgJiYgdC50YWdOYW1lICE9PSAnc3ZnJykge1xyXG4gICAgICAgICAgICBpZiAodC5jbGFzc0xpc3QuY29udGFpbnMoJ21hcmsnKSkge1xyXG4gICAgICAgICAgICAgICAgZ2xvYmFsVmFyLm1hcmtMYXllcnMuc2V0KHQuZ2V0QXR0cmlidXRlKCdpZCcpLCBnbG9iYWxWYXIuanNNb3Zpbi5hZGRMYXllcih0KSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBnbG9iYWxWYXIuanNNb3Zpbi5hZGRMYXllcih0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBDaGFydFNwZWMuYWRkTG90dGllTWFya0xheWVycyh0LmNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbkNoYXJ0U3BlYy5DSEFSVF9VUkwgPSAndXJsJztcclxuQ2hhcnRTcGVjLkNIQVJUX0NPTlRFTlQgPSAnY29udGVudCc7XHJcbkNoYXJ0U3BlYy5jaGFydHMgPSBbXTtcclxuQ2hhcnRTcGVjLmF0dHJzID0gWydpZCcsICdzb3VyY2UnLCAnc3RhcnQnLCAnZW5kJ107XHJcbkNoYXJ0U3BlYy5jaGFuZ2VkQXR0cnMgPSBbXTtcclxuQ2hhcnRTcGVjLnZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0KCk7XHJcbkNoYXJ0U3BlYy5kYXRhVHJhbnMgPSBuZXcgTWFwKCk7XHJcbkNoYXJ0U3BlYy5zdmdDaGFydDtcclxuQ2hhcnRTcGVjLmNoYXJ0VW5kZXJzdGFuZGluZyA9IHt9O1xyXG5DaGFydFNwZWMuZGF0YU1hcmtEYXR1bSA9IG5ldyBNYXAoKTtcclxuQ2hhcnRTcGVjLm5vbkRhdGFNYXJrRGF0dW0gPSBuZXcgTWFwKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDaGFydFNwZWM7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuICB2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5FYXNpbmdGYWN0b3J5ID0gdm9pZCAwO1xyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XHJcblxyXG4vLyBwYXJhbWV0ZXJzIGV4dHJhY3RlZCBmcm9tIGh0dHBzOi8vZWFzaW5ncy5uZXQvXHJcbnZhciBFYXNpbmdGYWN0b3J5ID1cclxuLyojX19QVVJFX18qL1xyXG5mdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gRWFzaW5nRmFjdG9yeSgpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFYXNpbmdGYWN0b3J5KTtcclxuICB9XHJcblxyXG4gIF9jcmVhdGVDbGFzcyhFYXNpbmdGYWN0b3J5LCBudWxsLCBbe1xyXG4gICAga2V5OiBcImxpbmVhclwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxpbmVhcigpIHtcclxuICAgICAgcmV0dXJuIFtbWzFdLCBbMV1dLCBbWzBdLCBbMF1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluU2luZVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJblNpbmUoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjQ3XSwgWzBdXSwgW1swLjc0NV0sIFswLjcxNV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dFNpbmVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlT3V0U2luZSgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMzldLCBbMC41NzVdXSwgW1swLjU2NV0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5PdXRTaW5lXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluT3V0U2luZSgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuNDQ1XSwgWzAuMDVdXSwgW1swLjU1XSwgWzAuOTVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJblF1YWRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5RdWFkKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC41NV0sIFswLjA4NV1dLCBbWzAuNjhdLCBbMC41M11dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dFF1YWRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlT3V0UXVhZCgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMjVdLCBbMC40Nl1dLCBbWzAuNDVdLCBbMC45NF1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0UXVhZFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dFF1YWQoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjQ1NV0sIFswLjAzXV0sIFtbMC41MTVdLCBbMC45NTVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbkN1YmljXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluQ3ViaWMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjU1XSwgWzAuMDU1XV0sIFtbMC42NzVdLCBbMC4xOV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dEN1YmljXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dEN1YmljKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4yMTVdLCBbMC42MV1dLCBbWzAuMzU1XSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJbk91dEN1YmljXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluT3V0Q3ViaWMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjY0NV0sIFswLjA0NV1dLCBbWzAuMzU1XSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJblF1YXJ0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluUXVhcnQoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjg5NV0sIFswLjAzXV0sIFtbMC42ODVdLCBbMC4yMl1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dFF1YXJ0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dFF1YXJ0KCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4xNjVdLCBbMC44NF1dLCBbWzAuNDRdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0UXVhcnRcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlSW5PdXRRdWFydCgpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuNzddLCBbMF1dLCBbWzAuMTc1XSwgWzFdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VJblF1aW50XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluUXVpbnQoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjc1NV0sIFswLjA1XV0sIFtbMC44NTVdLCBbMC4wNl1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dFF1aW50XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dFF1aW50KCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4yM10sIFsxXV0sIFtbMC4zMl0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5PdXRRdWludFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dFF1aW50KCkge1xyXG4gICAgICByZXR1cm4gW1tbMC44Nl0sIFswXV0sIFtbMC4wN10sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5FeHBvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluRXhwbygpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuOTVdLCBbMC4wNV1dLCBbWzAuNzk1XSwgWzAuMDM1XV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlT3V0RXhwb1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VPdXRFeHBvKCkge1xyXG4gICAgICByZXR1cm4gW1tbMC4xOV0sIFsxXV0sIFtbMC4yMl0sIFsxXV1dO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJlYXNlSW5PdXRFeHBvXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZUluT3V0RXhwbygpIHtcclxuICAgICAgcmV0dXJuIFtbWzFdLCBbMF1dLCBbWzBdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluQ2lyY1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbkNpcmMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjZdLCBbMC4wNF1dLCBbWzAuOThdLCBbMC4zMzVdXV07XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVhc2VPdXRDaXJjXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZWFzZU91dENpcmMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjA3NV0sIFswLjgyXV0sIFtbMC4xNjVdLCBbMV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0Q2lyY1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dENpcmMoKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjc4NV0sIFswLjEzNV1dLCBbWzAuMTVdLCBbMC44Nl1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluQmFja1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbkJhY2soKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjZdLCBbLTAuMjhdXSwgW1swLjczNV0sIFswLjA0NV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZU91dEJhY2tcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlYXNlT3V0QmFjaygpIHtcclxuICAgICAgcmV0dXJuIFtbWzAuMTc1XSwgWzAuODg1XV0sIFtbMC4zMl0sIFsxLjI3NV1dXTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZWFzZUluT3V0QmFja1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVhc2VJbk91dEJhY2soKSB7XHJcbiAgICAgIHJldHVybiBbW1swLjY4XSwgWy0wLjU1XV0sIFtbMC4yNjVdLCBbMS41NV1dXTtcclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBFYXNpbmdGYWN0b3J5O1xyXG59KCk7XHJcblxyXG5leHBvcnRzLkVhc2luZ0ZhY3RvcnkgPSBFYXNpbmdGYWN0b3J5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OWxZWE5wYm1jdWRITWlYU3dpYm1GdFpYTWlPbHNpUldGemFXNW5SbUZqZEc5eWVTSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096dEJRVUZCTzBsQlNXRkJMR0U3T3pzN096czdPenMyUWtGRGRVSTdRVUZETlVJc1lVRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZFTEVOQlFVUXNSVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGRUxFVkJRV0VzUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCUkN4RlFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT0xFTkJRV0lzUTBGQlVEdEJRVU5JT3pzN2FVTkJSVzFETzBGQlEyaERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGblFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhMUVVGRUxFTkJRVllzUTBGQmFFSXNRMEZCVUR0QlFVTklPenM3YTBOQlJXOURPMEZCUTJwRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhMUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZ2UWl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNRMEZCY0VJc1EwRkJVRHRCUVVOSU96czdiME5CUlhORE8wRkJRMjVETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eEpRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnZRaXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4SlFVRkVMRU5CUVZRc1EwRkJjRUlzUTBGQlVEdEJRVU5JT3pzN2FVTkJSVzFETzBGQlEyaERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4TFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhKUVVGRUxFTkJRVlFzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YTBOQlJXOURPMEZCUTJwRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhKUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZ0UWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eEpRVUZFTEVOQlFWUXNRMEZCYmtJc1EwRkJVRHRCUVVOSU96czdiME5CUlhORE8wRkJRMjVETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eEpRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnZRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4TFFVRkVMRU5CUVZZc1EwRkJjRUlzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4TFFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YlVOQlJYRkRPMEZCUTJ4RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQlJDeEZRVUZ2UWl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNRMEZCY0VJc1EwRkJVRHRCUVVOSU96czdjVU5CUlhWRE8wRkJRM0JETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJSQ3hEUVVGRUxFVkJRVlVzUTBGQlF5eExRVUZFTEVOQlFWWXNRMEZCUkN4RlFVRnhRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4RFFVRkVMRU5CUVZZc1EwRkJja0lzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YlVOQlJYRkRPMEZCUTJ4RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQlJDeEZRVUZ2UWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCY0VJc1EwRkJVRHRCUVVOSU96czdjVU5CUlhWRE8wRkJRM0JETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCUkN4RlFVRm5RaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4RFFVRkVMRU5CUVZZc1EwRkJhRUlzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4SlFVRkVMRU5CUVZZc1EwRkJSQ3hGUVVGdlFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhKUVVGRUxFTkJRVllzUTBGQmNFSXNRMEZCVUR0QlFVTklPenM3YlVOQlJYRkRPMEZCUTJ4RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZuUWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCYUVJc1EwRkJVRHRCUVVOSU96czdjVU5CUlhWRE8wRkJRM0JETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCUkN4RlFVRm5RaXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4RFFVRkVMRU5CUVZRc1EwRkJhRUlzUTBGQlVEdEJRVU5JT3pzN2FVTkJSVzFETzBGQlEyaERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlJDeERRVUZFTEVWQlFWTXNRMEZCUXl4SlFVRkVMRU5CUVZRc1EwRkJSQ3hGUVVGdFFpeERRVUZETEVOQlFVTXNTMEZCUkN4RFFVRkVMRVZCUVZVc1EwRkJReXhMUVVGRUxFTkJRVllzUTBGQmJrSXNRMEZCVUR0QlFVTklPenM3YTBOQlJXOURPMEZCUTJwRExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQlJDeEZRVUZuUWl4RFFVRkRMRU5CUVVNc1NVRkJSQ3hEUVVGRUxFVkJRVk1zUTBGQlF5eERRVUZFTEVOQlFWUXNRMEZCYUVJc1EwRkJVRHRCUVVOSU96czdiME5CUlhORE8wRkJRMjVETEdGQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJSQ3hEUVVGRUxFVkJRVTBzUTBGQlF5eERRVUZFTEVOQlFVNHNRMEZCUkN4RlFVRmhMRU5CUVVNc1EwRkJReXhEUVVGRUxFTkJRVVFzUlVGQlRTeERRVUZETEVOQlFVUXNRMEZCVGl4RFFVRmlMRU5CUVZBN1FVRkRTRHM3TzJsRFFVVnRRenRCUVVOb1F5eGhRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVRc1EwRkJSQ3hGUVVGUkxFTkJRVU1zU1VGQlJDeERRVUZTTEVOQlFVUXNSVUZCYTBJc1EwRkJReXhEUVVGRExFbEJRVVFzUTBGQlJDeEZRVUZUTEVOQlFVTXNTMEZCUkN4RFFVRlVMRU5CUVd4Q0xFTkJRVkE3UVVGRFNEczdPMnREUVVWdlF6dEJRVU5xUXl4aFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVVFzUTBGQlJDeEZRVUZWTEVOQlFVTXNTVUZCUkN4RFFVRldMRU5CUVVRc1JVRkJiMElzUTBGQlF5eERRVUZETEV0QlFVUXNRMEZCUkN4RlFVRlZMRU5CUVVNc1EwRkJSQ3hEUVVGV0xFTkJRWEJDTEVOQlFWQTdRVUZEU0RzN08yOURRVVZ6UXp0QlFVTnVReXhoUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVUXNRMEZCUkN4RlFVRlZMRU5CUVVNc1MwRkJSQ3hEUVVGV0xFTkJRVVFzUlVGQmNVSXNRMEZCUXl4RFFVRkRMRWxCUVVRc1EwRkJSQ3hGUVVGVExFTkJRVU1zU1VGQlJDeERRVUZVTEVOQlFYSkNMRU5CUVZBN1FVRkRTRHM3TzJsRFFVVnRRenRCUVVOb1F5eGhRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVRc1EwRkJSQ3hGUVVGUkxFTkJRVU1zUTBGQlF5eEpRVUZHTEVOQlFWSXNRMEZCUkN4RlFVRnRRaXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4TFFVRkVMRU5CUVZZc1EwRkJia0lzUTBGQlVEdEJRVU5JT3pzN2EwTkJSVzlETzBGQlEycERMR0ZCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlJDeERRVUZFTEVWQlFWVXNRMEZCUXl4TFFVRkVMRU5CUVZZc1EwRkJSQ3hGUVVGeFFpeERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhMUVVGRUxFTkJRVlFzUTBGQmNrSXNRMEZCVUR0QlFVTklPenM3YjBOQlJYTkRPMEZCUTI1RExHRkJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCUkN4RFFVRkVMRVZCUVZNc1EwRkJReXhEUVVGRExFbEJRVVlzUTBGQlZDeERRVUZFTEVWQlFXOUNMRU5CUVVNc1EwRkJReXhMUVVGRUxFTkJRVVFzUlVGQlZTeERRVUZETEVsQlFVUXNRMEZCVml4RFFVRndRaXhEUVVGUU8wRkJRMGdpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdkx5QndZWEpoYldWMFpYSnpJR1Y0ZEhKaFkzUmxaQ0JtY205dElHaDBkSEJ6T2k4dlpXRnphVzVuY3k1dVpYUXZYRzVjYm1WNGNHOXlkQ0IwZVhCbElFVmhjMmx1WjBaMWJtTjBhVzl1SUQwZ2JuVnRZbVZ5VzExYlhWdGRYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkZZWE5wYm1kR1lXTjBiM0o1SUh0Y2JpQWdJQ0J6ZEdGMGFXTWdiR2x1WldGeUtDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekZkTENCYk1WMWRMQ0JiV3pCZExDQmJNRjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1VGFXNWxLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU5EZGRMQ0JiTUYxZExDQmJXekF1TnpRMVhTd2dXekF1TnpFMVhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVlBkWFJUYVc1bEtDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekF1TXpsZExDQmJNQzQxTnpWZFhTd2dXMXN3TGpVMk5WMHNJRnN4WFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrOTFkRk5wYm1Vb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzQwTkRWZExDQmJNQzR3TlYxZExDQmJXekF1TlRWZExDQmJNQzQ1TlYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNVJkV0ZrS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVOVFZkTENCYk1DNHdPRFZkWFN3Z1cxc3dMalk0WFN3Z1d6QXVOVE5kWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlU5MWRGRjFZV1FvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNHlOVjBzSUZzd0xqUTJYVjBzSUZ0Yk1DNDBOVjBzSUZzd0xqazBYVjFkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHVmhjMlZKYms5MWRGRjFZV1FvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNDBOVFZkTENCYk1DNHdNMTFkTENCYld6QXVOVEUxWFN3Z1d6QXVPVFUxWFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrTjFZbWxqS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVOVFZkTENCYk1DNHdOVFZkWFN3Z1cxc3dMalkzTlYwc0lGc3dMakU1WFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWUGRYUkRkV0pwWXlncE9pQkZZWE5wYm1kR2RXNWpkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlcxc3dMakl4TlYwc0lGc3dMall4WFYwc0lGdGJNQzR6TlRWZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1UGRYUkRkV0pwWXlncE9pQkZZWE5wYm1kR2RXNWpkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlcxc3dMalkwTlYwc0lGc3dMakEwTlYxZExDQmJXekF1TXpVMVhTd2dXekZkWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlVsdVVYVmhjblFvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNDRPVFZkTENCYk1DNHdNMTFkTENCYld6QXVOamcxWFN3Z1d6QXVNakpkWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlU5MWRGRjFZWEowS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVNVFkxWFN3Z1d6QXVPRFJkWFN3Z1cxc3dMalEwWFN3Z1d6RmRYVjFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkR0YwYVdNZ1pXRnpaVWx1VDNWMFVYVmhjblFvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNDNOMTBzSUZzd1hWMHNJRnRiTUM0eE56VmRMQ0JiTVYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFNXNVJkV2x1ZENncE9pQkZZWE5wYm1kR2RXNWpkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlcxc3dMamMxTlYwc0lGc3dMakExWFYwc0lGdGJNQzQ0TlRWZExDQmJNQzR3TmwxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFQzVjBVWFZwYm5Rb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzR5TTEwc0lGc3hYVjBzSUZ0Yk1DNHpNbDBzSUZzeFhWMWRYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdWaGMyVkpiazkxZEZGMWFXNTBLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU9EWmRMQ0JiTUYxZExDQmJXekF1TURkZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1RmVIQnZLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU9UVmRMQ0JiTUM0d05WMWRMQ0JiV3pBdU56azFYU3dnV3pBdU1ETTFYVjFkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklHVmhjMlZQZFhSRmVIQnZLQ2s2SUVWaGMybHVaMFoxYm1OMGFXOXVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRiV3pBdU1UbGRMQ0JiTVYxZExDQmJXekF1TWpKZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1UGRYUkZlSEJ2S0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6RmRMQ0JiTUYxZExDQmJXekJkTENCYk1WMWRYVnh1SUNBZ0lIMWNibHh1SUNBZ0lITjBZWFJwWXlCbFlYTmxTVzVEYVhKaktDazZJRVZoYzJsdVowWjFibU4wYVc5dUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdGJXekF1Tmwwc0lGc3dMakEwWFYwc0lGdGJNQzQ1T0Ywc0lGc3dMak16TlYxZFhWeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJsWVhObFQzVjBRMmx5WXlncE9pQkZZWE5wYm1kR2RXNWpkR2x2YmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlcxc3dMakEzTlYwc0lGc3dMamd5WFYwc0lGdGJNQzR4TmpWZExDQmJNVjFkWFZ4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QmxZWE5sU1c1UGRYUkRhWEpqS0NrNklFVmhjMmx1WjBaMWJtTjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ0Yld6QXVOemcxWFN3Z1d6QXVNVE0xWFYwc0lGdGJNQzR4TlYwc0lGc3dMamcyWFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrSmhZMnNvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNDJYU3dnV3kwd0xqSTRYVjBzSUZ0Yk1DNDNNelZkTENCYk1DNHdORFZkWFYxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdaV0Z6WlU5MWRFSmhZMnNvS1RvZ1JXRnphVzVuUm5WdVkzUnBiMjRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVzF0Yk1DNHhOelZkTENCYk1DNDRPRFZkWFN3Z1cxc3dMak15WFN3Z1d6RXVNamMxWFYxZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1ZoYzJWSmJrOTFkRUpoWTJzb0tUb2dSV0Z6YVc1blJuVnVZM1JwYjI0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxdGJNQzQyT0Ywc0lGc3RNQzQxTlYxZExDQmJXekF1TWpZMVhTd2dXekV1TlRWZFhWMWNiaUFnSUNCOVhHNTlJbDE5IiwiLy8gdjEuMCBleHBvcnRlZCBqdXN0IHRoZSBwYXJzZXIgZnVuY3Rpb24uIFRvIG1haW50YWluIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LFxuLy8gd2UgZXhwb3J0IGFkZGl0aW9uYWwgbmFtZWQgZmVhdHVyZXMgYXMgcHJvcGVydGllcyBvZiB0aGF0IGZ1bmN0aW9uLlxudmFyIHBhcnNlckZ1bmN0aW9uID0gcmVxdWlyZSgnLi9wYXJzZXIuanMnKS5wYXJzZTtcbnBhcnNlckZ1bmN0aW9uLnBhcnNlU1ZHID0gcGFyc2VyRnVuY3Rpb247XG5wYXJzZXJGdW5jdGlvbi5tYWtlQWJzb2x1dGUgPSBtYWtlU1ZHUGF0aENvbW1hbmRzQWJzb2x1dGU7XG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlckZ1bmN0aW9uO1xuXG5mdW5jdGlvbiBtYWtlU1ZHUGF0aENvbW1hbmRzQWJzb2x1dGUoY29tbWFuZHMpIHtcblx0dmFyIHN1YnBhdGhTdGFydCwgcHJldkNtZD17eDowLHk6MH07XG5cdHZhciBhdHRyID0ge3g6J3gwJyx5Oid5MCcseDE6J3gwJyx5MToneTAnLHgyOid4MCcseTI6J3kwJ307XG5cdGNvbW1hbmRzLmZvckVhY2goZnVuY3Rpb24oY21kKSB7XG5cdFx0aWYgKGNtZC5jb21tYW5kPT09J21vdmV0bycpIHN1YnBhdGhTdGFydD1jbWQ7XG5cdFx0Y21kLngwPXByZXZDbWQueDsgY21kLnkwPXByZXZDbWQueTtcblx0XHRmb3IgKHZhciBhIGluIGF0dHIpIGlmIChhIGluIGNtZCkgY21kW2FdICs9IGNtZC5yZWxhdGl2ZSA/IGNtZFthdHRyW2FdXSA6IDA7XG5cdFx0aWYgKCEoJ3gnIGluIGNtZCkpIGNtZC54ID0gcHJldkNtZC54OyAvLyBWXG5cdFx0aWYgKCEoJ3knIGluIGNtZCkpIGNtZC55ID0gcHJldkNtZC55OyAvLyBYXG5cdFx0Y21kLnJlbGF0aXZlID0gZmFsc2U7XG5cdFx0Y21kLmNvZGUgPSBjbWQuY29kZS50b1VwcGVyQ2FzZSgpO1xuXHRcdGlmIChjbWQuY29tbWFuZD09J2Nsb3NlcGF0aCcpIHtcblx0XHRcdGNtZC54ID0gc3VicGF0aFN0YXJ0Lng7XG5cdFx0XHRjbWQueSA9IHN1YnBhdGhTdGFydC55O1xuXHRcdH1cblx0XHRwcmV2Q21kID0gY21kO1xuXHR9KTtcblx0cmV0dXJuIGNvbW1hbmRzO1xufVxuIiwiY2xhc3MgRmFjZXRTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKHR5cGUsIHZpZXdzKSB7XHJcbiAgICAgICAgdGhpcy5fdHlwZTtcclxuICAgICAgICB0aGlzLl92aWV3cztcclxuICAgICAgICB0aGlzLnZpZXdzID0gdmlld3M7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdHlwZSh0eXBlKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoRmFjZXRTcGVjLmZhY2V0VHlwZSkuaW5jbHVkZXModHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RoZSBmYWNldCB0eXBlIGhhcyB0byBiZSBvbmUgb2YgXCJyb3dcIiBvciBcImNvbHVtblwiLCBzZXR0aW5nIHRvIGRlZmF1bHQgdmFsdWUgXCJjb2x1bW5cIi4nKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHlwZSA9IEZhY2V0U3BlYy5mYWNldFR5cGUuY29sO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB2aWV3cyh2aWV3cykge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygdmlld3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIC8vdHJhbnNsYXRlIFwicmFuZ2VcIiB0byBcImZyYW1lc1wiXHJcbiAgICAgICAgICAgIGxldCBmcmFtZVZpZXdzID0gdmlld3MubWFwKHZpZXcgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2aWV3LnJhbmdlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgcmFuZ2UgXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlZ2VuZCA9IG5ldyBSZWdFeHAoXCJcXFxcZCskXCIpOyBcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmFuZ2VTdGFydE5hbWUgPSB2aWV3LnJhbmdlWzBdLnJlcGxhY2UocmVnZW5kLCAnJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRW5kTmFtZSA9IHZpZXcucmFuZ2VbMV0ucmVwbGFjZShyZWdlbmQsICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IHZpZXcucmFuZ2VbMF0ubWF0Y2gocmVnZW5kKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSB2aWV3LnJhbmdlWzFdLm1hdGNoKHJlZ2VuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlU3RhcnROYW1lID09PSByYW5nZUVuZE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5mcmFtZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHJhbmdlU3RhcnQ7IGkgPD0gcmFuZ2VFbmQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5mcmFtZXMucHVzaChyYW5nZVN0YXJ0TmFtZSArIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldy5mcmFtZXMgPSBbdmlldy5yYW5nZVswXSwgdmlldy5yYW5nZVsxXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyYW5nZSBzdGFydCBhbmQgZW5kIG1pc21hdGNoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAvL2ZpbmQgdGhlIG1heCBudW1iZXIgb2YgY2hhcnRzIGluIHZpZXdzXHJcbiAgICAgICAgICAgIGxldCBtYXhMZW4gPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lVmlld3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChmcmFtZVZpZXdzW2ldLmZyYW1lcy5sZW5ndGggPiBtYXhMZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhMZW4gPSBmcmFtZVZpZXdzW2ldLmZyYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZVZpZXdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJhbWVWaWV3c1tpXS5mcmFtZXMubGVuZ3RoIDwgbWF4TGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3RJdGVtID0gZnJhbWVWaWV3c1tpXS5mcmFtZXNbZnJhbWVWaWV3c1tpXS5mcmFtZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG51bURpZmYgPSBtYXhMZW4gLSBmcmFtZVZpZXdzW2ldLmZyYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG51bURpZmYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lVmlld3NbaV0uZnJhbWVzLnB1c2gobGFzdEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1EaWZmLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpZXdzID0gZnJhbWVWaWV3cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZpZXdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3cztcclxuICAgIH1cclxufVxyXG5cclxuRmFjZXRTcGVjLmZhY2V0VHlwZSA9IHtcclxuICAgIHJvdzogJ3JvdycsXHJcbiAgICBjb2w6ICdjb2x1bW4nXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZhY2V0U3BlYzsiLCJpbXBvcnQgVGltaW5nU3BlYyBmcm9tICcuL1RpbWluZ1NwZWMuanMnO1xyXG5pbXBvcnQgeyBnbG9iYWxWYXIgfSBmcm9tICcuL3V0aWwvR2xvYmFsVmFyLmpzJztcclxuaW1wb3J0IHsgRWFzaW5nRmFjdG9yeSwgTWFza1R5cGUgfSBmcm9tICdqc21vdmluJztcclxuXHJcbmNsYXNzIEFjdGlvblNwZWMgZXh0ZW5kcyBUaW1pbmdTcGVjIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5jaGFydElkeCA9IDA7XHJcbiAgICAgICAgdGhpcy5fdHlwZSA9IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuYXBwZWFyO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uVHlwZSA9ICcnOy8vbm90IHNldCBieSB0aGUgdXNlclxyXG4gICAgICAgIHRoaXMuX2Vhc2luZyA9IEFjdGlvblNwZWMuZWFzaW5nVHlwZS5lYXNlTGluZWFyO1xyXG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gMDtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZTsvL25vdCBzZXQgYnkgdGhlIHVzZXJcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZSA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKioqKiBnZXR0ZXJzIGFuZCBzZXR0ZXJzICoqKioqL1xyXG4gICAgc2V0IHR5cGUodHApIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRwICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoQWN0aW9uU3BlYy5hY3Rpb25UeXBlcykuaW5jbHVkZXModHApKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90eXBlID0gdHA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgndGhlIFxcJ3R5cGVcXCcgb2YgYWN0aW9uIGlzIG5vdCBkZWZpbmVkLiAnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBlYXNpbmcoZXMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoQWN0aW9uU3BlYy5lYXNpbmdUeXBlKS5pbmNsdWRlcyhlcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vhc2luZyA9IGVzO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoJ3RoZSBcXCdlYXNpbmdcXCcgb2YgYWN0aW9uIGlzIG5vdCBkZWZpbmVkLiAnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBlYXNpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vhc2luZztcclxuICAgIH1cclxuXHJcbiAgICBzZXQgZHVyYXRpb24oZHJ0bikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZHJ0biAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkcnRuID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKGRydG4gLyAoMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURSkpICogKDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBkcnRuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBkdXJhdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZHVyYXRpb247XHJcbiAgICB9XHJcbiAgICAvKioqKiogZW5kIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBpbml0IGFjdGlvbiB1c2luZyBqc29uIG9ialxyXG4gICAgICogQHBhcmFtIHtKU09OIG9ian0gYWN0aW9uSnNvblxyXG4gICAgICovXHJcbiAgICBpbml0QWN0aW9uKGFjdGlvbkpzb24pIHtcclxuICAgICAgICB0aGlzLmNoYXJ0SWR4ID0gYWN0aW9uSnNvbi5jaGFydElkeDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBhY3Rpb25Kc29uLnR5cGU7Ly9hY3Rpb24gdHlwZVxyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uVHlwZSA9IGFjdGlvbkpzb24uYW5pbWF0aW9uVHlwZTsvL2FuaW1hdGlvbiB0eXBlXHJcbiAgICAgICAgdGhpcy5tYXNrVHlwZSA9IHR5cGVvZiBhY3Rpb25Kc29uLm1hc2tUeXBlID09PSAndW5kZWZpbmVkJyA/IE1hc2tUeXBlLkFscGhhIDogYWN0aW9uSnNvbi5tYXNrVHlwZTtcclxuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IGFjdGlvbkpzb24ucmVmZXJlbmNlOy8vdGltaW5nU3BlYyByZWZlcmVuY2VcclxuICAgICAgICB0aGlzLm9mZnNldCA9IGFjdGlvbkpzb24ub2Zmc2V0Oy8vdGltaW5nU3BlYyBkZWxheVxyXG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBhY3Rpb25Kc29uLmR1cmF0aW9uOy8vYWN0aW9uIGR1cmF0aW9uXHJcbiAgICAgICAgdGhpcy5lYXNpbmcgPSBhY3Rpb25Kc29uLmVhc2luZztcclxuXHJcbiAgICAgICAgLy9hdHRyaWJ1dGVzIG9ubHkgdGFrZSBlZmZlY3Qgd2hlbiB0eXBlIGlzIGN1c3RvbVxyXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uSnNvbi5hdHRyaWJ1dGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIGFjdGlvbkpzb24uYXR0cmlidXRlLmZvckVhY2goKGF0dHIpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB0bXBBdHRyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiBhdHRyLmF0dHJOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGZyb206IGF0dHIuZnJvbSxcclxuICAgICAgICAgICAgICAgICAgICB0bzogYXR0ci50b1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlLnB1c2godG1wQXR0cik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlcGxhY2VEdXJhdGlvbkNvbnN0KGNvbnN0YW50cywgc3RhdHVzID0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kdXJhdGlvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24pID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1dyb25nIHJlZmVyZW5jZSBvZiB0aGUgY29uc3RhbnQgdmFyaWFibGVzLicsIGVyclNwZWM6ICdcImR1cmF0aW9uXCI6XCInICsgdGhpcy5kdXJhdGlvbi5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICB9IGVsc2Ugey8vcmVwbGFjZVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24pID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnRHVyYXRpb24gbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJkdXJhdGlvblwiOlwiJyArIHRoaXMuZHVyYXRpb24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5kdXJhdGlvbiAmJiB0eXBlb2YgdGhpcy5kdXJhdGlvbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24pID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5pbmZvID0geyB0eXBlOiAnZXJyb3InLCBtc2c6ICdXcm9uZyByZWZlcmVuY2Ugb2YgdGhlIGNvbnN0YW50IHZhcmlhYmxlcy4nLCBlcnJTcGVjOiAnXCJtaW5EdXJhdGlvblwiOlwiJyArIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly9yZXBsYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24pID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uID0gY29uc3RhbnRzLmdldCh0aGlzLmR1cmF0aW9uLm1pbkR1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnTWluRHVyYXRpb24gbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJtaW5EdXJhdGlvblwiOlwiJyArIHRoaXMuZHVyYXRpb24ubWluRHVyYXRpb24ucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0cmFuc2xhdGUgdGVtcGxhdGUgYW5pbWF0aW9ucyB0byAnY3VzdG9tJyB0eXBlIHdpdGggdGhlIHRyYW5zaXRpb24gb24gc29tZSB2aXN1YWwgYXR0cmlidXRlc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdHJhbnNUb1Zpc3VhbEF0dHJBY3Rpb24oYWN0aW9uSnNvbiwgY2hhcnRJZHgsIGNoYW5nZWRBdHRycywgZGF0YVRyYW5zKSB7XHJcbiAgICAgICAgbGV0IGFjdGlvbkpzb25BcnIgPSBbXTtcclxuXHJcbiAgICAgICAgLy9nZW5lcmF0ZSBwcmUtcmVuZGVyIGFjdGlvbnNcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYW5nZWRBdHRycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgY2hhbmdlZEF0dHIgPSBjaGFuZ2VkQXR0cnNbaV07XHJcbiAgICAgICAgICAgIGxldCBmcm9tQXJyID0gW10sIHRvQXJyID0gW107XHJcbiAgICAgICAgICAgIGRhdGFUcmFucy5mb3JFYWNoKGZ1bmN0aW9uICh0cmFuc0FyciwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhcnRJZHggKyAxIDwgdHJhbnNBcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZWRBdHRyID09PSAnZCcgfHwgY2hhbmdlZEF0dHIgPT09ICd0ZXh0Q29udGVudCcgfHwgY2hhbmdlZEF0dHIgPT09ICdmaWxsJyB8fCBjaGFuZ2VkQXR0ciA9PT0gJ3N0cm9rZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEZyb21JdGVtID0gW21hcmtJZCwgIXRyYW5zQXJyW2NoYXJ0SWR4XVtjaGFuZ2VkQXR0cl0gPyAoY2hhbmdlZEF0dHIgPT09ICdkJyA/ICdtMCwwJyA6IHRyYW5zQXJyW2NoYXJ0SWR4XVtjaGFuZ2VkQXR0cl0pIDogdHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUb0l0ZW0gPSBbbWFya0lkLCAhdHJhbnNBcnJbY2hhcnRJZHggKyAxXVtjaGFuZ2VkQXR0cl0gPyAoY2hhbmdlZEF0dHIgPT09ICdkJyA/ICdtMCwwJyA6IHRyYW5zQXJyW2NoYXJ0SWR4ICsgMV1bY2hhbmdlZEF0dHJdKSA6IHRyYW5zQXJyW2NoYXJ0SWR4ICsgMV1bY2hhbmdlZEF0dHJdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZWRBdHRyID09PSAnZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBGcm9tUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFRvUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRnJvbVBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgJ2QnLCAhdHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXSA/ICdtMCwwJyA6IHRyYW5zQXJyW2NoYXJ0SWR4XVtjaGFuZ2VkQXR0cl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVG9QYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICdkJywgIXRyYW5zQXJyW2NoYXJ0SWR4ICsgMV1bY2hhbmdlZEF0dHJdID8gJ20wLDAnIDogdHJhbnNBcnJbY2hhcnRJZHggKyAxXVtjaGFuZ2VkQXR0cl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRtcEZyb21QYXRoTGVuID0gdG1wRnJvbVBhdGguZ2V0VG90YWxMZW5ndGgoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUb1BhdGhMZW4gPSB0bXBUb1BhdGguZ2V0VG90YWxMZW5ndGgoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGVwTnVtID0gMzAwLCBmcm9tUGF0aFN0ZXBMZW4gPSB0bXBGcm9tUGF0aExlbiAvIHN0ZXBOdW0sIHRvUGF0aFN0ZXBMZW4gPSB0bXBUb1BhdGhMZW4gLyBzdGVwTnVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZyb21EaXNjcml0UGF0aCA9IFtdLCB0b0Rpc2NyaXRQYXRoID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ZXBOdW07IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBGcm9tUG50ID0gdG1wRnJvbVBhdGguZ2V0UG9pbnRBdExlbmd0aChmcm9tUGF0aFN0ZXBMZW4gKiBpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVG9QbnQgPSB0bXBUb1BhdGguZ2V0UG9pbnRBdExlbmd0aCh0b1BhdGhTdGVwTGVuICogaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbURpc2NyaXRQYXRoLnB1c2goW3RtcEZyb21QbnQueCwgdG1wRnJvbVBudC55XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9EaXNjcml0UGF0aC5wdXNoKFt0bXBUb1BudC54LCB0bXBUb1BudC55XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBGcm9tSXRlbS5wdXNoKGZyb21EaXNjcml0UGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUb0l0ZW0ucHVzaCh0b0Rpc2NyaXRQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tQXJyLnB1c2godG1wRnJvbUl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b0Fyci5wdXNoKHRtcFRvSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbUFyci5wdXNoKFttYXJrSWQsIHBhcnNlRmxvYXQodHJhbnNBcnJbY2hhcnRJZHhdW2NoYW5nZWRBdHRyXSldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9BcnIucHVzaChbbWFya0lkLCBwYXJzZUZsb2F0KHRyYW5zQXJyW2NoYXJ0SWR4ICsgMV1bY2hhbmdlZEF0dHJdKV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAoY2hhbmdlZEF0dHIgPT09ICd3aWR0aCcgfHwgY2hhbmdlZEF0dHIgPT09ICdoZWlnaHQnIHx8IGNoYW5nZWRBdHRyID09PSAncicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKGZyb21BcnJbZnJvbUFyci5sZW5ndGggLSAxXSwgZnJvbUFyclswXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGZyb21BcnJbZnJvbUFyci5sZW5ndGggLSAxXVsxXSA9IDEwMCAqIGZyb21BcnJbZnJvbUFyci5sZW5ndGggLSAxXVsxXSAvIGZyb21BcnJbMF1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0b0Fyclt0b0Fyci5sZW5ndGggLSAxXVsxXSA9IDEwMCAqIHRvQXJyW3RvQXJyLmxlbmd0aCAtIDFdWzFdIC8gdG9BcnJbMF1bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGxldCBwcmVPYmogPSB7XHJcbiAgICAgICAgICAgICAgICBjaGFydElkeDogYWN0aW9uSnNvbi5jaGFydElkeCxcclxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNTdGFydCxcclxuICAgICAgICAgICAgICAgIG9mZnNldDogMCxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBhY3Rpb25Kc29uLnR5cGUgPT09IEFjdGlvblNwZWMuYWN0aW9uVHlwZXMudHJhbnNpdGlvbiA/IGFjdGlvbkpzb24uZHVyYXRpb24gOiAwLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcmssXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25UeXBlOiBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY3VzdG9tLFxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiBjaGFuZ2VkQXR0cixcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBmcm9tQXJyLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvOiB0b0FyclxyXG4gICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWN0aW9uSnNvbkFyci5wdXNoKHByZU9iaik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYWN0aW9uSnNvbi50eXBlICE9PSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLnRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgbGV0IHRtcE9iaiA9IHtcclxuICAgICAgICAgICAgICAgIGNoYXJ0SWR4OiBhY3Rpb25Kc29uLmNoYXJ0SWR4LFxyXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlOiBhY3Rpb25Kc29uLnJlZmVyZW5jZSwvL3RpbWluZ1NwZWMgb2Zmc2V0IHJlZmVyZW5jZVxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBhY3Rpb25Kc29uLm9mZnNldCxcclxuICAgICAgICAgICAgICAgIGVhc2luZzogYWN0aW9uSnNvbi5lYXNpbmcsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdHlwZW9mIGFjdGlvbkpzb24uZHVyYXRpb24gPT09ICd1bmRlZmluZWQnID8gVGltaW5nU3BlYy5GUkFNRV9SQVRFIDogYWN0aW9uSnNvbi5kdXJhdGlvbixcclxuICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cy5tYXNrXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIGxldCB0bXBPYmoyO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChhY3Rpb25Kc29uLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5hcHBlYXI6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmR1cmF0aW9uID0gMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5mYWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5kaXNhcHBlYXI6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmR1cmF0aW9uID0gMTAwMCAvIFRpbWluZ1NwZWMuRlJBTUVfUkFURTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5mYWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5mYWRlOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmZhZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnR5cGUgPSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyaztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5mYWRlT3V0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmZhZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnR5cGUgPSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyaztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdvcGFjaXR5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5ncm93OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai50eXBlID0gQWN0aW9uU3BlYy5hY3Rpb25UYXJnZXRzLm1hcms7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuZ3JvdztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICd0cmltRW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5kZWdyb3c6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLnR5cGUgPSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyaztcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5ncm93O1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3RyaW1FbmQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVCb3R0b206XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5JbnZlcnRBbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVPdXRGcm9tVG9wOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuSW52ZXJ0QWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aXBlVG9wOlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuQWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aXBlT3V0RnJvbUJvdHRvbTpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2lwZUxlZnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5BbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVPdXRGcm9tUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUud2lwZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5BbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bzogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmFjdGlvblR5cGVzLndpcGVSaWdodDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkludmVydEFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMud2lwZU91dEZyb21MZWZ0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLndpcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLm1hc2tUeXBlID0gTWFza1R5cGUuSW52ZXJ0QWxwaGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVYJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5jaXJjbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqLmFuaW1hdGlvblR5cGUgPSBBY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUuY2lyY2xlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5tYXNrVHlwZSA9IE1hc2tUeXBlLkFscGhhO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lOiAnc2NhbGVYJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bzogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuYWN0aW9uVHlwZXMuY2lyY2xlT3V0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRtcE9iai5hbmltYXRpb25UeXBlID0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLmNpcmNsZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5BbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZTogJ3NjYWxlWCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICdzY2FsZVknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aGVlbDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aGVlbDtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5JbnZlcnRBbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICd0cmltRW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDBcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy53aGVlbE91dDpcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS53aGVlbDtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmoubWFza1R5cGUgPSBNYXNrVHlwZS5JbnZlcnRBbHBoYTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouYXR0cmlidXRlID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWU6ICd0cmltRW5kJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG86IDFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIC8vIGNhc2UgQWN0aW9uU3BlYy5hY3Rpb25UeXBlcy5jdXN0b206XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgdG1wT2JqLnR5cGUgPSBBY3Rpb25TcGVjLmFjdGlvblRhcmdldHMubWFyaztcclxuICAgICAgICAgICAgICAgIC8vICAgICB0bXBPYmouYW5pbWF0aW9uVHlwZSA9IEFjdGlvblNwZWMudGFyZ2V0QW5pbWF0aW9uVHlwZS5jdXN0b207XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgdG1wT2JqLmF0dHJpYnV0ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGlmICh0eXBlb2YgYWN0aW9uSnNvbi5hdHRyaWJ1dGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRtcE9iai5hdHRyaWJ1dGUgPSBbe1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgYXR0ck5hbWU6IGFjdGlvbkpzb24uYXR0cmlidXRlLmF0dHJOYW1lLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgZnJvbTogYWN0aW9uSnNvbi5hdHRyaWJ1dGUuZnJvbSxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHRvOiBhY3Rpb25Kc29uLmF0dHJpYnV0ZS50b1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgICAgIC8vICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3Rpb25Kc29uQXJyLnB1c2godG1wT2JqKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhY3Rpb25Kc29uQXJyO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNhbGN1bGF0ZSB0aGUgdG90YWwgZHVyYXRpb24gb2YgYWxsIHRoZSBhY3Rpb25zXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFjdGlvblNwZWM+fSBhY3Rpb25BcnIgXHJcbiAgICAgKiBAcGFyYW0ge01hcH0gZHVyYXRpb25BdHRyVmFsdWVzOiBrZXk6IGRhdGEgYXR0ciBuYW1lLCB2YWx1ZSBNYXB7a2V5OiBtYXJrSWQsIHZhbHVlOiBhdHRyIHZhbHVlfVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY2FsQWN0aW9uRHVyYXRpb24oYWN0aW9uQXJyLCBkdXJhdGlvbkF0dHJWYWx1ZXMsIGRvbU1hcmtzKSB7XHJcbiAgICAgICAgbGV0IHdob2xlU3RhcnQgPSAwLCB3aG9sZUVuZCA9IC0xMDAwMDA7Ly9zdGFydCB0aW1lIG9mIHRoZSBlYXJsaWVzdCBhY3Rpb24gYW5kIGVuZCB0aW1lIG9mIHRoZSBsYXN0c3QgYWN0aW9uXHJcbiAgICAgICAgbGV0IGxhc3RTdGFydCA9IDAsIGxhc3RFbmQgPSAwO1xyXG4gICAgICAgIGxldCBkdXJhdGlvbldpdGhBdHRyID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aW9uQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBTdGFydE1hcCwgdG1wRW5kTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICB0bXBTdGFydE1hcCA9IGFjdGlvbkFycltpXS5jYWxPZmZzZXRUaW1lKGxhc3RTdGFydCwgbGFzdEVuZCwgMCwgZG9tTWFya3MpOy8vY2hhbmdlIHRvIHJldHVuciB2YWx1ZSBvZiBNYXBcclxuXHJcbiAgICAgICAgICAgIC8vaWdub3JlIHRoZSBpbmZsdWVuY2Ugb2YgdGhlIGFuaW1hdGlvbiBmb3IgdGhlIGJvdW5kYXJ5IG9mIHRoZSBtYXNrXHJcbiAgICAgICAgICAgIGlmIChpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbkFycltpIC0gMV0uYW5pbWF0aW9uVHlwZSA9PT0gQWN0aW9uU3BlYy50YXJnZXRBbmltYXRpb25UeXBlLm1pc3Rha2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBTdGFydE1hcC5mb3JFYWNoKGZ1bmN0aW9uICh0bXBTdGFydCwgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFN0YXJ0TWFwLnNldChtYXJrSWQsIHRtcFN0YXJ0IC0gYWN0aW9uQXJyW2kgLSAxXS5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBtaW5UbXBTdGFydCA9IDEwMDAwMDAsIG1heFRtcEVuZCA9IC0xMDAwMDA7XHJcbiAgICAgICAgICAgIGFjdGlvbkFycltpXS5vZmZzZXRTdGFydCA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgdG1wU3RhcnRNYXAuZm9yRWFjaChmdW5jdGlvbiAodG1wU3RhcnQsIG1hcmtJZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRtcEVuZCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbkFycltpXS5kdXJhdGlvbiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbldpdGhBdHRyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBFbmQgPSB0bXBTdGFydDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbkFycltpXS5kdXJhdGlvbiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBFbmQgPSB0bXBTdGFydCArIGFjdGlvbkFycltpXS5kdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRtcEVuZE1hcC5zZXQobWFya0lkLCB0bXBFbmQpO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uQXJyW2ldLm9mZnNldFN0YXJ0LnNldChtYXJrSWQsIHRtcFN0YXJ0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodG1wU3RhcnQgPCBtaW5UbXBTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pblRtcFN0YXJ0ID0gdG1wU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodG1wRW5kID4gbWF4VG1wRW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4VG1wRW5kID0gdG1wRW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRtcFN0YXJ0IDwgd2hvbGVTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdob2xlU3RhcnQgPSB0bXBTdGFydDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0bXBFbmQgPiB3aG9sZUVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdob2xlRW5kID0gdG1wRW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgbGFzdFN0YXJ0ID0gbWluVG1wU3RhcnQ7XHJcbiAgICAgICAgICAgIGxhc3RFbmQgPSBtYXhUbXBFbmQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdG1wUmVzdWx0RHVyYXRpb24gPSB3aG9sZUVuZCAtIHdob2xlU3RhcnQ7XHJcbiAgICAgICAgbGV0IHJlc3VsdER1cmF0aW9ucyA9IG5ldyBNYXAoKTsvL2tleTogbWFya0lkLCB2YWx1ZTogZHVyYWl0b24gb2YgdGhpcyBtYXJrXHJcbiAgICAgICAgbGV0IG1pblZhbHVlRWFjaEF0dHIgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgaWYgKGR1cmF0aW9uV2l0aEF0dHIpIHsvL2FkZCBkdXJhdGlvbiB3aXRoIHRoZSBhdHRyaWJ1dGUgdmFsdWVzXHJcbiAgICAgICAgICAgIC8vZmluZCB0aGUgbWluIHZhbHVlIGZvciBlYWNoIGF0dHJcclxuICAgICAgICAgICAgZHVyYXRpb25BdHRyVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJzLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJWYWx1ZSwgYXR0ck5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1pblZhbHVlRWFjaEF0dHIuZ2V0KGF0dHJOYW1lKSA9PT0gJ3VuZGVmaW5lZCcgfHwgYXR0clZhbHVlWzBdIDwgbWluVmFsdWVFYWNoQXR0ci5nZXQoYXR0ck5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbHVlRWFjaEF0dHIuc2V0KGF0dHJOYW1lLCBhdHRyVmFsdWVbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIGR1cmF0aW9uQXR0clZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRycywgbWFya0lkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wRXh0cmFEdXJhdGlvbiA9IDA7XHJcbiAgICAgICAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyVmFsdWUsIGF0dHJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pbkF0dHJWYWx1ZSA9IG1pblZhbHVlRWFjaEF0dHIuZ2V0KGF0dHJOYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdG1wRXh0cmFEdXJhdGlvbiArPSBhdHRyVmFsdWVbMV0gKiBhdHRyVmFsdWVbMF0gLyBtaW5BdHRyVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0RHVyYXRpb25zLnNldChtYXJrSWQsIHRtcFJlc3VsdER1cmF0aW9uICsgdG1wRXh0cmFEdXJhdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBlbHNlIHsvL2RpcmVjdGx5IHNldCB0aGUgZHVyYXRpb24gb2YgZWFjaCBtYXJrIHdpdGggdG1wUmVzdWx0RHVyYXRpb25cclxuICAgICAgICAgICAgZHVyYXRpb25BdHRyVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBtYXJrSWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdER1cmF0aW9ucy5zZXQobWFya0lkLCB0bXBSZXN1bHREdXJhdGlvbik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbcmVzdWx0RHVyYXRpb25zLCBtaW5WYWx1ZUVhY2hBdHRyLCBhY3Rpb25BcnJdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc1RvTG90dGllQWN0aW9uKGVhc2luZ05hbWUpIHtcclxuICAgICAgICBzd2l0Y2ggKGVhc2luZ05hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmVhc2luZ1R5cGUuZWFzZUxpbmVhcjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBFYXNpbmdGYWN0b3J5LmxpbmVhcigpO1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuZWFzaW5nVHlwZS5lYXNlSW5RdWFkOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZUluUXVhZCgpO1xyXG4gICAgICAgICAgICBjYXNlIEFjdGlvblNwZWMuZWFzaW5nVHlwZS5lYXNlT3V0UXVhZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBFYXNpbmdGYWN0b3J5LmVhc2VPdXRRdWFkKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VJbk91dFF1YWQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRWFzaW5nRmFjdG9yeS5lYXNlSW5PdXRRdWFkKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VJbkN1YmljOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZUluQ3ViaWMoKTtcclxuICAgICAgICAgICAgY2FzZSBBY3Rpb25TcGVjLmVhc2luZ1R5cGUuZWFzZU91dEN1YmljOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZU91dEN1YmljKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQWN0aW9uU3BlYy5lYXNpbmdUeXBlLmVhc2VJbk91dEN1YmljOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEVhc2luZ0ZhY3RvcnkuZWFzZUluT3V0Q3ViaWMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkFjdGlvblNwZWMuYXR0cnMgPSBbJ3R5cGUnLCAnb2Zmc2V0JywgJ3JlZmVyZW5jZScsICdlYXNpbmcnLCAnZHVyYXRpb24nXTtcclxuXHJcbkFjdGlvblNwZWMuYWN0aW9uVHlwZXMgPSB7XHJcbiAgICBmYWRlOiAnZmFkZScsXHJcbiAgICB3aXBlQm90dG9tOiAnd2lwZSBib3R0b20nLFxyXG4gICAgd2lwZVRvcDogJ3dpcGUgdG9wJyxcclxuICAgIHdpcGVMZWZ0OiAnd2lwZSBsZWZ0JyxcclxuICAgIHdpcGVSaWdodDogJ3dpcGUgcmlnaHQnLFxyXG4gICAgd2hlZWw6ICd3aGVlbCcsXHJcbiAgICBhcHBlYXI6ICdhcHBlYXInLFxyXG4gICAgZGlzYXBwZWFyOiAnZGlzYXBwZWFyJyxcclxuICAgIGNpcmNsZTogJ2NpcmNsZScsXHJcbiAgICBncm93OiAnZ3JvdycsXHJcbiAgICBjdXN0b206ICdjdXN0b20nLFxyXG4gICAgZmFkZU91dDogJ2ZhZGUgb3V0JyxcclxuICAgIHdpcGVPdXRGcm9tTGVmdDogJ3dpcGUgb3V0IGZyb20gbGVmdCcsXHJcbiAgICB3aXBlT3V0RnJvbVRvcDogJ3dpcGUgb3V0IGZyb20gdG9wJyxcclxuICAgIHdpcGVPdXRGcm9tUmlnaHQ6ICd3aXBlIG91dCBmcm9tIHJpZ2h0JyxcclxuICAgIHdpcGVPdXRGcm9tQm90dG9tOiAnd2lwZSBvdXQgZnJvbSBib3R0b20nLFxyXG4gICAgd2hlZWxPdXQ6ICd3aGVlbCBvdXQnLFxyXG4gICAgY2lyY2xlT3V0OiAnY2lyY2xlIG91dCcsXHJcbiAgICBkZWdyb3c6ICdkZWdyb3cnLFxyXG4gICAgdHJhbnNpdGlvbjogJ21hZ2ljIG1vdmUnLFxyXG4gICAgem9vbTogJ3pvb20nLFxyXG4gICAgbWFyazogJ21hc2snLFxyXG4gICAgbWFzazogJ21hcmsnXHJcbn1cclxuXHJcbkFjdGlvblNwZWMuYWN0aW9uVGFyZ2V0cyA9IHtcclxuICAgIG1hcms6ICdtYXJrJyxcclxuICAgIG1hc2s6ICdtYXNrJ1xyXG59XHJcblxyXG5BY3Rpb25TcGVjLnRhcmdldEFuaW1hdGlvblR5cGUgPSB7XHJcbiAgICBmYWRlOiAnZmFkZScsXHJcbiAgICB3aXBlOiAnd2lwZScsXHJcbiAgICBtb3ZlOiAnbW92ZScsXHJcbiAgICB3aGVlbDogJ3doZWVsJyxcclxuICAgIGNpcmNsZTogJ2NpcmNsZScsXHJcbiAgICBhcHBlYXI6ICdhcHBlYXInLFxyXG4gICAgZ3JvdzogJ2dyb3cnLFxyXG4gICAgY3VzdG9tOiAnY3VzdG9tJyxcclxuICAgIG1pc3Rha2U6ICdtaXN0YWtlJ1xyXG59XHJcblxyXG5BY3Rpb25TcGVjLmVhc2luZ1R5cGUgPSB7XHJcbiAgICBlYXNlTGluZWFyOiAnZWFzZUxpbmVhcicsXHJcbiAgICBlYXNlSW5RdWFkOiAnZWFzZUluUXVhZCcsXHJcbiAgICBlYXNlT3V0UXVhZDogJ2Vhc2VPdXRRdWFkJyxcclxuICAgIGVhc2VJbk91dFF1YWQ6ICdlYXNlSW5PdXRRdWFkJyxcclxuICAgIGVhc2VJbkN1YmljOiAnZWFzZUluQ3ViaWMnLFxyXG4gICAgZWFzZU91dEN1YmljOiAnZWFzZU91dEN1YmljJyxcclxuICAgIGVhc2VJbk91dEN1YmljOiAnZWFzZUluT3V0Q3ViaWMnLFxyXG4gICAgZWFzZU91dEJvdW5jZTogJ2Vhc2VPdXRCb3VuY2UnXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFjdGlvblNwZWM7IiwiaW1wb3J0IFRpbWluZ1NwZWMgZnJvbSAnLi9UaW1pbmdTcGVjLmpzJztcclxuXHJcbmNsYXNzIEdyb3VwaW5nU3BlYyBleHRlbmRzIFRpbWluZ1NwZWMge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLl9ncm91cEJ5ID0gJ2lkJzsgLy9vcHRpb25hbFxyXG4gICAgICAgIHRoaXMuX3JlZmVyZW5jZSA9IFRpbWluZ1NwZWMudGltaW5nUmVmLnByZXZpb3VzU3RhcnQ7XHJcbiAgICAgICAgdGhpcy5fZGVsYXkgPSAwO1xyXG4gICAgICAgIHRoaXMuZGVmaW5lZEJ5SWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNvcnQgPSB7fTtcclxuICAgICAgICAvLyB0aGlzLnJvb3QgPSB7fTtcclxuICAgICAgICB0aGlzLmdyb3VwaW5nOy8vb3B0aW9uYWwsIGFub3RoZXIgR3JvdXBpbmdTcGVjIG9iamVjdCBpbmRpY2F0aW5nIG1vcmUgZ3JvdXBpbmdzXHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqIGdldHRlcnMgYW5kIHNldHRlcnMgKioqKiovXHJcbiAgICBzZXQgZ3JvdXBCeShnYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZ2IgIT09ICd1bmRlZmluZWQnKVxyXG4gICAgICAgICAgICB0aGlzLl9ncm91cEJ5ID0gZ2I7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGdyb3VwQnkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwQnk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJlZmVyZW5jZShyZWYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHJlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgbGV0IHRtcFJlZlN0ciA9IFRpbWluZ1NwZWMudHJhbnNSZWYocmVmKTtcclxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKFRpbWluZ1NwZWMudGltaW5nUmVmKS5pbmNsdWRlcyh0bXBSZWZTdHIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2UgPSByZWY7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgndGhlIFxcJ3JlZmVyZW5jZVxcJyBvZiBUaW1pbmdTcGVjIGhhcyB0byBiZSBvbmUgb2YgXFwncHJldmlvdXNTdGFydFxcJywgXFwncHJldmlvdXNFbmRcXCcgb3IgXFwnYWJzb2x1dGVcXCcuICcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJlZmVyZW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVmZXJlbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBkZWxheShkbHkpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRseSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgaWYgKGRseSA+PSAxMDAwIC8gVGltaW5nU3BlYy5GUkFNRV9SQVRFIHx8IGRseSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVsYXkgPSBkbHk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWxheSA9IDEwMDAgLyBUaW1pbmdTcGVjLkZSQU1FX1JBVEU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRlbGF5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWxheTtcclxuICAgIH1cclxuICAgIC8qKioqKiBlbmQgZ2V0dGVycyBhbmQgc2V0dGVycyAqKioqKi9cclxuICAgIHJlcGxhY2VEZWxheUNvbnN0KGNvbnN0YW50cywgc3RhdHVzID0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kZWxheSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZGVsYXkpID09PSAndW5kZWZpbmVkJykgey8vY2hlY2sgZXJyb3IgaW4gYW5pbWF0aW9uIHRpbWluZ1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdlcnJvcicsIG1zZzogJ1dyb25nIHJlZmVyZW5jZSBvZiB0aGUgY29uc3RhbnQgdmFyaWFibGVzLicsIGVyclNwZWM6ICdcImRlbGF5XCI6XCInICsgdGhpcy5kZWxheS5yZXBsYWNlKC9cXHMvZywgJycpICsgJ1wiJyB9O1xyXG4gICAgICAgICAgICB9IGVsc2Ugey8vcmVwbGFjZVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdGFudHMuZ2V0KHRoaXMuZGVsYXkpID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXkgPSBjb25zdGFudHMuZ2V0KHRoaXMuZGVsYXkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuaW5mbyA9IHsgdHlwZTogJ2Vycm9yJywgbXNnOiAnRGVsYXkgbXVzdCBiZSBhIG51bWJlciBvciBhIG51bWVyaWMgdHlwZSBjb25zdGFudC4nLCBlcnJTcGVjOiAnXCJkZWxheVwiOlwiJyArIHRoaXMuZGVsYXkucmVwbGFjZSgvXFxzL2csICcnKSArICdcIicgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ3JvdXBpbmcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBpbmcucmVwbGFjZURlbGF5Q29uc3QoY29uc3RhbnRzLCBzdGF0dXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGluaXQgbmVzdGVkIGdyb3VwaW5nIGFuZCBhY3Rpb25zIHVzaW5nIGpzb24gb2JqXHJcbiAgICAgKiBAcGFyYW0ge0pTT04gb2JqfSBncm91cGluZ0pzb24gXHJcbiAgICAgKi9cclxuICAgIGluaXRHcm91cGluZyhncm91cGluZ0pzb24pIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZ3JvdXBpbmcganNvbjogJywgZ3JvdXBpbmdKc29uLCB0aGlzLCB0aGlzLmdyb3VwaW5nKTtcclxuICAgICAgICB0aGlzLmdyb3VwQnkgPSBncm91cGluZ0pzb24uZ3JvdXBCeTtcclxuICAgICAgICBpZiAoZ3JvdXBpbmdKc29uLmdyb3VwQnkgPT09ICdpZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWZpbmVkQnlJZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVmZXJlbmNlID0gZ3JvdXBpbmdKc29uLnJlZmVyZW5jZTtcclxuICAgICAgICB0aGlzLmRlbGF5ID0gZ3JvdXBpbmdKc29uLmRlbGF5O1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGdyb3VwaW5nSnNvbi5zb3J0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLnNvcnQuZmllbGQgPSBncm91cGluZ0pzb24uc29ydC5maWVsZDtcclxuICAgICAgICAgICAgdGhpcy5zb3J0Lm9yZGVyID0gZ3JvdXBpbmdKc29uLnNvcnQub3JkZXI7XHJcbiAgICAgICAgICAgIHRoaXMuc29ydC5leHByID0gZ3JvdXBpbmdKc29uLnNvcnQuZXhwcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgZ3JvdXBpbmdKc29uLmdyb3VwaW5nICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nID0gbmV3IEdyb3VwaW5nU3BlYygpO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nLmluaXRHcm91cGluZyhncm91cGluZ0pzb24uZ3JvdXBpbmcpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGdyb3VwaW5nSnNvbi5ncm91cGluZyA9PT0gJ3VuZGVmaW5lZCcgJiYgZ3JvdXBpbmdKc29uLmdyb3VwQnkgIT09ICdpZCcpIHtcclxuICAgICAgICAgICAgLy9kaWRub3QgZ29ydXBpbmcgdG8gaWQsIGFkZCBleHRyYSBncm91cGluZyBieSBpZFxyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nID0gbmV3IEdyb3VwaW5nU3BlYygpO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nLmdyb3VwQnkgPSAnaWQnO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwaW5nLmRlZmluZWRCeUlkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFycmFuZ2VPcmRlcihtYXJrSWRzLCBkb21NYXJrcywgcm9vdCkge1xyXG4gICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXMuY2xlYXIoKTtcclxuICAgICAgICBHcm91cGluZ1NwZWMuZnJhbWVzTWFyay5jbGVhcigpO1xyXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhyb290KS5sZW5ndGggPT09IDApIHsvLyBnZW5lcmF0ZSBuZXcgdHJlZVxyXG4gICAgICAgICAgICByb290Lmdyb3VwUmVmID0gJ3Jvb3QnO1xyXG4gICAgICAgICAgICByb290LmlkID0gR3JvdXBpbmdTcGVjLm5vZGVJZDtcclxuICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lcy5zZXQoR3JvdXBpbmdTcGVjLm5vZGVJZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5ub2RlSWQrKztcclxuICAgICAgICAgICAgcm9vdC5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICByb290Lm1hcmtzID0gbWFya0lkcztcclxuICAgICAgICAgICAgcm9vdC50aW1pbmdSZWYgPSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c1N0YXJ0O1xyXG4gICAgICAgICAgICByb290LmRlbGF5ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVRyZWUocm9vdCwgZG9tTWFya3MpO1xyXG4gICAgICAgIH0gZWxzZSB7Ly8gdXBkYXRlIHRoZSBjdXJyZW50IHRyZWVcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVUcmVlKHJvb3QsIGRvbU1hcmtzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2dlbmVyYXRlZCB0cmVlOiAnLCByb290KTtcclxuICAgICAgICBsZXQgb3JkZXJlZE1hcmtzID0gdGhpcy5nZXRNYXJrT3JkZXIocm9vdCk7XHJcbiAgICAgICAgcmV0dXJuIG9yZGVyZWRNYXJrcztcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVUcmVlKHQsIGRvbU1hcmtzKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBjb25zdCBncm91cEJ5UmVmID0gdGhpcy5ncm91cEJ5O1xyXG4gICAgICAgICAgICBjb25zdCB0aW1pbmdSZWYgPSB0aGlzLnJlZmVyZW5jZTtcclxuICAgICAgICAgICAgY29uc3QgZGVsYXkgPSB0aGlzLmRlbGF5O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ3JvdXBpbmcgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2FtZUdyb3VwaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQuY2hpbGRyZW5bMF0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2FtZUdyb3VwaW5nID0gdC5jaGlsZHJlblswXS5ncm91cFJlZiA9PT0gZ3JvdXBCeVJlZjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnd2hldGhlciB0aGlzIGlzIHNhbWUgZ3JvdXBpbmc6ICcsIHNhbWVHcm91cGluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2FtZUdyb3VwaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGVzVGhpc0xldmVsID0gbmV3IE1hcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCB0bXBOb2RlOyBpIDwgdC5jaGlsZHJlbi5sZW5ndGggfCAodG1wTm9kZSA9IHQuY2hpbGRyZW5baV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cGluZy51cGRhdGVUcmVlKHRtcE5vZGUsIGRvbU1hcmtzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWwuc2V0KHRtcE5vZGUucmVmVmFsdWUsIHRtcE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlLnRpbWluZ1JlZiA9IHRpbWluZ1JlZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZS5kZWxheSA9IGRlbGF5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL3JlLXNvcnQgdGhlIGNoaWxkcmVuIG9mIHRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnROb2Rlcyh0aGlzLnNvcnQsIHQsIG5vZGVzVGhpc0xldmVsLCBkb21NYXJrcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlVHJlZSh0LCBkb21NYXJrcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuZ3JvdXBpbmcgPT09ICd1bmRlZmluZWQnICYmIHQuY2hpbGRyZW4ubGVuZ3RoID4gMCkgey8vbm8gbW9yZSBncm91cGluZyBpcyBkZWZpbmVkLCBidXQgdGhlIG9yaSB0cmVlIGhhcyBkZWVwZXIgaGllcmFyY2h5XHJcbiAgICAgICAgICAgICAgICB0LmNoaWxkcmVuID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVUcmVlKHQsIGRvbU1hcmtzKSB7XHJcbiAgICAgICAgY29uc3QgZ3JvdXBCeVJlZiA9IHRoaXMuZ3JvdXBCeTtcclxuICAgICAgICBjb25zdCB0aW1pbmdSZWYgPSB0aGlzLnJlZmVyZW5jZTtcclxuICAgICAgICBjb25zdCBkZWxheSA9IHRoaXMuZGVsYXk7XHJcbiAgICAgICAgbGV0IG5vZGVzVGhpc0xldmVsID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBtYXJrSWQ7IGkgPCB0Lm1hcmtzLmxlbmd0aCB8IChtYXJrSWQgPSB0Lm1hcmtzW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXR1bSA9IGRvbU1hcmtzLmdldChtYXJrSWQpWydkYXRhLWRhdHVtJ107Ly9kYXR1bSBzdG9yZWQgaW4gdGhlIHRhZ1xyXG4gICAgICAgICAgICBsZXQgcmVmVmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9tTWFya3MuZ2V0KG1hcmtJZClbZ3JvdXBCeVJlZl0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZWZWYWx1ZSA9IGRvbU1hcmtzLmdldChtYXJrSWQpW2dyb3VwQnlSZWZdO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb21NYXJrcy5nZXQobWFya0lkKVtncm91cEJ5UmVmXSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRhdHVtW2dyb3VwQnlSZWZdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgcmVmVmFsdWUgPSBkYXR1bVtncm91cEJ5UmVmXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcjogZ3JvdXBpbmcgYnkgYW4gdW5rbm93biBhdHRyaWJ1dGUnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBub2Rlc1RoaXNMZXZlbC5nZXQocmVmVmFsdWUpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWwuZ2V0KHJlZlZhbHVlKS5tYXJrcy5wdXNoKG1hcmtJZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdG1wT2JqID0ge307XHJcbiAgICAgICAgICAgICAgICB0bXBPYmouaWQgPSBHcm91cGluZ1NwZWMubm9kZUlkO1xyXG4gICAgICAgICAgICAgICAgR3JvdXBpbmdTcGVjLm5vZGVJZCsrO1xyXG4gICAgICAgICAgICAgICAgdG1wT2JqLmdyb3VwUmVmID0gZ3JvdXBCeVJlZjtcclxuICAgICAgICAgICAgICAgIGlmICh0bXBPYmouZ3JvdXBSZWYgPT09ICdpZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXBPYmouZGVmaW5lZEJ5SWQgPSB0aGlzLmRlZmluZWRCeUlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdG1wT2JqLnJlZlZhbHVlID0gcmVmVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0bXBPYmoudGltaW5nUmVmID0gdGltaW5nUmVmO1xyXG4gICAgICAgICAgICAgICAgdG1wT2JqLmRlbGF5ID0gZGVsYXk7XHJcbiAgICAgICAgICAgICAgICB0bXBPYmouY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgIHRtcE9iai5tYXJrcyA9IFttYXJrSWRdO1xyXG4gICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWwuc2V0KHJlZlZhbHVlLCB0bXBPYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vb3JkZXIgbm9kZXMgb2YgdGhpcyBsZXZlbCBhY2NvcmRpbmcgdG8gdGhlICdzb3J0JyBzcGVjXHJcbiAgICAgICAgdGhpcy5zb3J0Tm9kZXModGhpcy5zb3J0LCB0LCBub2Rlc1RoaXNMZXZlbCwgZG9tTWFya3MpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdub2RlcyB0aGlzIGxldmVsOiAnLCBub2Rlc1RoaXNMZXZlbCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdyb3VwaW5nICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdG1wTm9kZTsgaSA8IHQuY2hpbGRyZW4ubGVuZ3RoIHwgKHRtcE5vZGUgPSB0LmNoaWxkcmVuW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwaW5nLmdlbmVyYXRlVHJlZSh0bXBOb2RlLCBkb21NYXJrcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc29ydE5vZGVzKHNwZWNTb3J0LCB0LCBub2Rlc1RoaXNMZXZlbCwgZG9tTWFya3MpIHtcclxuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgICAgICB0LmNoaWxkcmVuID0gW107XHJcbiAgICAgICAgc3dpdGNoICh0eXBlb2Ygc3BlY1NvcnQub3JkZXIpIHtcclxuICAgICAgICAgICAgY2FzZSAnb2JqZWN0JzovL0FycmF5XHJcbiAgICAgICAgICAgICAgICBsZXQgYXBwZW5kTnVtID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCByZWZWYWx1ZTsgaSA8IHNwZWNTb3J0Lm9yZGVyLmxlbmd0aCB8IChyZWZWYWx1ZSA9IHNwZWNTb3J0Lm9yZGVyW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBub2Rlc1RoaXNMZXZlbC5nZXQocmVmVmFsdWUpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuLnB1c2gobm9kZXNUaGlzTGV2ZWwuZ2V0KHJlZlZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuYXBwZW5kRnJhbWUodC5pZCwgbm9kZXNUaGlzTGV2ZWwuZ2V0KHJlZlZhbHVlKS5pZCwgYXBwZW5kTnVtLCBub2Rlc1RoaXNMZXZlbC5zaXplKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kTnVtKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6Ly8nYXNjZW5kaW5nJyB8ICdkZXNjZW5kaW5nJ1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIGhhdmUgY29tZSB0byB0aGUgbG93ZXN0IGxldmVsXHJcbiAgICAgICAgICAgICAgICBsZXQgaGFzU2luZ2xlTWFyayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBub2Rlc1RoaXNMZXZlbC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgcmVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLm1hcmtzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzU2luZ2xlTWFyayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgLy9vbmx5IHRha2UgZWZmZWN0IHdoZW4gYSBzcGVjaWZpYyBmaWVsZCBpcyBzcGVjaWZpZWQgYW5kIGFyZSBvbiB0aGUgbG93ZXN0IGxldmVsXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNwZWNTb3J0LmZpZWxkICE9PSAndW5kZWZpbmVkJyAmJiBoYXNTaW5nbGVNYXJrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9yZGVyUmVmID0gc3BlY1NvcnQuZmllbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGVzVGhpc0xldmVsQXJyID0gWy4uLm5vZGVzVGhpc0xldmVsXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3JkZXJUeXBlID0gc3BlY1NvcnQub3JkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWxBcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFya0lkMSA9IGFbMV0ubWFya3NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXJrSWQyID0gYlsxXS5tYXJrc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9yZGVyUmVmVmFsdWUxID0gJycsIG9yZGVyUmVmVmFsdWUyID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bTEgPSBkb21NYXJrcy5nZXQobWFya0lkMSlbJ2RhdGEtZGF0dW0nXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdHVtMiA9IGRvbU1hcmtzLmdldChtYXJrSWQyKVsnZGF0YS1kYXR1bSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRvbU1hcmtzLmdldChtYXJrSWQxKVtvcmRlclJlZl0gIT09ICd1bmRlZmluZWQnICYmIGRvbU1hcmtzLmdldChtYXJrSWQyKVtvcmRlclJlZl0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlclJlZlZhbHVlMSA9IGRvbU1hcmtzLmdldChtYXJrSWQxKVtvcmRlclJlZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlclJlZlZhbHVlMiA9IGRvbU1hcmtzLmdldChtYXJrSWQyKVtvcmRlclJlZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvbU1hcmtzLmdldChtYXJrSWQxKVtvcmRlclJlZl0gPT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiB0eXBlb2YgZGF0dW0xW29yZGVyUmVmXSAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHR5cGVvZiBkb21NYXJrcy5nZXQobWFya0lkMilbb3JkZXJSZWZdID09PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIGRhdHVtMltvcmRlclJlZl0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlclJlZlZhbHVlMSA9IGRhdHVtMVtvcmRlclJlZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlclJlZlZhbHVlMiA9IGRhdHVtMltvcmRlclJlZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VGbG9hdChvcmRlclJlZlZhbHVlMSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlclJlZlZhbHVlMSA9IHBhcnNlRmxvYXQob3JkZXJSZWZWYWx1ZTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VGbG9hdChvcmRlclJlZlZhbHVlMikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlclJlZlZhbHVlMiA9IHBhcnNlRmxvYXQob3JkZXJSZWZWYWx1ZTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJUeXBlID09PSBHcm91cGluZ1NwZWMub3JkZXJUeXBlcy5hc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmRlclJlZlZhbHVlMSA+PSBvcmRlclJlZlZhbHVlMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3JkZXJUeXBlID09PSBHcm91cGluZ1NwZWMub3JkZXJUeXBlcy5kZXNjZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJSZWZWYWx1ZTIgPj0gb3JkZXJSZWZWYWx1ZTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9yZGVyVHlwZSA9PT0gR3JvdXBpbmdTcGVjLm9yZGVyVHlwZXMucmFuZG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSA+PSAwLjUgPyAxIDogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgdG1wTm9kZTsgaSA8IG5vZGVzVGhpc0xldmVsQXJyLmxlbmd0aCB8ICh0bXBOb2RlID0gbm9kZXNUaGlzTGV2ZWxBcnJbaV0pOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5hcHBlbmRGcmFtZSh0LmlkLCB0bXBOb2RlLmlkLCBpLCBub2Rlc1RoaXNMZXZlbEFyci5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuLnB1c2godG1wTm9kZVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbm9kZXNUaGlzTGV2ZWxBcnIgPSBbLi4ubm9kZXNUaGlzTGV2ZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGVjU29ydC5vcmRlciA9PT0gR3JvdXBpbmdTcGVjLm9yZGVyVHlwZXMuYXNjZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVGhpc0xldmVsQXJyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhWzBdID49IGJbMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3BlY1NvcnQub3JkZXIgPT09IEdyb3VwaW5nU3BlYy5vcmRlclR5cGVzLmRlc2NlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNUaGlzTGV2ZWxBcnIuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJbMF0gPj0gYVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcGVjU29ydC5vcmRlciA9PT0gR3JvdXBpbmdTcGVjLm9yZGVyVHlwZXMucmFuZG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVGhpc0xldmVsQXJyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpID49IDAuNSA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHRtcE5vZGU7IGkgPCBub2Rlc1RoaXNMZXZlbEFyci5sZW5ndGggfCAodG1wTm9kZSA9IG5vZGVzVGhpc0xldmVsQXJyW2ldKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuYXBwZW5kRnJhbWUodC5pZCwgdG1wTm9kZS5pZCwgaSwgbm9kZXNUaGlzTGV2ZWxBcnIubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlbi5wdXNoKHRtcE5vZGVbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICBub2Rlc1RoaXNMZXZlbC5mb3JFYWNoKGZ1bmN0aW9uICh0bXBOb2RlLCByZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuLnB1c2godG1wTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5hcHBlbmRGcmFtZSh0LmlkLCB0bXBOb2RlLmlkLCBjb3VudCwgbm9kZXNUaGlzTGV2ZWwuc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFwcGVuZEZyYW1lKHBhcmVudElkLCBub2RlSWQsIG5vZGVJZHgsIG5vZGVzTnVtKSB7XHJcbiAgICAgICAgaWYgKEdyb3VwaW5nU3BlYy5mcmFtZXMuZ2V0KHBhcmVudElkKSAmJiAobm9kZUlkeCA9PT0gMCB8fCBub2RlSWR4ID09PSBub2Rlc051bSAtIDEpKSB7XHJcbiAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXMuc2V0KG5vZGVJZCwgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgR3JvdXBpbmdTcGVjLmZyYW1lcy5zZXQobm9kZUlkLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0IHRoZSBhbmltYXRpb24gb3JkZXIgb2YgbWFya3NcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0XHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnIgXHJcbiAgICAgKi9cclxuICAgIGdldE1hcmtPcmRlcih0KSB7XHJcbiAgICAgICAgbGV0IG9yZGVyZWRNYXJrcyA9IFtdO1xyXG4gICAgICAgIGlmICh0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IHF1ZXVlID0gW107XHJcbiAgICAgICAgICAgIHF1ZXVlLnVuc2hpZnQodCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBxdWV1ZS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkcmVuID0gaXRlbS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyZWRNYXJrcyA9IFsuLi5vcmRlcmVkTWFya3MsIC4uLml0ZW0ubWFya3NdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKGNoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9yZGVyZWRNYXJrcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNhbGN1bGF0ZSB0aGUgdGltZSBvZiBlYWNoIG1hcmsgYmFzZWQgb24gdGhlIGdyb3VwaW5nIHN0cnVjdHVyZVxyXG4gICAgICogQHBhcmFtIHsqfSB0IFxyXG4gICAgICogQHBhcmFtIHsqfSBsYXN0R3JvdXBTdGFydCBcclxuICAgICAqIEBwYXJhbSB7Kn0gbGFzdEdyb3VwRW5kIFxyXG4gICAgICogQHBhcmFtIHsqfSBtYXJrQW5pIFxyXG4gICAgICovXHJcbiAgICBjYWxUaW1lV2l0aFRyZWUodCwgbGFzdEdyb3VwU3RhcnQsIGxhc3RHcm91cEVuZCwgbWFya0FuaSkge1xyXG4gICAgICAgIGlmICh0LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbFRpbWVXaXRoVHJlZSh0LmNoaWxkcmVuW2ldLCB0LmNoaWxkcmVuW2kgLSAxXS5zdGFydCwgdC5jaGlsZHJlbltpIC0gMV0uZW5kLCBtYXJrQW5pKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxUaW1lV2l0aFRyZWUodC5jaGlsZHJlbltpXSwgLTEsIC0xLCBtYXJrQW5pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHQudGltaW5nUmVmKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYucHJldmlvdXNTdGFydDpcclxuICAgICAgICAgICAgICAgIHQuc3RhcnQgPSBsYXN0R3JvdXBTdGFydCArIHQuZGVsYXk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBUaW1pbmdTcGVjLnRpbWluZ1JlZi5wcmV2aW91c0VuZDpcclxuICAgICAgICAgICAgICAgIHQuc3RhcnQgPSBsYXN0R3JvdXBFbmQgKyB0LmRlbGF5O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVGltaW5nU3BlYy50aW1pbmdSZWYuYWJzb2x1dGU6XHJcbiAgICAgICAgICAgICAgICB0LnN0YXJ0ID0gdC5kZWxheTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdC5zdGFydCA9IGxhc3RHcm91cFN0YXJ0ICsgdC5kZWxheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhc3RHcm91cFN0YXJ0ID09PSAtMSkge1xyXG4gICAgICAgICAgICB0LnN0YXJ0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdC5lbmQgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdC5tYXJrcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBtYXJrQW5pLmdldCh0Lm1hcmtzW2ldKS5zdGFydFRpbWUgKz0gdC5zdGFydDtcclxuICAgICAgICAgICAgaWYgKG1hcmtBbmkuZ2V0KHQubWFya3NbaV0pLnN0YXJ0VGltZSArIG1hcmtBbmkuZ2V0KHQubWFya3NbaV0pLnRvdGFsRHVyYXRpb24gPiB0LmVuZCkge1xyXG4gICAgICAgICAgICAgICAgdC5lbmQgPSBtYXJrQW5pLmdldCh0Lm1hcmtzW2ldKS5zdGFydFRpbWUgKyBtYXJrQW5pLmdldCh0Lm1hcmtzW2ldKS50b3RhbER1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3QgZW5kOiAnLCB0LmVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0Lm1hcmtzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCB0bXBNYXJrSWQgPSB0Lm1hcmtzWzBdO1xyXG4gICAgICAgICAgICBpZiAoR3JvdXBpbmdTcGVjLmZyYW1lcy5nZXQodC5pZCkpIHtcclxuICAgICAgICAgICAgICAgIEdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrLnNldCh0bXBNYXJrSWQsIHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBHcm91cGluZ1NwZWMuZnJhbWVzTWFyay5nZXQodG1wTWFya0lkKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBHcm91cGluZ1NwZWMuZnJhbWVzTWFyay5zZXQodG1wTWFya0lkLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJyoqKioqKioqKioqKionKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0LmlkLCB0Lm1hcmtzLCBHcm91cGluZ1NwZWMuZnJhbWVzLmdldCh0LmlkKSk7XHJcbiAgICAgICAgLy8gaWYgKEdyb3VwaW5nU3BlYy5mcmFtZXMuZ2V0KHQuaWQpKSB7Ly90aGlzIGlzIGEga2V5ZnJhbWVcclxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgYSBrZXlmcmFtZScsIHQuZW5kKTtcclxuICAgICAgICAvLyAgICAgR3JvdXBpbmdTcGVjLmZyYW1lVGltZS5zZXQodC5lbmQsIHRydWUpO1xyXG4gICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIG5vdCBhIGtleWZyYW1lJywgdC5lbmQpO1xyXG4gICAgICAgIC8vICAgICBpZiAodHlwZW9mIEdyb3VwaW5nU3BlYy5mcmFtZVRpbWUuZ2V0KHQuZW5kKSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKCdzZXR0aW5nIHRvIGZhbHNlJyk7XHJcbiAgICAgICAgLy8gICAgICAgICBHcm91cGluZ1NwZWMuZnJhbWVUaW1lLnNldCh0LmVuZCwgZmFsc2UpO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgIH1cclxufVxyXG5cclxuR3JvdXBpbmdTcGVjLmF0dHJzID0gWydncm91cEJ5JywgJ3JlZmVyZW5jZScsICdkZWxheScsICdzb3J0JywgJ2dyb3VwaW5nJ107XHJcbkdyb3VwaW5nU3BlYy5zb3J0QXR0cnMgPSBbJ29yZGVyJywgJ2ZpZWxkJ107XHJcbkdyb3VwaW5nU3BlYy5vcmRlclR5cGVzID0ge1xyXG4gICAgYXNjZW5kaW5nOiAnYXNjZW5kaW5nJyxcclxuICAgIGRlc2NlbmRpbmc6ICdkZXNjZW5kaW5nJyxcclxuICAgIHJhbmRvbTogJ3JhbmRvbSdcclxufVxyXG5cclxuR3JvdXBpbmdTcGVjLm5vZGVJZCA9IDA7XHJcbkdyb3VwaW5nU3BlYy5mcmFtZXMgPSBuZXcgTWFwKCk7Ly9rZXk6IG5vZGVJZCwgdmFsdWU6IHdoZXRoZXIgdGhpcyBpcyBhIGtleWZyYW1lXHJcbkdyb3VwaW5nU3BlYy5mcmFtZXNNYXJrID0gbmV3IE1hcCgpOy8va2V5ZnJhbWU6IG1hcmtpZCwgdmFsdWU6IHdoZXRoZXIgdGhpcyB0aW1lIHBvaW50IGlzIGEga2V5ZnJhbWVcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBHcm91cGluZ1NwZWM7IiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChGLCBsZW4sIGFyZ3MpIHtcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIGlmIChjbGFzc29mKHRoaXMpICE9IE5BTUUpIHRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59O1xuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXIsIElURVJBVE9SKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2NhbGUgfHwgZnVuY3Rpb24gc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCB4ICE9IHhcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluTG93ICE9IGluTG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICB8fCBvdXRIaWdoICE9IG91dEhpZ2hcbiAgKSByZXR1cm4gTmFOO1xuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcbiAgcmV0dXJuICh4IC0gaW5Mb3cpICogKG91dEhpZ2ggLSBvdXRMb3cpIC8gKGluSGlnaCAtIGluTG93KSArIG91dExvdztcbn07XG4iLCJpbXBvcnQgVGltaW5nU3BlYyBmcm9tICcuL1RpbWluZ1NwZWMnO1xyXG5pbXBvcnQgQW5pbWF0aW9uIGZyb20gJy4vQW5pbWF0aW9uU3BlYyc7XHJcbmltcG9ydCBDYW5pc1NwZWMgZnJvbSAnLi9DYW5pc1NwZWMnO1xyXG5cclxud2luZG93LmNhbmlzID0ge1xyXG4gICAgY2FuaXNPYmo6IHt9LFxyXG4gICAgZnJhbWVSYXRlOiBUaW1pbmdTcGVjLkZSQU1FX1JBVEUsXHJcbiAgICBkdXJhdGlvbjogKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb24ud2hvbGVFbmRUaW1lO1xyXG4gICAgfSxcclxuICAgIHJlbmRlclNwZWM6IChzcGVjLCBzdGF0dXMsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICAgICAgc3RhdHVzLmluZm8gPSB7IHR5cGU6ICdjbGVhcicsIG1zZzogJ3JlbmRlcmluZy4uLicgfTtcclxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2FuaXMuY2FuaXNPYmopLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYW5pcy5jYW5pc09iaiA9IG5ldyBDYW5pc1NwZWMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhbmlzLmNhbmlzT2JqLmluaXQoc3BlYywgc3RhdHVzKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFjYW5pcy5jYW5pc09iai5oYXNFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbmlzLmNhbmlzT2JqLnJlbmRlcihjYWxsYmFjaywgc3RhdHVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBBbmltYXRpb24ucmVzZXRBbGwoKTtcclxuICAgIH0sXHJcbiAgICBleHBvcnRKU09OOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIENhbmlzU3BlYy5sb3R0aWVKU09OO1xyXG4gICAgfSxcclxuICAgIHRlc3Q6IGZ1bmN0aW9uIChzcGVjKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgaXMgYSB0ZXN0ISAnLCBzcGVjKTtcclxuICAgIH1cclxufSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuTGF5ZXJGYWN0b3J5ID0gZXhwb3J0cy5KU01vdmluTGF5ZXIgPSB2b2lkIDA7XHJcblxyXG52YXIgX2Vhc2luZyA9IHJlcXVpcmUoXCIuL2Vhc2luZ1wiKTtcclxuXHJcbnZhciBfcmVuZGVyID0gcmVxdWlyZShcIi4vcmVuZGVyXCIpO1xyXG5cclxudmFyIF9oZWxwZXIgPSByZXF1aXJlKFwiLi9oZWxwZXJcIik7XHJcblxyXG52YXIgX3YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1dWlkL3Y0XCIpKTtcclxuXHJcbnZhciBfcGF0aCA9IHJlcXVpcmUoXCIuL3BhdGhcIik7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cclxuXHJcbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XHJcblxyXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxyXG5cclxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7IHJldHVybjsgfSB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cclxuXHJcbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxyXG5cclxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XHJcblxyXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxyXG5cclxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cclxuXHJcbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cclxuXHJcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XHJcblxyXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cclxuXHJcbnZhciBKU01vdmluTGF5ZXIgPVxyXG4vKiNfX1BVUkVfXyovXHJcbmZ1bmN0aW9uICgpIHtcclxuICBfY3JlYXRlQ2xhc3MoSlNNb3ZpbkxheWVyLCBbe1xyXG4gICAga2V5OiBcImdldERlZmF1bHRQcm9wZXJ0eVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRQcm9wZXJ0eShrZXkpIHtcclxuICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICBjYXNlICdhJzpcclxuICAgICAgICBjYXNlICdwJzpcclxuICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGtleSA9PSAnYScgPyB0aGlzLmFuY2hvciA6IHRoaXMucG9zaXRpb24pKTtcclxuXHJcbiAgICAgICAgY2FzZSAncyc6XHJcbiAgICAgICAgICByZXR1cm4gWzEwMCwgMTAwLCAxMDBdO1xyXG5cclxuICAgICAgICBjYXNlICdvJzpcclxuICAgICAgICAgIHJldHVybiAxMDA7XHJcblxyXG4gICAgICAgIGNhc2UgJ3InOlxyXG4gICAgICAgICAgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RtJzpcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHM6IHtcclxuICAgICAgICAgICAgICBrOiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGU6IHtcclxuICAgICAgICAgICAgICBrOiAxMDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbzoge1xyXG4gICAgICAgICAgICAgIGs6IDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImNvbnZlcnRUb1N0YXRpY1Byb3BlcnR5XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydFRvU3RhdGljUHJvcGVydHkodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgaWYgKCF0cmFuc2Zvcm1ba2V5XSkge1xyXG4gICAgICAgIHRyYW5zZm9ybVtrZXldID0ge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IHRoaXMuZ2V0RGVmYXVsdFByb3BlcnR5KGtleSlcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHJhbnNmb3JtW2tleV0uYSA9PSAxKSB7XHJcbiAgICAgICAgdmFyIHN0YXRpY1ZhbHVlID0gdHJhbnNmb3JtW2tleV0ua1swXS5zO1xyXG4gICAgICAgIHRyYW5zZm9ybVtrZXldID0ge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IHN0YXRpY1ZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJjb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHkodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgaWYgKCF0cmFuc2Zvcm1ba2V5XSB8fCAhdHJhbnNmb3JtW2tleV0uYSkge1xyXG4gICAgICAgIGlmIChrZXkgPT0gJ2EnKSB7XHJcbiAgICAgICAgICB0aGlzLmFuY2hvciA9IHRyYW5zZm9ybVtrZXldID8gdHJhbnNmb3JtW2tleV0uayA6IFswLCAwLCAwXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChrZXkgPT0gJ3AnKSB7XHJcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdHJhbnNmb3JtW2tleV0gPyB0cmFuc2Zvcm1ba2V5XS5rIDogWzAsIDAsIDBdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJhbnNmb3JtW2tleV0gPSB7XHJcbiAgICAgICAgICBhOiAxLFxyXG4gICAgICAgICAgazogW11cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcImFkZEtleWZyYW1lXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkS2V5ZnJhbWUodHJhbnNmb3JtLCBrZXkpIHtcclxuICAgICAgdmFyIGlkeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogLTE7XHJcbiAgICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkO1xyXG4gICAgICB2YXIgZWFzaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgPyBhcmd1bWVudHNbNV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgIHZhciB3cmFwID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiB0cnVlO1xyXG4gICAgICB2YXIgZXhpc3RLZXlmcmFtZSA9IHRyYW5zZm9ybVtrZXldLmsuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgcmV0dXJuIHgudCA9PSB0aW1lO1xyXG4gICAgICB9KTtcclxuICAgICAgdmFyIHJlYWR5VG9TZXQ7XHJcblxyXG4gICAgICBpZiAoZXhpc3RLZXlmcmFtZS5sZW5ndGgpIHtcclxuICAgICAgICByZWFkeVRvU2V0ID0gZXhpc3RLZXlmcmFtZVswXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWFkeVRvU2V0ID0ge1xyXG4gICAgICAgICAgdDogdGltZSxcclxuICAgICAgICAgIHM6IHRoaXMuZ2V0RGVmYXVsdFByb3BlcnR5KGtleSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBwcmV2aW91c0tleWZyYW1lQ291bnQgPSB0cmFuc2Zvcm1ba2V5XS5rLnJlZHVjZShmdW5jdGlvbiAocCwgeCkge1xyXG4gICAgICAgICAgcmV0dXJuIHgudCA8IHRpbWUgPyBwICsgMSA6IHA7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgdHJhbnNmb3JtW2tleV0uay5zcGxpY2UocHJldmlvdXNLZXlmcmFtZUNvdW50LCAwLCByZWFkeVRvU2V0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVhc2luZykge1xyXG4gICAgICAgIHJlYWR5VG9TZXQubyA9IHtcclxuICAgICAgICAgIHg6IGVhc2luZ1swXVswXSxcclxuICAgICAgICAgIHk6IGVhc2luZ1swXVsxXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVhZHlUb1NldC5pID0ge1xyXG4gICAgICAgICAgeDogZWFzaW5nWzFdWzBdLFxyXG4gICAgICAgICAgeTogZWFzaW5nWzFdWzFdXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlkeCA+PSAwKSB7XHJcbiAgICAgICAgcmVhZHlUb1NldC5zW2lkeF0gPSB2YWx1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWFkeVRvU2V0LnMgPSB3cmFwICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkgPyBbdmFsdWVdIDogdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiZmluZFByb3BlcnR5Q29uZmlnXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFByb3BlcnR5Q29uZmlnKGtleSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5yb290LnNoYXBlc1swXS5pdC5maW5kKGZ1bmN0aW9uIChzaGFwZSkge1xyXG4gICAgICAgIHJldHVybiBzaGFwZS50eSA9PSBrZXk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJmaW5kT3JJbnNlcnRQcm9wZXJ0eUNvbmZpZ1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRPckluc2VydFByb3BlcnR5Q29uZmlnKGtleSkge1xyXG4gICAgICB2YXIgZmluZCA9IHRoaXMuZmluZFByb3BlcnR5Q29uZmlnKGtleSk7XHJcbiAgICAgIGlmIChmaW5kKSByZXR1cm4gZmluZDtcclxuICAgICAgdmFyIGhhc1RyYW5zZm9ybSA9IHRoaXMuZmluZFByb3BlcnR5Q29uZmlnKCd0cicpO1xyXG5cclxuICAgICAgdmFyIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe1xyXG4gICAgICAgIHR5OiBrZXlcclxuICAgICAgfSwgdGhpcy5nZXREZWZhdWx0UHJvcGVydHkoa2V5KSk7XHJcblxyXG4gICAgICBpZiAoaGFzVHJhbnNmb3JtKSB7XHJcbiAgICAgICAgdmFyIGdyb3VwU2hhcGVzID0gdGhpcy5yb290LnNoYXBlc1swXS5pdDtcclxuICAgICAgICBncm91cFNoYXBlcy5zcGxpY2UoZ3JvdXBTaGFwZXMubGVuZ3RoIC0gMSwgMCwgY29uZmlnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnJvb3Quc2hhcGVzWzBdLml0LnB1c2goY29uZmlnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiY29tbW9uUHJvcGVydHlNYXBwaW5nXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tbW9uUHJvcGVydHlNYXBwaW5nKGtleSkge1xyXG4gICAgICB2YXIgYmFzZSwgaywgaW5kZXg7XHJcblxyXG4gICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgIGNhc2UgJ3NjYWxlWCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdzJztcclxuICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdzY2FsZVknOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncyc7XHJcbiAgICAgICAgICBpbmRleCA9IDE7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAnYW5jaG9yWCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdhJztcclxuICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdhbmNob3JZJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLnJvb3Qua3M7XHJcbiAgICAgICAgICBrID0gJ2EnO1xyXG4gICAgICAgICAgaW5kZXggPSAxO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3gnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncCc7XHJcbiAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAneSc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5yb290LmtzO1xyXG4gICAgICAgICAgayA9ICdwJztcclxuICAgICAgICAgIGluZGV4ID0gMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdyb3RhdGUnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAncic7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ29wYWNpdHknOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMucm9vdC5rcztcclxuICAgICAgICAgIGsgPSAnbyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RyaW1TdGFydCc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5maW5kT3JJbnNlcnRQcm9wZXJ0eUNvbmZpZygndG0nKTtcclxuICAgICAgICAgIGsgPSAncyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3RyaW1FbmQnOlxyXG4gICAgICAgICAgYmFzZSA9IHRoaXMuZmluZE9ySW5zZXJ0UHJvcGVydHlDb25maWcoJ3RtJyk7XHJcbiAgICAgICAgICBrID0gJ2UnO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICd0cmltT2Zmc2V0JzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRPckluc2VydFByb3BlcnR5Q29uZmlnKCd0bScpO1xyXG4gICAgICAgICAgayA9ICdvJztcclxuICAgICAgICAgIGluZGV4ID0gLTE7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAnZmlsbENvbG9yJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnZmwnKTtcclxuICAgICAgICAgIGsgPSAnYyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3N0cm9rZUNvbG9yJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAnYyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3N0cm9rZVdpZHRoJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAndyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ3NoYXBlJzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc2gnKTtcclxuICAgICAgICAgIGsgPSAna3MnO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdmaWxsT3BhY2l0eSc6XHJcbiAgICAgICAgICBiYXNlID0gdGhpcy5maW5kUHJvcGVydHlDb25maWcoJ2ZsJyk7XHJcbiAgICAgICAgICBrID0gJ28nO1xyXG4gICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdzdHJva2VPcGFjaXR5JzpcclxuICAgICAgICAgIGJhc2UgPSB0aGlzLmZpbmRQcm9wZXJ0eUNvbmZpZygnc3QnKTtcclxuICAgICAgICAgIGsgPSAnbyc7XHJcbiAgICAgICAgICBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBbYmFzZSwgaywgaW5kZXhdO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJ1cGRhdGVUaW1lUmFuZ2VcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVUaW1lUmFuZ2UoKSB7XHJcbiAgICAgIHRoaXMucm9vdC5vcCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShPYmplY3QudmFsdWVzKHRoaXMudGltZVJhbmdlKSkuY29uY2F0KFsxXSkpO1xyXG4gICAgfVxyXG4gIH1dKTtcclxuXHJcbiAgZnVuY3Rpb24gSlNNb3ZpbkxheWVyKHJlZikge1xyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEpTTW92aW5MYXllcik7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicm9vdFwiLCB2b2lkIDApO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFuY2hvclwiLCB2b2lkIDApO1xyXG5cclxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBvc2l0aW9uXCIsIHZvaWQgMCk7XHJcblxyXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidGltZVJhbmdlXCIsIHt9KTtcclxuXHJcbiAgICB0aGlzLnJvb3QgPSByZWY7XHJcbiAgICB0aGlzLmFuY2hvciA9IFswLCAwLCAwXTtcclxuICAgIHRoaXMucG9zaXRpb24gPSBbMCwgMCwgMF07XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBrZXkgdGhlIG5hbWUgb2YgcHJvcGVydHkgdG8gYmUgc2V0XHJcbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBiZSBzZXRcclxuICAgKi9cclxuXHJcblxyXG4gIF9jcmVhdGVDbGFzcyhKU01vdmluTGF5ZXIsIFt7XHJcbiAgICBrZXk6IFwic2V0U3RhdGljUHJvcGVydHlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdGF0aWNQcm9wZXJ0eShrZXksIHZhbHVlKSB7XHJcbiAgICAgIHRoaXMudGltZVJhbmdlW2tleV0gPSAxO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRpbWVSYW5nZSgpO1xyXG5cclxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyKSB7XHJcbiAgICAgICAgdmFsdWUudW5pZm9ybSgpO1xyXG4gICAgICAgIHZhbHVlID0gdmFsdWUucGF0aDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGJhc2UsIGssIGluZGV4O1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TSA9IHRoaXMuY29tbW9uUHJvcGVydHlNYXBwaW5nKGtleSk7XHJcblxyXG4gICAgICB2YXIgX3RoaXMkY29tbW9uUHJvcGVydHlNMiA9IF9zbGljZWRUb0FycmF5KF90aGlzJGNvbW1vblByb3BlcnR5TSwgMyk7XHJcblxyXG4gICAgICBiYXNlID0gX3RoaXMkY29tbW9uUHJvcGVydHlNMlswXTtcclxuICAgICAgayA9IF90aGlzJGNvbW1vblByb3BlcnR5TTJbMV07XHJcbiAgICAgIGluZGV4ID0gX3RoaXMkY29tbW9uUHJvcGVydHlNMlsyXTtcclxuXHJcbiAgICAgIGlmICghayB8fCBpbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG4gICAgICAgICAgICBpZiAodGhpcy5yb290LnR5ID09IDUpIHtcclxuICAgICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5yb290LnQuZDtcclxuICAgICAgICAgICAgICBkb2MuayA9IFtkb2Mua1swXV07XHJcbiAgICAgICAgICAgICAgZG9jLmtbMF0udCA9IDA7XHJcbiAgICAgICAgICAgICAgZG9jLmtbMF0ucy50ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgdmFsaWQga2V5LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJhc2UgJiYgayAmJiBpbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jb252ZXJ0VG9TdGF0aWNQcm9wZXJ0eShiYXNlLCBrKTtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkgYmFzZVtrXS5rW2luZGV4XSA9IHZhbHVlO2Vsc2UgYmFzZVtrXS5rID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0ga2V5IHRoZSBuYW1lIG9mIHByb3BlcnR5IHRvIGJlIHNldFxyXG4gICAgICogQHBhcmFtIHN0YXJ0RnJhbWUgZnJhbWUgbnVtYmVyIHRvIHN0YXJ0IHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBlbmRGcmFtZSBmcmFtZSBudW1iZXIgdG8gZW5kIHRoZSBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBzdGFydFZhbHVlIHZhbHVlIHRvIGJlIHNldCBpbiBzdGFydCBvZiBhbmltYXRpb25cclxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSB2YWx1ZSB0byBiZSBzZXQgaW4gZW5kIG9mIGFuaW1hdGlvblxyXG4gICAgICogQHBhcmFtIGVhc2luZyBlYXNpbmcgZnVuY3Rpb24sIGRlZmF1bHQgaXMgbGluZWFyXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInNldEFuaW1hdGFibGVQcm9wZXJ0eVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEFuaW1hdGFibGVQcm9wZXJ0eShrZXksIHN0YXJ0RnJhbWUsIGVuZEZyYW1lLCBzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZWFzaW5nKSB7XHJcbiAgICAgIGlmIChlbmRGcmFtZSA8PSBzdGFydEZyYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbmQgZnJhbWUgc2hvdWxkIGJlIGxhcmdlciB0aGFuIHN0YXJ0IGZyYW1lLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnRpbWVSYW5nZVtrZXldID0gTWF0aC5tYXgodGhpcy50aW1lUmFuZ2Vba2V5XSB8fCAwLCBlbmRGcmFtZSArIDEpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRpbWVSYW5nZSgpO1xyXG5cclxuICAgICAgaWYgKCFlYXNpbmcpIHtcclxuICAgICAgICBlYXNpbmcgPSBfZWFzaW5nLkVhc2luZ0ZhY3RvcnkubGluZWFyKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzdGFydFZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyIHx8IGVuZFZhbHVlIGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyKSB7XHJcbiAgICAgICAgW3N0YXJ0VmFsdWUsIGVuZFZhbHVlXS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICByZXR1cm4gdiBpbnN0YW5jZW9mIF9wYXRoLlBhdGhNYWtlciAmJiB2LnVuaWZvcm0oKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0VmFsdWUgaW5zdGFuY2VvZiBfcGF0aC5QYXRoTWFrZXIgJiYgZW5kVmFsdWUgaW5zdGFuY2VvZiBfcGF0aC5QYXRoTWFrZXIpIHtcclxuICAgICAgICAgIHZhciBzdGFydExpbmVDb3VudCA9IHN0YXJ0VmFsdWUucGF0aC52Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICB2YXIgZW5kTGluZUNvdW50ID0gZW5kVmFsdWUucGF0aC52Lmxlbmd0aCAtIDE7XHJcblxyXG4gICAgICAgICAgaWYgKCEoc3RhcnRMaW5lQ291bnQgPD0gMCAmJiBlbmRMaW5lQ291bnQgPD0gMCkpIHtcclxuICAgICAgICAgICAgaWYgKE1hdGgubWluKHN0YXJ0TGluZUNvdW50LCBlbmRMaW5lQ291bnQpIDw9IDAgJiYgTWF0aC5tYXgoc3RhcnRMaW5lQ291bnQsIGVuZExpbmVDb3VudCkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgdmFyIG5lZWRDb3B5ID0gc3RhcnRMaW5lQ291bnQgPD0gMCA/IHN0YXJ0VmFsdWUgOiBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICB2YXIgbmVlZExlbmd0aCA9IE1hdGgubWF4KHN0YXJ0TGluZUNvdW50LCBlbmRMaW5lQ291bnQpO1xyXG4gICAgICAgICAgICAgIFsnaScsICdvJywgJ3YnXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIG5lZWRDb3B5LnBhdGhba2V5XSA9IEFycmF5KG5lZWRMZW5ndGgpLmZpbGwobmVlZENvcHkucGF0aFtrZXldLmxlbmd0aCA/IG5lZWRDb3B5LnBhdGhba2V5XVswXSA6IFswLCAwXSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdmFyIGNvbW1vbk11bHRpcGxlID0gKDAsIF9oZWxwZXIubGVhc3RDb21tb25NdWx0aXBsZSkoc3RhcnRMaW5lQ291bnQsIGVuZExpbmVDb3VudCk7XHJcbiAgICAgICAgICAgICAgc3RhcnRWYWx1ZS51cHNhbXBsZShNYXRoLnJvdW5kKGNvbW1vbk11bHRpcGxlIC8gc3RhcnRMaW5lQ291bnQpKTtcclxuICAgICAgICAgICAgICBlbmRWYWx1ZS51cHNhbXBsZShNYXRoLnJvdW5kKGNvbW1vbk11bHRpcGxlIC8gZW5kTGluZUNvdW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBfbWFwID0gW3N0YXJ0VmFsdWUsIGVuZFZhbHVlXS5tYXAoZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgIHJldHVybiB2IGluc3RhbmNlb2YgX3BhdGguUGF0aE1ha2VyID8gdi5wYXRoIDogdjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIF9tYXAyID0gX3NsaWNlZFRvQXJyYXkoX21hcCwgMik7XHJcblxyXG4gICAgICAgIHN0YXJ0VmFsdWUgPSBfbWFwMlswXTtcclxuICAgICAgICBlbmRWYWx1ZSA9IF9tYXAyWzFdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgYmFzZSxcclxuICAgICAgICAgIGssXHJcbiAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgIHdyYXAgPSB0cnVlO1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TTMgPSB0aGlzLmNvbW1vblByb3BlcnR5TWFwcGluZyhrZXkpO1xyXG5cclxuICAgICAgdmFyIF90aGlzJGNvbW1vblByb3BlcnR5TTQgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRjb21tb25Qcm9wZXJ0eU0zLCAzKTtcclxuXHJcbiAgICAgIGJhc2UgPSBfdGhpcyRjb21tb25Qcm9wZXJ0eU00WzBdO1xyXG4gICAgICBrID0gX3RoaXMkY29tbW9uUHJvcGVydHlNNFsxXTtcclxuICAgICAgaW5kZXggPSBfdGhpcyRjb21tb25Qcm9wZXJ0eU00WzJdO1xyXG5cclxuICAgICAgaWYgKCFrIHx8IGluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgY2FzZSAndGV4dCc6XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJvb3QudHkgPT0gNSkge1xyXG4gICAgICAgICAgICAgIGJhc2UgPSB0aGlzLnJvb3QudDtcclxuICAgICAgICAgICAgICB2YXIgdGV4dFByb3AgPSBiYXNlLmQua1swXS5zO1xyXG4gICAgICAgICAgICAgIHZhciB0bXBTdGFydFZhbHVlID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0ZXh0UHJvcCkpO1xyXG4gICAgICAgICAgICAgIHZhciB0bXBFbmRWYWx1ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGV4dFByb3ApKTtcclxuICAgICAgICAgICAgICB0bXBTdGFydFZhbHVlLnQgPSBzdGFydFZhbHVlO1xyXG4gICAgICAgICAgICAgIHRtcEVuZFZhbHVlLnQgPSBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICBzdGFydFZhbHVlID0gdG1wU3RhcnRWYWx1ZTtcclxuICAgICAgICAgICAgICBlbmRWYWx1ZSA9IHRtcEVuZFZhbHVlO1xyXG4gICAgICAgICAgICAgIGsgPSAnZCc7XHJcbiAgICAgICAgICAgICAgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICB3cmFwID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioa2V5LCBzdGFydEZyYW1lLCBlbmRGcmFtZSwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGVhc2luZyk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgdmFsaWQga2V5LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGJhc2UgJiYgayAmJiBpbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5jb252ZXJ0VG9BbmltYXRhYmxlUHJvcGVydHkoYmFzZSwgayk7XHJcbiAgICAgICAgdGhpcy5hZGRLZXlmcmFtZShiYXNlLCBrLCBpbmRleCwgc3RhcnRGcmFtZSwgc3RhcnRWYWx1ZSwgZWFzaW5nLCB3cmFwKTtcclxuICAgICAgICB0aGlzLmFkZEtleWZyYW1lKGJhc2UsIGssIGluZGV4LCBlbmRGcmFtZSwgZW5kVmFsdWUsIF9lYXNpbmcuRWFzaW5nRmFjdG9yeS5saW5lYXIoKSwgd3JhcCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBKU01vdmluTGF5ZXI7XHJcbn0oKTtcclxuXHJcbmV4cG9ydHMuSlNNb3ZpbkxheWVyID0gSlNNb3ZpbkxheWVyO1xyXG5cclxudmFyIExheWVyRmFjdG9yeSA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIExheWVyRmFjdG9yeSgpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYXllckZhY3RvcnkpO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZUNsYXNzKExheWVyRmFjdG9yeSwgbnVsbCwgW3tcclxuICAgIGtleTogXCJnZW5lcmF0ZVRyYW5zZm9ybVwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlVHJhbnNmb3JtKGNvb3JkaW5hdGUpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBvOiB7XHJcbiAgICAgICAgICBhOiAwLFxyXG4gICAgICAgICAgazogMTAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICByOiB7XHJcbiAgICAgICAgICBhOiAwLFxyXG4gICAgICAgICAgazogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcDoge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFtjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCAwXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYToge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFswLCAwLCAwXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgczoge1xyXG4gICAgICAgICAgYTogMCxcclxuICAgICAgICAgIGs6IFsxMDAsIDEwMCwgMTAwXVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogY3JlYXRlIHRoZSBib3VuZGluZyBib3ggb2Ygc3ZnIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBkb20gc3ZnIGVsZW1lbnQgbmVlZHMgdG8gY2FsY3VsYXRlIHRoZSBib3VuZGluZyBib3hcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiYm91bmRpbmdCb3hcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBib3VuZGluZ0JveChkb20pIHtcclxuICAgICAgdmFyIGJvdW5kaW5nQm94ID0gKDAsIF9oZWxwZXIuZ2V0Qm91bmRpbmdCb3gpKGRvbSkubWFwKGZ1bmN0aW9uICh2LCBpKSB7XHJcbiAgICAgICAgcmV0dXJuIGkgPCAyID8gdiAtIDEgOiB2ICsgMTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlY3QuYXBwbHkodGhpcywgX3RvQ29uc3VtYWJsZUFycmF5KGJvdW5kaW5nQm94KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSB0aGUgc2FtZSBzaGFwZSBvZiBzdmcgcGF0aFxyXG4gICAgICogQHBhcmFtIGRvbSBzdmcgcGF0aCBlbGVtZW50IHJlcHJlc2VudCB0aGUgc2hhcGVcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwic2hhcGVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaGFwZShkb20pIHtcclxuICAgICAgdmFyIGNvb3JkaW5hdGUgPSAoMCwgX2hlbHBlci5nZXRCb3VuZGluZ0JveCkoZG9tKTtcclxuICAgICAgdmFyIGxheWVyID0ge1xyXG4gICAgICAgIHR5OiA0LFxyXG4gICAgICAgIGRkZDogMCxcclxuICAgICAgICBzcjogMSxcclxuICAgICAgICBhbzogMCxcclxuICAgICAgICBrczogdGhpcy5nZW5lcmF0ZVRyYW5zZm9ybShjb29yZGluYXRlKSxcclxuICAgICAgICBpcDogMCxcclxuICAgICAgICBvcDogMSxcclxuICAgICAgICBzdDogMCxcclxuICAgICAgICBibTogMCxcclxuICAgICAgICBzaGFwZXM6ICgwLCBfcmVuZGVyLnJlbmRlcikoZG9tKVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gbmV3IEpTTW92aW5MYXllcihsYXllcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSBhIHJlY3RhbmdsZVxyXG4gICAgICogQHBhcmFtIGxlZnQgbGVmdCBvZiByZWN0XHJcbiAgICAgKiBAcGFyYW0gdG9wIHRvcCBvZiByZWN0XHJcbiAgICAgKiBAcGFyYW0gd2lkdGggd2lkdGggb2YgcmVjdFxyXG4gICAgICogQHBhcmFtIGhlaWdodCBoZWlnaHQgb2YgcmVjdFxyXG4gICAgICovXHJcblxyXG4gIH0sIHtcclxuICAgIGtleTogXCJyZWN0XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgdmFyIGxheWVyID0ge1xyXG4gICAgICAgIHR5OiA0LFxyXG4gICAgICAgIGRkZDogMCxcclxuICAgICAgICBzcjogMSxcclxuICAgICAgICBhbzogMCxcclxuICAgICAgICBrczogdGhpcy5nZW5lcmF0ZVRyYW5zZm9ybShbbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0XSksXHJcbiAgICAgICAgaXA6IDAsXHJcbiAgICAgICAgb3A6IDEsXHJcbiAgICAgICAgc3Q6IDAsXHJcbiAgICAgICAgYm06IDAsXHJcbiAgICAgICAgc2hhcGVzOiBbKDAsIF9yZW5kZXIucmVuZGVyUGxhaW5HbHlwaCkoJ3JlY3QnLCBbd2lkdGgsIGhlaWdodF0pXVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gbmV3IEpTTW92aW5MYXllcihsYXllcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSBhIGVsbGlwc2VcclxuICAgICAqIEBwYXJhbSBjeCB4IGNlbnRlciBvZiBlbGxpcHNlXHJcbiAgICAgKiBAcGFyYW0gY3kgeSBjZW50ZXIgb2YgZWxsaXBzZVxyXG4gICAgICogQHBhcmFtIHJ4IHggcmFkaXVzIG9mIGVsbGlwc2VcclxuICAgICAqIEBwYXJhbSByeSB5IHJhZGl1cyBvZiBlbGxpcHNlXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImVsbGlwc2VcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbGxpcHNlKGN4LCBjeSwgcngsIHJ5KSB7XHJcbiAgICAgIHZhciBsYXllciA9IHtcclxuICAgICAgICB0eTogNCxcclxuICAgICAgICBkZGQ6IDAsXHJcbiAgICAgICAgc3I6IDEsXHJcbiAgICAgICAgYW86IDAsXHJcbiAgICAgICAga3M6IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oW2N4IC0gcngsIGN5IC0gcnksIDIgKiByeCwgMiAqIHJ5XSksXHJcbiAgICAgICAgaXA6IDAsXHJcbiAgICAgICAgb3A6IDEsXHJcbiAgICAgICAgc3Q6IDAsXHJcbiAgICAgICAgYm06IDAsXHJcbiAgICAgICAgc2hhcGVzOiBbKDAsIF9yZW5kZXIucmVuZGVyUGxhaW5HbHlwaCkoJ2VsbGlwc2UnLCBbcngsIHJ5XSldXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBuZXcgSlNNb3ZpbkxheWVyKGxheWVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbWFrZSBhIGxheWVyIGJ5IGFzc2V0IElEXHJcbiAgICAgKiBAcGFyYW0gaWQgYXNzZXQgcmVmZXJlbmNlIElEXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInJlZlwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZihpZCkge1xyXG4gICAgICB2YXIgbGF5ZXIgPSBuZXcgSlNNb3ZpbkxheWVyKHtcclxuICAgICAgICB0eTogMCxcclxuICAgICAgICBkZGQ6IDAsXHJcbiAgICAgICAgc3I6IDEsXHJcbiAgICAgICAgYW86IDAsXHJcbiAgICAgICAga3M6IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oWzAsIDAsIDAsIDBdKSxcclxuICAgICAgICBpcDogMCxcclxuICAgICAgICBvcDogMSxcclxuICAgICAgICBzdDogMCxcclxuICAgICAgICBibTogMCxcclxuICAgICAgICB3OiA5ZTksXHJcbiAgICAgICAgaDogOWU5LFxyXG4gICAgICAgIHJlZklkOiBpZFxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGxheWVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBtYWtlIGEgY29tcGxleCBsYXllciBieSBhbiBhcmJpdHJhcnkgc3ZnIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBkb20gc3ZnIGVsZW1lbnQgbmVlZCB0byBiZSBwYXJzZWRcclxuICAgICAqIEBwYXJhbSBhc3NldExpc3QgYSBsaXN0IGNvbnRhaW5zIGltYWdlL2xheWVyIGFzc2V0XHJcbiAgICAgKiBAcGFyYW0gZm9udExpc3QgYSBsaXN0IGNvbnRhaW5zIGZvbnQgYXNzZXRcclxuICAgICAqL1xyXG5cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiaGllcmFyY2h5XCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGllcmFyY2h5KGRvbSwgYXNzZXRMaXN0LCBmb250TGlzdCkge1xyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgdmFyIGNvb3JkaW5hdGUgPSAoMCwgX2hlbHBlci5nZXRCb3VuZGluZ0JveCkoZG9tKTtcclxuICAgICAgdmFyIGRvbVR5cGU7XHJcblxyXG4gICAgICBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHVGV4dEVsZW1lbnQpIHtcclxuICAgICAgICBkb21UeXBlID0gNTtcclxuICAgICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdJbWFnZUVsZW1lbnQpIHtcclxuICAgICAgICBkb21UeXBlID0gMjtcclxuICAgICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdHRWxlbWVudCkge1xyXG4gICAgICAgIGRvbVR5cGUgPSAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRvbVR5cGUgPSA0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgbGF5ZXIgPSB7XHJcbiAgICAgICAgdHk6IGRvbVR5cGUsXHJcbiAgICAgICAgZGRkOiAwLFxyXG4gICAgICAgIHNyOiAxLFxyXG4gICAgICAgIGFvOiAwLFxyXG4gICAgICAgIGtzOiB0aGlzLmdlbmVyYXRlVHJhbnNmb3JtKGRvbVR5cGUgPT0gMCA/IFswLCAwLCAwLCAwXSA6IGNvb3JkaW5hdGUpLFxyXG4gICAgICAgIGlwOiAwLFxyXG4gICAgICAgIG9wOiAxLFxyXG4gICAgICAgIHN0OiAwLFxyXG4gICAgICAgIGJtOiAwXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzd2l0Y2ggKGRvbVR5cGUpIHtcclxuICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICB2YXIgZG9tTGVhdmVzID0gKDAsIF9oZWxwZXIuZ2V0TGVhZk5vZGVzKShkb20pO1xyXG5cclxuICAgICAgICAgIGlmIChkb21MZWF2ZXMuZmlsdGVyKGZ1bmN0aW9uIChkb20pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRvbSBpbnN0YW5jZW9mIFNWR1RleHRFbGVtZW50IHx8IGRvbSBpbnN0YW5jZW9mIFNWR0ltYWdlRWxlbWVudDtcclxuICAgICAgICAgIH0pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgcHJlY29tcExheWVyID0gbGF5ZXI7XHJcbiAgICAgICAgICAgIHZhciBwcmVDb21wQXNzZXQgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHByZUNvbXBSZWZJZCA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcbiAgICAgICAgICAgIGRvbUxlYXZlcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiBTVkdHcmFwaGljc0VsZW1lbnQgJiYgIShkIGluc3RhbmNlb2YgU1ZHR0VsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVDb21wQXNzZXQudW5zaGlmdChfdGhpcy5oaWVyYXJjaHkoZCwgYXNzZXRMaXN0LCBmb250TGlzdCkpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHByZUNvbXBBc3NldC5mb3JFYWNoKGZ1bmN0aW9uIChsYXllcikge1xyXG4gICAgICAgICAgICAgIGxheWVyLnJvb3Qub3AgPSA5ZTk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwcmVjb21wTGF5ZXIudyA9IGNvb3JkaW5hdGVbMF0gKyBjb29yZGluYXRlWzJdICsgMTtcclxuICAgICAgICAgICAgcHJlY29tcExheWVyLmggPSBjb29yZGluYXRlWzFdICsgY29vcmRpbmF0ZVszXSArIDE7XHJcbiAgICAgICAgICAgIHByZWNvbXBMYXllci5yZWZJZCA9IHByZUNvbXBSZWZJZDtcclxuICAgICAgICAgICAgYXNzZXRMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgIGlkOiBwcmVDb21wUmVmSWQsXHJcbiAgICAgICAgICAgICAgbGF5ZXJzOiBwcmVDb21wQXNzZXQubWFwKGZ1bmN0aW9uIChsYXllcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxheWVyLnJvb3Q7XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgX3NoYXBlTGF5ZXIgPSBsYXllcjtcclxuICAgICAgICAgICAgX3NoYXBlTGF5ZXIudHkgPSA0O1xyXG4gICAgICAgICAgICBfc2hhcGVMYXllci5rcyA9IHRoaXMuZ2VuZXJhdGVUcmFuc2Zvcm0oY29vcmRpbmF0ZSk7XHJcbiAgICAgICAgICAgIF9zaGFwZUxheWVyLnNoYXBlcyA9ICgwLCBfcmVuZGVyLnJlbmRlcikoZG9tKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgdmFyIGltYWdlTGF5ZXIgPSBsYXllcjtcclxuXHJcbiAgICAgICAgICB2YXIgX3JlbmRlckltYWdlID0gKDAsIF9yZW5kZXIucmVuZGVySW1hZ2UpKGRvbSwgYXNzZXRMaXN0KSxcclxuICAgICAgICAgICAgICBfcmVuZGVySW1hZ2UyID0gX3NsaWNlZFRvQXJyYXkoX3JlbmRlckltYWdlLCAyKSxcclxuICAgICAgICAgICAgICBpbWFnZVJlZklkID0gX3JlbmRlckltYWdlMlswXSxcclxuICAgICAgICAgICAgICBpbWFnZUFzc2V0ID0gX3JlbmRlckltYWdlMlsxXTtcclxuXHJcbiAgICAgICAgICBpbWFnZUxheWVyLnJlZklkID0gaW1hZ2VSZWZJZDtcclxuICAgICAgICAgIGlmICghYXNzZXRMaXN0LmZpbHRlcihmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5pZCA9PSBpbWFnZVJlZklkO1xyXG4gICAgICAgICAgfSkubGVuZ3RoKSBhc3NldExpc3QucHVzaChpbWFnZUFzc2V0KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICB2YXIgc2hhcGVMYXllciA9IGxheWVyO1xyXG4gICAgICAgICAgc2hhcGVMYXllci5zaGFwZXMgPSAoMCwgX3JlbmRlci5yZW5kZXIpKGRvbSk7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgdmFyIHRleHRMYXllciA9IGxheWVyOyAvLyBtb3ZlIHRleHRMYXllcidzIHBvc2l0aW9uIHRvIHRleHQtYW5jaG9yLXJlbGF0ZWRcclxuXHJcbiAgICAgICAgICB2YXIgYmFzZUxpbmVIZWlnaHQgPSAoMCwgX2hlbHBlci5nZXRCYXNlbGluZUhlaWdodCkoZG9tKTtcclxuICAgICAgICAgIHZhciB0ZXh0QW5jaG9yID0gKDAsIF9oZWxwZXIuZW5jb2RlVGV4dEFuY2hvcikoZ2V0Q29tcHV0ZWRTdHlsZShkb20pLnRleHRBbmNob3IpO1xyXG4gICAgICAgICAgdmFyIHRleHRBbmNob3JXZWlnaHQgPSBbMCwgMSwgMC41XVt0ZXh0QW5jaG9yXTtcclxuICAgICAgICAgIHRleHRMYXllci5rcy5wLmsgPSBbY29vcmRpbmF0ZVswXSArIGNvb3JkaW5hdGVbMl0gKiB0ZXh0QW5jaG9yV2VpZ2h0LCBjb29yZGluYXRlWzFdICsgY29vcmRpbmF0ZVszXSAtIGJhc2VMaW5lSGVpZ2h0LCAwXTtcclxuICAgICAgICAgIHRleHRMYXllci5rcy5vLmsgPSB+fihwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUoZG9tKS5maWxsT3BhY2l0eSB8fCAnMScpICogMTAwKTtcclxuXHJcbiAgICAgICAgICB2YXIgX3JlbmRlclRleHQgPSAoMCwgX3JlbmRlci5yZW5kZXJUZXh0KShkb20sIGZvbnRMaXN0KSxcclxuICAgICAgICAgICAgICBfcmVuZGVyVGV4dDIgPSBfc2xpY2VkVG9BcnJheShfcmVuZGVyVGV4dCwgMiksXHJcbiAgICAgICAgICAgICAgdGV4dERhdGEgPSBfcmVuZGVyVGV4dDJbMF0sXHJcbiAgICAgICAgICAgICAgZm9udCA9IF9yZW5kZXJUZXh0MlsxXTtcclxuXHJcbiAgICAgICAgICB0ZXh0TGF5ZXIudCA9IHRleHREYXRhO1xyXG4gICAgICAgICAgaWYgKCFmb250TGlzdC5saXN0LmZpbHRlcihmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZi5mTmFtZSA9PSBmb250LmZOYW1lO1xyXG4gICAgICAgICAgfSkubGVuZ3RoKSBmb250TGlzdC5saXN0LnB1c2goZm9udCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIG1vdmluTGF5ZXIgPSBuZXcgSlNNb3ZpbkxheWVyKGxheWVyKTtcclxuICAgICAgcmV0dXJuIG1vdmluTGF5ZXI7XHJcbiAgICB9XHJcbiAgfV0pO1xyXG5cclxuICByZXR1cm4gTGF5ZXJGYWN0b3J5O1xyXG59KCk7XHJcblxyXG5leHBvcnRzLkxheWVyRmFjdG9yeSA9IExheWVyRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlzWVhsbGNpNTBjeUpkTENKdVlXMWxjeUk2V3lKS1UwMXZkbWx1VEdGNVpYSWlMQ0pyWlhraUxDSktVMDlPSWl3aWNHRnljMlVpTENKemRISnBibWRwWm5raUxDSmhibU5vYjNJaUxDSndiM05wZEdsdmJpSXNJbk1pTENKcklpd2laU0lzSW04aUxDSjBjbUZ1YzJadmNtMGlMQ0poSWl3aVoyVjBSR1ZtWVhWc2RGQnliM0JsY25SNUlpd2ljM1JoZEdsalZtRnNkV1VpTENKcFpIZ2lMQ0owYVcxbElpd2lkbUZzZFdVaUxDSmxZWE5wYm1jaUxDSjNjbUZ3SWl3aVpYaHBjM1JMWlhsbWNtRnRaU0lzSW1acGJIUmxjaUlzSW5naUxDSjBJaXdpY21WaFpIbFViMU5sZENJc0lteGxibWQwYUNJc0luQnlaWFpwYjNWelMyVjVabkpoYldWRGIzVnVkQ0lzSW5KbFpIVmpaU0lzSW5BaUxDSnpjR3hwWTJVaUxDSjVJaXdpYVNJc0lrRnljbUY1SWl3aWNtOXZkQ0lzSW5Ob1lYQmxjeUlzSW1sMElpd2labWx1WkNJc0luTm9ZWEJsSWl3aWRIa2lMQ0ptYVc1a1VISnZjR1Z5ZEhsRGIyNW1hV2NpTENKb1lYTlVjbUZ1YzJadmNtMGlMQ0pqYjI1bWFXY2lMQ0puY205MWNGTm9ZWEJsY3lJc0luQjFjMmdpTENKaVlYTmxJaXdpYVc1a1pYZ2lMQ0pyY3lJc0ltWnBibVJQY2tsdWMyVnlkRkJ5YjNCbGNuUjVRMjl1Wm1sbklpd2liM0FpTENKTllYUm9JaXdpYldGNElpd2lUMkpxWldOMElpd2lkbUZzZFdWeklpd2lkR2x0WlZKaGJtZGxJaXdpY21WbUlpd2lkWEJrWVhSbFZHbHRaVkpoYm1kbElpd2lVR0YwYUUxaGEyVnlJaXdpZFc1cFptOXliU0lzSW5CaGRHZ2lMQ0pqYjIxdGIyNVFjbTl3WlhKMGVVMWhjSEJwYm1jaUxDSjFibVJsWm1sdVpXUWlMQ0prYjJNaUxDSmtJaXdpWTI5dWMyOXNaU0lzSW1WeWNtOXlJaXdpUlhKeWIzSWlMQ0pqYjI1MlpYSjBWRzlUZEdGMGFXTlFjbTl3WlhKMGVTSXNJbk4wWVhKMFJuSmhiV1VpTENKbGJtUkdjbUZ0WlNJc0luTjBZWEowVm1Gc2RXVWlMQ0psYm1SV1lXeDFaU0lzSWtWaGMybHVaMFpoWTNSdmNua2lMQ0pzYVc1bFlYSWlMQ0ptYjNKRllXTm9JaXdpZGlJc0luTjBZWEowVEdsdVpVTnZkVzUwSWl3aVpXNWtUR2x1WlVOdmRXNTBJaXdpYldsdUlpd2libVZsWkVOdmNIa2lMQ0p1WldWa1RHVnVaM1JvSWl3aVptbHNiQ0lzSW1OdmJXMXZiazExYkhScGNHeGxJaXdpZFhCellXMXdiR1VpTENKeWIzVnVaQ0lzSW0xaGNDSXNJblJsZUhSUWNtOXdJaXdpZEcxd1UzUmhjblJXWVd4MVpTSXNJblJ0Y0VWdVpGWmhiSFZsSWl3aVkyOXVkbVZ5ZEZSdlFXNXBiV0YwWVdKc1pWQnliM0JsY25SNUlpd2lZV1JrUzJWNVpuSmhiV1VpTENKTVlYbGxja1poWTNSdmNua2lMQ0pqYjI5eVpHbHVZWFJsSWl3aWNpSXNJbVJ2YlNJc0ltSnZkVzVrYVc1blFtOTRJaXdpY21WamRDSXNJbXhoZVdWeUlpd2laR1JrSWl3aWMzSWlMQ0poYnlJc0ltZGxibVZ5WVhSbFZISmhibk5tYjNKdElpd2lhWEFpTENKemRDSXNJbUp0SWl3aWJHVm1kQ0lzSW5SdmNDSXNJbmRwWkhSb0lpd2lhR1ZwWjJoMElpd2lZM2dpTENKamVTSXNJbko0SWl3aWNua2lMQ0pwWkNJc0luY2lMQ0pvSWl3aWNtVm1TV1FpTENKaGMzTmxkRXhwYzNRaUxDSm1iMjUwVEdsemRDSXNJbVJ2YlZSNWNHVWlMQ0pUVmtkVVpYaDBSV3hsYldWdWRDSXNJbE5XUjBsdFlXZGxSV3hsYldWdWRDSXNJbE5XUjBkRmJHVnRaVzUwSWl3aVpHOXRUR1ZoZG1Weklpd2ljSEpsWTI5dGNFeGhlV1Z5SWl3aWNISmxRMjl0Y0VGemMyVjBJaXdpY0hKbFEyOXRjRkpsWmtsa0lpd2lVMVpIUjNKaGNHaHBZM05GYkdWdFpXNTBJaXdpZFc1emFHbG1kQ0lzSW1ocFpYSmhjbU5vZVNJc0lteGhlV1Z5Y3lJc0luTm9ZWEJsVEdGNVpYSWlMQ0pwYldGblpVeGhlV1Z5SWl3aWFXMWhaMlZTWldaSlpDSXNJbWx0WVdkbFFYTnpaWFFpTENKMFpYaDBUR0Y1WlhJaUxDSmlZWE5sVEdsdVpVaGxhV2RvZENJc0luUmxlSFJCYm1Ob2IzSWlMQ0puWlhSRGIyMXdkWFJsWkZOMGVXeGxJaXdpZEdWNGRFRnVZMmh2Y2xkbGFXZG9kQ0lzSW5CaGNuTmxSbXh2WVhRaUxDSm1hV3hzVDNCaFkybDBlU0lzSW5SbGVIUkVZWFJoSWl3aVptOXVkQ0lzSW14cGMzUWlMQ0ptSWl3aVprNWhiV1VpTENKdGIzWnBia3hoZVdWeUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wbEJTV0ZCTEZrN096czdPM1ZEUVV0clFrTXNSeXhGUVVGaE8wRkJRM0JETEdOQlFWRkJMRWRCUVZJN1FVRkRTU3hoUVVGTExFZEJRVXc3UVVGRFFTeGhRVUZMTEVkQlFVdzdRVUZEU1N4cFFrRkJUME1zU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZkRUxFbEJRVWtzUTBGQlEwVXNVMEZCVEN4RFFVRmxTQ3hIUVVGSExFbEJRVWtzUjBGQlVDeEhRVUZoTEV0QlFVdEpMRTFCUVd4Q0xFZEJRVEpDTEV0QlFVdERMRkZCUVM5RExFTkJRVmdzUTBGQlVEczdRVUZEU2l4aFFVRkxMRWRCUVV3N1FVRkRTU3hwUWtGQlR5eERRVUZETEVkQlFVUXNSVUZCVFN4SFFVRk9MRVZCUVZjc1IwRkJXQ3hEUVVGUU96dEJRVU5LTEdGQlFVc3NSMEZCVER0QlFVTkpMR2xDUVVGUExFZEJRVkE3TzBGQlEwb3NZVUZCU3l4SFFVRk1PMEZCUTBrc2FVSkJRVThzUTBGQlVEczdRVUZEU2l4aFFVRkxMRWxCUVV3N1FVRkRTU3hwUWtGQlR6dEJRVU5JUXl4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwTXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zWVVGRVFUdEJRVWxJUXl4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwUXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zWVVGS1FUdEJRVTlJUlN4WlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEwWXNZMEZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW83UVVGUVFTeFhRVUZRT3p0QlFWZEtPMEZCUTBrc2FVSkJRVThzUTBGQlVEdEJRWFpDVWp0QlFYbENTRHM3T3pSRFFVTXJRa2NzVXl4RlFVRm5RbFlzUnl4RlFVRmhPMEZCUTNwRUxGVkJRVWtzUTBGQlExVXNVMEZCVXl4RFFVRkRWaXhIUVVGRUxFTkJRV1FzUlVGQmNVSTdRVUZEYWtKVkxGRkJRVUZCTEZOQlFWTXNRMEZCUTFZc1IwRkJSQ3hEUVVGVUxFZEJRV2xDTzBGQlEySlhMRlZCUVVGQkxFTkJRVU1zUlVGQlJTeERRVVJWTzBGQlJXSktMRlZCUVVGQkxFTkJRVU1zUlVGQlJTeExRVUZMU3l4clFrRkJUQ3hEUVVGM1Fsb3NSMEZCZUVJN1FVRkdWU3hUUVVGcVFqdEJRVWxJT3p0QlFVTkVMRlZCUVVsVkxGTkJRVk1zUTBGQlExWXNSMEZCUkN4RFFVRlVMRU5CUVdWWExFTkJRV1lzU1VGQmIwSXNRMEZCZUVJc1JVRkJNa0k3UVVGRGRrSXNXVUZCVFVVc1YwRkJWeXhIUVVGSFNDeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFR5eERRVUZtTEVOQlFXbENMRU5CUVdwQ0xFVkJRVzlDUkN4RFFVRjRRenRCUVVOQlNTeFJRVUZCUVN4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeEhRVUZwUWp0QlFVTmlWeXhWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZFVlR0QlFVVmlTaXhWUVVGQlFTeERRVUZETEVWQlFVVk5PMEZCUmxVc1UwRkJha0k3UVVGSlNEdEJRVU5LT3pzN1owUkJRMjFEU0N4VExFVkJRV2RDVml4SExFVkJRV0U3UVVGRE4wUXNWVUZCU1N4RFFVRkRWU3hUUVVGVExFTkJRVU5XTEVkQlFVUXNRMEZCVml4SlFVRnRRaXhEUVVGRFZTeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFZ5eERRVUYyUXl4RlFVRXdRenRCUVVOMFF5eFpRVUZKV0N4SFFVRkhMRWxCUVVrc1IwRkJXQ3hGUVVGblFqdEJRVU5hTEdWQlFVdEpMRTFCUVV3c1IwRkJZMDBzVTBGQlV5eERRVUZEVml4SFFVRkVMRU5CUVZRc1IwRkJhVUpWTEZOQlFWTXNRMEZCUTFZc1IwRkJSQ3hEUVVGVUxFTkJRV1ZQTEVOQlFXaERMRWRCUVc5RExFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NSVUZCVHl4RFFVRlFMRU5CUVd4RU8wRkJRMGc3TzBGQlEwUXNXVUZCU1ZBc1IwRkJSeXhKUVVGSkxFZEJRVmdzUlVGQlowSTdRVUZEV2l4bFFVRkxTeXhSUVVGTUxFZEJRV2RDU3l4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeEhRVUZwUWxVc1UwRkJVeXhEUVVGRFZpeEhRVUZFTEVOQlFWUXNRMEZCWlU4c1EwRkJhRU1zUjBGQmIwTXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUTBGQmNFUTdRVUZEU0RzN1FVRkRSRWNzVVVGQlFVRXNVMEZCVXl4RFFVRkRWaXhIUVVGRUxFTkJRVlFzUjBGQmFVSTdRVUZEWWxjc1ZVRkJRVUVzUTBGQlF5eEZRVUZGTEVOQlJGVTdRVUZGWWtvc1ZVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlJsVXNVMEZCYWtJN1FVRkpTRHRCUVVOS096czdaME5CUTIxQ1J5eFRMRVZCUVdkQ1ZpeEhMRVZCUVN0SE8wRkJRVUVzVlVGQmJFZGpMRWRCUVd0SExIVkZRVUZ3Uml4RFFVRkRMRU5CUVcxR08wRkJRVUVzVlVGQmFFWkRMRWxCUVdkR08wRkJRVUVzVlVGQmJFVkRMRXRCUVd0Rk8wRkJRVUVzVlVGQkwwTkRMRTFCUVN0RE8wRkJRVUVzVlVGQmRFSkRMRWxCUVhOQ0xIVkZRVUZPTEVsQlFVMDdRVUZETDBrc1ZVRkJUVU1zWVVGQllTeEhRVUZIVkN4VFFVRlRMRU5CUVVOV0xFZEJRVVFzUTBGQlZDeERRVUZsVHl4RFFVRm1MRU5CUVdsQ1lTeE5RVUZxUWl4RFFVRjNRaXhWUVVGRFF5eERRVUZFTzBGQlFVRXNaVUZCV1VFc1EwRkJReXhEUVVGRFF5eERRVUZHTEVsQlFVOVFMRWxCUVc1Q08wRkJRVUVzVDBGQmVFSXNRMEZCZEVJN1FVRkRRU3hWUVVGSlVTeFZRVUZLT3p0QlFVTkJMRlZCUVVsS0xHRkJRV0VzUTBGQlEwc3NUVUZCYkVJc1JVRkJNRUk3UVVGRGRFSkVMRkZCUVVGQkxGVkJRVlVzUjBGQlIwb3NZVUZCWVN4RFFVRkRMRU5CUVVRc1EwRkJNVUk3UVVGRFNDeFBRVVpFTEUxQlJVODdRVUZEU0Vrc1VVRkJRVUVzVlVGQlZTeEhRVUZITzBGQlExUkVMRlZCUVVGQkxFTkJRVU1zUlVGQlJWQXNTVUZFVFR0QlFVVlVWQ3hWUVVGQlFTeERRVUZETEVWQlFVVXNTMEZCUzAwc2EwSkJRVXdzUTBGQmQwSmFMRWRCUVhoQ08wRkJSazBzVTBGQllqdEJRVWxCTEZsQlFVMTVRaXh4UWtGQmNVSXNSMEZCUjJZc1UwRkJVeXhEUVVGRFZpeEhRVUZFTEVOQlFWUXNRMEZCWlU4c1EwRkJaaXhEUVVGcFFtMUNMRTFCUVdwQ0xFTkJRWGRDTEZWQlFVTkRMRU5CUVVRc1JVRkJXVTRzUTBGQldqdEJRVUZCTEdsQ1FVRjFRa0VzUTBGQlF5eERRVUZEUXl4RFFVRkdMRWRCUVUxUUxFbEJRVTRzUjBGQllWa3NRMEZCUXl4SFFVRkhMRU5CUVdwQ0xFZEJRWEZDUVN4RFFVRTFRenRCUVVGQkxGTkJRWGhDTEVWQlFYVkZMRU5CUVhaRkxFTkJRVGxDTzBGQlEwRnFRaXhSUVVGQlFTeFRRVUZUTEVOQlFVTldMRWRCUVVRc1EwRkJWQ3hEUVVGbFR5eERRVUZtTEVOQlFXbENjVUlzVFVGQmFrSXNRMEZCZDBKSUxIRkNRVUY0UWl4RlFVRXJReXhEUVVFdlF5eEZRVUZyUkVZc1ZVRkJiRVE3UVVGRFNEczdRVUZEUkN4VlFVRkpUaXhOUVVGS0xFVkJRVms3UVVGRFVrMHNVVUZCUVVFc1ZVRkJWU3hEUVVGRFpDeERRVUZZTEVkQlFXVTdRVUZEV0Zrc1ZVRkJRVUVzUTBGQlF5eEZRVUZGU2l4TlFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT0xFTkJRVlVzUTBGQlZpeERRVVJSTzBGQlJWaFpMRlZCUVVGQkxFTkJRVU1zUlVGQlJWb3NUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGVkxFTkJRVlk3UVVGR1VTeFRRVUZtTzBGQlNVRk5MRkZCUVVGQkxGVkJRVlVzUTBGQlEwOHNRMEZCV0N4SFFVRmxPMEZCUTFoVUxGVkJRVUZCTEVOQlFVTXNSVUZCUlVvc1RVRkJUU3hEUVVGRExFTkJRVVFzUTBGQlRpeERRVUZWTEVOQlFWWXNRMEZFVVR0QlFVVllXU3hWUVVGQlFTeERRVUZETEVWQlFVVmFMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVTRzUTBGQlZTeERRVUZXTzBGQlJsRXNVMEZCWmp0QlFVbElPenRCUVVORUxGVkJRVWxJTEVkQlFVY3NTVUZCU1N4RFFVRllMRVZCUVdNN1FVRkRWbE1zVVVGQlFVRXNWVUZCVlN4RFFVRkRha0lzUTBGQldDeERRVUZoVVN4SFFVRmlMRWxCUVc5Q1JTeExRVUZ3UWp0QlFVTklMRTlCUmtRc1RVRkZUenRCUVVOSVR5eFJRVUZCUVN4VlFVRlZMRU5CUVVOcVFpeERRVUZZTEVkQlFXVlpMRWxCUVVrc1NVRkJTU3hGUVVGRlJpeExRVUZMTEZsQlFWbGxMRXRCUVc1Q0xFTkJRVklzUjBGQmIwTXNRMEZCUTJZc1MwRkJSQ3hEUVVGd1F5eEhRVUU0UTBFc1MwRkJOMFE3UVVGRFNEdEJRVU5LT3pzN2RVTkJRekJDYUVJc1J5eEZRVUZoTzBGQlEzQkRMR0ZCUVZNc1MwRkJTMmRETEVsQlFVNHNRMEZCTUVKRExFMUJRVEZDTEVOQlFXdERMRU5CUVd4RExFTkJRVVFzUTBGQmNVUkRMRVZCUVhKRUxFTkJRWGxFUXl4SlFVRjZSQ3hEUVVFNFJDeFZRVUZCUXl4TFFVRkxPMEZCUVVFc1pVRkRkRVZCTEV0QlFVc3NRMEZCUTBNc1JVRkJUaXhKUVVGWmNrTXNSMEZFTUVRN1FVRkJRU3hQUVVGdVJTeERRVUZRTzBGQlIwZzdPenNyUTBGRGEwTkJMRWNzUlVGQllUdEJRVU0xUXl4VlFVRk5iVU1zU1VGQlNTeEhRVUZITEV0QlFVdEhMR3RDUVVGTUxFTkJRWGRDZEVNc1IwRkJlRUlzUTBGQllqdEJRVU5CTEZWQlFVbHRReXhKUVVGS0xFVkJRVlVzVDBGQlQwRXNTVUZCVUR0QlFVTldMRlZCUVUxSkxGbEJRVmtzUjBGQlJ5eExRVUZMUkN4clFrRkJUQ3hEUVVGM1FpeEpRVUY0UWl4RFFVRnlRanM3UVVGRFFTeFZRVUZOUlN4TlFVRk5PMEZCUTFKSUxGRkJRVUZCTEVWQlFVVXNSVUZCUlhKRE8wRkJSRWtzVTBGRlRDeExRVUZMV1N4clFrRkJUQ3hEUVVGM1Fsb3NSMEZCZUVJc1EwRkdTeXhEUVVGYU96dEJRVWxCTEZWQlFVbDFReXhaUVVGS0xFVkJRV3RDTzBGQlEyUXNXVUZCVFVVc1YwRkJWeXhIUVVGTExFdEJRVXRVTEVsQlFVNHNRMEZCTUVKRExFMUJRVEZDTEVOQlFXdERMRU5CUVd4RExFTkJRVVFzUTBGQmNVUkRMRVZCUVhwRk8wRkJRMEZQTEZGQlFVRkJMRmRCUVZjc1EwRkJRMklzVFVGQldpeERRVUZ0UW1Fc1YwRkJWeXhEUVVGRGFrSXNUVUZCV2l4SFFVRnhRaXhEUVVGNFF5eEZRVUV5UXl4RFFVRXpReXhGUVVFNFEyZENMRTFCUVRsRE8wRkJRMGdzVDBGSVJDeE5RVWRQTzBGQlEwUXNZVUZCUzFJc1NVRkJUaXhEUVVFd1FrTXNUVUZCTVVJc1EwRkJhME1zUTBGQmJFTXNRMEZCUkN4RFFVRnhSRU1zUlVGQmNrUXNRMEZCZVVSUkxFbEJRWHBFTEVOQlFUaEVSaXhOUVVFNVJEdEJRVU5JT3p0QlFVTkVMR0ZCUVU5QkxFMUJRVkE3UVVGRFNEczdPekJEUVVNMlFuaERMRWNzUlVGQmFVVTdRVUZETTBZc1ZVRkJTVEpETEVsQlFVb3NSVUZCWlhCRExFTkJRV1lzUlVGQmMwTnhReXhMUVVGMFF6czdRVUZEUVN4alFVRlJOVU1zUjBGQlVqdEJRVU5KTEdGQlFVc3NVVUZCVER0QlFVTkpNa01zVlVGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVV0WUxFbEJRVXdzUTBGQlZXRXNSVUZCYWtJN1FVRkRRWFJETEZWQlFVRkJMRU5CUVVNc1IwRkJSeXhIUVVGS08wRkJRMEZ4UXl4VlFVRkJRU3hMUVVGTExFZEJRVWNzUTBGQlVqdEJRVU5CT3p0QlFVTktMR0ZCUVVzc1VVRkJURHRCUVVOSlJDeFZRVUZCUVN4SlFVRkpMRWRCUVVjc1MwRkJTMWdzU1VGQlRDeERRVUZWWVN4RlFVRnFRanRCUVVOQmRFTXNWVUZCUVVFc1EwRkJReXhIUVVGSExFZEJRVW83UVVGRFFYRkRMRlZCUVVGQkxFdEJRVXNzUjBGQlJ5eERRVUZTTzBGQlEwRTdPMEZCUTBvc1lVRkJTeXhUUVVGTU8wRkJRMGxFTEZWQlFVRkJMRWxCUVVrc1IwRkJSeXhMUVVGTFdDeEpRVUZNTEVOQlFWVmhMRVZCUVdwQ08wRkJRMEYwUXl4VlFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1ZVRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFWSTdRVUZEUVRzN1FVRkRTaXhoUVVGTExGTkJRVXc3UVVGRFNVUXNWVUZCUVVFc1NVRkJTU3hIUVVGSExFdEJRVXRZTEVsQlFVd3NRMEZCVldFc1JVRkJha0k3UVVGRFFYUkRMRlZCUVVGQkxFTkJRVU1zUjBGQlJ5eEhRVUZLTzBGQlEwRnhReXhWUVVGQlFTeExRVUZMTEVkQlFVY3NRMEZCVWp0QlFVTkJPenRCUVVOS0xHRkJRVXNzUjBGQlREdEJRVU5KUkN4VlFVRkJRU3hKUVVGSkxFZEJRVWNzUzBGQlMxZ3NTVUZCVEN4RFFVRlZZU3hGUVVGcVFqdEJRVU5CZEVNc1ZVRkJRVUVzUTBGQlF5eEhRVUZITEVkQlFVbzdRVUZEUVhGRExGVkJRVUZCTEV0QlFVc3NSMEZCUnl4RFFVRlNPMEZCUTBFN08wRkJRMG9zWVVGQlN5eEhRVUZNTzBGQlEwbEVMRlZCUVVGQkxFbEJRVWtzUjBGQlJ5eExRVUZMV0N4SlFVRk1MRU5CUVZWaExFVkJRV3BDTzBGQlEwRjBReXhWUVVGQlFTeERRVUZETEVkQlFVY3NSMEZCU2p0QlFVTkJjVU1zVlVGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVZJN1FVRkRRVHM3UVVGRFNpeGhRVUZMTEZGQlFVdzdRVUZEU1VRc1ZVRkJRVUVzU1VGQlNTeEhRVUZITEV0QlFVdFlMRWxCUVV3c1EwRkJWV0VzUlVGQmFrSTdRVUZEUVhSRExGVkJRVUZCTEVOQlFVTXNSMEZCUnl4SFFVRktPMEZCUTBGeFF5eFZRVUZCUVN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGVU8wRkJRMEU3TzBGQlEwb3NZVUZCU3l4VFFVRk1PMEZCUTBsRUxGVkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxXQ3hKUVVGTUxFTkJRVlZoTEVWQlFXcENPMEZCUTBGMFF5eFZRVUZCUVN4RFFVRkRMRWRCUVVjc1IwRkJTanRCUVVOQmNVTXNWVUZCUVVFc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlZEdEJRVU5CT3p0QlFVTktMR0ZCUVVzc1YwRkJURHRCUVVOSlJDeFZRVUZCUVN4SlFVRkpMRWRCUVVjc1MwRkJTMGNzTUVKQlFVd3NRMEZCWjBNc1NVRkJhRU1zUTBGQlVEdEJRVU5CZGtNc1ZVRkJRVUVzUTBGQlF5eEhRVUZITEVkQlFVbzdRVUZEUVhGRExGVkJRVUZCTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVZRN1FVRkRRVHM3UVVGRFNpeGhRVUZMTEZOQlFVdzdRVUZEU1VRc1ZVRkJRVUVzU1VGQlNTeEhRVUZITEV0QlFVdEhMREJDUVVGTUxFTkJRV2RETEVsQlFXaERMRU5CUVZBN1FVRkRRWFpETEZWQlFVRkJMRU5CUVVNc1IwRkJSeXhIUVVGS08wRkJRMEZ4UXl4VlFVRkJRU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZVTzBGQlEwRTdPMEZCUTBvc1lVRkJTeXhaUVVGTU8wRkJRMGxFTEZWQlFVRkJMRWxCUVVrc1IwRkJSeXhMUVVGTFJ5d3dRa0ZCVEN4RFFVRm5ReXhKUVVGb1F5eERRVUZRTzBGQlEwRjJReXhWUVVGQlFTeERRVUZETEVkQlFVY3NSMEZCU2p0QlFVTkJjVU1zVlVGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJWRHRCUVVOQk96dEJRVU5LTEdGQlFVc3NWMEZCVER0QlFVTkpSQ3hWUVVGQlFTeEpRVUZKTEVkQlFVY3NTMEZCUzB3c2EwSkJRVXdzUTBGQmQwSXNTVUZCZUVJc1EwRkJVRHRCUVVOQkwwSXNWVUZCUVVFc1EwRkJReXhIUVVGSExFZEJRVW83UVVGRFFYRkRMRlZCUVVGQkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFWUTdRVUZEUVRzN1FVRkRTaXhoUVVGTExHRkJRVXc3UVVGRFNVUXNWVUZCUVVFc1NVRkJTU3hIUVVGSExFdEJRVXRNTEd0Q1FVRk1MRU5CUVhkQ0xFbEJRWGhDTEVOQlFWQTdRVUZEUVM5Q0xGVkJRVUZCTEVOQlFVTXNSMEZCUnl4SFFVRktPMEZCUTBGeFF5eFZRVUZCUVN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGVU8wRkJRMEU3TzBGQlEwb3NZVUZCU3l4aFFVRk1PMEZCUTBsRUxGVkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxUQ3hyUWtGQlRDeERRVUYzUWl4SlFVRjRRaXhEUVVGUU8wRkJRMEV2UWl4VlFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1ZVRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCVkR0QlFVTkJPenRCUVVOS0xHRkJRVXNzVDBGQlREdEJRVU5KUkN4VlFVRkJRU3hKUVVGSkxFZEJRVWNzUzBGQlMwd3NhMEpCUVV3c1EwRkJkMElzU1VGQmVFSXNRMEZCVUR0QlFVTkJMMElzVlVGQlFVRXNRMEZCUXl4SFFVRkhMRWxCUVVvN1FVRkRRWEZETEZWQlFVRkJMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVlE3UVVGRFFUczdRVUZEU2l4aFFVRkxMR0ZCUVV3N1FVRkRTVVFzVlVGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVV0TUxHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFTkJRVkE3UVVGRFFTOUNMRlZCUVVGQkxFTkJRVU1zUjBGQlJ5eEhRVUZLTzBGQlEwRnhReXhWUVVGQlFTeExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRlVPMEZCUTBFN08wRkJRMG9zWVVGQlN5eGxRVUZNTzBGQlEwbEVMRlZCUVVGQkxFbEJRVWtzUjBGQlJ5eExRVUZMVEN4clFrRkJUQ3hEUVVGM1FpeEpRVUY0UWl4RFFVRlFPMEZCUTBFdlFpeFZRVUZCUVN4RFFVRkRMRWRCUVVjc1IwRkJTanRCUVVOQmNVTXNWVUZCUVVFc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlZEdEJRVU5CTzBGQmNrWlNPenRCUVhWR1FTeGhRVUZQTEVOQlFVTkVMRWxCUVVRc1JVRkJUM0JETEVOQlFWQXNSVUZCVlhGRExFdEJRVllzUTBGQlVEdEJRVU5JT3pzN2MwTkJRM2xDTzBGQlEzUkNMRmRCUVV0YUxFbEJRVXdzUTBGQlZXVXNSVUZCVml4SFFVRmxReXhKUVVGSkxFTkJRVU5ETEVkQlFVd3NUMEZCUVVRc1NVRkJTU3h4UWtGQlVVVXNUVUZCVFN4RFFVRkRReXhOUVVGUUxFTkJRV01zUzBGQlMwTXNVMEZCYmtJc1EwRkJVaXhWUVVGMVF5eERRVUYyUXl4SFFVRnVRanRCUVVOSU96czdRVUZGUkN4M1FrRkJXVU1zUjBGQldpeEZRVUZ4UlR0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQkxIVkRRVEZOZEVJc1JVRXdUWE5DT3p0QlFVTnFSU3hUUVVGTGNrSXNTVUZCVEN4SFFVRlpjVUlzUjBGQldqdEJRVU5CTEZOQlFVdHFSQ3hOUVVGTUxFZEJRV01zUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RlFVRlBMRU5CUVZBc1EwRkJaRHRCUVVOQkxGTkJRVXRETEZGQlFVd3NSMEZCWjBJc1EwRkJReXhEUVVGRUxFVkJRVWtzUTBGQlNpeEZRVUZQTEVOQlFWQXNRMEZCYUVJN1FVRkRTRHRCUVVWRU96czdPenM3T3pzN2MwTkJTMnRDVEN4SExFVkJRV3RDWjBJc1N5eEZRVUZaTzBGQlF6VkRMRmRCUVV0dlF5eFRRVUZNTEVOQlFXVndSQ3hIUVVGbUxFbEJRWE5DTEVOQlFYUkNPMEZCUTBFc1YwRkJTM05FTEdWQlFVdzdPMEZCUTBFc1ZVRkJTWFJETEV0QlFVc3NXVUZCV1hWRExHVkJRWEpDTEVWQlFXZERPMEZCUXpWQ2RrTXNVVUZCUVVFc1MwRkJTeXhEUVVGRGQwTXNUMEZCVGp0QlFVTkJlRU1zVVVGQlFVRXNTMEZCU3l4SFFVRkhRU3hMUVVGTExFTkJRVU41UXl4SlFVRmtPMEZCUTBnN08wRkJRMFFzVlVGQlNXUXNTVUZCU2l4RlFVRmxjRU1zUTBGQlppeEZRVUZ6UTNGRExFdEJRWFJET3p0QlFWQTBReXhyUTBGUmVrSXNTMEZCUzJNc2NVSkJRVXdzUTBGQk1rSXhSQ3hIUVVFelFpeERRVko1UWpzN1FVRkJRVHM3UVVGUk0wTXlReXhOUVVGQlFTeEpRVkl5UXp0QlFWRnlRM0JETEUxQlFVRkJMRU5CVW5GRE8wRkJVV3hEY1VNc1RVRkJRVUVzUzBGU2EwTTdPMEZCVXpWRExGVkJRVWtzUTBGQlEzSkRMRU5CUVVRc1NVRkJUWEZETEV0QlFVc3NTMEZCUzJVc1UwRkJjRUlzUlVGQkswSTdRVUZETTBJc1owSkJRVkV6UkN4SFFVRlNPMEZCUTBrc1pVRkJTeXhOUVVGTU8wRkJRMGtzWjBKQlFVa3NTMEZCUzJkRExFbEJRVXdzUTBGQlZVc3NSVUZCVml4SlFVRm5RaXhEUVVGd1FpeEZRVUYxUWp0QlFVTnVRaXhyUWtGQlRYVkNMRWRCUVVjc1IwRkJSeXhMUVVGTE5VSXNTVUZCVEN4RFFVRlZWaXhEUVVGV0xFTkJRV0YxUXl4RFFVRjZRanRCUVVOQlJDeGpRVUZCUVN4SFFVRkhMRU5CUVVOeVJDeERRVUZLTEVkQlFWRXNRMEZCUTNGRUxFZEJRVWNzUTBGQlEzSkVMRU5CUVVvc1EwRkJUeXhEUVVGUUxFTkJRVVFzUTBGQlVqdEJRVU5CY1VRc1kwRkJRVUVzUjBGQlJ5eERRVUZEY2tRc1EwRkJTaXhEUVVGTkxFTkJRVTRzUlVGQlUyVXNRMEZCVkN4SFFVRmhMRU5CUVdJN1FVRkRRWE5ETEdOQlFVRkJMRWRCUVVjc1EwRkJRM0pFTEVOQlFVb3NRMEZCVFN4RFFVRk9MRVZCUVZORUxFTkJRVlFzUTBGQldXZENMRU5CUVZvc1IwRkJaMEpPTEV0QlFXaENPMEZCUTBnN08wRkJRMFE3TzBGQlEwbzdRVUZEU1RoRExGbEJRVUZCTEU5QlFVOHNRMEZCUTBNc1MwRkJVaXhEUVVGakwwUXNSMEZCWkN4RlFVRnRRbWRDTEV0QlFXNUNPMEZCUTBFc2EwSkJRVTBzU1VGQlNXZEVMRXRCUVVvc1EwRkJWU3hyUWtGQlZpeERRVUZPTzBGQldGSTdRVUZoU0RzN1FVRkRSQ3hWUVVGSmNrSXNTVUZCU1N4SlFVRkpjRU1zUTBGQlVpeEpRVUZoY1VNc1MwRkJTeXhMUVVGTFpTeFRRVUV6UWl4RlFVRnpRenRCUVVOc1F5eGhRVUZMVFN4MVFrRkJUQ3hEUVVFMlFuUkNMRWxCUVRkQ0xFVkJRVzFEY0VNc1EwRkJia003UVVGRFFTeFpRVUZKY1VNc1MwRkJTeXhKUVVGSkxFTkJRV0lzUlVGRFNVUXNTVUZCU1N4RFFVRkRjRU1zUTBGQlJDeERRVUZLTEVOQlFWRkJMRU5CUVZJc1EwRkJWWEZETEV0QlFWWXNTVUZCYlVJMVFpeExRVUZ1UWl4RFFVUktMRXRCUjBreVFpeEpRVUZKTEVOQlFVTndReXhEUVVGRUxFTkJRVW9zUTBGQlVVRXNRMEZCVWl4SFFVRlpVeXhMUVVGYU8wRkJRMUE3UVVGRFNqdEJRVVZFT3pzN096czdPenM3T3pzN01FTkJVM05DYUVJc1J5eEZRVUZyUW10RkxGVXNSVUZCYjBKRExGRXNSVUZCYTBKRExGVXNSVUZCYVVKRExGRXNSVUZCWlhCRUxFMHNSVUZCZVVJN1FVRkRia2tzVlVGQlNXdEVMRkZCUVZFc1NVRkJTVVFzVlVGQmFFSXNSVUZCTkVJN1FVRkRlRUlzWTBGQlRTeEpRVUZKUml4TFFVRktMRU5CUVZVc09FTkJRVllzUTBGQlRqdEJRVU5JT3p0QlFVTkVMRmRCUVV0YUxGTkJRVXdzUTBGQlpYQkVMRWRCUVdZc1NVRkJjMEpuUkN4SlFVRkpMRU5CUVVORExFZEJRVXdzUTBGQlV5eExRVUZMUnl4VFFVRk1MRU5CUVdWd1JDeEhRVUZtTEV0QlFYVkNMRU5CUVdoRExFVkJRVzFEYlVVc1VVRkJVU3hIUVVGSExFTkJRVGxETEVOQlFYUkNPMEZCUTBFc1YwRkJTMklzWlVGQlREczdRVUZEUVN4VlFVRkpMRU5CUVVOeVF5eE5RVUZNTEVWQlFXRTdRVUZEVkVFc1VVRkJRVUVzVFVGQlRTeEhRVUZIY1VRc2MwSkJRV05ETEUxQlFXUXNSVUZCVkR0QlFVTklPenRCUVVORUxGVkJRVWxJTEZWQlFWVXNXVUZCV1dJc1pVRkJkRUlzU1VGQmJVTmpMRkZCUVZFc1dVRkJXV1FzWlVGQk0wUXNSVUZCYzBVN1FVRkRiRVVzVTBGQlEyRXNWVUZCUkN4RlFVRmhReXhSUVVGaUxFVkJRWFZDUnl4UFFVRjJRaXhEUVVFclFpeFZRVUZCUXl4RFFVRkRPMEZCUVVFc2FVSkJRVWxCTEVOQlFVTXNXVUZCV1d4Q0xHVkJRV0lzU1VGQk1FSnJRaXhEUVVGRExFTkJRVU5xUWl4UFFVRkdMRVZCUVRsQ08wRkJRVUVzVTBGQmFFTTdPMEZCUTBFc1dVRkJTVmtzVlVGQlZTeFpRVUZaWWl4bFFVRjBRaXhKUVVGdFEyTXNVVUZCVVN4WlFVRlpaQ3hsUVVFelJDeEZRVUZ6UlR0QlFVTnNSU3hqUVVGTmJVSXNZMEZCWXl4SFFVRkhUaXhWUVVGVkxFTkJRVU5ZTEVsQlFWZ3NRMEZCWjBKblFpeERRVUZvUWl4RFFVRnRRbXBFTEUxQlFXNUNMRWRCUVRSQ0xFTkJRVzVFTzBGQlEwRXNZMEZCVFcxRUxGbEJRVmtzUjBGQlIwNHNVVUZCVVN4RFFVRkRXaXhKUVVGVUxFTkJRV05uUWl4RFFVRmtMRU5CUVdsQ2FrUXNUVUZCYWtJc1IwRkJNRUlzUTBGQkwwTTdPMEZCUTBFc1kwRkJTU3hGUVVGRmEwUXNZMEZCWXl4SlFVRkpMRU5CUVd4Q0xFbEJRWFZDUXl4WlFVRlpMRWxCUVVrc1EwRkJla01zUTBGQlNpeEZRVUZwUkR0QlFVTTNReXhuUWtGQlNUTkNMRWxCUVVrc1EwRkJRelJDTEVkQlFVd3NRMEZCVTBZc1kwRkJWQ3hGUVVGNVFrTXNXVUZCZWtJc1MwRkJNRU1zUTBGQk1VTXNTVUZCSzBNelFpeEpRVUZKTEVOQlFVTkRMRWRCUVV3c1EwRkJVM2xDTEdOQlFWUXNSVUZCZVVKRExGbEJRWHBDTEVsQlFYbERMRU5CUVRWR0xFVkJRU3RHTzBGQlF6TkdMR3RDUVVGSlJTeFJRVUZSTEVkQlFVZElMR05CUVdNc1NVRkJTU3hEUVVGc1FpeEhRVUZ6UWs0c1ZVRkJkRUlzUjBGQmJVTkRMRkZCUVd4RU8wRkJRMEVzYTBKQlFVbFRMRlZCUVZVc1IwRkJSemxDTEVsQlFVa3NRMEZCUTBNc1IwRkJUQ3hEUVVGVGVVSXNZMEZCVkN4RlFVRjVRa01zV1VGQmVrSXNRMEZCYWtJN1FVRkRRU3hsUVVGRExFZEJRVVFzUlVGQlRTeEhRVUZPTEVWQlFWY3NSMEZCV0N4RlFVRm5Ra2dzVDBGQmFFSXNRMEZCZDBJc1ZVRkJRWGhGTEVkQlFVY3NSVUZCU1R0QlFVTXpRalpGTEdkQ1FVRkJRU3hSUVVGUkxFTkJRVU53UWl4SlFVRlVMRU5CUVdONlJDeEhRVUZrTEVsQlFYRkNLMElzUzBGQlN5eERRVUZESzBNc1ZVRkJSQ3hEUVVGTUxFTkJRV3RDUXl4SlFVRnNRaXhEUVVGMVFrWXNVVUZCVVN4RFFVRkRjRUlzU1VGQlZDeERRVUZqZWtRc1IwRkJaQ3hGUVVGdFFuZENMRTFCUVc1Q0xFZEJRVFJDY1VRc1VVRkJVU3hEUVVGRGNFSXNTVUZCVkN4RFFVRmpla1FzUjBGQlpDeEZRVUZ0UWl4RFFVRnVRaXhEUVVFMVFpeEhRVUZ2UkN4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFTkJRVE5GTEVOQlFYSkNPMEZCUTBnc1pVRkdSRHRCUVVkSUxHRkJUa1FzVFVGTlR6dEJRVU5JTEd0Q1FVRk5aMFlzWTBGQll5eEhRVUZITEdsRFFVRnZRazRzWTBGQmNFSXNSVUZCYjBORExGbEJRWEJETEVOQlFYWkNPMEZCUTBGUUxHTkJRVUZCTEZWQlFWVXNRMEZCUTJFc1VVRkJXQ3hEUVVGdlFtcERMRWxCUVVrc1EwRkJRMnRETEV0QlFVd3NRMEZCVjBZc1kwRkJZeXhIUVVGSFRpeGpRVUUxUWl4RFFVRndRanRCUVVOQlRDeGpRVUZCUVN4UlFVRlJMRU5CUVVOWkxGRkJRVlFzUTBGQmEwSnFReXhKUVVGSkxFTkJRVU5yUXl4TFFVRk1MRU5CUVZkR0xHTkJRV01zUjBGQlIwd3NXVUZCTlVJc1EwRkJiRUk3UVVGRFNEdEJRVU5LTzBGQlEwbzdPMEZCYkVKcFJTeHRRa0Z0UW5wRExFTkJRVU5RTEZWQlFVUXNSVUZCWVVNc1VVRkJZaXhGUVVGMVFtTXNSMEZCZGtJc1EwRkJNa0lzVlVGQlFWWXNRMEZCUXp0QlFVRkJMR2xDUVVGSlFTeERRVUZETEZsQlFWbHNRaXhsUVVGaUxFZEJRWGxDYTBJc1EwRkJReXhEUVVGRGFFSXNTVUZCTTBJc1IwRkJhME5uUWl4RFFVRjBRenRCUVVGQkxGTkJRVFZDTEVOQmJrSjVRenM3UVVGQlFUczdRVUZ0UW1wRlRDeFJRVUZCUVN4VlFXNUNhVVU3UVVGdFFuSkVReXhSUVVGQlFTeFJRVzVDY1VRN1FVRnZRbkpGT3p0QlFVTkVMRlZCUVVreFFpeEpRVUZLTzBGQlFVRXNWVUZCWlhCRExFTkJRV1k3UVVGQlFTeFZRVUZ6UTNGRExFdEJRWFJETzBGQlFVRXNWVUZCYVVVeFFpeEpRVUZKTEVkQlFVY3NTVUZCZUVVN08wRkJPVUp0U1N4dFEwRXJRbWhJTEV0QlFVdDNReXh4UWtGQlRDeERRVUV5UWpGRUxFZEJRVE5DTEVOQkwwSm5TRHM3UVVGQlFUczdRVUVyUW14Sk1rTXNUVUZCUVVFc1NVRXZRbXRKTzBGQkswSTFTSEJETEUxQlFVRkJMRU5CTDBJMFNEdEJRU3RDZWtoeFF5eE5RVUZCUVN4TFFTOUNlVWc3TzBGQlowTnVTU3hWUVVGSkxFTkJRVU55UXl4RFFVRkVMRWxCUVUxeFF5eExRVUZMTEV0QlFVdGxMRk5CUVhCQ0xFVkJRU3RDTzBGQlF6TkNMR2RDUVVGUk0wUXNSMEZCVWp0QlFVTkpMR1ZCUVVzc1RVRkJURHRCUVVOSkxHZENRVUZKTEV0QlFVdG5ReXhKUVVGTUxFTkJRVlZMTEVWQlFWWXNTVUZCWjBJc1EwRkJjRUlzUlVGQmRVSTdRVUZEYmtKTkxHTkJRVUZCTEVsQlFVa3NSMEZCUnl4TFFVRkxXQ3hKUVVGTUxFTkJRVlZXTEVOQlFXcENPMEZCUTBFc2EwSkJRVWs0UkN4UlFVRlJMRWRCUVVkNlF5eEpRVUZKTEVOQlFVTnJRaXhEUVVGTUxFTkJRVTkwUkN4RFFVRlFMRU5CUVZNc1EwRkJWQ3hGUVVGWlJDeERRVUV6UWp0QlFVTkJMR3RDUVVGSkswVXNZVUZCWVN4SFFVRkhjRVlzU1VGQlNTeERRVUZEUXl4TFFVRk1MRU5CUVZkRUxFbEJRVWtzUTBGQlEwVXNVMEZCVEN4RFFVRmxhVVlzVVVGQlppeERRVUZZTEVOQlFYQkNPMEZCUTBFc2EwSkJRVWxGTEZkQlFWY3NSMEZCUjNKR0xFbEJRVWtzUTBGQlEwTXNTMEZCVEN4RFFVRlhSQ3hKUVVGSkxFTkJRVU5GTEZOQlFVd3NRMEZCWldsR0xGRkJRV1lzUTBGQldDeERRVUZzUWp0QlFVTkJReXhqUVVGQlFTeGhRVUZoTEVOQlFVTXZSQ3hEUVVGa0xFZEJRV3RDT0VNc1ZVRkJiRUk3UVVGRFFXdENMR05CUVVGQkxGZEJRVmNzUTBGQlEyaEZMRU5CUVZvc1IwRkJaMElyUXl4UlFVRm9RanRCUVVOQlJDeGpRVUZCUVN4VlFVRlZMRWRCUVVkcFFpeGhRVUZpTzBGQlEwRm9RaXhqUVVGQlFTeFJRVUZSTEVkQlFVZHBRaXhYUVVGWU8wRkJRMEV2UlN4alFVRkJRU3hEUVVGRExFZEJRVWNzUjBGQlNqdEJRVU5CY1VNc1kwRkJRVUVzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCVkR0QlFVTkJNVUlzWTBGQlFVRXNTVUZCU1N4SFFVRkhMRXRCUVZBN1FVRkRTRHM3UVVGRFJEczdRVUZEU2p0QlFVTkpORU1zV1VGQlFVRXNUMEZCVHl4RFFVRkRReXhMUVVGU0xFTkJRV012UkN4SFFVRmtMRVZCUVcxQ2EwVXNWVUZCYmtJc1JVRkJLMEpETEZGQlFTOUNMRVZCUVhsRFF5eFZRVUY2UXl4RlFVRnhSRU1zVVVGQmNrUXNSVUZCSzBSd1JDeE5RVUV2UkR0QlFVTkJMR3RDUVVGTkxFbEJRVWtyUXl4TFFVRktMRU5CUVZVc2EwSkJRVllzUTBGQlRqdEJRV3hDVWp0QlFXOUNTRHM3UVVGRFJDeFZRVUZKY2tJc1NVRkJTU3hKUVVGSmNFTXNRMEZCVWl4SlFVRmhjVU1zUzBGQlN5eExRVUZMWlN4VFFVRXpRaXhGUVVGelF6dEJRVU5zUXl4aFFVRkxORUlzTWtKQlFVd3NRMEZCYVVNMVF5eEpRVUZxUXl4RlFVRjFRM0JETEVOQlFYWkRPMEZCUTBFc1lVRkJTMmxHTEZkQlFVd3NRMEZCYVVJM1F5eEpRVUZxUWl4RlFVRjFRbkJETEVOQlFYWkNMRVZCUVRCQ2NVTXNTMEZCTVVJc1JVRkJhVU56UWl4VlFVRnFReXhGUVVFMlEwVXNWVUZCTjBNc1JVRkJlVVJ1UkN4TlFVRjZSQ3hGUVVGcFJVTXNTVUZCYWtVN1FVRkRRU3hoUVVGTGMwVXNWMEZCVEN4RFFVRnBRamRETEVsQlFXcENMRVZCUVhWQ2NFTXNRMEZCZGtJc1JVRkJNRUp4UXl4TFFVRXhRaXhGUVVGcFEzVkNMRkZCUVdwRExFVkJRVEpEUlN4UlFVRXpReXhGUVVGeFJFTXNjMEpCUVdORExFMUJRV1FzUlVGQmNrUXNSVUZCTmtWeVJDeEpRVUUzUlR0QlFVTklPMEZCUTBvN096czdPenM3TzBsQlIxRjFSU3haT3pzN096czdPenM3YzBOQlEzZENReXhWTEVWQlFXbERPMEZCUXpsRUxHRkJRVTg3UVVGRFNHcEdMRkZCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUlN4VlFVRkJRU3hEUVVGRExFVkJRVVVzUTBGRVNqdEJRVVZEU2l4VlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGR1NpeFRRVVJCTzBGQlMwaHZSaXhSUVVGQlFTeERRVUZETEVWQlFVVTdRVUZEUTJoR0xGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVUktPMEZCUlVOS0xGVkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVWktMRk5CVEVFN1FVRlRTRzlDTEZGQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVORGFFSXNWVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJSRW83UVVGRlEwb3NWVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJRME50Uml4VlFVRlZMRU5CUVVNc1EwRkJSQ3hEUVVSWUxFVkJSVU5CTEZWQlFWVXNRMEZCUXl4RFFVRkVMRU5CUmxnc1JVRkhReXhEUVVoRU8wRkJSa29zVTBGVVFUdEJRV2xDU0M5RkxGRkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRRU3hWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZFU2p0QlFVVkRTaXhWUVVGQlFTeERRVUZETEVWQlFVVXNRMEZEUXl4RFFVUkVMRVZCUlVNc1EwRkdSQ3hGUVVkRExFTkJTRVE3UVVGR1NpeFRRV3BDUVR0QlFYbENTRVFzVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUTBOTExGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVUktPMEZCUlVOS0xGVkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVTkRMRWRCUkVRc1JVRkZReXhIUVVaRUxFVkJSME1zUjBGSVJEdEJRVVpLTzBGQmVrSkJMRTlCUVZBN1FVRnJRMGc3UVVGRlJEczdPenM3T3p0blEwRkpiVUp4Uml4SExFVkJRWGxDTzBGQlEzaERMRlZCUVUxRExGZEJRVmNzUjBGQlJ5dzBRa0ZCWlVRc1IwRkJaaXhGUVVGdlFsUXNSMEZCY0VJc1EwRkJkMElzVlVGQlExWXNRMEZCUkN4RlFVRkpNME1zUTBGQlNqdEJRVUZCTEdWQlFWVkJMRU5CUVVNc1IwRkJSeXhEUVVGS0xFZEJRVkV5UXl4RFFVRkRMRWRCUVVjc1EwRkJXaXhIUVVGblFrRXNRMEZCUXl4SFFVRkhMRU5CUVRsQ08wRkJRVUVzVDBGQmVFSXNRMEZCY0VJN1FVRkRRU3hoUVVGUExFdEJRVXR4UWl4SlFVRk1MR2REUVVGaFJDeFhRVUZpTEVWQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN096QkNRVWxoUkN4SExFVkJRWEZDTzBGQlF6bENMRlZCUVUxR0xGVkJRVlVzUjBGQlJ5dzBRa0ZCWlVVc1IwRkJaaXhEUVVGdVFqdEJRVU5CTEZWQlFVMUhMRXRCUVdsQ0xFZEJRVWM3UVVGRGRFSXhSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZFYTBJN1FVRkZkRUl5UkN4UlFVRkJRU3hIUVVGSExFVkJRVVVzUTBGR2FVSTdRVUZIZEVKRExGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVaHJRanRCUVVsMFFrTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJTbXRDTzBGQlMzUkNja1FzVVVGQlFVRXNSVUZCUlN4RlFVRkZMRXRCUVV0elJDeHBRa0ZCVEN4RFFVRjFRbFFzVlVGQmRrSXNRMEZNYTBJN1FVRk5kRUpWTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVU1clFqdEJRVTkwUW5KRUxGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFWQnJRanRCUVZGMFFuTkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkpyUWp0QlFWTjBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CVkd0Q08wRkJWWFJDY2tVc1VVRkJRVUVzVFVGQlRTeEZRVUZGTEc5Q1FVRlBNa1FzUjBGQlVEdEJRVlpqTEU5QlFURkNPMEZCWVVFc1lVRkJUeXhKUVVGSk4wWXNXVUZCU2l4RFFVRnBRbWRITEV0QlFXcENMRU5CUVZBN1FVRkRTRHRCUVVWRU96czdPenM3T3pzN08zbENRVTlaVVN4SkxFVkJRV05ETEVjc1JVRkJZVU1zU3l4RlFVRmxReXhOTEVWQlFXZENPMEZCUTJ4RkxGVkJRVTFZTEV0QlFXbENMRWRCUVVjN1FVRkRkRUl4UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGRWEwSTdRVUZGZEVJeVJDeFJRVUZCUVN4SFFVRkhMRVZCUVVVc1EwRkdhVUk3UVVGSGRFSkRMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVWhyUWp0QlFVbDBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CU210Q08wRkJTM1JDY2tRc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEV0QlFVdHpSQ3hwUWtGQlRDeERRVUYxUWl4RFFVRkRTU3hKUVVGRUxFVkJRVTlETEVkQlFWQXNSVUZCV1VNc1MwRkJXaXhGUVVGdFFrTXNUVUZCYmtJc1EwRkJka0lzUTBGTWEwSTdRVUZOZEVKT0xGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVNXJRanRCUVU5MFFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkJyUWp0QlFWRjBRbk5FTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZKclFqdEJRVk4wUWtNc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQlZHdENPMEZCVlhSQ2NrVXNVVUZCUVVFc1RVRkJUU3hGUVVGRkxFTkJRMG9zT0VKQlFXbENMRTFCUVdwQ0xFVkJRWGxDTEVOQlFVTjNSU3hMUVVGRUxFVkJRVkZETEUxQlFWSXNRMEZCZWtJc1EwRkVTVHRCUVZaakxFOUJRVEZDTzBGQlkwRXNZVUZCVHl4SlFVRkpNMGNzV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN096czdPelJDUVU5bFdTeEZMRVZCUVZsRExFVXNSVUZCV1VNc1JTeEZRVUZaUXl4RkxFVkJRVms3UVVGRE0wUXNWVUZCVFdZc1MwRkJhVUlzUjBGQlJ6dEJRVU4wUWpGRUxGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVUnJRanRCUVVWMFFqSkVMRkZCUVVGQkxFZEJRVWNzUlVGQlJTeERRVVpwUWp0QlFVZDBRa01zVVVGQlFVRXNSVUZCUlN4RlFVRkZMRU5CU0d0Q08wRkJTWFJDUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGS2EwSTdRVUZMZEVKeVJDeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1MwRkJTM05FTEdsQ1FVRk1MRU5CUVhWQ0xFTkJRVU5STEVWQlFVVXNSMEZCUjBVc1JVRkJUaXhGUVVGVlJDeEZRVUZGTEVkQlFVZEZMRVZCUVdZc1JVRkJiVUlzU1VGQlNVUXNSVUZCZGtJc1JVRkJNa0lzU1VGQlNVTXNSVUZCTDBJc1EwRkJka0lzUTBGTWEwSTdRVUZOZEVKV0xGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVNXJRanRCUVU5MFFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeERRVkJyUWp0QlFWRjBRbk5FTEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZKclFqdEJRVk4wUWtNc1VVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQlZHdENPMEZCVlhSQ2NrVXNVVUZCUVVFc1RVRkJUU3hGUVVGRkxFTkJRMG9zT0VKQlFXbENMRk5CUVdwQ0xFVkJRVFJDTEVOQlFVTTBSU3hGUVVGRUxFVkJRVXRETEVWQlFVd3NRMEZCTlVJc1EwRkVTVHRCUVZaakxFOUJRVEZDTzBGQlkwRXNZVUZCVHl4SlFVRkpMMGNzV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFWQTdRVUZEU0R0QlFVVkVPenM3T3pzN08zZENRVWxYWjBJc1JTeEZRVUZwUWp0QlFVTjRRaXhWUVVGTmFFSXNTMEZCU3l4SFFVRkhMRWxCUVVsb1J5eFpRVUZLTEVOQlFXbENPMEZCUXpOQ2MwTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJSSFZDTzBGQlJUTkNNa1FzVVVGQlFVRXNSMEZCUnl4RlFVRkZMRU5CUm5OQ08wRkJSek5DUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGSWRVSTdRVUZKTTBKRExGRkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVcDFRanRCUVVzelFuSkVMRkZCUVVGQkxFVkJRVVVzUlVGQlJTeExRVUZMYzBRc2FVSkJRVXdzUTBGQmRVSXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUlVGQlZTeERRVUZXTEVOQlFYWkNMRU5CVEhWQ08wRkJUVE5DUXl4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGT2RVSTdRVUZQTTBKeVJDeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1EwRlFkVUk3UVVGUk0wSnpSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZTZFVJN1FVRlRNMEpETEZGQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVZSMVFqdEJRVlV6UWxVc1VVRkJRVUVzUTBGQlF5eEZRVUZGTEVkQlZuZENPMEZCVnpOQ1F5eFJRVUZCUVN4RFFVRkRMRVZCUVVVc1IwRllkMEk3UVVGWk0wSkRMRkZCUVVGQkxFdEJRVXNzUlVGQlJVZzdRVUZhYjBJc1QwRkJha0lzUTBGQlpEdEJRV05CTEdGQlFVOW9RaXhMUVVGUU8wRkJRMGc3UVVGRlJEczdPenM3T3pzN096aENRVTFwUWtnc1J5eEZRVUY1UW5WQ0xGTXNSVUZCYlVKRExGRXNSVUZCYVVJN1FVRkJRVHM3UVVGRE1VVXNWVUZCVFRGQ0xGVkJRVlVzUjBGQlJ5dzBRa0ZCWlVVc1IwRkJaaXhEUVVGdVFqdEJRVU5CTEZWQlFVbDVRaXhQUVVGS096dEJRVU5CTEZWQlFVbDZRaXhIUVVGSExGbEJRVmt3UWl4alFVRnVRaXhGUVVGdFF6dEJRVU12UWtRc1VVRkJRVUVzVDBGQlR5eEhRVUZITEVOQlFWWTdRVUZEU0N4UFFVWkVMRTFCUlU4c1NVRkJTWHBDTEVkQlFVY3NXVUZCV1RKQ0xHVkJRVzVDTEVWQlFXOURPMEZCUTNaRFJpeFJRVUZCUVN4UFFVRlBMRWRCUVVjc1EwRkJWanRCUVVOSUxFOUJSazBzVFVGRlFTeEpRVUZKZWtJc1IwRkJSeXhaUVVGWk5FSXNWMEZCYmtJc1JVRkJaME03UVVGRGJrTklMRkZCUVVGQkxFOUJRVThzUjBGQlJ5eERRVUZXTzBGQlEwZ3NUMEZHVFN4TlFVVkJPMEZCUTBoQkxGRkJRVUZCTEU5QlFVOHNSMEZCUnl4RFFVRldPMEZCUTBnN08wRkJRMFFzVlVGQlRYUkNMRXRCUVhsRUxFZEJRVWM3UVVGRE9VUXhSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVm5SaXhQUVVRd1JEdEJRVVU1UkhKQ0xGRkJRVUZCTEVkQlFVY3NSVUZCUlN4RFFVWjVSRHRCUVVjNVJFTXNVVUZCUVVFc1JVRkJSU3hGUVVGRkxFTkJTREJFTzBGQlNUbEVReXhSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZLTUVRN1FVRkxPVVJ5UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUzBGQlMzTkVMR2xDUVVGTUxFTkJRWFZDYTBJc1QwRkJUeXhKUVVGSkxFTkJRVmdzUjBGQlpTeERRVUZETEVOQlFVUXNSVUZCU1N4RFFVRktMRVZCUVU4c1EwRkJVQ3hGUVVGVkxFTkJRVllzUTBGQlppeEhRVUU0UWpOQ0xGVkJRWEpFTEVOQlREQkVPMEZCVFRsRVZTeFJRVUZCUVN4RlFVRkZMRVZCUVVVc1EwRk9NRVE3UVVGUE9VUnlSQ3hSUVVGQlFTeEZRVUZGTEVWQlFVVXNRMEZRTUVRN1FVRlJPVVJ6UkN4UlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGU01FUTdRVUZUT1VSRExGRkJRVUZCTEVWQlFVVXNSVUZCUlR0QlFWUXdSQ3hQUVVGc1JUczdRVUZYUVN4alFVRlJaU3hQUVVGU08wRkJRMGtzWVVGQlN5eERRVUZNTzBGQlEwa3NZMEZCVFVrc1UwRkJVeXhIUVVGSExEQkNRVUZoTjBJc1IwRkJZaXhEUVVGc1FqczdRVUZEUVN4alFVRkpOa0lzVTBGQlV5eERRVUZEY2tjc1RVRkJWaXhEUVVGcFFpeFZRVUZCZDBVc1IwRkJSenRCUVVGQkxHMUNRVUZKUVN4SFFVRkhMRmxCUVZrd1FpeGpRVUZtTEVsQlFXbERNVUlzUjBGQlJ5eFpRVUZaTWtJc1pVRkJjRVE3UVVGQlFTeFhRVUZ3UWl4RlFVRjVSaTlHTEUxQlFUZEdMRVZCUVhGSE8wRkJRMnBITEdkQ1FVRk5hMGNzV1VGQldTeEhRVUZITTBJc1MwRkJja0k3UVVGRFFTeG5Ra0ZCVFRSQ0xGbEJRVFJDTEVkQlFVY3NSVUZCY2tNN1FVRkRRU3huUWtGQlRVTXNXVUZCV1N4SFFVRkhMRzlDUVVGeVFqdEJRVU5CU0N4WlFVRkJRU3hUUVVGVExFTkJRVU5xUkN4UFFVRldMRU5CUVd0Q0xGVkJRVUZZTEVOQlFVTXNSVUZCU1R0QlFVTnVRaXhyUWtGQlNVRXNRMEZCUXl4WlFVRlpaMFVzYTBKQlFXSXNTVUZCYlVNc1JVRkJSV2hGTEVOQlFVTXNXVUZCV1RKRUxGZEJRV1lzUTBGQmRrTXNSVUZCYjBVN1FVRkRhRVZITEdkQ1FVRkJRU3haUVVGWkxFTkJRVU5ITEU5QlFXSXNRMEZCY1VJc1MwRkJTU3hEUVVGRFF5eFRRVUZNTEVOQlFXVnNSU3hEUVVGbUxFVkJRV3RDYzBRc1UwRkJiRUlzUlVGQk5rSkRMRkZCUVRkQ0xFTkJRWEpDTzBGQlEwZzdRVUZEU2l4aFFVcEVPMEZCUzBGUExGbEJRVUZCTEZsQlFWa3NRMEZCUTI1RUxFOUJRV0lzUTBGQmNVSXNWVUZCUVhWQ0xFdEJRVXNzUlVGQlNUdEJRVU14UWtFc1kwRkJRVUVzUzBGQlN5eERRVUZETDBRc1NVRkJUaXhEUVVGWFpTeEZRVUZZTEVkQlFXZENMRWRCUVdoQ08wRkJRMGdzWVVGR1JEdEJRVWRCTWtVc1dVRkJRVUVzV1VGQldTeERRVUZEVml4RFFVRmlMRWRCUVdsQ2RFSXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJWaXhIUVVGblFrRXNWVUZCVlN4RFFVRkRMRU5CUVVRc1EwRkJNVUlzUjBGQlowTXNRMEZCYWtRN1FVRkRRV2RETEZsQlFVRkJMRmxCUVZrc1EwRkJRMVFzUTBGQllpeEhRVUZwUW5aQ0xGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFWWXNSMEZCWjBKQkxGVkJRVlVzUTBGQlF5eERRVUZFTEVOQlFURkNMRWRCUVdkRExFTkJRV3BFTzBGQlEwRm5ReXhaUVVGQlFTeFpRVUZaTEVOQlFVTlNMRXRCUVdJc1IwRkJjVUpWTEZsQlFYSkNPMEZCUTBGVUxGbEJRVUZCTEZOQlFWTXNRMEZCUTNwRkxFbEJRVllzUTBGQlpUdEJRVU5ZY1VVc1kwRkJRVUVzUlVGQlJTeEZRVUZGWVN4WlFVUlBPMEZCUlZoSkxHTkJRVUZCTEUxQlFVMHNSVUZCUlV3c1dVRkJXU3hEUVVGRGVFTXNSMEZCWWl4RFFVRnBRaXhWUVVGQldTeExRVUZMTzBGQlFVRXNkVUpCUVVsQkxFdEJRVXNzUTBGQlF5OUVMRWxCUVZZN1FVRkJRU3hsUVVGMFFqdEJRVVpITEdGQlFXWTdRVUZKU0N4WFFXNUNSQ3hOUVcxQ1R6dEJRVU5JTEdkQ1FVRk5hVWNzVjBGQlZTeEhRVUZIYkVNc1MwRkJia0k3UVVGRFFXdERMRmxCUVVGQkxGZEJRVlVzUTBGQlF6VkdMRVZCUVZnc1IwRkJaMElzUTBGQmFFSTdRVUZEUVRSR0xGbEJRVUZCTEZkQlFWVXNRMEZCUTNCR0xFVkJRVmdzUjBGQlowSXNTMEZCUzNORUxHbENRVUZNTEVOQlFYVkNWQ3hWUVVGMlFpeERRVUZvUWp0QlFVTkJkVU1zV1VGQlFVRXNWMEZCVlN4RFFVRkRhRWNzVFVGQldDeEhRVUZ2UWl4dlFrRkJUekpFTEVkQlFWQXNRMEZCY0VJN1FVRkRTRHM3UVVGRFJEczdRVUZEU2l4aFFVRkxMRU5CUVV3N1FVRkRTU3hqUVVGTmMwTXNWVUZCVlN4SFFVRkhia01zUzBGQmJrSTdPMEZCUkVvc05rSkJSWEZETEhsQ1FVRlpTQ3hIUVVGYUxFVkJRVzlEZFVJc1UwRkJjRU1zUTBGR2NrTTdRVUZCUVR0QlFVRkJMR05CUlZkblFpeFZRVVpZTzBGQlFVRXNZMEZGZFVKRExGVkJSblpDT3p0QlFVZEpSaXhWUVVGQlFTeFZRVUZWTEVOQlFVTm9RaXhMUVVGWUxFZEJRVzFDYVVJc1ZVRkJia0k3UVVGRFFTeGpRVUZKTEVOQlFVTm9RaXhUUVVGVExFTkJRVU12Uml4TlFVRldMRU5CUVdsQ0xGVkJRVUZVTEVOQlFVTTdRVUZCUVN4dFFrRkJTVUVzUTBGQlF5eERRVUZEYjBjc1JVRkJSaXhKUVVGUmIwSXNWVUZCV2p0QlFVRkJMRmRCUVd4Q0xFVkJRVEJETTBjc1RVRkJMME1zUlVGRFNUSkdMRk5CUVZNc1EwRkJRM3BGTEVsQlFWWXNRMEZCWlRCR0xGVkJRV1k3UVVGRFNqczdRVUZEU2l4aFFVRkxMRU5CUVV3N1FVRkRTU3hqUVVGTlNDeFZRVUZWTEVkQlFVZHNReXhMUVVGdVFqdEJRVU5CYTBNc1ZVRkJRVUVzVlVGQlZTeERRVUZEYUVjc1RVRkJXQ3hIUVVGdlFpeHZRa0ZCVHpKRUxFZEJRVkFzUTBGQmNFSTdRVUZEUVRzN1FVRkRTaXhoUVVGTExFTkJRVXc3UVVGRFNTeGpRVUZOZVVNc1UwRkJVeXhIUVVGSGRFTXNTMEZCYkVJc1EwRkVTaXhEUVVkSk96dEJRVU5CTEdOQlFVMTFReXhqUVVGakxFZEJRVWNzSzBKQlFXdENNVU1zUjBGQmJFSXNRMEZCZGtJN1FVRkRRU3hqUVVGTk1rTXNWVUZCVlN4SFFVRkhMRGhDUVVGcFFrTXNaMEpCUVdkQ0xFTkJRVU0xUXl4SFFVRkVMRU5CUVdoQ0xFTkJRWE5DTWtNc1ZVRkJka01zUTBGQmJrSTdRVUZEUVN4alFVRk5SU3huUWtGQlowSXNSMEZCUnl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFVkJRVThzUjBGQlVDeEZRVUZaUml4VlFVRmFMRU5CUVhwQ08wRkJRMEZHTEZWQlFVRkJMRk5CUVZNc1EwRkJRM2hHTEVWQlFWWXNRMEZCWTJ4Q0xFTkJRV1FzUTBGQmFVSndRaXhEUVVGcVFpeEhRVUZ4UWl4RFFVRkRiVVlzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4SFFVRm5Ra0VzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4SFFVRm5RaXRETEdkQ1FVRnFReXhGUVVGdFJDOURMRlZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVllzUjBGQlowSkJMRlZCUVZVc1EwRkJReXhEUVVGRUxFTkJRVEZDTEVkQlFXZERORU1zWTBGQmJrWXNSVUZCYlVjc1EwRkJia2NzUTBGQmNrSTdRVUZEUVVRc1ZVRkJRVUVzVTBGQlV5eERRVUZEZUVZc1JVRkJWaXhEUVVGamNFTXNRMEZCWkN4RFFVRnBRa1lzUTBGQmFrSXNSMEZCY1VJc1EwRkJReXhGUVVGRmJVa3NWVUZCVlN4RFFVRkRSaXhuUWtGQlowSXNRMEZCUXpWRExFZEJRVVFzUTBGQmFFSXNRMEZCYzBJclF5eFhRVUYwUWl4SlFVRnhReXhIUVVGMFF5eERRVUZXTEVkQlFYVkVMRWRCUVhwRUxFTkJRWFJDT3p0QlFWSktMRFJDUVZVMlFpeDNRa0ZCVnk5RExFZEJRVmdzUlVGQmEwTjNRaXhSUVVGc1F5eERRVlkzUWp0QlFVRkJPMEZCUVVFc1kwRlZWM2RDTEZGQlZsZzdRVUZCUVN4alFWVnhRa01zU1VGV2NrSTdPMEZCVjBsU0xGVkJRVUZCTEZOQlFWTXNRMEZCUXk5SExFTkJRVllzUjBGQlkzTklMRkZCUVdRN1FVRkRRU3hqUVVGSkxFTkJRVU40UWl4UlFVRlJMRU5CUVVNd1FpeEpRVUZVTEVOQlFXVXhTQ3hOUVVGbUxFTkJRWE5DTEZWQlFVRXlTQ3hEUVVGRE8wRkJRVUVzYlVKQlFVbEJMRU5CUVVNc1EwRkJRME1zUzBGQlJpeEpRVUZYU0N4SlFVRkpMRU5CUVVOSExFdEJRWEJDTzBGQlFVRXNWMEZCZGtJc1JVRkJhMFI0U0N4TlFVRjJSQ3hGUVVOSk5FWXNVVUZCVVN4RFFVRkRNRUlzU1VGQlZDeERRVUZsY0Vjc1NVRkJaaXhEUVVGdlFtMUhMRWxCUVhCQ08wRkJRMG83UVVGMFJGSTdPMEZCZDBSQkxGVkJRVTFKTEZWQlFWVXNSMEZCUnl4SlFVRkpiRW9zV1VGQlNpeERRVUZwUW1kSExFdEJRV3BDTEVOQlFXNUNPMEZCUTBFc1lVRkJUMnRFTEZWQlFWQTdRVUZEU0NJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lGTm9ZWEJsVEdGNVpYSXNJRlJsZUhSTVlYbGxjaXdnU1cxaFoyVk1ZWGxsY2l3Z1ZISmhibk5tYjNKdExDQkJjM05sZEhNc0lFWnZiblJ6TENCSGNtOTFjRk5vWVhCbExDQlFjbVZEYjIxd1RHRjVaWElzSUZKbFptVnlaVzVqWlVsRUlIMGdabkp2YlNBbkxpOWhibWx0WVhScGIyNG5YRzVwYlhCdmNuUWdleUJGWVhOcGJtZEdkVzVqZEdsdmJpd2dSV0Z6YVc1blJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dlpXRnphVzVuSjF4dWFXMXdiM0owSUhzZ2NtVnVaR1Z5VkdWNGRDd2djbVZ1WkdWeUxDQnlaVzVrWlhKSmJXRm5aU3dnY21WdVpHVnlVR3hoYVc1SGJIbHdhQ0I5SUdaeWIyMGdKeTR2Y21WdVpHVnlKenRjYm1sdGNHOXlkQ0I3SUdkbGRFSnZkVzVrYVc1blFtOTRMQ0JuWlhSTVpXRm1UbTlrWlhNc0lHZGxkRUpoYzJWc2FXNWxTR1ZwWjJoMExDQmxibU52WkdWVVpYaDBRVzVqYUc5eUxDQnNaV0Z6ZEVOdmJXMXZiazExYkhScGNHeGxJSDBnWm5KdmJTQW5MaTlvWld4d1pYSW5YRzVwYlhCdmNuUWdkWFZwWkNCbWNtOXRJQ2QxZFdsa0wzWTBKenRjYm1sdGNHOXlkQ0I3SUZCaGRHaE5ZV3RsY2lCOUlHWnliMjBnSnk0dmNHRjBhQ2M3WEc1Y2JuUjVjR1VnVTJWMFlXSnNaVXRsZVhNZ1BTQmNJbk5qWVd4bFdGd2lJSHdnWENKelkyRnNaVmxjSWlCOElGd2lZVzVqYUc5eVdGd2lJSHdnWENKaGJtTm9iM0paWENJZ2ZDQmNJbmhjSWlCOElGd2llVndpSUh3Z1hDSnliM1JoZEdWY0lpQjhJRndpYjNCaFkybDBlVndpSUh3Z0ozTm9ZWEJsSnlCOElDZG1hV3hzUTI5c2IzSW5JSHdnSjNSeWFXMVRkR0Z5ZENjZ2ZDQW5kSEpwYlVWdVpDY2dmQ0FuZEhKcGJVOW1abk5sZENjZ2ZDQW5jM1J5YjJ0bFEyOXNiM0luSUh3Z0ozTjBjbTlyWlZkcFpIUm9KeUI4SUNkMFpYaDBKeUI4SUNkbWFXeHNUM0JoWTJsMGVTY2dmQ0FuYzNSeWIydGxUM0JoWTJsMGVTZGNibHh1Wlhod2IzSjBJR05zWVhOeklFcFRUVzkyYVc1TVlYbGxjaUI3WEc0Z0lDQWdjSFZpYkdsaklISmxZV1J2Ym14NUlISnZiM1E2SUZOb1lYQmxUR0Y1WlhJZ2ZDQlVaWGgwVEdGNVpYSWdmQ0JKYldGblpVeGhlV1Z5SUh3Z1VISmxRMjl0Y0V4aGVXVnlPMXh1SUNBZ0lIQnlhWFpoZEdVZ1lXNWphRzl5T2lCdWRXMWlaWEpiWFZ4dUlDQWdJSEJ5YVhaaGRHVWdjRzl6YVhScGIyNDZJRzUxYldKbGNsdGRYRzRnSUNBZ2NISnBkbUYwWlNCMGFXMWxVbUZ1WjJVNklIc2dXMnRsZVRvZ2MzUnlhVzVuWFRvZ2JuVnRZbVZ5SUgwZ1BTQjdmVnh1SUNBZ0lIQnlhWFpoZEdVZ1oyVjBSR1ZtWVhWc2RGQnliM0JsY25SNUtHdGxlVG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RoSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozQW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5CaGNuTmxLRXBUVDA0dWMzUnlhVzVuYVdaNUtHdGxlU0E5UFNBbllTY2dQeUIwYUdsekxtRnVZMmh2Y2lBNklIUm9hWE11Y0c5emFYUnBiMjRwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmN5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGc3hNREFzSURFd01Dd2dNVEF3WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmJ5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlERXdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuY2ljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURCY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozUnRKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJREV3TUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdk9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQmpiMjUyWlhKMFZHOVRkR0YwYVdOUWNtOXdaWEowZVNoMGNtRnVjMlp2Y20wNklHRnVlU3dnYTJWNU9pQnpkSEpwYm1jcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGNtRnVjMlp2Y20xYmEyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRXMnRsZVYwZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQjBhR2x6TG1kbGRFUmxabUYxYkhSUWNtOXdaWEowZVNoclpYa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSeVlXNXpabTl5YlZ0clpYbGRMbUVnUFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSaGRHbGpWbUZzZFdVZ1BTQjBjbUZ1YzJadmNtMWJhMlY1WFM1cld6QmRMbk5jYmlBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6Wm05eWJWdHJaWGxkSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ2MzUmhkR2xqVm1Gc2RXVmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J3Y21sMllYUmxJR052Ym5abGNuUlViMEZ1YVcxaGRHRmliR1ZRY205d1pYSjBlU2gwY21GdWMyWnZjbTA2SUdGdWVTd2dhMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwY21GdWMyWnZjbTFiYTJWNVhTQjhmQ0FoZEhKaGJuTm1iM0p0VzJ0bGVWMHVZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0d0bGVTQTlQU0FuWVNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1GdVkyaHZjaUE5SUhSeVlXNXpabTl5YlZ0clpYbGRJRDhnZEhKaGJuTm1iM0p0VzJ0bGVWMHVheUE2SUZzd0xDQXdMQ0F3WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3RsZVNBOVBTQW5jQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2YzJsMGFXOXVJRDBnZEhKaGJuTm1iM0p0VzJ0bGVWMGdQeUIwY21GdWMyWnZjbTFiYTJWNVhTNXJJRG9nV3pBc0lEQXNJREJkWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMlp2Y20xYmEyVjVYU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaE9pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3M2SUZ0ZFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQmhaR1JMWlhsbWNtRnRaU2gwY21GdWMyWnZjbTA2SUdGdWVTd2dhMlY1T2lCemRISnBibWNzSUdsa2VEb2diblZ0WW1WeUlEMGdMVEVzSUhScGJXVTZJRzUxYldKbGNpd2dkbUZzZFdVNklFRnljbUY1UEdGdWVUNHNJR1ZoYzJsdVp6ODZJRVZoYzJsdVowWjFibU4wYVc5dUxDQjNjbUZ3T2lCaWIyOXNaV0Z1SUQwZ2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsZUdsemRFdGxlV1p5WVcxbElEMGdkSEpoYm5ObWIzSnRXMnRsZVYwdWF5NW1hV3gwWlhJb0tIZzZJR0Z1ZVNrZ1BUNGdlQzUwSUQwOUlIUnBiV1VwSUdGeklHRnVlVnRkWEc0Z0lDQWdJQ0FnSUd4bGRDQnlaV0ZrZVZSdlUyVjBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYaHBjM1JMWlhsbWNtRnRaUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV1I1Vkc5VFpYUWdQU0JsZUdsemRFdGxlV1p5WVcxbFd6QmRYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXRmtlVlJ2VTJWMElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFE2SUhScGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjem9nZEdocGN5NW5aWFJFWldaaGRXeDBVSEp2Y0dWeWRIa29hMlY1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbGRtbHZkWE5MWlhsbWNtRnRaVU52ZFc1MElEMGdkSEpoYm5ObWIzSnRXMnRsZVYwdWF5NXlaV1IxWTJVb0tIQTZJRzUxYldKbGNpd2dlRG9nWVc1NUtTQTlQaUI0TG5RZ1BDQjBhVzFsSUQ4Z2NDQXJJREVnT2lCd0xDQXdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdFcydGxlVjB1YXk1emNHeHBZMlVvY0hKbGRtbHZkWE5MWlhsbWNtRnRaVU52ZFc1MExDQXdMQ0J5WldGa2VWUnZVMlYwS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsWVhOcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxZV1I1Vkc5VFpYUXVieUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE9pQmxZWE5wYm1kYk1GMWJNRjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVRvZ1pXRnphVzVuV3pCZFd6RmRYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldGa2VWUnZVMlYwTG1rZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlRG9nWldGemFXNW5XekZkV3pCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIazZJR1ZoYzJsdVoxc3hYVnN4WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHBaSGdnUGowZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVmhaSGxVYjFObGRDNXpXMmxrZUYwZ1BTQjJZV3gxWlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZoWkhsVWIxTmxkQzV6SUQwZ2QzSmhjQ0FtSmlBaEtIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtwSUQ4Z1czWmhiSFZsWFNBNklIWmhiSFZsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjSEpwZG1GMFpTQm1hVzVrVUhKdmNHVnlkSGxEYjI1bWFXY29hMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNnb2RHaHBjeTV5YjI5MElHRnpJRk5vWVhCbFRHRjVaWElwTG5Ob1lYQmxjeUZiTUYwZ1lYTWdSM0p2ZFhCVGFHRndaU2t1YVhRaExtWnBibVFvYzJoaGNHVWdQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lITm9ZWEJsTG5SNUlEMDlJR3RsZVZ4dUlDQWdJQ0FnSUNBcFhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdabWx1WkU5eVNXNXpaWEowVUhKdmNHVnlkSGxEYjI1bWFXY29hMlY1T2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWm1sdVpDQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktHdGxlU2xjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBibVFwSUhKbGRIVnliaUJtYVc1a1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdoaGMxUnlZVzV6Wm05eWJTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZDBjaWNwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR052Ym1acFp5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVPaUJyWlhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F1TGk1MGFHbHpMbWRsZEVSbFptRjFiSFJRY205d1pYSjBlU2hyWlhrcElHRnpJRzlpYW1WamRGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNob1lYTlVjbUZ1YzJadmNtMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdkeWIzVndVMmhoY0dWeklEMGdLQ2gwYUdsekxuSnZiM1FnWVhNZ1UyaGhjR1ZNWVhsbGNpa3VjMmhoY0dWeklWc3dYU0JoY3lCSGNtOTFjRk5vWVhCbEtTNXBkQ0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lHZHliM1Z3VTJoaGNHVnpMbk53YkdsalpTaG5jbTkxY0ZOb1lYQmxjeTVzWlc1bmRHZ2dMU0F4TENBd0xDQmpiMjVtYVdjcFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS0hSb2FYTXVjbTl2ZENCaGN5QlRhR0Z3WlV4aGVXVnlLUzV6YUdGd1pYTWhXekJkSUdGeklFZHliM1Z3VTJoaGNHVXBMbWwwSVM1d2RYTm9LR052Ym1acFp5bGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjl1Wm1sblhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdZMjl0Ylc5dVVISnZjR1Z5ZEhsTllYQndhVzVuS0d0bGVUb2dVMlYwWVdKc1pVdGxlWE1wT2lCYllXNTVMQ0J6ZEhKcGJtY2dmQ0IxYm1SbFptbHVaV1FzSUc1MWJXSmxjaUI4SUhWdVpHVm1hVzVsWkYwZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWW1GelpUb2dZVzU1TENCck9pQnpkSEpwYm1jZ2ZDQjFibVJsWm1sdVpXUXNJR2x1WkdWNE9pQnVkVzFpWlhJZ2ZDQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaHJaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozTmpZV3hsV0NjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaU0E5SUhSb2FYTXVjbTl2ZEM1cmMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuY3lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQ0E5SURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYzJOaGJHVlpKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVhObElEMGdkR2hwY3k1eWIyOTBMbXR6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZHpKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZGhibU5vYjNKWUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTV5YjI5MExtdHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkaEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkaGJtTm9iM0paSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2RoSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2Q0SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2R3SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2Q1SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVlYTmxJRDBnZEdocGN5NXliMjkwTG10elhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2R3SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdVpHVjRJRDBnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2R5YjNSaGRHVW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG5KdmIzUXVhM05jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0ozSW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHZjR0ZqYVhSNUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTV5YjI5MExtdHpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkdkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ0xURmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRISnBiVk4wWVhKMEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZWE5sSUQwZ2RHaHBjeTVtYVc1a1QzSkpibk5sY25SUWNtOXdaWEowZVVOdmJtWnBaeWduZEcwbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuY3lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQ0E5SUMweFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNSeWFXMUZibVFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKaGMyVWdQU0IwYUdsekxtWnBibVJQY2tsdWMyVnlkRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZDBiU2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZGxKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kSEpwYlU5bVpuTmxkQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRTl5U1c1elpYSjBVSEp2Y0dWeWRIbERiMjVtYVdjb0ozUnRKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0oyOG5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZG1hV3hzUTI5c2IzSW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG1acGJtUlFjbTl3WlhKMGVVTnZibVpwWnlnblptd25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3NnUFNBbll5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUNBOUlDMHhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozTjBjbTlyWlVOdmJHOXlKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWVhObElEMGdkR2hwY3k1bWFXNWtVSEp2Y0dWeWRIbERiMjVtYVdjb0ozTjBKeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JySUQwZ0oyTW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHpkSEp2YTJWWGFXUjBhQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZHpkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZDNKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5jMmhoY0dVbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSmhjMlVnUFNCMGFHbHpMbVpwYm1SUWNtOXdaWEowZVVOdmJtWnBaeWduYzJnbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHc2dQU0FuYTNNblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGdnUFNBdE1WeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkbWFXeHNUM0JoWTJsMGVTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbUZ6WlNBOUlIUm9hWE11Wm1sdVpGQnliM0JsY25SNVEyOXVabWxuS0NkbWJDY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdheUE5SUNkdkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ0xURmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmMzUnliMnRsVDNCaFkybDBlU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpTQTlJSFJvYVhNdVptbHVaRkJ5YjNCbGNuUjVRMjl1Wm1sbktDZHpkQ2NwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXlBOUlDZHZKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdMVEZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmJZbUZ6WlN3Z2F5d2dhVzVrWlhoZFhHNGdJQ0FnZlZ4dUlDQWdJSEJ5YVhaaGRHVWdkWEJrWVhSbFZHbHRaVkpoYm1kbEtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1F1YjNBZ1BTQk5ZWFJvTG0xaGVDZ3VMaTVQWW1wbFkzUXVkbUZzZFdWektIUm9hWE11ZEdsdFpWSmhibWRsS1N3Z01TbGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHlaV1k2SUZOb1lYQmxUR0Y1WlhJZ2ZDQlVaWGgwVEdGNVpYSWdmQ0JKYldGblpVeGhlV1Z5SUh3Z1VISmxRMjl0Y0V4aGVXVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZENBOUlISmxabHh1SUNBZ0lDQWdJQ0IwYUdsekxtRnVZMmh2Y2lBOUlGc3dMQ0F3TENBd1hWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CdmMybDBhVzl1SUQwZ1d6QXNJREFzSURCZFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd0bGVTQjBhR1VnYm1GdFpTQnZaaUJ3Y205d1pYSjBlU0IwYnlCaVpTQnpaWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkbUZzZFdVZ2RHaGxJSFpoYkhWbElIUnZJR0psSUhObGRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGTjBZWFJwWTFCeWIzQmxjblI1S0d0bGVUb2dVMlYwWVdKc1pVdGxlWE1zSUhaaGJIVmxPaUJoYm5rcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGFXMWxVbUZ1WjJWYmEyVjVYU0E5SURGY2JpQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVlVhVzFsVW1GdVoyVW9LVnh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCUVlYUm9UV0ZyWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxMblZ1YVdadmNtMG9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaUzV3WVhSb1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiR1YwSUdKaGMyVTZJR0Z1ZVN3Z2F6b2djM1J5YVc1bklId2dkVzVrWldacGJtVmtMQ0JwYm1SbGVEb2diblZ0WW1WeUlId2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQWdJRnRpWVhObExDQnJMQ0JwYm1SbGVGMGdQU0IwYUdsekxtTnZiVzF2YmxCeWIzQmxjblI1VFdGd2NHbHVaeWhyWlhrcFhHNGdJQ0FnSUNBZ0lHbG1JQ2doYXlCOGZDQnBibVJsZUNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHdGxlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1JsZUhRbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5YjI5MExuUjVJRDA5SURVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSdll5QTlJSFJvYVhNdWNtOXZkQzUwSVM1a0lWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpMbXNnUFNCYlpHOWpMbXNoV3pCZFhWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpMbXRiTUYwdWRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2WXk1cld6QmRMbk1oTG5RZ1BTQjJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaHJaWGtzSUhaaGJIVmxLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjA1dmRDQmhJSFpoYkdsa0lHdGxlUzRuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaGlZWE5sSUNZbUlHc2dKaVlnYVc1a1pYZ2dJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjUyWlhKMFZHOVRkR0YwYVdOUWNtOXdaWEowZVNoaVlYTmxMQ0JyS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dsdVpHVjRJRDQ5SURBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltRnpaVnRyWFM1clcybHVaR1Y0WFNBOUlIWmhiSFZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpWdHJYUzVySUQwZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JyWlhrZ2RHaGxJRzVoYldVZ2IyWWdjSEp2Y0dWeWRIa2dkRzhnWW1VZ2MyVjBYRzRnSUNBZ0lDb2dRSEJoY21GdElITjBZWEowUm5KaGJXVWdabkpoYldVZ2JuVnRZbVZ5SUhSdklITjBZWEowSUhSb1pTQmhibWx0WVhScGIyNWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pXNWtSbkpoYldVZ1puSmhiV1VnYm5WdFltVnlJSFJ2SUdWdVpDQjBhR1VnWVc1cGJXRjBhVzl1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSE4wWVhKMFZtRnNkV1VnZG1Gc2RXVWdkRzhnWW1VZ2MyVjBJR2x1SUhOMFlYSjBJRzltSUdGdWFXMWhkR2x2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JsYm1SV1lXeDFaU0IyWVd4MVpTQjBieUJpWlNCelpYUWdhVzRnWlc1a0lHOW1JR0Z1YVcxaGRHbHZibHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxZWE5wYm1jZ1pXRnphVzVuSUdaMWJtTjBhVzl1TENCa1pXWmhkV3gwSUdseklHeHBibVZoY2x4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVGdWFXMWhkR0ZpYkdWUWNtOXdaWEowZVNoclpYazZJRk5sZEdGaWJHVkxaWGx6TENCemRHRnlkRVp5WVcxbE9pQnVkVzFpWlhJc0lHVnVaRVp5WVcxbE9pQnVkVzFpWlhJc0lITjBZWEowVm1Gc2RXVTZJR0Z1ZVN3Z1pXNWtWbUZzZFdVNklHRnVlU3dnWldGemFXNW5Qem9nUldGemFXNW5SblZ1WTNScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVaRVp5WVcxbElEdzlJSE4wWVhKMFJuSmhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25SVzVrSUdaeVlXMWxJSE5vYjNWc1pDQmlaU0JzWVhKblpYSWdkR2hoYmlCemRHRnlkQ0JtY21GdFpTNG5LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkR2x0WlZKaGJtZGxXMnRsZVYwZ1BTQk5ZWFJvTG0xaGVDaDBhR2x6TG5ScGJXVlNZVzVuWlZ0clpYbGRJSHg4SURBc0lHVnVaRVp5WVcxbElDc2dNU2xjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWVWFXMWxVbUZ1WjJVb0tWeHVJQ0FnSUNBZ0lDQnBaaUFvSVdWaGMybHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaV0Z6YVc1bklEMGdSV0Z6YVc1blJtRmpkRzl5ZVM1c2FXNWxZWElvS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGeWRGWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1VHRjBhRTFoYTJWeUlIeDhJR1Z1WkZaaGJIVmxJR2x1YzNSaGJtTmxiMllnVUdGMGFFMWhhMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JiYzNSaGNuUldZV3gxWlN3Z1pXNWtWbUZzZFdWZExtWnZja1ZoWTJnb2RpQTlQaUIySUdsdWMzUmhibU5sYjJZZ1VHRjBhRTFoYTJWeUlDWW1JSFl1ZFc1cFptOXliU2dwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOMFlYSjBWbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQlFZWFJvVFdGclpYSWdKaVlnWlc1a1ZtRnNkV1VnYVc1emRHRnVZMlZ2WmlCUVlYUm9UV0ZyWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHRnlkRXhwYm1WRGIzVnVkQ0E5SUhOMFlYSjBWbUZzZFdVdWNHRjBhQzUySVM1c1pXNW5kR2dnTFNBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlc1a1RHbHVaVU52ZFc1MElEMGdaVzVrVm1Gc2RXVXVjR0YwYUM1MklTNXNaVzVuZEdnZ0xTQXhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NFb2MzUmhjblJNYVc1bFEyOTFiblFnUEQwZ01DQW1KaUJsYm1STWFXNWxRMjkxYm5RZ1BEMGdNQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0UxaGRHZ3ViV2x1S0hOMFlYSjBUR2x1WlVOdmRXNTBMQ0JsYm1STWFXNWxRMjkxYm5RcElEdzlJREFnSmlZZ1RXRjBhQzV0WVhnb2MzUmhjblJNYVc1bFEyOTFiblFzSUdWdVpFeHBibVZEYjNWdWRDa2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdibVZsWkVOdmNIa2dQU0J6ZEdGeWRFeHBibVZEYjNWdWRDQThQU0F3SUQ4Z2MzUmhjblJXWVd4MVpTQTZJR1Z1WkZaaGJIVmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYm1WbFpFeGxibWQwYUNBOUlFMWhkR2d1YldGNEtITjBZWEowVEdsdVpVTnZkVzUwTENCbGJtUk1hVzVsUTI5MWJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXeWRwSnl3Z0oyOG5MQ0FuZGlkZExtWnZja1ZoWTJnb2EyVjVJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaV1ZrUTI5d2VTNXdZWFJvVzJ0bGVWMGdQU0JCY25KaGVTaHVaV1ZrVEdWdVozUm9LUzVtYVd4c0tHNWxaV1JEYjNCNUxuQmhkR2hiYTJWNVhTNXNaVzVuZEdnZ1B5QnVaV1ZrUTI5d2VTNXdZWFJvVzJ0bGVWMWJNRjBnT2lCYk1Dd2dNRjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dGJXOXVUWFZzZEdsd2JHVWdQU0JzWldGemRFTnZiVzF2YmsxMWJIUnBjR3hsS0hOMFlYSjBUR2x1WlVOdmRXNTBMQ0JsYm1STWFXNWxRMjkxYm5RcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRlpoYkhWbExuVndjMkZ0Y0d4bEtFMWhkR2d1Y205MWJtUW9ZMjl0Ylc5dVRYVnNkR2x3YkdVZ0x5QnpkR0Z5ZEV4cGJtVkRiM1Z1ZENrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJtUldZV3gxWlM1MWNITmhiWEJzWlNoTllYUm9Mbkp2ZFc1a0tHTnZiVzF2YmsxMWJIUnBjR3hsSUM4Z1pXNWtUR2x1WlVOdmRXNTBLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJRnR6ZEdGeWRGWmhiSFZsTENCbGJtUldZV3gxWlYwZ1BTQmJjM1JoY25SV1lXeDFaU3dnWlc1a1ZtRnNkV1ZkTG0xaGNDaDJJRDArSUhZZ2FXNXpkR0Z1WTJWdlppQlFZWFJvVFdGclpYSWdQeUIyTG5CaGRHZ2dPaUIyS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0JpWVhObE9pQmhibmtzSUdzNklITjBjbWx1WnlCOElIVnVaR1ZtYVc1bFpDd2dhVzVrWlhnNklHNTFiV0psY2lCOElIVnVaR1ZtYVc1bFpDd2dkM0poY0NBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUZ0aVlYTmxMQ0JyTENCcGJtUmxlRjBnUFNCMGFHbHpMbU52YlcxdmJsQnliM0JsY25SNVRXRndjR2x1WnloclpYa3BYRzRnSUNBZ0lDQWdJR2xtSUNnaGF5QjhmQ0JwYm1SbGVDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNSbGVIUW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1eWIyOTBMblI1SUQwOUlEVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0poYzJVZ1BTQjBhR2x6TG5KdmIzUXVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSbGVIUlFjbTl3SUQwZ1ltRnpaUzVrTG10Yk1GMHVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSdGNGTjBZWEowVm1Gc2RXVWdQU0JLVTA5T0xuQmhjbk5sS0VwVFQwNHVjM1J5YVc1bmFXWjVLSFJsZUhSUWNtOXdLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCMGJYQkZibVJXWVd4MVpTQTlJRXBUVDA0dWNHRnljMlVvU2xOUFRpNXpkSEpwYm1kcFpua29kR1Y0ZEZCeWIzQXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzF3VTNSaGNuUldZV3gxWlM1MElEMGdjM1JoY25SV1lXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzF3Ulc1a1ZtRnNkV1V1ZENBOUlHVnVaRlpoYkhWbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRlpoYkhWbElEMGdkRzF3VTNSaGNuUldZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlc1a1ZtRnNkV1VnUFNCMGJYQkZibVJXWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F5QTlJQ2RrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ2dQU0F0TVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDNKaGNDQTlJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR3RsZVN3Z2MzUmhjblJHY21GdFpTd2daVzVrUm5KaGJXVXNJSE4wWVhKMFZtRnNkV1VzSUdWdVpGWmhiSFZsTENCbFlYTnBibWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblRtOTBJR0VnZG1Gc2FXUWdhMlY1TGljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLR0poYzJVZ0ppWWdheUFtSmlCcGJtUmxlQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym5abGNuUlViMEZ1YVcxaGRHRmliR1ZRY205d1pYSjBlU2hpWVhObExDQnJLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoWkdSTFpYbG1jbUZ0WlNoaVlYTmxMQ0JyTENCcGJtUmxlQ3dnYzNSaGNuUkdjbUZ0WlN3Z2MzUmhjblJXWVd4MVpTd2daV0Z6YVc1bkxDQjNjbUZ3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFpHUkxaWGxtY21GdFpTaGlZWE5sTENCckxDQnBibVJsZUN3Z1pXNWtSbkpoYldVc0lHVnVaRlpoYkhWbExDQkZZWE5wYm1kR1lXTjBiM0o1TG14cGJtVmhjaWdwTENCM2NtRndLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVEdGNVpYSkdZV04wYjNKNUlIdGNiaUFnSUNCd2NtbDJZWFJsSUhOMFlYUnBZeUJuWlc1bGNtRjBaVlJ5WVc1elptOXliU2hqYjI5eVpHbHVZWFJsT2lCdWRXMWlaWEpiWFNrNklGUnlZVzV6Wm05eWJTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdk9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQXhNREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCeU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQXdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpHbHVZWFJsV3pCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpHbHVZWFJsV3pGZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoT2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURFd01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTVRBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4TURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCamNtVmhkR1VnZEdobElHSnZkVzVrYVc1bklHSnZlQ0J2WmlCemRtY2daV3hsYldWdWRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa2IyMGdjM1puSUdWc1pXMWxiblFnYm1WbFpITWdkRzhnWTJGc1kzVnNZWFJsSUhSb1pTQmliM1Z1WkdsdVp5QmliM2hjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ1ltOTFibVJwYm1kQ2IzZ29aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1ltOTFibVJwYm1kQ2IzZ2dQU0JuWlhSQ2IzVnVaR2x1WjBKdmVDaGtiMjBwTG0xaGNDZ29kaXdnYVNrZ1BUNGdhU0E4SURJZ1B5QjJJQzBnTVNBNklIWWdLeUF4S1NCaGN5QmJiblZ0WW1WeUxDQnVkVzFpWlhJc0lHNTFiV0psY2l3Z2JuVnRZbVZ5WFZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaV04wS0M0dUxtSnZkVzVrYVc1blFtOTRLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR055WldGMFpTQjBhR1VnYzJGdFpTQnphR0Z3WlNCdlppQnpkbWNnY0dGMGFGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa2IyMGdjM1puSUhCaGRHZ2daV3hsYldWdWRDQnlaWEJ5WlhObGJuUWdkR2hsSUhOb1lYQmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhkR2xqSUhOb1lYQmxLR1J2YlRvZ1UxWkhVR0YwYUVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUnBibUYwWlNBOUlHZGxkRUp2ZFc1a2FXNW5RbTk0S0dSdmJTbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JHRjVaWEk2SUZOb1lYQmxUR0Y1WlhJZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVUb2dOQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmtaRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE55T2lBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVc4NklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcmN6b2dkR2hwY3k1blpXNWxjbUYwWlZSeVlXNXpabTl5YlNoamIyOXlaR2x1WVhSbEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsd09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQTZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p0T2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJoaGNHVnpPaUJ5Wlc1a1pYSW9aRzl0S1Z4dVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJLVTAxdmRtbHVUR0Y1WlhJb2JHRjVaWElwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nWTNKbFlYUmxJR0VnY21WamRHRnVaMnhsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hsWm5RZ2JHVm1kQ0J2WmlCeVpXTjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIUnZjQ0IwYjNBZ2IyWWdjbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzYVdSMGFDQjNhV1IwYUNCdlppQnlaV04wWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR2hsYVdkb2RDQm9aV2xuYUhRZ2IyWWdjbVZqZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE4wWVhScFl5QnlaV04wS0d4bFpuUTZJRzUxYldKbGNpd2dkRzl3T2lCdWRXMWlaWElzSUhkcFpIUm9PaUJ1ZFcxaVpYSXNJR2hsYVdkb2REb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHeGhlV1Z5T2lCVGFHRndaVXhoZVdWeUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIazZJRFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaR1E2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Y2pvZ01TeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGdk9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2EzTTZJSFJvYVhNdVoyVnVaWEpoZEdWVWNtRnVjMlp2Y20wb1cyeGxablFzSUhSdmNDd2dkMmxrZEdnc0lHaGxhV2RvZEYwcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhBNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNEb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTA2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUdGd1pYTTZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5Wlc1a1pYSlFiR0ZwYmtkc2VYQm9LQ2R5WldOMEp5d2dXM2RwWkhSb0xDQm9aV2xuYUhSZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTbE5OYjNacGJreGhlV1Z5S0d4aGVXVnlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR055WldGMFpTQmhJR1ZzYkdsd2MyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1kzZ2dlQ0JqWlc1MFpYSWdiMllnWld4c2FYQnpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmplU0I1SUdObGJuUmxjaUJ2WmlCbGJHeHBjSE5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEo0SUhnZ2NtRmthWFZ6SUc5bUlHVnNiR2x3YzJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnY25rZ2VTQnlZV1JwZFhNZ2IyWWdaV3hzYVhCelpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhOMFlYUnBZeUJsYkd4cGNITmxLR040T2lCdWRXMWlaWElzSUdONU9pQnVkVzFpWlhJc0lISjRPaUJ1ZFcxaVpYSXNJSEo1T2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYkdGNVpYSTZJRk5vWVhCbFRHRjVaWElnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVRvZ05DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSa1pEb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITnlPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZVzg2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyY3pvZ2RHaHBjeTVuWlc1bGNtRjBaVlJ5WVc1elptOXliU2hiWTNnZ0xTQnllQ3dnWTNrZ0xTQnllU3dnTWlBcUlISjRMQ0F5SUNvZ2NubGRLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHdPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0E2SURFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZERvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdKdE9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjR1Z6T2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnVaR1Z5VUd4aGFXNUhiSGx3YUNnblpXeHNhWEJ6WlNjc0lGdHllQ3dnY25sZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTbE5OYjNacGJreGhlV1Z5S0d4aGVXVnlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRzFoYTJVZ1lTQnNZWGxsY2lCaWVTQmhjM05sZENCSlJGeHVJQ0FnSUNBcUlFQndZWEpoYlNCcFpDQmhjM05sZENCeVpXWmxjbVZ1WTJVZ1NVUmNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRjBhV01nY21WbUtHbGtPaUJTWldabGNtVnVZMlZKUkNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCc1lYbGxjaUE5SUc1bGR5QktVMDF2ZG1sdVRHRjVaWElvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSGs2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWkdRNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemNqb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnZPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhM002SUhSb2FYTXVaMlZ1WlhKaGRHVlVjbUZ1YzJadmNtMG9XekFzSURBc0lEQXNJREJkS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x3T2lBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNBNklERXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemREb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnRPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkem9nT1dVNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYURvZ09XVTVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVm1TV1E2SUdsa1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnNZWGxsY2x4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUcxaGEyVWdZU0JqYjIxd2JHVjRJR3hoZVdWeUlHSjVJR0Z1SUdGeVltbDBjbUZ5ZVNCemRtY2daV3hsYldWdWRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCa2IyMGdjM1puSUdWc1pXMWxiblFnYm1WbFpDQjBieUJpWlNCd1lYSnpaV1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZWE56WlhSTWFYTjBJR0VnYkdsemRDQmpiMjUwWVdsdWN5QnBiV0ZuWlM5c1lYbGxjaUJoYzNObGRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCbWIyNTBUR2x6ZENCaElHeHBjM1FnWTI5dWRHRnBibk1nWm05dWRDQmhjM05sZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE4wWVhScFl5Qm9hV1Z5WVhKamFIa29aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5Rc0lHRnpjMlYwVEdsemREb2dRWE56WlhSekxDQm1iMjUwVEdsemREb2dSbTl1ZEhNcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXZjbVJwYm1GMFpTQTlJR2RsZEVKdmRXNWthVzVuUW05NEtHUnZiU2xjYmlBZ0lDQWdJQ0FnYkdWMElHUnZiVlI1Y0dVNklESWdmQ0EwSUh3Z05TQjhJREE3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtiMjBnYVc1emRHRnVZMlZ2WmlCVFZrZFVaWGgwUld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaRzl0Vkhsd1pTQTlJRFZjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoa2IyMGdhVzV6ZEdGdVkyVnZaaUJUVmtkSmJXRm5aVVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZiVlI1Y0dVZ1BTQXlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvWkc5dElHbHVjM1JoYm1ObGIyWWdVMVpIUjBWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2YlZSNWNHVWdQU0F3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMjFVZVhCbElEMGdORnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR3hoZVdWeU9pQlRhR0Z3WlV4aGVXVnlJSHdnU1cxaFoyVk1ZWGxsY2lCOElGUmxlSFJNWVhsbGNpQjhJRkJ5WlVOdmJYQk1ZWGxsY2lBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNU9pQmtiMjFVZVhCbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdSa09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzSTZJREVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhiem9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3R6T2lCMGFHbHpMbWRsYm1WeVlYUmxWSEpoYm5ObWIzSnRLR1J2YlZSNWNHVWdQVDBnTUNBL0lGc3dMQ0F3TENBd0xDQXdYU0E2SUdOdmIzSmthVzVoZEdVcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhBNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNEb2dNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTA2SURCY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHUnZiVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtiMjFNWldGMlpYTWdQU0JuWlhSTVpXRm1UbTlrWlhNb1pHOXRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa2IyMU1aV0YyWlhNdVptbHNkR1Z5S0dSdmJTQTlQaUJrYjIwZ2FXNXpkR0Z1WTJWdlppQlRWa2RVWlhoMFJXeGxiV1Z1ZENCOGZDQmtiMjBnYVc1emRHRnVZMlZ2WmlCVFZrZEpiV0ZuWlVWc1pXMWxiblFwTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtVmpiMjF3VEdGNVpYSWdQU0JzWVhsbGNpQmhjeUJRY21WRGIyMXdUR0Y1WlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISmxRMjl0Y0VGemMyVjBPaUJLVTAxdmRtbHVUR0Y1WlhKYlhTQTlJRnRkWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCeVpVTnZiWEJTWldaSlpDQTlJSFYxYVdRb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjIxTVpXRjJaWE11Wm05eVJXRmphQ2hrSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrSUdsdWMzUmhibU5sYjJZZ1UxWkhSM0poY0docFkzTkZiR1Z0Wlc1MElDWW1JQ0VvWkNCcGJuTjBZVzVqWlc5bUlGTldSMGRGYkdWdFpXNTBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlaVU52YlhCQmMzTmxkQzUxYm5Ob2FXWjBLSFJvYVhNdWFHbGxjbUZ5WTJoNUtHUXNJR0Z6YzJWMFRHbHpkQ3dnWm05dWRFeHBjM1FwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVkRiMjF3UVhOelpYUXVabTl5UldGamFDaHNZWGxsY2lBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNZWGxsY2k1eWIyOTBMbTl3SUQwZ09XVTVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldOdmJYQk1ZWGxsY2k1M0lEMGdZMjl2Y21ScGJtRjBaVnN3WFNBcklHTnZiM0prYVc1aGRHVmJNbDBnS3lBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldOdmJYQk1ZWGxsY2k1b0lEMGdZMjl2Y21ScGJtRjBaVnN4WFNBcklHTnZiM0prYVc1aGRHVmJNMTBnS3lBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WldOdmJYQk1ZWGxsY2k1eVpXWkpaQ0E5SUhCeVpVTnZiWEJTWldaSlpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoYzNObGRFeHBjM1F1Y0hWemFDaDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRG9nY0hKbFEyOXRjRkpsWmtsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRjVaWEp6T2lCd2NtVkRiMjF3UVhOelpYUXViV0Z3S0d4aGVXVnlJRDArSUd4aGVXVnlMbkp2YjNRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJoaGNHVk1ZWGxsY2lBOUlHeGhlV1Z5SUdGeklGTm9ZWEJsVEdGNVpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJoaGNHVk1ZWGxsY2k1MGVTQTlJRFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjR1ZNWVhsbGNpNXJjeUE5SUhSb2FYTXVaMlZ1WlhKaGRHVlVjbUZ1YzJadmNtMG9ZMjl2Y21ScGJtRjBaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyaGhjR1ZNWVhsbGNpNXphR0Z3WlhNZ1BTQnlaVzVrWlhJb1pHOXRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXlPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHbHRZV2RsVEdGNVpYSWdQU0JzWVhsbGNpQmhjeUJKYldGblpVeGhlV1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdXMmx0WVdkbFVtVm1TV1FzSUdsdFlXZGxRWE56WlhSZElEMGdjbVZ1WkdWeVNXMWhaMlVvWkc5dElHRnpJRk5XUjBsdFlXZGxSV3hsYldWdWRDd2dZWE56WlhSTWFYTjBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x0WVdkbFRHRjVaWEl1Y21WbVNXUWdQU0JwYldGblpWSmxaa2xrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmhjM05sZEV4cGMzUXVabWxzZEdWeUtHRWdQVDRnWVM1cFpDQTlQU0JwYldGblpWSmxaa2xrS1M1c1pXNW5kR2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnpjMlYwVEdsemRDNXdkWE5vS0dsdFlXZGxRWE56WlhRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnTkRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J6YUdGd1pVeGhlV1Z5SUQwZ2JHRjVaWElnWVhNZ1UyaGhjR1ZNWVhsbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9ZWEJsVEdGNVpYSXVjMmhoY0dWeklEMGdjbVZ1WkdWeUtHUnZiU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQTFPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUmxlSFJNWVhsbGNpQTlJR3hoZVdWeUlHRnpJRlJsZUhSTVlYbGxjbHh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2JXOTJaU0IwWlhoMFRHRjVaWEluY3lCd2IzTnBkR2x2YmlCMGJ5QjBaWGgwTFdGdVkyaHZjaTF5Wld4aGRHVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1ltRnpaVXhwYm1WSVpXbG5hSFFnUFNCblpYUkNZWE5sYkdsdVpVaGxhV2RvZENoa2IyMGdZWE1nVTFaSFZHVjRkRVZzWlcxbGJuUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RHVjRkRUZ1WTJodmNpQTlJR1Z1WTI5a1pWUmxlSFJCYm1Ob2IzSW9aMlYwUTI5dGNIVjBaV1JUZEhsc1pTaGtiMjBwTG5SbGVIUkJibU5vYjNJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEdWNGRFRnVZMmh2Y2xkbGFXZG9kQ0E5SUZzd0xDQXhMQ0F3TGpWZFczUmxlSFJCYm1Ob2IzSmRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZEV4aGVXVnlMbXR6SVM1d0lTNXJJRDBnVzJOdmIzSmthVzVoZEdWYk1GMGdLeUJqYjI5eVpHbHVZWFJsV3pKZElDb2dkR1Y0ZEVGdVkyaHZjbGRsYVdkb2RDd2dZMjl2Y21ScGJtRjBaVnN4WFNBcklHTnZiM0prYVc1aGRHVmJNMTBnTFNCaVlYTmxUR2x1WlVobGFXZG9kQ3dnTUYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBUR0Y1WlhJdWEzTWhMbThoTG1zZ1BTQitmaWh3WVhKelpVWnNiMkYwS0dkbGRFTnZiWEIxZEdWa1UzUjViR1VvWkc5dEtTNW1hV3hzVDNCaFkybDBlU0I4ZkNBbk1TY3BJQ29nTVRBd0tWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1czUmxlSFJFWVhSaExDQm1iMjUwWFNBOUlISmxibVJsY2xSbGVIUW9aRzl0SUdGeklGTldSMVJsZUhSRmJHVnRaVzUwTENCbWIyNTBUR2x6ZENsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBUR0Y1WlhJdWRDQTlJSFJsZUhSRVlYUmhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbWIyNTBUR2x6ZEM1c2FYTjBJUzVtYVd4MFpYSW9aaUE5UGlCbUxtWk9ZVzFsSUQwOUlHWnZiblF1Wms1aGJXVXBMbXhsYm1kMGFDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05dWRFeHBjM1F1YkdsemRDRXVjSFZ6YUNobWIyNTBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXOTJhVzVNWVhsbGNpQTlJRzVsZHlCS1UwMXZkbWx1VEdGNVpYSW9iR0Y1WlhJcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdGIzWnBia3hoZVdWeVhHNGdJQ0FnZlZ4dWZTSmRmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuICB2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5yZW5kZXIgPSByZW5kZXI7XHJcbmV4cG9ydHMucmVuZGVyUGxhaW5HbHlwaCA9IHJlbmRlclBsYWluR2x5cGg7XHJcbmV4cG9ydHMucmVuZGVyVGV4dCA9IHJlbmRlclRleHQ7XHJcbmV4cG9ydHMucmVuZGVySW1hZ2UgPSByZW5kZXJJbWFnZTtcclxuXHJcbnZhciBfcGF0aCA9IHJlcXVpcmUoXCIuL3BhdGhcIik7XHJcblxyXG52YXIgX3YgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ1dWlkL3Y0XCIpKTtcclxuXHJcbnZhciBfaGVscGVyID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxyXG5cclxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cclxuXHJcbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKCEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSkgeyByZXR1cm47IH0gdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XHJcblxyXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlcihkb20sIGJhc2VEb20pIHtcclxuICBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHVGV4dEVsZW1lbnQgfHwgZG9tIGluc3RhbmNlb2YgU1ZHSW1hZ2VFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdHRWxlbWVudCkge1xyXG4gICAgcmV0dXJuIHJlbmRlckdyb3VwKGRvbSwgYmFzZURvbSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiByZW5kZXJHbHlwaChkb20sIGJhc2VEb20pO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkVmlzdWFsRW5jb2RpbmdzKGl0ZW1zLCBzdHlsZXMsIGRvbSwgYmFzZURvbSkge1xyXG4gIGlmIChzdHlsZXMuc3Ryb2tlICYmIHN0eWxlcy5zdHJva2UgIT09ICdub25lJykge1xyXG4gICAgaXRlbXMucHVzaCh7XHJcbiAgICAgIHR5OiAnc3QnLFxyXG4gICAgICBjOiB7XHJcbiAgICAgICAgazogc3R5bGVzLnN0cm9rZS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKS5zbGljZSgwLCAzKS5tYXAoZnVuY3Rpb24gKHJhdykge1xyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHJhdykgLyAyNTU7XHJcbiAgICAgICAgfSkuY29uY2F0KDEpXHJcbiAgICAgIH0sXHJcbiAgICAgIG86IHtcclxuICAgICAgICBrOiBwYXJzZUZsb2F0KHN0eWxlcy5zdHJva2VPcGFjaXR5IHx8ICcxJykgKiAxMDBcclxuICAgICAgfSxcclxuICAgICAgdzoge1xyXG4gICAgICAgIGs6IHBhcnNlRmxvYXQoc3R5bGVzLnN0cm9rZVdpZHRoIHx8ICcxJylcclxuICAgICAgfSxcclxuICAgICAgbGM6ICgwLCBfaGVscGVyLmVuY29kZUxpbmVDYXApKHN0eWxlcy5zdHJva2VMaW5lY2FwKSxcclxuICAgICAgbGo6ICgwLCBfaGVscGVyLmVuY29kZUxpbmVKb2luKShzdHlsZXMuc3Ryb2tlTGluZWpvaW4pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGlmIChzdHlsZXMuZmlsbCAmJiBzdHlsZXMuZmlsbCAhPT0gJ25vbmUnKSB7XHJcbiAgICBpdGVtcy5wdXNoKHtcclxuICAgICAgdHk6ICdmbCcsXHJcbiAgICAgIGM6IHtcclxuICAgICAgICBrOiBzdHlsZXMuZmlsbC5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKS5zbGljZSgwLCAzKS5tYXAoZnVuY3Rpb24gKHJhdykge1xyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHJhdykgLyAyNTU7XHJcbiAgICAgICAgfSkuY29uY2F0KDEpXHJcbiAgICAgIH0sXHJcbiAgICAgIG86IHtcclxuICAgICAgICBrOiBwYXJzZUZsb2F0KHN0eWxlcy5maWxsT3BhY2l0eSB8fCAnMScpICogMTAwXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBvc1ggPSAwLFxyXG4gICAgICBwb3NZID0gMCxcclxuICAgICAgb3BhY2l0eSA9IDEwMDtcclxuXHJcbiAgaWYgKGRvbSAmJiBiYXNlRG9tKSB7XHJcbiAgICB2YXIgYmFzZVRyYW5zZm9ybSA9ICgwLCBfaGVscGVyLmNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm0pKGRvbSwgYmFzZURvbSk7XHJcbiAgICB2YXIgYmFzZUJCb3ggPSBiYXNlRG9tLmdldEJCb3goKTtcclxuICAgIHZhciByZWZCQm94ID0gZG9tLmdldEJCb3goKTtcclxuICAgIHBvc1ggPSBiYXNlVHJhbnNmb3JtLmUgKyByZWZCQm94LnggLSBiYXNlQkJveC54O1xyXG4gICAgcG9zWSA9IGJhc2VUcmFuc2Zvcm0uZiArIHJlZkJCb3gueSAtIGJhc2VCQm94Lnk7XHJcbiAgICBvcGFjaXR5ID0gcGFyc2VGbG9hdChzdHlsZXMub3BhY2l0eSB8fCAnMScpICogMTAwO1xyXG4gIH1cclxuXHJcbiAgaXRlbXMucHVzaCh7XHJcbiAgICB0eTogXCJ0clwiLFxyXG4gICAgcDoge1xyXG4gICAgICBrOiBbcG9zWCwgcG9zWV1cclxuICAgIH0sXHJcbiAgICBhOiB7XHJcbiAgICAgIGs6IFswLCAwXVxyXG4gICAgfSxcclxuICAgIHM6IHtcclxuICAgICAgazogWzEwMCwgMTAwXVxyXG4gICAgfSxcclxuICAgIHI6IHtcclxuICAgICAgazogMFxyXG4gICAgfSxcclxuICAgIG86IHtcclxuICAgICAgazogb3BhY2l0eVxyXG4gICAgfSxcclxuICAgIHNrOiB7XHJcbiAgICAgIGs6IDBcclxuICAgIH0sXHJcbiAgICBzYToge1xyXG4gICAgICBrOiAwXHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckdseXBoKGRvbSwgYmFzZURvbSkge1xyXG4gIHZhciBncm91cCA9IHtcclxuICAgIHR5OiBcImdyXCIsXHJcbiAgICBpdDogW10sXHJcbiAgICBibTogMCxcclxuICAgIGhkOiBmYWxzZVxyXG4gIH07XHJcblxyXG4gIHZhciBwb3N0QWN0aW9ucyA9IGZ1bmN0aW9uIHBvc3RBY3Rpb25zKHBhdGhNYWtlcikge1xyXG4gICAgcGF0aE1ha2VyLnVuaWZvcm0oKTtcclxuICAgIGdyb3VwLml0LnB1c2goe1xyXG4gICAgICB0eTogJ3NoJyxcclxuICAgICAga3M6IHtcclxuICAgICAgICBrOiBwYXRoTWFrZXIucGF0aCxcclxuICAgICAgICBhOiAwXHJcbiAgICAgIH0sXHJcbiAgICAgIG5tOiBkb20uaWQsXHJcbiAgICAgIGhkOiBmYWxzZVxyXG4gICAgfSk7XHJcbiAgICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9tKTtcclxuICAgIGFkZFZpc3VhbEVuY29kaW5ncyhncm91cC5pdCwgc3R5bGVzLCBkb20sIGJhc2VEb20pO1xyXG4gIH07XHJcblxyXG4gIGlmIChkb20gaW5zdGFuY2VvZiBTVkdDaXJjbGVFbGVtZW50KSB7XHJcbiAgICB2YXIgc3ZnTGVuZ3RoID0gZG9tLnIuYmFzZVZhbDtcclxuICAgIHN2Z0xlbmd0aC5jb252ZXJ0VG9TcGVjaWZpZWRVbml0cyhTVkdMZW5ndGguU1ZHX0xFTkdUSFRZUEVfUFgpO1xyXG4gICAgdmFyIHIgPSBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzO1xyXG4gICAgdmFyIHBhdGhNYWtlciA9IG5ldyBfcGF0aC5QYXRoTWFrZXIoKTtcclxuICAgIHBhdGhNYWtlci5tb3ZlVG8ociwgMCk7XHJcbiAgICBwYXRoTWFrZXIuYXJjVG8ociwgciwgMCwgMSwgMCwgciwgMiAqIHIpO1xyXG4gICAgcGF0aE1ha2VyLmFyY1RvKHIsIHIsIDAsIDEsIDAsIHIsIDApO1xyXG4gICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpO1xyXG4gICAgcG9zdEFjdGlvbnMocGF0aE1ha2VyKTtcclxuICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR0VsbGlwc2VFbGVtZW50KSB7XHJcbiAgICB2YXIgbWFwS2V5ID0gWydyeCcsICdyeSddO1xyXG5cclxuICAgIHZhciBfbWFwS2V5JG1hcCA9IG1hcEtleS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICB2YXIgc3ZnTGVuZ3RoID0gZG9tW2tleV0uYmFzZVZhbDtcclxuICAgICAgc3ZnTGVuZ3RoLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWCk7XHJcbiAgICAgIHJldHVybiBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzO1xyXG4gICAgfSksXHJcbiAgICAgICAgX21hcEtleSRtYXAyID0gX3NsaWNlZFRvQXJyYXkoX21hcEtleSRtYXAsIDIpLFxyXG4gICAgICAgIHJ4ID0gX21hcEtleSRtYXAyWzBdLFxyXG4gICAgICAgIHJ5ID0gX21hcEtleSRtYXAyWzFdO1xyXG5cclxuICAgIHZhciBfcGF0aE1ha2VyID0gbmV3IF9wYXRoLlBhdGhNYWtlcigpO1xyXG5cclxuICAgIF9wYXRoTWFrZXIubW92ZVRvKHJ4LCAwKTtcclxuXHJcbiAgICBfcGF0aE1ha2VyLmFyY1RvKHJ4LCByeSwgMCwgMSwgMCwgcngsIDIgKiByeSk7XHJcblxyXG4gICAgX3BhdGhNYWtlci5hcmNUbyhyeCwgcnksIDAsIDEsIDAsIHJ4LCAwKTtcclxuXHJcbiAgICBfcGF0aE1ha2VyLmNsb3NlUGF0aCgpO1xyXG5cclxuICAgIHBvc3RBY3Rpb25zKF9wYXRoTWFrZXIpO1xyXG4gIH0gZWxzZSBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHTGluZUVsZW1lbnQpIHtcclxuICAgIHZhciBfbWFwS2V5ID0gWyd4MScsICd4MicsICd5MScsICd5MiddO1xyXG5cclxuICAgIHZhciBfbWFwS2V5JG1hcDMgPSBfbWFwS2V5Lm1hcChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgIHZhciBzdmdMZW5ndGggPSBkb21ba2V5XS5iYXNlVmFsO1xyXG4gICAgICBzdmdMZW5ndGguY29udmVydFRvU3BlY2lmaWVkVW5pdHMoU1ZHTGVuZ3RoLlNWR19MRU5HVEhUWVBFX1BYKTtcclxuICAgICAgcmV0dXJuIHN2Z0xlbmd0aC52YWx1ZUluU3BlY2lmaWVkVW5pdHM7XHJcbiAgICB9KSxcclxuICAgICAgICBfbWFwS2V5JG1hcDQgPSBfc2xpY2VkVG9BcnJheShfbWFwS2V5JG1hcDMsIDQpLFxyXG4gICAgICAgIHgxID0gX21hcEtleSRtYXA0WzBdLFxyXG4gICAgICAgIHgyID0gX21hcEtleSRtYXA0WzFdLFxyXG4gICAgICAgIHkxID0gX21hcEtleSRtYXA0WzJdLFxyXG4gICAgICAgIHkyID0gX21hcEtleSRtYXA0WzNdO1xyXG5cclxuICAgIHZhciBvZmZzZXRYID0gTWF0aC5taW4oeDEsIHgyKTtcclxuICAgIHZhciBvZmZzZXRZID0gTWF0aC5taW4oeTEsIHkyKTtcclxuXHJcbiAgICB2YXIgX3BhdGhNYWtlcjIgPSBuZXcgX3BhdGguUGF0aE1ha2VyKCk7XHJcblxyXG4gICAgX3BhdGhNYWtlcjIubW92ZVRvKHgxIC0gb2Zmc2V0WCwgeTEgLSBvZmZzZXRZKTtcclxuXHJcbiAgICBfcGF0aE1ha2VyMi5saW5lVG8oeDIgLSBvZmZzZXRYLCB5MiAtIG9mZnNldFkpO1xyXG5cclxuICAgIHBvc3RBY3Rpb25zKF9wYXRoTWFrZXIyKTtcclxuICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1BhdGhFbGVtZW50KSB7XHJcbiAgICB2YXIgcGF0aERhdGEgPSBkb20uZ2V0QXR0cmlidXRlKCdkJykgfHwgJyc7XHJcblxyXG4gICAgdmFyIF9wYXRoTWFrZXIzID0gbmV3IF9wYXRoLlBhdGhNYWtlcihwYXRoRGF0YSk7XHJcblxyXG4gICAgcG9zdEFjdGlvbnMoX3BhdGhNYWtlcjMpO1xyXG4gIH0gZWxzZSBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHUG9seWdvbkVsZW1lbnQgfHwgZG9tIGluc3RhbmNlb2YgU1ZHUG9seWxpbmVFbGVtZW50KSB7XHJcbiAgICB2YXIgcG9pbnRzID0gZG9tLnBvaW50cztcclxuXHJcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICB2YXIgaXRlcmFibGVQb2ludHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwb2ludHMpO1xyXG5cclxuICAgICAgdmFyIF9vZmZzZXRYID0gaXRlcmFibGVQb2ludHMucmVkdWNlKGZ1bmN0aW9uIChwLCB2KSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKHAsIHYueCk7XHJcbiAgICAgIH0sIDApO1xyXG5cclxuICAgICAgdmFyIF9vZmZzZXRZID0gaXRlcmFibGVQb2ludHMucmVkdWNlKGZ1bmN0aW9uIChwLCB2KSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKHAsIHYueSk7XHJcbiAgICAgIH0sIDApO1xyXG5cclxuICAgICAgdmFyIF9wYXRoTWFrZXI0ID0gbmV3IF9wYXRoLlBhdGhNYWtlcigpO1xyXG5cclxuICAgICAgX3BhdGhNYWtlcjQubW92ZVRvKHBvaW50c1swXS54IC0gX29mZnNldFgsIHBvaW50c1swXS55IC0gX29mZnNldFkpO1xyXG5cclxuICAgICAgaXRlcmFibGVQb2ludHMuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkge1xyXG4gICAgICAgIGlmIChpIDw9IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgX3BhdGhNYWtlcjQubGluZVRvKHYueCAtIF9vZmZzZXRYLCB2LnkgLSBfb2Zmc2V0WSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1BvbHlnb25FbGVtZW50KSB7XHJcbiAgICAgICAgX3BhdGhNYWtlcjQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBvc3RBY3Rpb25zKF9wYXRoTWFrZXI0KTtcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1JlY3RFbGVtZW50KSB7XHJcbiAgICB2YXIgX21hcEtleTIgPSBbJ3dpZHRoJywgJ2hlaWdodCddO1xyXG5cclxuICAgIHZhciBfbWFwS2V5MiRtYXAgPSBfbWFwS2V5Mi5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICB2YXIgc3ZnTGVuZ3RoID0gZG9tW2tleV0uYmFzZVZhbDtcclxuICAgICAgc3ZnTGVuZ3RoLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWCk7XHJcbiAgICAgIHJldHVybiBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzO1xyXG4gICAgfSksXHJcbiAgICAgICAgX21hcEtleTIkbWFwMiA9IF9zbGljZWRUb0FycmF5KF9tYXBLZXkyJG1hcCwgMiksXHJcbiAgICAgICAgd2lkdGggPSBfbWFwS2V5MiRtYXAyWzBdLFxyXG4gICAgICAgIGhlaWdodCA9IF9tYXBLZXkyJG1hcDJbMV07XHJcblxyXG4gICAgdmFyIF9wYXRoTWFrZXI1ID0gbmV3IF9wYXRoLlBhdGhNYWtlcigpO1xyXG5cclxuICAgIF9wYXRoTWFrZXI1Lm1vdmVUbygwLCAwKTtcclxuXHJcbiAgICBfcGF0aE1ha2VyNS5saW5lVG8od2lkdGgsIDApO1xyXG5cclxuICAgIF9wYXRoTWFrZXI1LmxpbmVUbyh3aWR0aCwgaGVpZ2h0KTtcclxuXHJcbiAgICBfcGF0aE1ha2VyNS5saW5lVG8oMCwgaGVpZ2h0KTtcclxuXHJcbiAgICBfcGF0aE1ha2VyNS5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICBwb3N0QWN0aW9ucyhfcGF0aE1ha2VyNSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoZG9tKTtcclxuICAgIHRocm93IG5ldyBFcnJvcignTm8gaW1wbGVtZW50YXRpb24gZm91bmQgZm9yIHN2ZyBncmFwaGljcyBlbGVtZW50LicpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFtncm91cF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckdyb3VwKGRvbSwgYmFzZURvbSkge1xyXG4gIHZhciBpdGVtcyA9IFtdO1xyXG4gIGRvbS5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcclxuICAgIGlmIChub2RlIGluc3RhbmNlb2YgU1ZHR3JhcGhpY3NFbGVtZW50KSB7XHJcbiAgICAgIGl0ZW1zID0gcmVuZGVyKG5vZGUsIGJhc2VEb20gfHwgZG9tKS5jb25jYXQoaXRlbXMpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiBpdGVtcztcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyUGxhaW5HbHlwaCh0eXBlLCBhcmdzKSB7XHJcbiAgdmFyIGdyb3VwID0ge1xyXG4gICAgdHk6IFwiZ3JcIixcclxuICAgIGl0OiBbe1xyXG4gICAgICB0eTogJ3NoJyxcclxuICAgICAga3M6IHtcclxuICAgICAgICBrOiBudWxsLFxyXG4gICAgICAgIGE6IDBcclxuICAgICAgfSxcclxuICAgICAgaGQ6IGZhbHNlXHJcbiAgICB9LCB7XHJcbiAgICAgIHR5OiAnc3QnLFxyXG4gICAgICBjOiB7XHJcbiAgICAgICAgazogWzEsIDEsIDEsIDFdXHJcbiAgICAgIH0sXHJcbiAgICAgIHc6IHtcclxuICAgICAgICBrOiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIG86IHtcclxuICAgICAgICBrOiAxMDBcclxuICAgICAgfSxcclxuICAgICAgbGM6ICgwLCBfaGVscGVyLmVuY29kZUxpbmVDYXApKCdidXR0JyksXHJcbiAgICAgIGxqOiAoMCwgX2hlbHBlci5lbmNvZGVMaW5lSm9pbikoJ21pdGVyJylcclxuICAgIH0sIHtcclxuICAgICAgdHk6ICdmbCcsXHJcbiAgICAgIGM6IHtcclxuICAgICAgICBrOiBbMSwgMSwgMSwgMV1cclxuICAgICAgfSxcclxuICAgICAgbzoge1xyXG4gICAgICAgIGs6IDEwMFxyXG4gICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgIHR5OiAndHInLFxyXG4gICAgICBwOiB7XHJcbiAgICAgICAgazogWzAsIDBdXHJcbiAgICAgIH0sXHJcbiAgICAgIGE6IHtcclxuICAgICAgICBrOiBbMCwgMF1cclxuICAgICAgfSxcclxuICAgICAgczoge1xyXG4gICAgICAgIGs6IFsxMDAsIDEwMF1cclxuICAgICAgfSxcclxuICAgICAgcjoge1xyXG4gICAgICAgIGs6IDBcclxuICAgICAgfSxcclxuICAgICAgbzoge1xyXG4gICAgICAgIGs6IDEwMFxyXG4gICAgICB9LFxyXG4gICAgICBzazoge1xyXG4gICAgICAgIGs6IDBcclxuICAgICAgfSxcclxuICAgICAgc2E6IHtcclxuICAgICAgICBrOiAwXHJcbiAgICAgIH1cclxuICAgIH1dLFxyXG4gICAgYm06IDAsXHJcbiAgICBoZDogZmFsc2VcclxuICB9O1xyXG4gIHZhciBwYXRoTWFrZXIgPSBuZXcgX3BhdGguUGF0aE1ha2VyKCk7XHJcblxyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSAncmVjdCc6XHJcbiAgICAgIHBhdGhNYWtlci5tb3ZlVG8oMCwgMCk7XHJcbiAgICAgIHBhdGhNYWtlci5saW5lVG8oYXJnc1swXSwgMCk7XHJcbiAgICAgIHBhdGhNYWtlci5saW5lVG8oYXJnc1swXSwgYXJnc1sxXSk7XHJcbiAgICAgIHBhdGhNYWtlci5saW5lVG8oMCwgYXJnc1sxXSk7XHJcbiAgICAgIHBhdGhNYWtlci5jbG9zZVBhdGgoKTtcclxuICAgICAgYnJlYWs7XHJcblxyXG4gICAgY2FzZSAnZWxsaXBzZSc6XHJcbiAgICAgIHBhdGhNYWtlci5tb3ZlVG8oYXJnc1swXSwgMCk7XHJcbiAgICAgIHBhdGhNYWtlci5hcmNUbyhhcmdzWzBdLCBhcmdzWzFdLCAwLCAxLCAwLCBhcmdzWzBdLCAyICogYXJnc1sxXSk7XHJcbiAgICAgIHBhdGhNYWtlci5hcmNUbyhhcmdzWzBdLCBhcmdzWzFdLCAwLCAxLCAwLCBhcmdzWzBdLCAwKTtcclxuICAgICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpO1xyXG4gIH1cclxuXHJcbiAgcGF0aE1ha2VyLnVuaWZvcm0oKTtcclxuICBncm91cC5pdFswXS5rcy5rID0gcGF0aE1ha2VyLnBhdGg7XHJcbiAgcmV0dXJuIGdyb3VwO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJUZXh0KGRvbSwgZm9udExpc3QpIHtcclxuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9tKTtcclxuICB2YXIgZm9udFNpemUgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuZm9udFNpemUpLFxyXG4gICAgICBmb250RmFtaWx5ID0gY29tcHV0ZWRTdHlsZS5mb250RmFtaWx5LnNwbGl0KCcsJylbMF0udHJpbSgpLFxyXG4gICAgICBmb250U3R5bGUgPSBjb21wdXRlZFN0eWxlLmZvbnRTdHlsZSxcclxuICAgICAgZm9udFdlaWdodCA9IGNvbXB1dGVkU3R5bGUuZm9udFdlaWdodCxcclxuICAgICAgZm9udENvbG9yID0gKGNvbXB1dGVkU3R5bGUuZmlsbCB8fCAncmdiKDAsMCwwKScpLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAoaSkge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KGkpIC8gMjU1O1xyXG4gIH0pLFxyXG4gICAgICB0ZXh0QW5jaG9yID0gY29tcHV0ZWRTdHlsZS50ZXh0QW5jaG9yO1xyXG4gIHZhciBmb250TmFtZSA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcblxyXG4gIGlmIChmb250TGlzdCkge1xyXG4gICAgdmFyIGZvbnRFeGlzdCA9IGZvbnRMaXN0Lmxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmb250KSB7XHJcbiAgICAgIHJldHVybiBmb250LmZGYW1pbHkgPT0gZm9udEZhbWlseSAmJiBmb250LmZTdHlsZSA9PSBmb250U3R5bGUgJiYgZm9udC5mV2VpZ2h0ID09IGZvbnRXZWlnaHQ7XHJcbiAgICB9KTtcclxuICAgIGlmIChmb250RXhpc3QubGVuZ3RoKSBmb250TmFtZSA9IGZvbnRFeGlzdFswXS5mTmFtZTtcclxuICB9XHJcblxyXG4gIHZhciB0ZXh0RGF0YSA9IHtcclxuICAgIGQ6IHtcclxuICAgICAgazogW3tcclxuICAgICAgICB0OiAwLFxyXG4gICAgICAgIHM6IHtcclxuICAgICAgICAgIHM6IGZvbnRTaXplLFxyXG4gICAgICAgICAgZjogZm9udE5hbWUsXHJcbiAgICAgICAgICB0OiBkb20uaW5uZXJIVE1MLFxyXG4gICAgICAgICAgajogKDAsIF9oZWxwZXIuZW5jb2RlVGV4dEFuY2hvcikodGV4dEFuY2hvciksXHJcbiAgICAgICAgICB0cjogMCxcclxuICAgICAgICAgIGxzOiAwLFxyXG4gICAgICAgICAgZmM6IGZvbnRDb2xvclxyXG4gICAgICAgIH1cclxuICAgICAgfV1cclxuICAgIH0sXHJcbiAgICBwOiB7fSxcclxuICAgIG06IHtcclxuICAgICAgYToge1xyXG4gICAgICAgIGs6IFswLCAwXVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgYTogW11cclxuICB9O1xyXG4gIHZhciBmb250RGVmID0ge1xyXG4gICAgZkZhbWlseTogZm9udEZhbWlseSxcclxuICAgIGZXZWlnaHQ6IFwiXCIuY29uY2F0KGZvbnRXZWlnaHQpLFxyXG4gICAgZlN0eWxlOiBmb250U3R5bGUsXHJcbiAgICBmTmFtZTogZm9udE5hbWVcclxuICB9O1xyXG4gIHJldHVybiBbdGV4dERhdGEsIGZvbnREZWZdO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW5kZXJJbWFnZShkb20sIGFzc2V0TGlzdCkge1xyXG4gIHZhciBpZCA9ICgwLCBfdltcImRlZmF1bHRcIl0pKCk7XHJcbiAgdmFyIGRvbUhlaWdodFZhbCA9IGRvbS5oZWlnaHQuYmFzZVZhbDtcclxuICBkb21IZWlnaHRWYWwuY29udmVydFRvU3BlY2lmaWVkVW5pdHMoU1ZHTGVuZ3RoLlNWR19MRU5HVEhUWVBFX1BYKTtcclxuICB2YXIgZG9tV2lkdGhWYWwgPSBkb20ud2lkdGguYmFzZVZhbDtcclxuICBkb21XaWR0aFZhbC5jb252ZXJ0VG9TcGVjaWZpZWRVbml0cyhTVkdMZW5ndGguU1ZHX0xFTkdUSFRZUEVfUFgpO1xyXG4gIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgY2FudmFzLndpZHRoID0gZG9tV2lkdGhWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzICogMztcclxuICBjYW52YXMuaGVpZ2h0ID0gZG9tSGVpZ2h0VmFsLnZhbHVlSW5TcGVjaWZpZWRVbml0cyAqIDM7XHJcbiAgY3R4LmRyYXdJbWFnZShkb20sIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XHJcbiAgdmFyIGRhdGFVcmwgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcblxyXG4gIGlmIChhc3NldExpc3QpIHtcclxuICAgIHZhciBhc3NldEV4aXN0ID0gYXNzZXRMaXN0LmZpbHRlcihmdW5jdGlvbiAoYXNzZXQpIHtcclxuICAgICAgcmV0dXJuIGFzc2V0LnAgPT0gZGF0YVVybDtcclxuICAgIH0pO1xyXG4gICAgaWYgKGFzc2V0RXhpc3QubGVuZ3RoKSBpZCA9IGFzc2V0RXhpc3RbMF0uaWQ7XHJcbiAgfVxyXG5cclxuICB2YXIgYXNzZXQgPSB7XHJcbiAgICBoOiBkb21IZWlnaHRWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzLFxyXG4gICAgdzogZG9tV2lkdGhWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzLFxyXG4gICAgaWQ6IGlkLFxyXG4gICAgcDogZGF0YVVybCxcclxuICAgIGU6IDFcclxuICB9O1xyXG4gIHJldHVybiBbaWQsIGFzc2V0XTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXlaVzVrWlhJdWRITWlYU3dpYm1GdFpYTWlPbHNpY21WdVpHVnlJaXdpWkc5dElpd2lZbUZ6WlVSdmJTSXNJbE5XUjFSbGVIUkZiR1Z0Wlc1MElpd2lVMVpIU1cxaFoyVkZiR1Z0Wlc1MElpd2lVMVpIUjBWc1pXMWxiblFpTENKeVpXNWtaWEpIY205MWNDSXNJbkpsYm1SbGNrZHNlWEJvSWl3aVlXUmtWbWx6ZFdGc1JXNWpiMlJwYm1keklpd2lhWFJsYlhNaUxDSnpkSGxzWlhNaUxDSnpkSEp2YTJVaUxDSndkWE5vSWl3aWRIa2lMQ0pqSWl3aWF5SXNJbk53YkdsMElpd2ljMnhwWTJVaUxDSnRZWEFpTENKeVlYY2lMQ0p3WVhKelpVbHVkQ0lzSW1OdmJtTmhkQ0lzSW04aUxDSndZWEp6WlVac2IyRjBJaXdpYzNSeWIydGxUM0JoWTJsMGVTSXNJbmNpTENKemRISnZhMlZYYVdSMGFDSXNJbXhqSWl3aWMzUnliMnRsVEdsdVpXTmhjQ0lzSW14cUlpd2ljM1J5YjJ0bFRHbHVaV3B2YVc0aUxDSm1hV3hzSWl3aVptbHNiRTl3WVdOcGRIa2lMQ0p3YjNOWUlpd2ljRzl6V1NJc0ltOXdZV05wZEhraUxDSmlZWE5sVkhKaGJuTm1iM0p0SWl3aVltRnpaVUpDYjNnaUxDSm5aWFJDUW05NElpd2ljbVZtUWtKdmVDSXNJbVVpTENKNElpd2laaUlzSW5raUxDSndJaXdpWVNJc0luTWlMQ0p5SWl3aWMyc2lMQ0p6WVNJc0ltZHliM1Z3SWl3aWFYUWlMQ0ppYlNJc0ltaGtJaXdpY0c5emRFRmpkR2x2Ym5NaUxDSndZWFJvVFdGclpYSWlMQ0oxYm1sbWIzSnRJaXdpYTNNaUxDSndZWFJvSWl3aWJtMGlMQ0pwWkNJc0luZHBibVJ2ZHlJc0ltZGxkRU52YlhCMWRHVmtVM1I1YkdVaUxDSlRWa2REYVhKamJHVkZiR1Z0Wlc1MElpd2ljM1puVEdWdVozUm9JaXdpWW1GelpWWmhiQ0lzSW1OdmJuWmxjblJVYjFOd1pXTnBabWxsWkZWdWFYUnpJaXdpVTFaSFRHVnVaM1JvSWl3aVUxWkhYMHhGVGtkVVNGUlpVRVZmVUZnaUxDSjJZV3gxWlVsdVUzQmxZMmxtYVdWa1ZXNXBkSE1pTENKUVlYUm9UV0ZyWlhJaUxDSnRiM1psVkc4aUxDSmhjbU5VYnlJc0ltTnNiM05sVUdGMGFDSXNJbE5XUjBWc2JHbHdjMlZGYkdWdFpXNTBJaXdpYldGd1MyVjVJaXdpYTJWNUlpd2ljbmdpTENKeWVTSXNJbE5XUjB4cGJtVkZiR1Z0Wlc1MElpd2llREVpTENKNE1pSXNJbmt4SWl3aWVUSWlMQ0p2Wm1aelpYUllJaXdpVFdGMGFDSXNJbTFwYmlJc0ltOW1abk5sZEZraUxDSnNhVzVsVkc4aUxDSlRWa2RRWVhSb1JXeGxiV1Z1ZENJc0luQmhkR2hFWVhSaElpd2laMlYwUVhSMGNtbGlkWFJsSWl3aVUxWkhVRzlzZVdkdmJrVnNaVzFsYm5RaUxDSlRWa2RRYjJ4NWJHbHVaVVZzWlcxbGJuUWlMQ0p3YjJsdWRITWlMQ0pzWlc1bmRHZ2lMQ0pwZEdWeVlXSnNaVkJ2YVc1MGN5SXNJa0Z5Y21GNUlpd2ljSEp2ZEc5MGVYQmxJaXdpWTJGc2JDSXNJbkpsWkhWalpTSXNJbllpTENKbWIzSkZZV05vSWl3aWFTSXNJbE5XUjFKbFkzUkZiR1Z0Wlc1MElpd2lkMmxrZEdnaUxDSm9aV2xuYUhRaUxDSmpiMjV6YjJ4bElpd2laWEp5YjNJaUxDSkZjbkp2Y2lJc0ltTm9hV3hrVG05a1pYTWlMQ0p1YjJSbElpd2lVMVpIUjNKaGNHaHBZM05GYkdWdFpXNTBJaXdpY21WdVpHVnlVR3hoYVc1SGJIbHdhQ0lzSW5SNWNHVWlMQ0poY21keklpd2ljbVZ1WkdWeVZHVjRkQ0lzSW1admJuUk1hWE4wSWl3aVkyOXRjSFYwWldSVGRIbHNaU0lzSW1admJuUlRhWHBsSWl3aVptOXVkRVpoYldsc2VTSXNJblJ5YVcwaUxDSm1iMjUwVTNSNWJHVWlMQ0ptYjI1MFYyVnBaMmgwSWl3aVptOXVkRU52Ykc5eUlpd2lkR1Y0ZEVGdVkyaHZjaUlzSW1admJuUk9ZVzFsSWl3aVptOXVkRVY0YVhOMElpd2liR2x6ZENJc0ltWnBiSFJsY2lJc0ltWnZiblFpTENKbVJtRnRhV3g1SWl3aVpsTjBlV3hsSWl3aVpsZGxhV2RvZENJc0ltWk9ZVzFsSWl3aWRHVjRkRVJoZEdFaUxDSmtJaXdpZENJc0ltbHVibVZ5U0ZSTlRDSXNJbW9pTENKMGNpSXNJbXh6SWl3aVptTWlMQ0p0SWl3aVptOXVkRVJsWmlJc0luSmxibVJsY2tsdFlXZGxJaXdpWVhOelpYUk1hWE4wSWl3aVpHOXRTR1ZwWjJoMFZtRnNJaXdpWkc5dFYybGtkR2hXWVd3aUxDSmpZVzUyWVhNaUxDSmtiMk4xYldWdWRDSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSmpkSGdpTENKblpYUkRiMjUwWlhoMElpd2laSEpoZDBsdFlXZGxJaXdpWkdGMFlWVnliQ0lzSW5SdlJHRjBZVlZTVENJc0ltRnpjMlYwUlhocGMzUWlMQ0poYzNObGRDSXNJbWdpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdPenM3T3pzN096czdPMEZCUjA4c1UwRkJVMEVzVFVGQlZDeERRVUZuUWtNc1IwRkJhRUlzUlVGQmVVTkRMRTlCUVhwRExFVkJRWEZHTzBGQlEzaEdMRTFCUVVsRUxFZEJRVWNzV1VGQldVVXNZMEZCWml4SlFVRnBRMFlzUjBGQlJ5eFpRVUZaUnl4bFFVRndSQ3hGUVVGeFJUdEJRVU5xUlN4WFFVRlBMRVZCUVZBN1FVRkRTQ3hIUVVaRUxFMUJSVThzU1VGQlNVZ3NSMEZCUnl4WlFVRlpTU3hYUVVGdVFpeEZRVUZuUXp0QlFVTnVReXhYUVVGUFF5eFhRVUZYTEVOQlFVTk1MRWRCUVVRc1JVRkJUVU1zVDBGQlRpeERRVUZzUWp0QlFVTklMRWRCUmswc1RVRkZRVHRCUVVOSUxGZEJRVTlMTEZkQlFWY3NRMEZCUTA0c1IwRkJSQ3hGUVVGTlF5eFBRVUZPTEVOQlFXeENPMEZCUTBnN1FVRkRTanM3UVVGSlJDeFRRVUZUVFN4clFrRkJWQ3hEUVVFMFFrTXNTMEZCTlVJc1JVRkJjMFJETEUxQlFYUkVMRVZCUVcxR1ZDeEhRVUZ1Uml4RlFVRTJSME1zVDBGQk4wY3NSVUZCTWtrN1FVRkRka2tzVFVGQlNWRXNUVUZCVFN4RFFVRkRReXhOUVVGUUxFbEJRV2xDUkN4TlFVRk5MRU5CUVVORExFMUJRVkFzUzBGQmEwSXNUVUZCZGtNc1JVRkJLME03UVVGRE0wTkdMRWxCUVVGQkxFdEJRVXNzUTBGQlEwY3NTVUZCVGl4RFFVRlhPMEZCUTFCRExFMUJRVUZCTEVWQlFVVXNSVUZCUlN4SlFVUkhPMEZCUlZCRExFMUJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRReXhSUVVGQlFTeERRVUZETEVWQlFVVk1MRTFCUVUwc1EwRkJRME1zVFVGQlVDeERRVUZsU3l4TFFVRm1MRU5CUVhGQ0xFZEJRWEpDTEVWQlFUQkNMRU5CUVRGQ0xFVkJRVFpDUVN4TFFVRTNRaXhEUVVGdFF5eEhRVUZ1UXl4RlFVRjNReXhEUVVGNFF5eEZRVUV5UTBFc1MwRkJNME1zUTBGQmFVUXNSMEZCYWtRc1JVRkJjMFJETEV0QlFYUkVMRU5CUVRSRUxFTkJRVFZFTEVWQlFTdEVMRU5CUVM5RUxFVkJRV3RGUXl4SFFVRnNSU3hEUVVGelJTeFZRVUZEUXl4SFFVRkVPMEZCUVVFc2FVSkJRV2xDUXl4UlFVRlJMRU5CUVVORUxFZEJRVVFzUTBGQlVpeEhRVUZuUWl4SFFVRnFRenRCUVVGQkxGTkJRWFJGTEVWQlFUUkhSU3hOUVVFMVJ5eERRVUZ0U0N4RFFVRnVTRHRCUVVSS0xFOUJSa2s3UVVGTFVFTXNUVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJRME5RTEZGQlFVRkJMRU5CUVVNc1JVRkJSVkVzVlVGQlZTeERRVUZEWWl4TlFVRk5MRU5CUVVOakxHRkJRVkFzU1VGQmQwSXNSMEZCZWtJc1EwRkJWaXhIUVVFd1F6dEJRVVE1UXl4UFFVeEpPMEZCVVZCRExFMUJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRWaXhSUVVGQlFTeERRVUZETEVWQlFVVlJMRlZCUVZVc1EwRkJRMklzVFVGQlRTeERRVUZEWjBJc1YwRkJVQ3hKUVVGelFpeEhRVUYyUWp0QlFVUmtMRTlCVWtrN1FVRlhVRU1zVFVGQlFVRXNSVUZCUlN4RlFVRkZMREpDUVVGamFrSXNUVUZCVFN4RFFVRkRhMElzWVVGQmNrSXNRMEZZUnp0QlFWbFFReXhOUVVGQlFTeEZRVUZGTEVWQlFVVXNORUpCUVdWdVFpeE5RVUZOTEVOQlFVTnZRaXhqUVVGMFFqdEJRVnBITEV0QlFWZzdRVUZqU0RzN1FVRkRSQ3hOUVVGSmNFSXNUVUZCVFN4RFFVRkRjVUlzU1VGQlVDeEpRVUZsY2tJc1RVRkJUU3hEUVVGRGNVSXNTVUZCVUN4TFFVRm5RaXhOUVVGdVF5eEZRVUV5UXp0QlFVTjJRM1JDTEVsQlFVRkJMRXRCUVVzc1EwRkJRMGNzU1VGQlRpeERRVUZYTzBGQlExQkRMRTFCUVVGQkxFVkJRVVVzUlVGQlJTeEpRVVJITzBGQlJWQkRMRTFCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUXl4UlFVRkJRU3hEUVVGRExFVkJRVVZNTEUxQlFVMHNRMEZCUTNGQ0xFbEJRVkFzUTBGQllXWXNTMEZCWWl4RFFVRnRRaXhIUVVGdVFpeEZRVUYzUWl4RFFVRjRRaXhGUVVFeVFrRXNTMEZCTTBJc1EwRkJhVU1zUjBGQmFrTXNSVUZCYzBNc1EwRkJkRU1zUlVGQmVVTkJMRXRCUVhwRExFTkJRU3RETEVkQlFTOURMRVZCUVc5RVF5eExRVUZ3UkN4RFFVRXdSQ3hEUVVFeFJDeEZRVUUyUkN4RFFVRTNSQ3hGUVVGblJVTXNSMEZCYUVVc1EwRkJiMFVzVlVGQlEwTXNSMEZCUkR0QlFVRkJMR2xDUVVGcFFrTXNVVUZCVVN4RFFVRkRSQ3hIUVVGRUxFTkJRVklzUjBGQlowSXNSMEZCYWtNN1FVRkJRU3hUUVVGd1JTeEZRVUV3UjBVc1RVRkJNVWNzUTBGQmFVZ3NRMEZCYWtnN1FVRkVTaXhQUVVaSk8wRkJTMUJETEUxQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVORFVDeFJRVUZCUVN4RFFVRkRMRVZCUVVWUkxGVkJRVlVzUTBGQlEySXNUVUZCVFN4RFFVRkRjMElzVjBGQlVDeEpRVUZ6UWl4SFFVRjJRaXhEUVVGV0xFZEJRWGRETzBGQlJEVkRPMEZCVEVrc1MwRkJXRHRCUVZOSU96dEJRVU5FTEUxQlFVbERMRWxCUVVrc1IwRkJSeXhEUVVGWU8wRkJRVUVzVFVGQlkwTXNTVUZCU1N4SFFVRkhMRU5CUVhKQ08wRkJRVUVzVFVGQmQwSkRMRTlCUVU4c1IwRkJSeXhIUVVGc1F6czdRVUZEUVN4TlFVRkpiRU1zUjBGQlJ5eEpRVUZKUXl4UFFVRllMRVZCUVc5Q08wRkJRMmhDTEZGQlFVMXJReXhoUVVGaExFZEJRVWNzYjBOQlFYVkNia01zUjBGQmRrSXNSVUZCTkVKRExFOUJRVFZDTEVOQlFYUkNPMEZCUTBFc1VVRkJUVzFETEZGQlFWRXNSMEZCUjI1RExFOUJRVThzUTBGQlEyOURMRTlCUVZJc1JVRkJha0k3UVVGRFFTeFJRVUZOUXl4UFFVRlBMRWRCUVVkMFF5eEhRVUZITEVOQlFVTnhReXhQUVVGS0xFVkJRV2hDTzBGQlEwRk1MRWxCUVVGQkxFbEJRVWtzUjBGQlIwY3NZVUZCWVN4RFFVRkRTU3hEUVVGa0xFZEJRV3RDUkN4UFFVRlBMRU5CUVVORkxFTkJRVEZDTEVkQlFUaENTaXhSUVVGUkxFTkJRVU5KTEVOQlFUbERPMEZCUTBGUUxFbEJRVUZCTEVsQlFVa3NSMEZCUjBVc1lVRkJZU3hEUVVGRFRTeERRVUZrTEVkQlFXdENTQ3hQUVVGUExFTkJRVU5KTEVOQlFURkNMRWRCUVRoQ1RpeFJRVUZSTEVOQlFVTk5MRU5CUVRsRE8wRkJRMEZTTEVsQlFVRkJMRTlCUVU4c1IwRkJSMW9zVlVGQlZTeERRVUZEWWl4TlFVRk5MRU5CUVVONVFpeFBRVUZRTEVsQlFXdENMRWRCUVc1Q0xFTkJRVllzUjBGQmIwTXNSMEZCT1VNN1FVRkRTRHM3UVVGRFJERkNMRVZCUVVGQkxFdEJRVXNzUTBGQlEwY3NTVUZCVGl4RFFVRlhPMEZCUTFCRExFbEJRVUZCTEVWQlFVVXNSVUZCUlN4SlFVUkhPMEZCUlZBclFpeEpRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkRRemRDTEUxQlFVRkJMRU5CUVVNc1JVRkJSU3hEUVVORGEwSXNTVUZFUkN4RlFVVkRReXhKUVVaRU8wRkJSRW9zUzBGR1NUdEJRVkZRVnl4SlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFF6bENMRTFCUVVGQkxFTkJRVU1zUlVGQlJTeERRVU5ETEVOQlJFUXNSVUZGUXl4RFFVWkVPMEZCUkVvc1MwRlNTVHRCUVdOUUswSXNTVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJRME12UWl4TlFVRkJRU3hEUVVGRExFVkJRVVVzUTBGRFF5eEhRVVJFTEVWQlJVTXNSMEZHUkR0QlFVUktMRXRCWkVrN1FVRnZRbEJuUXl4SlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEyaERMRTFCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVVJLTEV0QmNFSkpPMEZCZFVKUVR5eEpRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkRRMUFzVFVGQlFVRXNRMEZCUXl4RlFVRkZiMEk3UVVGRVNpeExRWFpDU1R0QlFUQkNVR0VzU1VGQlFVRXNSVUZCUlN4RlFVRkZPMEZCUTBGcVF5eE5RVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkVTQ3hMUVRGQ1J6dEJRVFpDVUd0RExFbEJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVTkJiRU1zVFVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUkVnN1FVRTNRa2NzUjBGQldEdEJRV3REU0RzN1FVRkZSQ3hUUVVGVFVpeFhRVUZVTEVOQlFYRkNUaXhIUVVGeVFpeEZRVUU0UTBNc1QwRkJPVU1zUlVGQk1FWTdRVUZEZEVZc1RVRkJUV2RFTEV0QlFXbENMRWRCUVVjN1FVRkRkRUp5UXl4SlFVRkJRU3hGUVVGRkxFVkJRVVVzU1VGRWEwSTdRVUZGZEVKelF5eEpRVUZCUVN4RlFVRkZMRVZCUVVVc1JVRkdhMEk3UVVGSGRFSkRMRWxCUVVGQkxFVkJRVVVzUlVGQlJTeERRVWhyUWp0QlFVbDBRa01zU1VGQlFVRXNSVUZCUlN4RlFVRkZPMEZCU210Q0xFZEJRVEZDT3p0QlFVMUJMRTFCUVUxRExGZEJRVmNzUjBGQlJ5eFRRVUZrUVN4WFFVRmpMRU5CUVVORExGTkJRVVFzUlVGQk1FSTdRVUZETVVOQkxFbEJRVUZCTEZOQlFWTXNRMEZCUTBNc1QwRkJWanRCUVVOQlRpeEpRVUZCUVN4TFFVRkxMRU5CUVVORExFVkJRVTRzUTBGQlZYWkRMRWxCUVZZc1EwRkJaVHRCUVVOWVF5eE5RVUZCUVN4RlFVRkZMRVZCUVVVc1NVRkVUenRCUVVWWU5FTXNUVUZCUVVFc1JVRkJSU3hGUVVGRk8wRkJRMEV4UXl4UlFVRkJRU3hEUVVGRExFVkJRVVYzUXl4VFFVRlRMRU5CUVVOSExFbEJSR0k3UVVGRlFXSXNVVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJSa2dzVDBGR1R6dEJRVTFZWXl4TlFVRkJRU3hGUVVGRkxFVkJRVVV4UkN4SFFVRkhMRU5CUVVNeVJDeEZRVTVITzBGQlQxaFFMRTFCUVVGQkxFVkJRVVVzUlVGQlJUdEJRVkJQTEV0QlFXWTdRVUZUUVN4UlFVRk5NME1zVFVGQlRTeEhRVUZIYlVRc1RVRkJUU3hEUVVGRFF5eG5Ra0ZCVUN4RFFVRjNRamRFTEVkQlFYaENMRU5CUVdZN1FVRkRRVThzU1VGQlFVRXNhMEpCUVd0Q0xFTkJRVU13UXl4TFFVRkxMRU5CUVVORExFVkJRVkFzUlVGQmFVTjZReXhOUVVGcVF5eEZRVUY1UTFRc1IwRkJla01zUlVGQk9FTkRMRTlCUVRsRExFTkJRV3hDTzBGQlEwZ3NSMEZpUkRzN1FVRmpRU3hOUVVGSlJDeEhRVUZITEZsQlFWazRSQ3huUWtGQmJrSXNSVUZCY1VNN1FVRkRha01zVVVGQlRVTXNVMEZCVXl4SFFVRkhMMFFzUjBGQlJ5eERRVUZET0VNc1EwRkJTaXhEUVVGTmEwSXNUMEZCZUVJN1FVRkRRVVFzU1VGQlFVRXNVMEZCVXl4RFFVRkRSU3gxUWtGQlZpeERRVUZyUTBNc1UwRkJVeXhEUVVGRFF5eHBRa0ZCTlVNN1FVRkRRU3hSUVVGTmNrSXNRMEZCUXl4SFFVRkhhVUlzVTBGQlV5eERRVUZEU3l4eFFrRkJjRUk3UVVGRFFTeFJRVUZOWkN4VFFVRlRMRWRCUVVjc1NVRkJTV1VzWlVGQlNpeEZRVUZzUWp0QlFVTkJaaXhKUVVGQlFTeFRRVUZUTEVOQlFVTm5RaXhOUVVGV0xFTkJRV2xDZUVJc1EwRkJha0lzUlVGQmIwSXNRMEZCY0VJN1FVRkRRVkVzU1VGQlFVRXNVMEZCVXl4RFFVRkRhVUlzUzBGQlZpeERRVUZuUW5wQ0xFTkJRV2hDTEVWQlFXMUNRU3hEUVVGdVFpeEZRVUZ6UWl4RFFVRjBRaXhGUVVGNVFpeERRVUY2UWl4RlFVRTBRaXhEUVVFMVFpeEZRVUVyUWtFc1EwRkJMMElzUlVGQmEwTXNTVUZCU1VFc1EwRkJkRU03UVVGRFFWRXNTVUZCUVVFc1UwRkJVeXhEUVVGRGFVSXNTMEZCVml4RFFVRm5RbnBDTEVOQlFXaENMRVZCUVcxQ1FTeERRVUZ1UWl4RlFVRnpRaXhEUVVGMFFpeEZRVUY1UWl4RFFVRjZRaXhGUVVFMFFpeERRVUUxUWl4RlFVRXJRa0VzUTBGQkwwSXNSVUZCYTBNc1EwRkJiRU03UVVGRFFWRXNTVUZCUVVFc1UwRkJVeXhEUVVGRGEwSXNVMEZCVmp0QlFVTkJia0lzU1VGQlFVRXNWMEZCVnl4RFFVRkRReXhUUVVGRUxFTkJRVmc3UVVGRFNDeEhRVlpFTEUxQlZVOHNTVUZCU1hSRUxFZEJRVWNzV1VGQldYbEZMR2xDUVVGdVFpeEZRVUZ6UXp0QlFVTjZReXhSUVVGTlF5eE5RVUYxUWl4SFFVRkhMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUTBGQmFFTTdPMEZCUkhsRExITkNRVVY0UWtFc1RVRkJUU3hEUVVGRGVrUXNSMEZCVUN4RFFVRlhMRlZCUVVFd1JDeEhRVUZITEVWQlFVazdRVUZETDBJc1ZVRkJUVm9zVTBGQlV5eEhRVUZITDBRc1IwRkJSeXhEUVVGRE1rVXNSMEZCUkN4RFFVRklMRU5CUVZOWUxFOUJRVE5DTzBGQlEwRkVMRTFCUVVGQkxGTkJRVk1zUTBGQlEwVXNkVUpCUVZZc1EwRkJhME5ETEZOQlFWTXNRMEZCUTBNc2FVSkJRVFZETzBGQlEwRXNZVUZCVDBvc1UwRkJVeXhEUVVGRFN5eHhRa0ZCYWtJN1FVRkRTQ3hMUVVwblFpeERRVVozUWp0QlFVRkJPMEZCUVVFc1VVRkZiRU5STEVWQlJtdERPMEZCUVVFc1VVRkZPVUpETEVWQlJqaENPenRCUVU5NlF5eFJRVUZOZGtJc1ZVRkJVeXhIUVVGSExFbEJRVWxsTEdWQlFVb3NSVUZCYkVJN08wRkJRMEZtTEVsQlFVRkJMRlZCUVZNc1EwRkJRMmRDTEUxQlFWWXNRMEZCYVVKTkxFVkJRV3BDTEVWQlFYRkNMRU5CUVhKQ096dEJRVU5CZEVJc1NVRkJRVUVzVlVGQlV5eERRVUZEYVVJc1MwRkJWaXhEUVVGblFrc3NSVUZCYUVJc1JVRkJiMEpETEVWQlFYQkNMRVZCUVhkQ0xFTkJRWGhDTEVWQlFUSkNMRU5CUVROQ0xFVkJRVGhDTEVOQlFUbENMRVZCUVdsRFJDeEZRVUZxUXl4RlFVRnhReXhKUVVGSlF5eEZRVUY2UXpzN1FVRkRRWFpDTEVsQlFVRkJMRlZCUVZNc1EwRkJRMmxDTEV0QlFWWXNRMEZCWjBKTExFVkJRV2hDTEVWQlFXOUNReXhGUVVGd1FpeEZRVUYzUWl4RFFVRjRRaXhGUVVFeVFpeERRVUV6UWl4RlFVRTRRaXhEUVVFNVFpeEZRVUZwUTBRc1JVRkJha01zUlVGQmNVTXNRMEZCY2tNN08wRkJRMEYwUWl4SlFVRkJRU3hWUVVGVExFTkJRVU5yUWl4VFFVRldPenRCUVVOQmJrSXNTVUZCUVVFc1YwRkJWeXhEUVVGRFF5eFZRVUZFTEVOQlFWZzdRVUZEU0N4SFFXSk5MRTFCWVVFc1NVRkJTWFJFTEVkQlFVY3NXVUZCV1RoRkxHTkJRVzVDTEVWQlFXMURPMEZCUTNSRExGRkJRVTFLTEU5QlFYRkRMRWRCUVVjc1EwRkJReXhKUVVGRUxFVkJRVThzU1VGQlVDeEZRVUZoTEVsQlFXSXNSVUZCYlVJc1NVRkJia0lzUTBGQk9VTTdPMEZCUkhORExIVkNRVVZpUVN4UFFVRk5MRU5CUVVONlJDeEhRVUZRTEVOQlFWY3NWVUZCUVRCRUxFZEJRVWNzUlVGQlNUdEJRVU4yUXl4VlFVRk5XaXhUUVVGVExFZEJRVWN2UkN4SFFVRkhMRU5CUVVNeVJTeEhRVUZFTEVOQlFVZ3NRMEZCVTFnc1QwRkJNMEk3UVVGRFFVUXNUVUZCUVVFc1UwRkJVeXhEUVVGRFJTeDFRa0ZCVml4RFFVRnJRME1zVTBGQlV5eERRVUZEUXl4cFFrRkJOVU03UVVGRFFTeGhRVUZQU2l4VFFVRlRMRU5CUVVOTExIRkNRVUZxUWp0QlFVTklMRXRCU25kQ0xFTkJSbUU3UVVGQlFUdEJRVUZCTEZGQlJTOUNWeXhGUVVZclFqdEJRVUZCTEZGQlJUTkNReXhGUVVZeVFqdEJRVUZCTEZGQlJYWkNReXhGUVVaMVFqdEJRVUZCTEZGQlJXNUNReXhGUVVadFFqczdRVUZQZEVNc1VVRkJUVU1zVDBGQlR5eEhRVUZIUXl4SlFVRkpMRU5CUVVORExFZEJRVXdzUTBGQlUwNHNSVUZCVkN4RlFVRmhReXhGUVVGaUxFTkJRV2hDTzBGQlEwRXNVVUZCVFUwc1QwRkJUeXhIUVVGSFJpeEpRVUZKTEVOQlFVTkRMRWRCUVV3c1EwRkJVMG9zUlVGQlZDeEZRVUZoUXl4RlFVRmlMRU5CUVdoQ096dEJRVU5CTEZGQlFVMDFRaXhYUVVGVExFZEJRVWNzU1VGQlNXVXNaVUZCU2l4RlFVRnNRanM3UVVGRFFXWXNTVUZCUVVFc1YwRkJVeXhEUVVGRFowSXNUVUZCVml4RFFVRnBRbE1zUlVGQlJTeEhRVUZIU1N4UFFVRjBRaXhGUVVFclFrWXNSVUZCUlN4SFFVRkhTeXhQUVVGd1F6czdRVUZEUVdoRExFbEJRVUZCTEZkQlFWTXNRMEZCUTJsRExFMUJRVllzUTBGQmFVSlFMRVZCUVVVc1IwRkJSMGNzVDBGQmRFSXNSVUZCSzBKRUxFVkJRVVVzUjBGQlIwa3NUMEZCY0VNN08wRkJRMEZxUXl4SlFVRkJRU3hYUVVGWExFTkJRVU5ETEZkQlFVUXNRMEZCV0R0QlFVTklMRWRCWWswc1RVRmhRU3hKUVVGSmRFUXNSMEZCUnl4WlFVRlpkMFlzWTBGQmJrSXNSVUZCYlVNN1FVRkRkRU1zVVVGQlRVTXNVVUZCVVN4SFFVRkhla1lzUjBGQlJ5eERRVUZETUVZc1dVRkJTaXhEUVVGcFFpeEhRVUZxUWl4TFFVRjVRaXhGUVVFeFF6czdRVUZEUVN4UlFVRk5jRU1zVjBGQlV5eEhRVUZITEVsQlFVbGxMR1ZCUVVvc1EwRkJZMjlDTEZGQlFXUXNRMEZCYkVJN08wRkJRMEZ3UXl4SlFVRkJRU3hYUVVGWExFTkJRVU5ETEZkQlFVUXNRMEZCV0R0QlFVTklMRWRCU2swc1RVRkpRU3hKUVVGSmRFUXNSMEZCUnl4WlFVRlpNa1lzYVVKQlFXWXNTVUZCYjBNelJpeEhRVUZITEZsQlFWazBSaXhyUWtGQmRrUXNSVUZCTWtVN1FVRkRPVVVzVVVGQlRVTXNUVUZCVFN4SFFVRkhOMFlzUjBGQlJ5eERRVUZETmtZc1RVRkJia0k3TzBGQlEwRXNVVUZCU1VFc1RVRkJUU3hEUVVGRFF5eE5RVUZZTEVWQlFXMUNPMEZCUTJZc1ZVRkJUVU1zWTBGQk1FSXNSMEZCUjBNc1MwRkJTeXhEUVVGRFF5eFRRVUZPTEVOQlFXZENha1lzUzBGQmFFSXNRMEZCYzBKclJpeEpRVUYwUWl4RFFVRXlRa3dzVFVGQk0wSXNRMEZCYmtNN08wRkJRMEVzVlVGQlRWWXNVVUZCVHl4SFFVRkhXU3hqUVVGakxFTkJRVU5KTEUxQlFXWXNRMEZCYzBJc1ZVRkJRM2hFTEVOQlFVUXNSVUZCU1hsRUxFTkJRVW83UVVGQlFTeGxRVUZWYUVJc1NVRkJTU3hEUVVGRFF5eEhRVUZNTEVOQlFWTXhReXhEUVVGVUxFVkJRVmw1UkN4RFFVRkRMRU5CUVVNMVJDeERRVUZrTEVOQlFWWTdRVUZCUVN4UFFVRjBRaXhGUVVGclJDeERRVUZzUkN4RFFVRm9RanM3UVVGRFFTeFZRVUZOT0VNc1VVRkJUeXhIUVVGSFV5eGpRVUZqTEVOQlFVTkpMRTFCUVdZc1EwRkJjMElzVlVGQlEzaEVMRU5CUVVRc1JVRkJTWGxFTEVOQlFVbzdRVUZCUVN4bFFVRlZhRUlzU1VGQlNTeERRVUZEUXl4SFFVRk1MRU5CUVZNeFF5eERRVUZVTEVWQlFWbDVSQ3hEUVVGRExFTkJRVU14UkN4RFFVRmtMRU5CUVZZN1FVRkJRU3hQUVVGMFFpeEZRVUZyUkN4RFFVRnNSQ3hEUVVGb1FqczdRVUZEUVN4VlFVRk5XU3hYUVVGVExFZEJRVWNzU1VGQlNXVXNaVUZCU2l4RlFVRnNRanM3UVVGRFFXWXNUVUZCUVVFc1YwRkJVeXhEUVVGRFowSXNUVUZCVml4RFFVRnBRblZDTEUxQlFVMHNRMEZCUXl4RFFVRkVMRU5CUVU0c1EwRkJWWEpFTEVOQlFWWXNSMEZCWXpKRExGRkJRUzlDTEVWQlFYZERWU3hOUVVGTkxFTkJRVU1zUTBGQlJDeERRVUZPTEVOQlFWVnVSQ3hEUVVGV0xFZEJRV00wUXl4UlFVRjBSRHM3UVVGRFFWTXNUVUZCUVVFc1kwRkJZeXhEUVVGRFRTeFBRVUZtTEVOQlFYVkNMRlZCUVVORUxFTkJRVVFzUlVGQlNVVXNRMEZCU2l4RlFVRlZPMEZCUXpkQ0xGbEJRVWxCTEVOQlFVTXNTVUZCU1N4RFFVRlVMRVZCUVZrN08wRkJRMXBvUkN4UlFVRkJRU3hYUVVGVExFTkJRVU5wUXl4TlFVRldMRU5CUVdsQ1lTeERRVUZETEVOQlFVTTFSQ3hEUVVGR0xFZEJRVTB5UXl4UlFVRjJRaXhGUVVGblEybENMRU5CUVVNc1EwRkJRekZFTEVOQlFVWXNSMEZCVFRSRExGRkJRWFJETzBGQlEwZ3NUMEZJUkRzN1FVRkpRU3hWUVVGSmRFWXNSMEZCUnl4WlFVRlpNa1lzYVVKQlFXNUNMRVZCUVhORE8wRkJRMnhEY2tNc1VVRkJRVUVzVjBGQlV5eERRVUZEYTBJc1UwRkJWanRCUVVOSU96dEJRVU5FYmtJc1RVRkJRVUVzVjBGQlZ5eERRVUZEUXl4WFFVRkVMRU5CUVZnN1FVRkRTRHRCUVVOS0xFZEJha0pOTEUxQmFVSkJMRWxCUVVsMFJDeEhRVUZITEZsQlFWbDFSeXhqUVVGdVFpeEZRVUZ0UXp0QlFVTjBReXhSUVVGTk4wSXNVVUZCT0VJc1IwRkJSeXhEUVVGRExFOUJRVVFzUlVGQlZTeFJRVUZXTEVOQlFYWkRPenRCUVVSelF5eDFRa0ZGWkVFc1VVRkJUU3hEUVVGRGVrUXNSMEZCVUN4RFFVRlhMRlZCUVVFd1JDeEhRVUZITEVWQlFVazdRVUZEZEVNc1ZVRkJUVm9zVTBGQlV5eEhRVUZITDBRc1IwRkJSeXhEUVVGRE1rVXNSMEZCUkN4RFFVRklMRU5CUVZOWUxFOUJRVE5DTzBGQlEwRkVMRTFCUVVGQkxGTkJRVk1zUTBGQlEwVXNkVUpCUVZZc1EwRkJhME5ETEZOQlFWTXNRMEZCUTBNc2FVSkJRVFZETzBGQlEwRXNZVUZCVDBvc1UwRkJVeXhEUVVGRFN5eHhRa0ZCYWtJN1FVRkRTQ3hMUVVwMVFpeERRVVpqTzBGQlFVRTdRVUZCUVN4UlFVVXZRbTlETEV0QlJpdENPMEZCUVVFc1VVRkZlRUpETEUxQlJuZENPenRCUVU5MFF5eFJRVUZOYmtRc1YwRkJVeXhIUVVGSExFbEJRVWxsTEdWQlFVb3NSVUZCYkVJN08wRkJRMEZtTEVsQlFVRkJMRmRCUVZNc1EwRkJRMmRDTEUxQlFWWXNRMEZCYVVJc1EwRkJha0lzUlVGQmIwSXNRMEZCY0VJN08wRkJRMEZvUWl4SlFVRkJRU3hYUVVGVExFTkJRVU5wUXl4TlFVRldMRU5CUVdsQ2FVSXNTMEZCYWtJc1JVRkJkMElzUTBGQmVFSTdPMEZCUTBGc1JDeEpRVUZCUVN4WFFVRlRMRU5CUVVOcFF5eE5RVUZXTEVOQlFXbENhVUlzUzBGQmFrSXNSVUZCZDBKRExFMUJRWGhDT3p0QlFVTkJia1FzU1VGQlFVRXNWMEZCVXl4RFFVRkRhVU1zVFVGQlZpeERRVUZwUWl4RFFVRnFRaXhGUVVGdlFtdENMRTFCUVhCQ096dEJRVU5CYmtRc1NVRkJRVUVzVjBGQlV5eERRVUZEYTBJc1UwRkJWanM3UVVGRFFXNUNMRWxCUVVGQkxGZEJRVmNzUTBGQlEwTXNWMEZCUkN4RFFVRllPMEZCUTBnc1IwRmtUU3hOUVdOQk8wRkJRMGh2UkN4SlFVRkJRU3hQUVVGUExFTkJRVU5ETEV0QlFWSXNRMEZCWXpOSExFZEJRV1E3UVVGRFFTeFZRVUZOTEVsQlFVazBSeXhMUVVGS0xFTkJRVlVzYlVSQlFWWXNRMEZCVGp0QlFVTklPenRCUVVORUxGTkJRVThzUTBGQlF6TkVMRXRCUVVRc1EwRkJVRHRCUVVOSU96dEJRVVZFTEZOQlFWTTFReXhYUVVGVUxFTkJRWEZDVEN4SFFVRnlRaXhGUVVGMVEwTXNUMEZCZGtNc1JVRkJiVVk3UVVGREwwVXNUVUZCU1U4c1MwRkJiVUlzUjBGQlJ5eEZRVUV4UWp0QlFVTkJVaXhGUVVGQlFTeEhRVUZITEVOQlFVTTJSeXhWUVVGS0xFTkJRV1ZTTEU5QlFXWXNRMEZCZFVJc1ZVRkJRVk1zU1VGQlNTeEZRVUZKTzBGQlF6TkNMRkZCUVVsQkxFbEJRVWtzV1VGQldVTXNhMEpCUVhCQ0xFVkJRWGRETzBGQlEzQkRka2NzVFVGQlFVRXNTMEZCU3l4SFFVRkhWQ3hOUVVGTkxFTkJRVU1yUnl4SlFVRkVMRVZCUVU4M1J5eFBRVUZQTEVsQlFVbEVMRWRCUVd4Q0xFTkJRVTRzUTBGQk5rSnZRaXhOUVVFM1FpeERRVUZ2UTFvc1MwRkJjRU1zUTBGQlVqdEJRVU5JTzBGQlEwb3NSMEZLUkR0QlFVdEJMRk5CUVU5QkxFdEJRVkE3UVVGRFNEczdRVUZGVFN4VFFVRlRkMGNzWjBKQlFWUXNRMEZCTUVKRExFbEJRVEZDTEVWQlFXOUVReXhKUVVGd1JDeEZRVUZuUmp0QlFVTnVSaXhOUVVGTmFrVXNTMEZCYVVJc1IwRkJSenRCUVVOMFFuSkRMRWxCUVVGQkxFVkJRVVVzUlVGQlJTeEpRVVJyUWp0QlFVVjBRbk5ETEVsQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVVOQk8wRkJRMGwwUXl4TlFVRkJRU3hGUVVGRkxFVkJRVVVzU1VGRVVqdEJRVVZKTkVNc1RVRkJRVUVzUlVGQlJTeEZRVUZGTzBGQlEwRXhReXhSUVVGQlFTeERRVUZETEVWQlFVVXNTVUZFU0R0QlFVVkJPRUlzVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUmtnc1QwRkdVanRCUVUxSlVTeE5RVUZCUVN4RlFVRkZMRVZCUVVVN1FVRk9VaXhMUVVSQkxFVkJVMEU3UVVGRFNYaERMRTFCUVVGQkxFVkJRVVVzUlVGQlJTeEpRVVJTTzBGQlJVbERMRTFCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5EUXl4UlFVRkJRU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RlFVRlBMRU5CUVZBc1JVRkJWU3hEUVVGV08wRkJSRW9zVDBGR1VEdEJRVXRKVlN4TlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFExWXNVVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zVDBGTVVEdEJRVkZKVHl4TlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFExQXNVVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJSRW9zVDBGU1VEdEJRVmRKV1N4TlFVRkJRU3hGUVVGRkxFVkJRVVVzTWtKQlFXTXNUVUZCWkN4RFFWaFNPMEZCV1VsRkxFMUJRVUZCTEVWQlFVVXNSVUZCUlN3MFFrRkJaU3hQUVVGbU8wRkJXbElzUzBGVVFTeEZRWFZDUVR0QlFVTkphRUlzVFVGQlFVRXNSVUZCUlN4RlFVRkZMRWxCUkZJN1FVRkZTVU1zVFVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUTBORExGRkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFVkJRVThzUTBGQlVDeEZRVUZWTEVOQlFWWTdRVUZFU2l4UFFVWlFPMEZCUzBsUExFMUJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVTkRVQ3hSUVVGQlFTeERRVUZETEVWQlFVVTdRVUZFU2p0QlFVeFFMRXRCZGtKQkxFVkJaME5CTzBGQlEwbEdMRTFCUVVGQkxFVkJRVVVzUlVGQlJTeEpRVVJTTzBGQlJVa3JRaXhOUVVGQlFTeERRVUZETEVWQlFVVTdRVUZEUXpkQ0xGRkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVTkRMRU5CUkVRc1JVRkZReXhEUVVaRU8wRkJSRW9zVDBGR1VEdEJRVkZKT0VJc1RVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlEwTTVRaXhSUVVGQlFTeERRVUZETEVWQlFVVXNRMEZEUXl4RFFVUkVMRVZCUlVNc1EwRkdSRHRCUVVSS0xFOUJVbEE3UVVGalNTdENMRTFCUVVGQkxFTkJRVU1zUlVGQlJUdEJRVU5ETDBJc1VVRkJRVUVzUTBGQlF5eEZRVUZGTEVOQlEwTXNSMEZFUkN4RlFVVkRMRWRCUmtRN1FVRkVTaXhQUVdSUU8wRkJiMEpKWjBNc1RVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlEwTm9ReXhSUVVGQlFTeERRVUZETEVWQlFVVTdRVUZFU2l4UFFYQkNVRHRCUVhWQ1NVOHNUVUZCUVVFc1EwRkJReXhGUVVGRk8wRkJRME5RTEZGQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVSS0xFOUJka0pRTzBGQk1FSkphVU1zVFVGQlFVRXNSVUZCUlN4RlFVRkZPMEZCUTBGcVF5eFJRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkVTQ3hQUVRGQ1VqdEJRVFpDU1d0RExFMUJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVTkJiRU1zVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUkVnN1FVRTNRbElzUzBGb1EwRXNRMEZHYTBJN1FVRnZSWFJDY1VNc1NVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQmNFVnJRanRCUVhGRmRFSkRMRWxCUVVGQkxFVkJRVVVzUlVGQlJUdEJRWEpGYTBJc1IwRkJNVUk3UVVGMVJVRXNUVUZCVFVVc1UwRkJVeXhIUVVGSExFbEJRVWxsTEdWQlFVb3NSVUZCYkVJN08wRkJRMEVzVlVGQlVUUkRMRWxCUVZJN1FVRkRTU3hUUVVGTExFMUJRVXc3UVVGRFNUTkVMRTFCUVVGQkxGTkJRVk1zUTBGQlEyZENMRTFCUVZZc1EwRkJhVUlzUTBGQmFrSXNSVUZCYjBJc1EwRkJjRUk3UVVGRFFXaENMRTFCUVVGQkxGTkJRVk1zUTBGQlEybERMRTFCUVZZc1EwRkJhVUl5UWl4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGeVFpeEZRVUV3UWl4RFFVRXhRanRCUVVOQk5VUXNUVUZCUVVFc1UwRkJVeXhEUVVGRGFVTXNUVUZCVml4RFFVRnBRakpDTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVhKQ0xFVkJRVEJDUVN4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVFNVFqdEJRVU5CTlVRc1RVRkJRVUVzVTBGQlV5eERRVUZEYVVNc1RVRkJWaXhEUVVGcFFpeERRVUZxUWl4RlFVRnZRakpDTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVhoQ08wRkJRMEUxUkN4TlFVRkJRU3hUUVVGVExFTkJRVU5yUWl4VFFVRldPMEZCUTBFN08wRkJRMG9zVTBGQlN5eFRRVUZNTzBGQlEwbHNRaXhOUVVGQlFTeFRRVUZUTEVOQlFVTm5RaXhOUVVGV0xFTkJRV2xDTkVNc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQmNrSXNSVUZCTUVJc1EwRkJNVUk3UVVGRFFUVkVMRTFCUVVGQkxGTkJRVk1zUTBGQlEybENMRXRCUVZZc1EwRkJaMEl5UXl4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGd1FpeEZRVUY1UWtFc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQk4wSXNSVUZCYTBNc1EwRkJiRU1zUlVGQmNVTXNRMEZCY2tNc1JVRkJkME1zUTBGQmVFTXNSVUZCTWtOQkxFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFTOURMRVZCUVc5RUxFbEJRVWxCTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVRWRU8wRkJRMEUxUkN4TlFVRkJRU3hUUVVGVExFTkJRVU5wUWl4TFFVRldMRU5CUVdkQ01rTXNTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJjRUlzUlVGQmVVSkJMRWxCUVVrc1EwRkJReXhEUVVGRUxFTkJRVGRDTEVWQlFXdERMRU5CUVd4RExFVkJRWEZETEVOQlFYSkRMRVZCUVhkRExFTkJRWGhETEVWQlFUSkRRU3hKUVVGSkxFTkJRVU1zUTBGQlJDeERRVUV2UXl4RlFVRnZSQ3hEUVVGd1JEdEJRVU5CTlVRc1RVRkJRVUVzVTBGQlV5eERRVUZEYTBJc1UwRkJWanRCUVZwU096dEJRV05CYkVJc1JVRkJRVUVzVTBGQlV5eERRVUZEUXl4UFFVRldPMEZCUTBOT0xFVkJRVUZCTEV0QlFVc3NRMEZCUTBNc1JVRkJUaXhEUVVGVkxFTkJRVllzUTBGQlJDeERRVUUwUWswc1JVRkJOVUlzUTBGQlowTXhReXhEUVVGb1F5eEhRVUZ2UTNkRExGTkJRVk1zUTBGQlEwY3NTVUZCT1VNN1FVRkRRU3hUUVVGUFVpeExRVUZRTzBGQlEwZzdPMEZCUlUwc1UwRkJVMnRGTEZWQlFWUXNRMEZCYjBKdVNDeEhRVUZ3UWl4RlFVRjVRMjlJTEZGQlFYcERMRVZCUVRoRk8wRkJRMnBHTEUxQlFVMURMR0ZCUVdFc1IwRkJSM2hFTEdkQ1FVRm5RaXhEUVVGRE4wUXNSMEZCUkN4RFFVRjBRenRCUVVOQkxFMUJRVTF6U0N4UlFVRlJMRWRCUVVkb1J5eFZRVUZWTEVOQlFVTXJSaXhoUVVGaExFTkJRVU5ETEZGQlFXWXNRMEZCTTBJN1FVRkJRU3hOUVVOSlF5eFZRVUZWTEVkQlFVZEdMR0ZCUVdFc1EwRkJRMFVzVlVGQlpDeERRVUY1UW5oSExFdEJRWHBDTEVOQlFTdENMRWRCUVM5Q0xFVkJRVzlETEVOQlFYQkRMRVZCUVhWRGVVY3NTVUZCZGtNc1JVRkVha0k3UVVGQlFTeE5RVVZKUXl4VFFVRlRMRWRCUVVkS0xHRkJRV0VzUTBGQlEwa3NVMEZHT1VJN1FVRkJRU3hOUVVkSlF5eFZRVUZWTEVkQlFVZE1MR0ZCUVdFc1EwRkJRMHNzVlVGSUwwSTdRVUZCUVN4TlFVbEpReXhUUVVGVExFZEJRVWNzUTBGQlEwNHNZVUZCWVN4RFFVRkRka1lzU1VGQlpDeEpRVUZ6UWl4WlFVRjJRaXhGUVVGeFEyWXNTMEZCY2tNc1EwRkJNa01zUjBGQk0wTXNSVUZCWjBRc1EwRkJhRVFzUlVGQmJVUkJMRXRCUVc1RUxFTkJRWGxFTEVkQlFYcEVMRVZCUVRoRUxFTkJRVGxFTEVWQlFXbEZRU3hMUVVGcVJTeERRVUYxUlN4SFFVRjJSU3hGUVVFMFJVVXNSMEZCTlVVc1EwRkJaMFlzVlVGQlFYRkdMRU5CUVVNN1FVRkJRU3hYUVVGSmJrWXNVVUZCVVN4RFFVRkRiVVlzUTBGQlJDeERRVUZTTEVkQlFXTXNSMEZCYkVJN1FVRkJRU3hIUVVGcVJpeERRVXBvUWp0QlFVRkJMRTFCUzBselFpeFZRVUZWTEVkQlFVZFFMR0ZCUVdFc1EwRkJRMDhzVlVGTUwwSTdRVUZOUVN4TlFVRkpReXhSUVVGUkxFZEJRVWNzYjBKQlFXWTdPMEZCUTBFc1RVRkJTVlFzVVVGQlNpeEZRVUZqTzBGQlExWXNVVUZCVFZVc1UwRkJVeXhIUVVGSFZpeFJRVUZSTEVOQlFVTlhMRWxCUVZRc1EwRkJaVU1zVFVGQlppeERRVUZ6UWl4VlFVRkJReXhKUVVGSk8wRkJRVUVzWVVGQlNVRXNTVUZCU1N4RFFVRkRReXhQUVVGTUxFbEJRV2RDV0N4VlFVRm9RaXhKUVVFNFFsVXNTVUZCU1N4RFFVRkRSU3hOUVVGTUxFbEJRV1ZXTEZOQlFUZERMRWxCUVRCRVVTeEpRVUZKTEVOQlFVTkhMRTlCUVV3c1NVRkJaMEpXTEZWQlFUbEZPMEZCUVVFc1MwRkJNVUlzUTBGQmJFSTdRVUZEUVN4UlFVRkpTU3hUUVVGVExFTkJRVU5vUXl4TlFVRmtMRVZCUTBrclFpeFJRVUZSTEVkQlFVZERMRk5CUVZNc1EwRkJReXhEUVVGRUxFTkJRVlFzUTBGQllVOHNTMEZCZUVJN1FVRkRVRHM3UVVGRFJDeE5RVUZOUXl4UlFVRnJRaXhIUVVGSE8wRkJRM1pDUXl4SlFVRkJRU3hEUVVGRExFVkJRVVU3UVVGRFEzcElMRTFCUVVGQkxFTkJRVU1zUlVGQlJTeERRVU5ETzBGQlEwa3dTQ3hSUVVGQlFTeERRVUZETEVWQlFVVXNRMEZFVUR0QlFVVkpNMFlzVVVGQlFVRXNRMEZCUXl4RlFVRkZPMEZCUTBOQkxGVkJRVUZCTEVOQlFVTXNSVUZCUlhsRkxGRkJSRW83UVVGRlF6ZEZMRlZCUVVGQkxFTkJRVU1zUlVGQlJXOUdMRkZCUmtvN1FVRkhRMWNzVlVGQlFVRXNRMEZCUXl4RlFVRkZlRWtzUjBGQlJ5eERRVUZEZVVrc1UwRklVanRCUVVsRFF5eFZRVUZCUVN4RFFVRkRMRVZCUVVVc09FSkJRV2xDWkN4VlFVRnFRaXhEUVVwS08wRkJTME5sTEZWQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVV4TU8wRkJUVU5ETEZWQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVU1TU8wRkJUME5ETEZWQlFVRkJMRVZCUVVVc1JVRkJSV3hDTzBGQlVFdzdRVUZHVUN4UFFVUkVPMEZCUkVvc1MwRkViMEk3UVVGcFFuWkNhRVlzU1VGQlFVRXNRMEZCUXl4RlFVRkZMRVZCYWtKdlFqdEJRV3RDZGtKdFJ5eEpRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRkRRMnhITEUxQlFVRkJMRU5CUVVNc1JVRkJSVHRCUVVORE9VSXNVVUZCUVVFc1EwRkJReXhGUVVGRkxFTkJRME1zUTBGRVJDeEZRVVZETEVOQlJrUTdRVUZFU2p0QlFVUktMRXRCYkVKdlFqdEJRVEJDZGtJNFFpeEpRVUZCUVN4RFFVRkRMRVZCUVVVN1FVRXhRbTlDTEVkQlFUTkNPMEZCTkVKQkxFMUJRVTF0Unl4UFFVRmpMRWRCUVVjN1FVRkRia0ppTEVsQlFVRkJMRTlCUVU4c1JVRkJSVmdzVlVGRVZUdEJRVVZ1UW1Fc1NVRkJRVUVzVDBGQlR5eFpRVUZMVml4VlFVRk1MRU5CUmxrN1FVRkhia0pUTEVsQlFVRkJMRTFCUVUwc1JVRkJSVllzVTBGSVZ6dEJRVWx1UWxrc1NVRkJRVUVzUzBGQlN5eEZRVUZGVWp0QlFVcFpMRWRCUVhaQ08wRkJUVUVzVTBGQlR5eERRVUZEVXl4UlFVRkVMRVZCUVZkVExFOUJRVmdzUTBGQlVEdEJRVU5JT3p0QlFVVk5MRk5CUVZORExGZEJRVlFzUTBGQmNVSm9TaXhIUVVGeVFpeEZRVUV5UTJsS0xGTkJRVE5ETEVWQlFUQkdPMEZCUXpkR0xFMUJRVWwwUml4RlFVRkZMRWRCUVVjc2IwSkJRVlE3UVVGRFFTeE5RVUZOZFVZc1dVRkJXU3hIUVVGSGJFb3NSMEZCUnl4RFFVRkRlVWNzVFVGQlNpeERRVUZYZWtNc1QwRkJhRU03UVVGRFFXdEdMRVZCUVVGQkxGbEJRVmtzUTBGQlEycEdMSFZDUVVGaUxFTkJRWEZEUXl4VFFVRlRMRU5CUVVORExHbENRVUV2UXp0QlFVTkJMRTFCUVUxblJpeFhRVUZYTEVkQlFVZHVTaXhIUVVGSExFTkJRVU4zUnl4TFFVRktMRU5CUVZWNFF5eFBRVUU1UWp0QlFVTkJiVVlzUlVGQlFVRXNWMEZCVnl4RFFVRkRiRVlzZFVKQlFWb3NRMEZCYjBORExGTkJRVk1zUTBGQlEwTXNhVUpCUVRsRE8wRkJRMEVzVFVGQlRXbEdMRTFCUVUwc1IwRkJSME1zVVVGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xGRkJRWFpDTEVOQlFXWTdRVUZEUVN4TlFVRk5ReXhIUVVGSExFZEJRVWRJTEUxQlFVMHNRMEZCUTBrc1ZVRkJVQ3hEUVVGclFpeEpRVUZzUWl4RFFVRmFPMEZCUlVGS0xFVkJRVUZCTEUxQlFVMHNRMEZCUXpWRExFdEJRVkFzUjBGQlpUSkRMRmRCUVZjc1EwRkJReTlGTEhGQ1FVRmFMRWRCUVc5RExFTkJRVzVFTzBGQlEwRm5SaXhGUVVGQlFTeE5RVUZOTEVOQlFVTXpReXhOUVVGUUxFZEJRV2RDZVVNc1dVRkJXU3hEUVVGRE9VVXNjVUpCUVdJc1IwRkJjVU1zUTBGQmNrUTdRVUZEUVcxR0xFVkJRVUZCTEVkQlFVY3NRMEZCUlVVc1UwRkJUQ3hEUVVGbGVrb3NSMEZCWml4RlFVRnZRaXhEUVVGd1FpeEZRVUYxUWl4RFFVRjJRaXhGUVVFd1FtOUtMRTFCUVUwc1EwRkJRelZETEV0QlFXcERMRVZCUVhkRE5FTXNUVUZCVFN4RFFVRkRNME1zVFVGQkwwTTdRVUZGUVN4TlFVRk5hVVFzVDBGQlR5eEhRVUZIVGl4TlFVRk5MRU5CUVVOUExGTkJRVkFzUlVGQmFFSTdPMEZCUTBFc1RVRkJTVllzVTBGQlNpeEZRVUZsTzBGQlExZ3NVVUZCVFZjc1ZVRkJWU3hIUVVGSFdDeFRRVUZUTEVOQlFVVnFRaXhOUVVGWUxFTkJRV3RDTEZWQlFVRTJRaXhMUVVGTE8wRkJRVUVzWVVGQlNVRXNTMEZCU3l4RFFVRkRiRWdzUTBGQlRpeEpRVUZYSzBjc1QwRkJaanRCUVVGQkxFdEJRWFpDTEVOQlFXNUNPMEZCUTBFc1VVRkJTVVVzVlVGQlZTeERRVUZET1VRc1RVRkJaaXhGUVVOSmJrTXNSVUZCUlN4SFFVRkhhVWNzVlVGQlZTeERRVUZETEVOQlFVUXNRMEZCVml4RFFVRmpha2NzUlVGQmJrSTdRVUZEVURzN1FVRkRSQ3hOUVVGTmEwY3NTMEZCU3l4SFFVRkhPMEZCUTFaRExFbEJRVUZCTEVOQlFVTXNSVUZCUlZvc1dVRkJXU3hEUVVGRE9VVXNjVUpCUkU0N1FVRkZWalZETEVsQlFVRkJMRU5CUVVNc1JVRkJSVEpJTEZkQlFWY3NRMEZCUXk5RkxIRkNRVVpNTzBGQlIxWlVMRWxCUVVGQkxFVkJRVVVzUlVGQlJrRXNSVUZJVlR0QlFVbFdhRUlzU1VGQlFVRXNRMEZCUXl4RlFVRkZLMGNzVDBGS1R6dEJRVXRXYmtnc1NVRkJRVUVzUTBGQlF5eEZRVUZGTzBGQlRFOHNSMEZCWkR0QlFVOUJMRk5CUVU4c1EwRkJRMjlDTEVWQlFVUXNSVUZCUzJ0SExFdEJRVXdzUTBGQlVEdEJRVU5JSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhzZ1IzSnZkWEJUYUdGd1pTd2dWR1Y0ZEVSaGRHRXNJRkpsWm1WeVpXNWpaVWxFTENCUVlYUm9VMmhoY0dVc0lFWnBiR3hUYUdGd1pTd2dVM1J5YjJ0bFUyaGhjR1VzSUZSeVlXNXpabTl5YlZOb1lYQmxMQ0JKYldGblpVRnpjMlYwTENCR2IyNTBNU3dnUm05dWRITXNJRUZ6YzJWMGN5QjlJR1p5YjIwZ0p5NHZZVzVwYldGMGFXOXVKMXh1YVcxd2IzSjBJSHNnVUdGMGFFMWhhMlZ5SUgwZ1puSnZiU0FuTGk5d1lYUm9KMXh1YVcxd2IzSjBJSFYxYVdRZ1puSnZiU0FuZFhWcFpDOTJOQ2RjYm1sdGNHOXlkQ0I3SUdOaGJHTjFiR0YwWlVKaGMyVlVjbUZ1YzJadmNtMHNJR1Z1WTI5a1pVeHBibVZLYjJsdUxDQmxibU52WkdWTWFXNWxRMkZ3TENCbGJtTnZaR1ZVWlhoMFFXNWphRzl5SUgwZ1puSnZiU0FuTGk5b1pXeHdaWEluWEc1Y2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlISmxibVJsY2loa2IyMDZJRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkQ3dnWW1GelpVUnZiVDg2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZENrNklFZHliM1Z3VTJoaGNHVmJYU0I3WEc0Z0lDQWdhV1lnS0dSdmJTQnBibk4wWVc1alpXOW1JRk5XUjFSbGVIUkZiR1Z0Wlc1MElIeDhJR1J2YlNCcGJuTjBZVzVqWlc5bUlGTldSMGx0WVdkbFJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxMWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHUnZiU0JwYm5OMFlXNWpaVzltSUZOV1IwZEZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaVzVrWlhKSGNtOTFjQ2hrYjIwc0lHSmhjMlZFYjIwcFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYm1SbGNrZHNlWEJvS0dSdmJTd2dZbUZ6WlVSdmJTbGNiaUFnSUNCOVhHNTlYRzVjYm5SNWNHVWdWbWx6ZFdGc1IzSnZkWEJKZEdWdElEMGdVR0YwYUZOb1lYQmxJSHdnUm1sc2JGTm9ZWEJsSUh3Z1UzUnliMnRsVTJoaGNHVWdmQ0JVY21GdWMyWnZjbTFUYUdGd1pWeHVYRzVtZFc1amRHbHZiaUJoWkdSV2FYTjFZV3hGYm1OdlpHbHVaM01vYVhSbGJYTTZJRlpwYzNWaGJFZHliM1Z3U1hSbGJWdGRMQ0J6ZEhsc1pYTTZJRU5UVTFOMGVXeGxSR1ZqYkdGeVlYUnBiMjRzSUdSdmJUODZJRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkQ3dnWW1GelpVUnZiVDg2SUZOV1IwZHlZWEJvYVdOelJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUdsbUlDaHpkSGxzWlhNdWMzUnliMnRsSUNZbUlITjBlV3hsY3k1emRISnZhMlVnSVQwOUlDZHViMjVsSnlrZ2UxeHVJQ0FnSUNBZ0lDQnBkR1Z0Y3k1d2RYTm9LSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVPaUFuYzNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWXpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJSE4wZVd4bGN5NXpkSEp2YTJVaExuTndiR2wwS0Njb0p5bGJNVjB1YzNCc2FYUW9KeWtuS1Zzd1hTNXpjR3hwZENnbkxDY3BMbk5zYVdObEtEQXNJRE1wTG0xaGNDZ29jbUYzT2lCemRISnBibWNwSUQwK0lIQmhjbk5sU1c1MEtISmhkeWtnTHlBeU5UVXBMbU52Ym1OaGRDZ3hLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc4NklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUJ3WVhKelpVWnNiMkYwS0hOMGVXeGxjeTV6ZEhKdmEyVlBjR0ZqYVhSNUlIeDhJQ2N4SnlrZ0tpQXhNREJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCM09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhem9nY0dGeWMyVkdiRzloZENoemRIbHNaWE11YzNSeWIydGxWMmxrZEdnZ2ZId2dKekVuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGpPaUJsYm1OdlpHVk1hVzVsUTJGd0tITjBlV3hsY3k1emRISnZhMlZNYVc1bFkyRndLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHFPaUJsYm1OdlpHVk1hVzVsU205cGJpaHpkSGxzWlhNdWMzUnliMnRsVEdsdVpXcHZhVzRwWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoemRIbHNaWE11Wm1sc2JDQW1KaUJ6ZEhsc1pYTXVabWxzYkNBaFBUMGdKMjV2Ym1VbktTQjdYRzRnSUNBZ0lDQWdJR2wwWlcxekxuQjFjMmdvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSGs2SUNkbWJDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCak9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhem9nYzNSNWJHVnpMbVpwYkd3aExuTndiR2wwS0Njb0p5bGJNVjB1YzNCc2FYUW9KeWtuS1Zzd1hTNXpjR3hwZENnbkxDY3BMbk5zYVdObEtEQXNJRE1wTG0xaGNDZ29jbUYzT2lCemRISnBibWNwSUQwK0lIQmhjbk5sU1c1MEtISmhkeWtnTHlBeU5UVXBMbU52Ym1OaGRDZ3hLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc4NklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUJ3WVhKelpVWnNiMkYwS0hOMGVXeGxjeTVtYVd4c1QzQmhZMmwwZVNCOGZDQW5NU2NwSUNvZ01UQXdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ2ZWeHVJQ0FnSUd4bGRDQndiM05ZSUQwZ01Dd2djRzl6V1NBOUlEQXNJRzl3WVdOcGRIa2dQU0F4TURCY2JpQWdJQ0JwWmlBb1pHOXRJQ1ltSUdKaGMyVkViMjBwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWW1GelpWUnlZVzV6Wm05eWJTQTlJR05oYkdOMWJHRjBaVUpoYzJWVWNtRnVjMlp2Y20wb1pHOXRMQ0JpWVhObFJHOXRLVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQmlZWE5sUWtKdmVDQTlJR0poYzJWRWIyMHVaMlYwUWtKdmVDZ3BYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxaa0pDYjNnZ1BTQmtiMjB1WjJWMFFrSnZlQ2dwWEc0Z0lDQWdJQ0FnSUhCdmMxZ2dQU0JpWVhObFZISmhibk5tYjNKdExtVWdLeUJ5WldaQ1FtOTRMbmdnTFNCaVlYTmxRa0p2ZUM1NFhHNGdJQ0FnSUNBZ0lIQnZjMWtnUFNCaVlYTmxWSEpoYm5ObWIzSnRMbVlnS3lCeVpXWkNRbTk0TG5rZ0xTQmlZWE5sUWtKdmVDNTVYRzRnSUNBZ0lDQWdJRzl3WVdOcGRIa2dQU0J3WVhKelpVWnNiMkYwS0hOMGVXeGxjeTV2Y0dGamFYUjVJSHg4SUNjeEp5a2dLaUF4TURCY2JpQWdJQ0I5WEc0Z0lDQWdhWFJsYlhNdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUhSNU9pQmNJblJ5WENJc1hHNGdJQ0FnSUNBZ0lIQTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHczZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjNOWUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMWxjYmlBZ0lDQWdJQ0FnSUNBZ0lGMWNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWVRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyT2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01UQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREV3TUZ4dUlDQWdJQ0FnSUNBZ0lDQWdYVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCeU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCck9pQXdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUc4NklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdzNklHOXdZV05wZEhsY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjMnM2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3M2SURCY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjMkU2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3M2SURCY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNWNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnVaR1Z5UjJ4NWNHZ29aRzl0T2lCVFZrZEhjbUZ3YUdsamMwVnNaVzFsYm5Rc0lHSmhjMlZFYjIwL09pQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUXBPaUJIY205MWNGTm9ZWEJsVzEwZ2UxeHVJQ0FnSUdOdmJuTjBJR2R5YjNWd09pQkhjbTkxY0ZOb1lYQmxJRDBnZTF4dUlDQWdJQ0FnSUNCMGVUb2dYQ0puY2x3aUxGeHVJQ0FnSUNBZ0lDQnBkRG9nVzEwc1hHNGdJQ0FnSUNBZ0lHSnRPaUF3TEZ4dUlDQWdJQ0FnSUNCb1pEb2dabUZzYzJWY2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2NHOXpkRUZqZEdsdmJuTWdQU0FvY0dGMGFFMWhhMlZ5T2lCUVlYUm9UV0ZyWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG5WdWFXWnZjbTBvS1Z4dUlDQWdJQ0FnSUNCbmNtOTFjQzVwZENFdWNIVnphQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlVG9nSjNOb0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUd0ek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhem9nY0dGMGFFMWhhMlZ5TG5CaGRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVG9nTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXRPaUJrYjIwdWFXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCb1pEb2dabUZzYzJWY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MzUjViR1Z6SUQwZ2QybHVaRzkzTG1kbGRFTnZiWEIxZEdWa1UzUjViR1VvWkc5dEtWeHVJQ0FnSUNBZ0lDQmhaR1JXYVhOMVlXeEZibU52WkdsdVozTW9aM0p2ZFhBdWFYUWhJR0Z6SUZacGMzVmhiRWR5YjNWd1NYUmxiVnRkTENCemRIbHNaWE1zSUdSdmJTd2dZbUZ6WlVSdmJTbGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHUnZiU0JwYm5OMFlXNWpaVzltSUZOV1IwTnBjbU5zWlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzNablRHVnVaM1JvSUQwZ1pHOXRMbkl1WW1GelpWWmhiRnh1SUNBZ0lDQWdJQ0J6ZG1kTVpXNW5kR2d1WTI5dWRtVnlkRlJ2VTNCbFkybG1hV1ZrVlc1cGRITW9VMVpIVEdWdVozUm9MbE5XUjE5TVJVNUhWRWhVV1ZCRlgxQllLVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlJRDBnYzNablRHVnVaM1JvTG5aaGJIVmxTVzVUY0dWamFXWnBaV1JWYm1sMGMxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYUm9UV0ZyWlhJZ1BTQnVaWGNnVUdGMGFFMWhhMlZ5S0NsY2JpQWdJQ0FnSUNBZ2NHRjBhRTFoYTJWeUxtMXZkbVZVYnloeUxDQXdLVnh1SUNBZ0lDQWdJQ0J3WVhSb1RXRnJaWEl1WVhKalZHOG9jaXdnY2l3Z01Dd2dNU3dnTUN3Z2Npd2dNaUFxSUhJcFhHNGdJQ0FnSUNBZ0lIQmhkR2hOWVd0bGNpNWhjbU5VYnloeUxDQnlMQ0F3TENBeExDQXdMQ0J5TENBd0tWeHVJQ0FnSUNBZ0lDQndZWFJvVFdGclpYSXVZMnh2YzJWUVlYUm9LQ2xjYmlBZ0lDQWdJQ0FnY0c5emRFRmpkR2x2Ym5Nb2NHRjBhRTFoYTJWeUtWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pHOXRJR2x1YzNSaGJtTmxiMllnVTFaSFJXeHNhWEJ6WlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYldGd1MyVjVPaUFvSjNKNEp5QjhJQ2R5ZVNjcFcxMGdQU0JiSjNKNEp5d2dKM0o1SjExY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnVzNKNExDQnllVjBnUFNCdFlYQkxaWGt1YldGd0tHdGxlU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnpkbWRNWlc1bmRHZ2dQU0JrYjIxYmEyVjVYUzVpWVhObFZtRnNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRtZE1aVzVuZEdndVkyOXVkbVZ5ZEZSdlUzQmxZMmxtYVdWa1ZXNXBkSE1vVTFaSFRHVnVaM1JvTGxOV1IxOU1SVTVIVkVoVVdWQkZYMUJZS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITjJaMHhsYm1kMGFDNTJZV3gxWlVsdVUzQmxZMmxtYVdWa1ZXNXBkSE5jYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGMGFFMWhhMlZ5SUQwZ2JtVjNJRkJoZEdoTllXdGxjaWdwWEc0Z0lDQWdJQ0FnSUhCaGRHaE5ZV3RsY2k1dGIzWmxWRzhvY25nc0lEQXBYRzRnSUNBZ0lDQWdJSEJoZEdoTllXdGxjaTVoY21OVWJ5aHllQ3dnY25rc0lEQXNJREVzSURBc0lISjRMQ0F5SUNvZ2Nua3BYRzRnSUNBZ0lDQWdJSEJoZEdoTllXdGxjaTVoY21OVWJ5aHllQ3dnY25rc0lEQXNJREVzSURBc0lISjRMQ0F3S1Z4dUlDQWdJQ0FnSUNCd1lYUm9UV0ZyWlhJdVkyeHZjMlZRWVhSb0tDbGNiaUFnSUNBZ0lDQWdjRzl6ZEVGamRHbHZibk1vY0dGMGFFMWhhMlZ5S1Z4dUlDQWdJSDBnWld4elpTQnBaaUFvWkc5dElHbHVjM1JoYm1ObGIyWWdVMVpIVEdsdVpVVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXRndTMlY1T2lBb0ozZ3hKeUI4SUNkNE1pY2dmQ0FuZVRFbklId2dKM2t5SnlsYlhTQTlJRnNuZURFbkxDQW5lREluTENBbmVURW5MQ0FuZVRJblhWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCYmVERXNJSGd5TENCNU1Td2dlVEpkSUQwZ2JXRndTMlY1TG0xaGNDaHJaWGtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjM1puVEdWdVozUm9JRDBnWkc5dFcydGxlVjB1WW1GelpWWmhiRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzWm5UR1Z1WjNSb0xtTnZiblpsY25SVWIxTndaV05wWm1sbFpGVnVhWFJ6S0ZOV1IweGxibWQwYUM1VFZrZGZURVZPUjFSSVZGbFFSVjlRV0NsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkbWRNWlc1bmRHZ3VkbUZzZFdWSmJsTndaV05wWm1sbFpGVnVhWFJ6WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc5bVpuTmxkRmdnUFNCTllYUm9MbTFwYmloNE1Td2dlRElwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzltWm5ObGRGa2dQU0JOWVhSb0xtMXBiaWg1TVN3Z2VUSXBYRzRnSUNBZ0lDQWdJR052Ym5OMElIQmhkR2hOWVd0bGNpQTlJRzVsZHlCUVlYUm9UV0ZyWlhJb0tWeHVJQ0FnSUNBZ0lDQndZWFJvVFdGclpYSXViVzkyWlZSdktIZ3hJQzBnYjJabWMyVjBXQ3dnZVRFZ0xTQnZabVp6WlhSWktWeHVJQ0FnSUNBZ0lDQndZWFJvVFdGclpYSXViR2x1WlZSdktIZ3lJQzBnYjJabWMyVjBXQ3dnZVRJZ0xTQnZabVp6WlhSWktWeHVJQ0FnSUNBZ0lDQndiM04wUVdOMGFXOXVjeWh3WVhSb1RXRnJaWElwWEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hrYjIwZ2FXNXpkR0Z1WTJWdlppQlRWa2RRWVhSb1JXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYUm9SR0YwWVNBOUlHUnZiUzVuWlhSQmRIUnlhV0oxZEdVb0oyUW5LU0I4ZkNBbkoxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYUm9UV0ZyWlhJZ1BTQnVaWGNnVUdGMGFFMWhhMlZ5S0hCaGRHaEVZWFJoS1Z4dUlDQWdJQ0FnSUNCd2IzTjBRV04wYVc5dWN5aHdZWFJvVFdGclpYSXBYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGtiMjBnYVc1emRHRnVZMlZ2WmlCVFZrZFFiMng1WjI5dVJXeGxiV1Z1ZENCOGZDQmtiMjBnYVc1emRHRnVZMlZ2WmlCVFZrZFFiMng1YkdsdVpVVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHOXBiblJ6SUQwZ1pHOXRMbkJ2YVc1MGMxeHVJQ0FnSUNBZ0lDQnBaaUFvY0c5cGJuUnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYVhSbGNtRmliR1ZRYjJsdWRITTZJRVJQVFZCdmFXNTBXMTBnUFNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNod2IybHVkSE1wWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdlptWnpaWFJZSUQwZ2FYUmxjbUZpYkdWUWIybHVkSE11Y21Wa2RXTmxLQ2h3TENCMktTQTlQaUJOWVhSb0xtMXBiaWh3TENCMkxuZ3BMQ0F3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2IyWm1jMlYwV1NBOUlHbDBaWEpoWW14bFVHOXBiblJ6TG5KbFpIVmpaU2dvY0N3Z2Rpa2dQVDRnVFdGMGFDNXRhVzRvY0N3Z2RpNTVLU3dnTUNsY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQmhkR2hOWVd0bGNpQTlJRzVsZHlCUVlYUm9UV0ZyWlhJb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG0xdmRtVlVieWh3YjJsdWRITmJNRjB1ZUNBdElHOW1abk5sZEZnc0lIQnZhVzUwYzFzd1hTNTVJQzBnYjJabWMyVjBXU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaWEpoWW14bFVHOXBiblJ6TG1admNrVmhZMmdvS0hZc0lHa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0E4UFNBd0tTQnlaWFIxY201Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9UV0ZyWlhJdWJHbHVaVlJ2S0hZdWVDQXRJRzltWm5ObGRGZ3NJSFl1ZVNBdElHOW1abk5sZEZrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSdmJTQnBibk4wWVc1alpXOW1JRk5XUjFCdmJIbG5iMjVGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG1Oc2IzTmxVR0YwYUNncFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM04wUVdOMGFXOXVjeWh3WVhSb1RXRnJaWElwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dSdmJTQnBibk4wWVc1alpXOW1JRk5XUjFKbFkzUkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHMWhjRXRsZVRvZ0tDZDNhV1IwYUNjZ2ZDQW5hR1ZwWjJoMEp5bGJYU0E5SUZzbmQybGtkR2duTENBbmFHVnBaMmgwSjExY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnVzNkcFpIUm9MQ0JvWldsbmFIUmRJRDBnYldGd1MyVjVMbTFoY0NoclpYa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MzWm5UR1Z1WjNSb0lEMGdaRzl0VzJ0bGVWMHVZbUZ6WlZaaGJGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNablRHVnVaM1JvTG1OdmJuWmxjblJVYjFOd1pXTnBabWxsWkZWdWFYUnpLRk5XUjB4bGJtZDBhQzVUVmtkZlRFVk9SMVJJVkZsUVJWOVFXQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCemRtZE1aVzVuZEdndWRtRnNkV1ZKYmxOd1pXTnBabWxsWkZWdWFYUnpYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJoZEdoTllXdGxjaUE5SUc1bGR5QlFZWFJvVFdGclpYSW9LVnh1SUNBZ0lDQWdJQ0J3WVhSb1RXRnJaWEl1Ylc5MlpWUnZLREFzSURBcFhHNGdJQ0FnSUNBZ0lIQmhkR2hOWVd0bGNpNXNhVzVsVkc4b2QybGtkR2dzSURBcFhHNGdJQ0FnSUNBZ0lIQmhkR2hOWVd0bGNpNXNhVzVsVkc4b2QybGtkR2dzSUdobGFXZG9kQ2xjYmlBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG14cGJtVlVieWd3TENCb1pXbG5hSFFwWEc0Z0lDQWdJQ0FnSUhCaGRHaE5ZV3RsY2k1amJHOXpaVkJoZEdnb0tWeHVJQ0FnSUNBZ0lDQndiM04wUVdOMGFXOXVjeWh3WVhSb1RXRnJaWElwWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2loa2IyMHBYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25UbThnYVcxd2JHVnRaVzUwWVhScGIyNGdabTkxYm1RZ1ptOXlJSE4yWnlCbmNtRndhR2xqY3lCbGJHVnRaVzUwTGljcFhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmJaM0p2ZFhCZFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhKbGJtUmxja2R5YjNWd0tHUnZiVG9nVTFaSFIwVnNaVzFsYm5Rc0lHSmhjMlZFYjIwL09pQlRWa2RIY21Gd2FHbGpjMFZzWlcxbGJuUXBPaUJIY205MWNGTm9ZWEJsVzEwZ2UxeHVJQ0FnSUd4bGRDQnBkR1Z0Y3pvZ1IzSnZkWEJUYUdGd1pWdGRJRDBnVzExY2JpQWdJQ0JrYjIwdVkyaHBiR1JPYjJSbGN5NW1iM0pGWVdOb0tHNXZaR1VnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYm05a1pTQnBibk4wWVc1alpXOW1JRk5XUjBkeVlYQm9hV056Uld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhWFJsYlhNZ1BTQnlaVzVrWlhJb2JtOWtaU3dnWW1GelpVUnZiU0I4ZkNCa2IyMHBMbU52Ym1OaGRDaHBkR1Z0Y3lsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNGdJQ0FnY21WMGRYSnVJR2wwWlcxelhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5Wlc1a1pYSlFiR0ZwYmtkc2VYQm9LSFI1Y0dVNklDZHlaV04wSnlCOElDZGxiR3hwY0hObEp5d2dZWEpuY3pvZ2JuVnRZbVZ5VzEwcE9pQkhjbTkxY0ZOb1lYQmxJSHRjYmlBZ0lDQmpiMjV6ZENCbmNtOTFjRG9nUjNKdmRYQlRhR0Z3WlNBOUlIdGNiaUFnSUNBZ0lDQWdkSGs2SUZ3aVozSmNJaXhjYmlBZ0lDQWdJQ0FnYVhRNklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVUb2dKM05vSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcmN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCck9pQnVkV3hzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhPaUF3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pEb2dabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGs2SUNkemRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUJiTVN3Z01Td2dNU3dnTVYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIYzZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F6b2dNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyT2lBeE1EQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hqT2lCbGJtTnZaR1ZNYVc1bFEyRndLQ2RpZFhSMEp5a3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR282SUdWdVkyOWtaVXhwYm1WS2IybHVLQ2R0YVhSbGNpY3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNU9pQW5abXduTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ1d6RXNJREVzSURFc0lERmRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3M2SURFd01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhrNklDZDBjaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0RvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyT2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JkWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdzNklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2F6b2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNVEF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTVRBd1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYXpvZ01GeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJPaUF4TURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnJPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHczZJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOaE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdzNklEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGMHNYRzRnSUNBZ0lDQWdJR0p0T2lBd0xGeHVJQ0FnSUNBZ0lDQm9aRG9nWm1Gc2MyVmNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdjR0YwYUUxaGEyVnlJRDBnYm1WM0lGQmhkR2hOWVd0bGNpZ3BYRzRnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM0psWTNRbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG0xdmRtVlVieWd3TENBd0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG14cGJtVlVieWhoY21keld6QmRMQ0F3S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjR0YwYUUxaGEyVnlMbXhwYm1WVWJ5aGhjbWR6V3pCZExDQmhjbWR6V3pGZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFFMWhhMlZ5TG14cGJtVlVieWd3TENCaGNtZHpXekZkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjR0YwYUUxaGEyVnlMbU5zYjNObFVHRjBhQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJQ0FnSUNCallYTmxJQ2RsYkd4cGNITmxKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkR2hOWVd0bGNpNXRiM1psVkc4b1lYSm5jMXN3WFN3Z01DbGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRHaE5ZV3RsY2k1aGNtTlVieWhoY21keld6QmRMQ0JoY21keld6RmRMQ0F3TENBeExDQXdMQ0JoY21keld6QmRMQ0F5SUNvZ1lYSm5jMXN4WFNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEJoZEdoTllXdGxjaTVoY21OVWJ5aGhjbWR6V3pCZExDQmhjbWR6V3pGZExDQXdMQ0F4TENBd0xDQmhjbWR6V3pCZExDQXdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRjBhRTFoYTJWeUxtTnNiM05sVUdGMGFDZ3BYRzRnSUNBZ2ZWeHVJQ0FnSUhCaGRHaE5ZV3RsY2k1MWJtbG1iM0p0S0NrN1hHNGdJQ0FnS0dkeWIzVndMbWwwSVZzd1hTQmhjeUJRWVhSb1UyaGhjR1VwTG10eklTNXJJRDBnY0dGMGFFMWhhMlZ5TG5CaGRHaGNiaUFnSUNCeVpYUjFjbTRnWjNKdmRYQmNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhKbGJtUmxjbFJsZUhRb1pHOXRPaUJUVmtkVVpYaDBSV3hsYldWdWRDd2dabTl1ZEV4cGMzUS9PaUJHYjI1MGN5azZJRnRVWlhoMFJHRjBZU3dnUm05dWRERmRJSHRjYmlBZ0lDQmpiMjV6ZENCamIyMXdkWFJsWkZOMGVXeGxJRDBnWjJWMFEyOXRjSFYwWldSVGRIbHNaU2hrYjIwcFhHNGdJQ0FnWTI5dWMzUWdabTl1ZEZOcGVtVWdQU0J3WVhKelpVWnNiMkYwS0dOdmJYQjFkR1ZrVTNSNWJHVXVabTl1ZEZOcGVtVXBMRnh1SUNBZ0lDQWdJQ0JtYjI1MFJtRnRhV3g1SUQwZ1kyOXRjSFYwWldSVGRIbHNaUzVtYjI1MFJtRnRhV3g1TG5Od2JHbDBLQ2NzSnlsYk1GMHVkSEpwYlNncExGeHVJQ0FnSUNBZ0lDQm1iMjUwVTNSNWJHVWdQU0JqYjIxd2RYUmxaRk4wZVd4bExtWnZiblJUZEhsc1pTeGNiaUFnSUNBZ0lDQWdabTl1ZEZkbGFXZG9kQ0E5SUdOdmJYQjFkR1ZrVTNSNWJHVXVabTl1ZEZkbGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnWm05dWRFTnZiRzl5SUQwZ0tHTnZiWEIxZEdWa1UzUjViR1V1Wm1sc2JDQjhmQ0FuY21kaUtEQXNNQ3d3S1NjcExuTndiR2wwS0Njb0p5bGJNVjB1YzNCc2FYUW9KeWtuS1Zzd1hTNXpjR3hwZENnbkxDY3BMbTFoY0NocElEMCtJSEJoY25ObFNXNTBLR2twSUM4Z01qVTFLU3hjYmlBZ0lDQWdJQ0FnZEdWNGRFRnVZMmh2Y2lBOUlHTnZiWEIxZEdWa1UzUjViR1V1ZEdWNGRFRnVZMmh2Y2x4dUlDQWdJR3hsZENCbWIyNTBUbUZ0WlNBOUlIVjFhV1FvS1Z4dUlDQWdJR2xtSUNobWIyNTBUR2x6ZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbWIyNTBSWGhwYzNRZ1BTQm1iMjUwVEdsemRDNXNhWE4wSVM1bWFXeDBaWElvWm05dWRDQTlQaUJtYjI1MExtWkdZVzFwYkhrZ1BUMGdabTl1ZEVaaGJXbHNlU0FtSmlCbWIyNTBMbVpUZEhsc1pTQTlQU0JtYjI1MFUzUjViR1VnSmlZZ1ptOXVkQzVtVjJWcFoyaDBJRDA5SUdadmJuUlhaV2xuYUhRcFhHNGdJQ0FnSUNBZ0lHbG1JQ2htYjI1MFJYaHBjM1F1YkdWdVozUm9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXVkRTVoYldVZ1BTQm1iMjUwUlhocGMzUmJNRjB1Wms1aGJXVWhYRzRnSUNBZ2ZWeHVJQ0FnSUdOdmJuTjBJSFJsZUhSRVlYUmhPaUJVWlhoMFJHRjBZU0E5SUh0Y2JpQWdJQ0FnSUNBZ1pEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2F6b2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2REb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2N6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjem9nWm05dWRGTnBlbVVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtT2lCbWIyNTBUbUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRNklHUnZiUzVwYm01bGNraFVUVXdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JxT2lCbGJtTnZaR1ZVWlhoMFFXNWphRzl5S0hSbGVIUkJibU5vYjNJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzY3pvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmpPaUJtYjI1MFEyOXNiM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUYxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjRG9nZTMwc1hHNGdJQ0FnSUNBZ0lHMDZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyT2lCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR0U2SUZ0ZFhHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElHWnZiblJFWldZNklFWnZiblF4SUQwZ2UxeHVJQ0FnSUNBZ0lDQm1SbUZ0YVd4NU9pQm1iMjUwUm1GdGFXeDVMRnh1SUNBZ0lDQWdJQ0JtVjJWcFoyaDBPaUJnSkh0bWIyNTBWMlZwWjJoMGZXQXNYRzRnSUNBZ0lDQWdJR1pUZEhsc1pUb2dabTl1ZEZOMGVXeGxMRnh1SUNBZ0lDQWdJQ0JtVG1GdFpUb2dabTl1ZEU1aGJXVmNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRnQwWlhoMFJHRjBZU3dnWm05dWRFUmxabDFjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlISmxibVJsY2tsdFlXZGxLR1J2YlRvZ1UxWkhTVzFoWjJWRmJHVnRaVzUwTENCaGMzTmxkRXhwYzNRL09pQkJjM05sZEhNcE9pQmJVbVZtWlhKbGJtTmxTVVFzSUVsdFlXZGxRWE56WlhSZElIdGNiaUFnSUNCc1pYUWdhV1FnUFNCMWRXbGtLQ2xjYmlBZ0lDQmpiMjV6ZENCa2IyMUlaV2xuYUhSV1lXd2dQU0JrYjIwdWFHVnBaMmgwTG1KaGMyVldZV3hjYmlBZ0lDQmtiMjFJWldsbmFIUldZV3d1WTI5dWRtVnlkRlJ2VTNCbFkybG1hV1ZrVlc1cGRITW9VMVpIVEdWdVozUm9MbE5XUjE5TVJVNUhWRWhVV1ZCRlgxQllLVnh1SUNBZ0lHTnZibk4wSUdSdmJWZHBaSFJvVm1Gc0lEMGdaRzl0TG5kcFpIUm9MbUpoYzJWV1lXeGNiaUFnSUNCa2IyMVhhV1IwYUZaaGJDNWpiMjUyWlhKMFZHOVRjR1ZqYVdacFpXUlZibWwwY3loVFZrZE1aVzVuZEdndVUxWkhYMHhGVGtkVVNGUlpVRVZmVUZncFhHNGdJQ0FnWTI5dWMzUWdZMkZ1ZG1GeklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblkyRnVkbUZ6SnlsY2JpQWdJQ0JqYjI1emRDQmpkSGdnUFNCallXNTJZWE11WjJWMFEyOXVkR1Y0ZENnbk1tUW5LVnh1WEc0Z0lDQWdZMkZ1ZG1GekxuZHBaSFJvSUQwZ1pHOXRWMmxrZEdoV1lXd3VkbUZzZFdWSmJsTndaV05wWm1sbFpGVnVhWFJ6SUNvZ00xeHVJQ0FnSUdOaGJuWmhjeTVvWldsbmFIUWdQU0JrYjIxSVpXbG5hSFJXWVd3dWRtRnNkV1ZKYmxOd1pXTnBabWxsWkZWdWFYUnpJQ29nTTF4dUlDQWdJR04wZUNFdVpISmhkMGx0WVdkbEtHUnZiU3dnTUN3Z01Dd2dZMkZ1ZG1GekxuZHBaSFJvTENCallXNTJZWE11YUdWcFoyaDBLVnh1WEc0Z0lDQWdZMjl1YzNRZ1pHRjBZVlZ5YkNBOUlHTmhiblpoY3k1MGIwUmhkR0ZWVWt3b0tWeHVJQ0FnSUdsbUlDaGhjM05sZEV4cGMzUXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZWE56WlhSRmVHbHpkQ0E5SUdGemMyVjBUR2x6ZENFdVptbHNkR1Z5S0dGemMyVjBJRDArSUdGemMyVjBMbkFnUFQwZ1pHRjBZVlZ5YkNsY2JpQWdJQ0FnSUNBZ2FXWWdLR0Z6YzJWMFJYaHBjM1F1YkdWdVozUm9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUWdQU0JoYzNObGRFVjRhWE4wV3pCZExtbGtJVnh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0JoYzNObGRDQTlJSHRjYmlBZ0lDQWdJQ0FnYURvZ1pHOXRTR1ZwWjJoMFZtRnNMblpoYkhWbFNXNVRjR1ZqYVdacFpXUlZibWwwY3l4Y2JpQWdJQ0FnSUNBZ2R6b2daRzl0VjJsa2RHaFdZV3d1ZG1Gc2RXVkpibE53WldOcFptbGxaRlZ1YVhSekxGeHVJQ0FnSUNBZ0lDQnBaQ3hjYmlBZ0lDQWdJQ0FnY0RvZ1pHRjBZVlZ5YkN4Y2JpQWdJQ0FnSUNBZ1pUb2dNVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnVzJsa0xDQmhjM05sZEYxY2JuMGlYWDA9IiwiLypcbiAqIEdlbmVyYXRlZCBieSBQRUcuanMgMC4xMC4wLlxuICpcbiAqIGh0dHA6Ly9wZWdqcy5vcmcvXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIHBlZyRzdWJjbGFzcyhjaGlsZCwgcGFyZW50KSB7XG4gIGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfVxuICBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7XG4gIGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7XG59XG5cbmZ1bmN0aW9uIHBlZyRTeW50YXhFcnJvcihtZXNzYWdlLCBleHBlY3RlZCwgZm91bmQsIGxvY2F0aW9uKSB7XG4gIHRoaXMubWVzc2FnZSAgPSBtZXNzYWdlO1xuICB0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gIHRoaXMuZm91bmQgICAgPSBmb3VuZDtcbiAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICB0aGlzLm5hbWUgICAgID0gXCJTeW50YXhFcnJvclwiO1xuXG4gIGlmICh0eXBlb2YgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHBlZyRTeW50YXhFcnJvcik7XG4gIH1cbn1cblxucGVnJHN1YmNsYXNzKHBlZyRTeW50YXhFcnJvciwgRXJyb3IpO1xuXG5wZWckU3ludGF4RXJyb3IuYnVpbGRNZXNzYWdlID0gZnVuY3Rpb24oZXhwZWN0ZWQsIGZvdW5kKSB7XG4gIHZhciBERVNDUklCRV9FWFBFQ1RBVElPTl9GTlMgPSB7XG4gICAgICAgIGxpdGVyYWw6IGZ1bmN0aW9uKGV4cGVjdGF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIFwiXFxcIlwiICsgbGl0ZXJhbEVzY2FwZShleHBlY3RhdGlvbi50ZXh0KSArIFwiXFxcIlwiO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiY2xhc3NcIjogZnVuY3Rpb24oZXhwZWN0YXRpb24pIHtcbiAgICAgICAgICB2YXIgZXNjYXBlZFBhcnRzID0gXCJcIixcbiAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBleHBlY3RhdGlvbi5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZXNjYXBlZFBhcnRzICs9IGV4cGVjdGF0aW9uLnBhcnRzW2ldIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICAgICAgPyBjbGFzc0VzY2FwZShleHBlY3RhdGlvbi5wYXJ0c1tpXVswXSkgKyBcIi1cIiArIGNsYXNzRXNjYXBlKGV4cGVjdGF0aW9uLnBhcnRzW2ldWzFdKVxuICAgICAgICAgICAgICA6IGNsYXNzRXNjYXBlKGV4cGVjdGF0aW9uLnBhcnRzW2ldKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gXCJbXCIgKyAoZXhwZWN0YXRpb24uaW52ZXJ0ZWQgPyBcIl5cIiA6IFwiXCIpICsgZXNjYXBlZFBhcnRzICsgXCJdXCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYW55OiBmdW5jdGlvbihleHBlY3RhdGlvbikge1xuICAgICAgICAgIHJldHVybiBcImFueSBjaGFyYWN0ZXJcIjtcbiAgICAgICAgfSxcblxuICAgICAgICBlbmQ6IGZ1bmN0aW9uKGV4cGVjdGF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZW5kIG9mIGlucHV0XCI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3RoZXI6IGZ1bmN0aW9uKGV4cGVjdGF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGV4cGVjdGF0aW9uLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gIGZ1bmN0aW9uIGhleChjaCkge1xuICAgIHJldHVybiBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGl0ZXJhbEVzY2FwZShzKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAucmVwbGFjZSgvXCIvZywgICdcXFxcXCInKVxuICAgICAgLnJlcGxhY2UoL1xcMC9nLCAnXFxcXDAnKVxuICAgICAgLnJlcGxhY2UoL1xcdC9nLCAnXFxcXHQnKVxuICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxuICAgICAgLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKVxuICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwRl0vZywgICAgICAgICAgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxceDAnICsgaGV4KGNoKTsgfSlcbiAgICAgIC5yZXBsYWNlKC9bXFx4MTAtXFx4MUZcXHg3Ri1cXHg5Rl0vZywgZnVuY3Rpb24oY2gpIHsgcmV0dXJuICdcXFxceCcgICsgaGV4KGNoKTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc0VzY2FwZShzKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAucmVwbGFjZSgvXFxdL2csICdcXFxcXScpXG4gICAgICAucmVwbGFjZSgvXFxeL2csICdcXFxcXicpXG4gICAgICAucmVwbGFjZSgvLS9nLCAgJ1xcXFwtJylcbiAgICAgIC5yZXBsYWNlKC9cXDAvZywgJ1xcXFwwJylcbiAgICAgIC5yZXBsYWNlKC9cXHQvZywgJ1xcXFx0JylcbiAgICAgIC5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJylcbiAgICAgIC5yZXBsYWNlKC9cXHIvZywgJ1xcXFxyJylcbiAgICAgIC5yZXBsYWNlKC9bXFx4MDAtXFx4MEZdL2csICAgICAgICAgIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHgwJyArIGhleChjaCk7IH0pXG4gICAgICAucmVwbGFjZSgvW1xceDEwLVxceDFGXFx4N0YtXFx4OUZdL2csIGZ1bmN0aW9uKGNoKSB7IHJldHVybiAnXFxcXHgnICArIGhleChjaCk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzY3JpYmVFeHBlY3RhdGlvbihleHBlY3RhdGlvbikge1xuICAgIHJldHVybiBERVNDUklCRV9FWFBFQ1RBVElPTl9GTlNbZXhwZWN0YXRpb24udHlwZV0oZXhwZWN0YXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzY3JpYmVFeHBlY3RlZChleHBlY3RlZCkge1xuICAgIHZhciBkZXNjcmlwdGlvbnMgPSBuZXcgQXJyYXkoZXhwZWN0ZWQubGVuZ3RoKSxcbiAgICAgICAgaSwgajtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBleHBlY3RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRpb25zW2ldID0gZGVzY3JpYmVFeHBlY3RhdGlvbihleHBlY3RlZFtpXSk7XG4gICAgfVxuXG4gICAgZGVzY3JpcHRpb25zLnNvcnQoKTtcblxuICAgIGlmIChkZXNjcmlwdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChpID0gMSwgaiA9IDE7IGkgPCBkZXNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGRlc2NyaXB0aW9uc1tpIC0gMV0gIT09IGRlc2NyaXB0aW9uc1tpXSkge1xuICAgICAgICAgIGRlc2NyaXB0aW9uc1tqXSA9IGRlc2NyaXB0aW9uc1tpXTtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRlc2NyaXB0aW9ucy5sZW5ndGggPSBqO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZGVzY3JpcHRpb25zLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb25zWzBdO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbnNbMF0gKyBcIiBvciBcIiArIGRlc2NyaXB0aW9uc1sxXTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9ucy5zbGljZSgwLCAtMSkuam9pbihcIiwgXCIpXG4gICAgICAgICAgKyBcIiwgb3IgXCJcbiAgICAgICAgICArIGRlc2NyaXB0aW9uc1tkZXNjcmlwdGlvbnMubGVuZ3RoIC0gMV07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzY3JpYmVGb3VuZChmb3VuZCkge1xuICAgIHJldHVybiBmb3VuZCA/IFwiXFxcIlwiICsgbGl0ZXJhbEVzY2FwZShmb3VuZCkgKyBcIlxcXCJcIiA6IFwiZW5kIG9mIGlucHV0XCI7XG4gIH1cblxuICByZXR1cm4gXCJFeHBlY3RlZCBcIiArIGRlc2NyaWJlRXhwZWN0ZWQoZXhwZWN0ZWQpICsgXCIgYnV0IFwiICsgZGVzY3JpYmVGb3VuZChmb3VuZCkgKyBcIiBmb3VuZC5cIjtcbn07XG5cbmZ1bmN0aW9uIHBlZyRwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9O1xuXG4gIHZhciBwZWckRkFJTEVEID0ge30sXG5cbiAgICAgIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMgPSB7IHN2Z19wYXRoOiBwZWckcGFyc2VzdmdfcGF0aCB9LFxuICAgICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uICA9IHBlZyRwYXJzZXN2Z19wYXRoLFxuXG4gICAgICBwZWckYzAgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gW107XG4gICAgICAgICAgZm9yICh2YXIgY21kcz1bXSxpPTA7aTxkYXRhLmxlbmd0aDtpKyspIGNtZHM9Y21kcy5jb25jYXQuYXBwbHkoY21kcyxkYXRhW2ldKTtcbiAgICAgICAgICB2YXIgZmlyc3Q9Y21kc1swXTtcbiAgICAgICAgICBpZiAoZmlyc3QgJiYgZmlyc3QuY29kZT09J20nKXsgLy8gUGVyIHNwZWMsIGZpcnN0IG1vdmV0byBpcyBuZXZlciByZWxhdGl2ZVxuICAgICAgICAgICAgZGVsZXRlIGZpcnN0LnJlbGF0aXZlO1xuICAgICAgICAgICAgZmlyc3QuY29kZSA9ICdNJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNtZHM7XG4gICAgICAgIH0sXG4gICAgICBwZWckYzEgPSBmdW5jdGlvbihmaXJzdCwgbW9yZSkgeyByZXR1cm4gbWVyZ2UoZmlyc3QsbW9yZSkgfSxcbiAgICAgIHBlZyRjMiA9IC9eW01tXS8sXG4gICAgICBwZWckYzMgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJNXCIsIFwibVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjNCA9IGZ1bmN0aW9uKGMsIGZpcnN0LCBtb3JlKSB7XG4gICAgICAgICAgdmFyIG1vdmUgPSBjb21tYW5kcyhjLFtmaXJzdF0pO1xuICAgICAgICAgIGlmIChtb3JlKSBtb3ZlID0gbW92ZS5jb25jYXQoY29tbWFuZHMoYz09J00nID8gJ0wnIDogJ2wnLG1vcmVbMV0pKTtcbiAgICAgICAgICByZXR1cm4gbW92ZTtcbiAgICAgICAgfSxcbiAgICAgIHBlZyRjNSA9IC9eW1p6XS8sXG4gICAgICBwZWckYzYgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJaXCIsIFwielwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjNyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tbWFuZHMoJ1onKSB9LFxuICAgICAgcGVnJGM4ID0gL15bTGxdLyxcbiAgICAgIHBlZyRjOSA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIkxcIiwgXCJsXCJdLCBmYWxzZSwgZmFsc2UpLFxuICAgICAgcGVnJGMxMCA9IGZ1bmN0aW9uKGMsIGFyZ3MpIHsgcmV0dXJuIGNvbW1hbmRzKGMsYXJncykgfSxcbiAgICAgIHBlZyRjMTEgPSAvXltIaF0vLFxuICAgICAgcGVnJGMxMiA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIkhcIiwgXCJoXCJdLCBmYWxzZSwgZmFsc2UpLFxuICAgICAgcGVnJGMxMyA9IGZ1bmN0aW9uKGMsIGFyZ3MpIHsgcmV0dXJuIGNvbW1hbmRzKGMsYXJncy5tYXAoZnVuY3Rpb24oeCl7IHJldHVybiB7eDp4fX0pKSB9LFxuICAgICAgcGVnJGMxNCA9IC9eW1Z2XS8sXG4gICAgICBwZWckYzE1ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1wiVlwiLCBcInZcIl0sIGZhbHNlLCBmYWxzZSksXG4gICAgICBwZWckYzE2ID0gZnVuY3Rpb24oYywgYXJncykgeyByZXR1cm4gY29tbWFuZHMoYyxhcmdzLm1hcChmdW5jdGlvbih5KXsgcmV0dXJuIHt5Onl9fSkpIH0sXG4gICAgICBwZWckYzE3ID0gL15bQ2NdLyxcbiAgICAgIHBlZyRjMTggPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJDXCIsIFwiY1wiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjMTkgPSBmdW5jdGlvbihhLCBiLCBjKSB7IHJldHVybiB7IHgxOmEueCwgeTE6YS55LCB4MjpiLngsIHkyOmIueSwgeDpjLngsIHk6Yy55IH0gfSxcbiAgICAgIHBlZyRjMjAgPSAvXltTc10vLFxuICAgICAgcGVnJGMyMSA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIlNcIiwgXCJzXCJdLCBmYWxzZSwgZmFsc2UpLFxuICAgICAgcGVnJGMyMiA9IGZ1bmN0aW9uKGIsIGMpIHsgcmV0dXJuIHsgeDI6Yi54LCB5MjpiLnksIHg6Yy54LCB5OmMueSB9IH0sXG4gICAgICBwZWckYzIzID0gL15bUXFdLyxcbiAgICAgIHBlZyRjMjQgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJRXCIsIFwicVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjMjUgPSBmdW5jdGlvbihhLCBiKSB7IHJldHVybiB7IHgxOmEueCwgeTE6YS55LCB4OmIueCwgeTpiLnkgfSB9LFxuICAgICAgcGVnJGMyNiA9IC9eW1R0XS8sXG4gICAgICBwZWckYzI3ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1wiVFwiLCBcInRcIl0sIGZhbHNlLCBmYWxzZSksXG4gICAgICBwZWckYzI4ID0gL15bQWFdLyxcbiAgICAgIHBlZyRjMjkgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJBXCIsIFwiYVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjMzAgPSBmdW5jdGlvbihyeCwgcnksIHhyb3QsIGxhcmdlLCBzd2VlcCwgeHkpIHsgcmV0dXJuIHsgcng6cngsIHJ5OnJ5LCB4QXhpc1JvdGF0aW9uOnhyb3QsIGxhcmdlQXJjOmxhcmdlLCBzd2VlcDpzd2VlcCwgeDp4eS54LCB5Onh5LnkgfSB9LFxuICAgICAgcGVnJGMzMSA9IGZ1bmN0aW9uKHgsIHkpIHsgcmV0dXJuIHsgeDp4LCB5OnkgfSB9LFxuICAgICAgcGVnJGMzMiA9IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4qMSB9LFxuICAgICAgcGVnJGMzMyA9IGZ1bmN0aW9uKHBhcnRzKSB7IHJldHVybiBwYXJ0cy5qb2luKCcnKSoxIH0sXG4gICAgICBwZWckYzM0ID0gL15bMDFdLyxcbiAgICAgIHBlZyRjMzUgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCIwXCIsIFwiMVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjMzYgPSBmdW5jdGlvbihiaXQpIHsgcmV0dXJuIGJpdD09JzEnIH0sXG4gICAgICBwZWckYzM3ID0gZnVuY3Rpb24oKSB7IHJldHVybiAnJyB9LFxuICAgICAgcGVnJGMzOCA9IFwiLFwiLFxuICAgICAgcGVnJGMzOSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIsXCIsIGZhbHNlKSxcbiAgICAgIHBlZyRjNDAgPSBmdW5jdGlvbihwYXJ0cykgeyByZXR1cm4gcGFydHMuam9pbignJykgfSxcbiAgICAgIHBlZyRjNDEgPSBcIi5cIixcbiAgICAgIHBlZyRjNDIgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiLlwiLCBmYWxzZSksXG4gICAgICBwZWckYzQzID0gL15bZUVdLyxcbiAgICAgIHBlZyRjNDQgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJlXCIsIFwiRVwiXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjNDUgPSAvXlsrXFwtXS8sXG4gICAgICBwZWckYzQ2ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1wiK1wiLCBcIi1cIl0sIGZhbHNlLCBmYWxzZSksXG4gICAgICBwZWckYzQ3ID0gL15bMC05XS8sXG4gICAgICBwZWckYzQ4ID0gcGVnJGNsYXNzRXhwZWN0YXRpb24oW1tcIjBcIiwgXCI5XCJdXSwgZmFsc2UsIGZhbHNlKSxcbiAgICAgIHBlZyRjNDkgPSBmdW5jdGlvbihkaWdpdHMpIHsgcmV0dXJuIGRpZ2l0cy5qb2luKCcnKSB9LFxuICAgICAgcGVnJGM1MCA9IC9eWyBcXHRcXG5cXHJdLyxcbiAgICAgIHBlZyRjNTEgPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCIgXCIsIFwiXFx0XCIsIFwiXFxuXCIsIFwiXFxyXCJdLCBmYWxzZSwgZmFsc2UpLFxuXG4gICAgICBwZWckY3VyclBvcyAgICAgICAgICA9IDAsXG4gICAgICBwZWckc2F2ZWRQb3MgICAgICAgICA9IDAsXG4gICAgICBwZWckcG9zRGV0YWlsc0NhY2hlICA9IFt7IGxpbmU6IDEsIGNvbHVtbjogMSB9XSxcbiAgICAgIHBlZyRtYXhGYWlsUG9zICAgICAgID0gMCxcbiAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQgID0gW10sXG4gICAgICBwZWckc2lsZW50RmFpbHMgICAgICA9IDAsXG5cbiAgICAgIHBlZyRyZXN1bHQ7XG5cbiAgaWYgKFwic3RhcnRSdWxlXCIgaW4gb3B0aW9ucykge1xuICAgIGlmICghKG9wdGlvbnMuc3RhcnRSdWxlIGluIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzdGFydCBwYXJzaW5nIGZyb20gcnVsZSBcXFwiXCIgKyBvcHRpb25zLnN0YXJ0UnVsZSArIFwiXFxcIi5cIik7XG4gICAgfVxuXG4gICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uID0gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uc1tvcHRpb25zLnN0YXJ0UnVsZV07XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0KCkge1xuICAgIHJldHVybiBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2NhdGlvbigpIHtcbiAgICByZXR1cm4gcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cGVjdGVkKGRlc2NyaXB0aW9uLCBsb2NhdGlvbikge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb24gIT09IHZvaWQgMCA/IGxvY2F0aW9uIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKVxuXG4gICAgdGhyb3cgcGVnJGJ1aWxkU3RydWN0dXJlZEVycm9yKFxuICAgICAgW3BlZyRvdGhlckV4cGVjdGF0aW9uKGRlc2NyaXB0aW9uKV0sXG4gICAgICBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyksXG4gICAgICBsb2NhdGlvblxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCBsb2NhdGlvbikge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb24gIT09IHZvaWQgMCA/IGxvY2F0aW9uIDogcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKVxuXG4gICAgdGhyb3cgcGVnJGJ1aWxkU2ltcGxlRXJyb3IobWVzc2FnZSwgbG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbih0ZXh0LCBpZ25vcmVDYXNlKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJsaXRlcmFsXCIsIHRleHQ6IHRleHQsIGlnbm9yZUNhc2U6IGlnbm9yZUNhc2UgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRjbGFzc0V4cGVjdGF0aW9uKHBhcnRzLCBpbnZlcnRlZCwgaWdub3JlQ2FzZSkge1xuICAgIHJldHVybiB7IHR5cGU6IFwiY2xhc3NcIiwgcGFydHM6IHBhcnRzLCBpbnZlcnRlZDogaW52ZXJ0ZWQsIGlnbm9yZUNhc2U6IGlnbm9yZUNhc2UgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRhbnlFeHBlY3RhdGlvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiBcImFueVwiIH07XG4gIH1cblxuICBmdW5jdGlvbiBwZWckZW5kRXhwZWN0YXRpb24oKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJlbmRcIiB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJG90aGVyRXhwZWN0YXRpb24oZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4geyB0eXBlOiBcIm90aGVyXCIsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGNvbXB1dGVQb3NEZXRhaWxzKHBvcykge1xuICAgIHZhciBkZXRhaWxzID0gcGVnJHBvc0RldGFpbHNDYWNoZVtwb3NdLCBwO1xuXG4gICAgaWYgKGRldGFpbHMpIHtcbiAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgIH0gZWxzZSB7XG4gICAgICBwID0gcG9zIC0gMTtcbiAgICAgIHdoaWxlICghcGVnJHBvc0RldGFpbHNDYWNoZVtwXSkge1xuICAgICAgICBwLS07XG4gICAgICB9XG5cbiAgICAgIGRldGFpbHMgPSBwZWckcG9zRGV0YWlsc0NhY2hlW3BdO1xuICAgICAgZGV0YWlscyA9IHtcbiAgICAgICAgbGluZTogICBkZXRhaWxzLmxpbmUsXG4gICAgICAgIGNvbHVtbjogZGV0YWlscy5jb2x1bW5cbiAgICAgIH07XG5cbiAgICAgIHdoaWxlIChwIDwgcG9zKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHApID09PSAxMCkge1xuICAgICAgICAgIGRldGFpbHMubGluZSsrO1xuICAgICAgICAgIGRldGFpbHMuY29sdW1uID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXRhaWxzLmNvbHVtbisrO1xuICAgICAgICB9XG5cbiAgICAgICAgcCsrO1xuICAgICAgfVxuXG4gICAgICBwZWckcG9zRGV0YWlsc0NhY2hlW3Bvc10gPSBkZXRhaWxzO1xuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGNvbXB1dGVMb2NhdGlvbihzdGFydFBvcywgZW5kUG9zKSB7XG4gICAgdmFyIHN0YXJ0UG9zRGV0YWlscyA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhzdGFydFBvcyksXG4gICAgICAgIGVuZFBvc0RldGFpbHMgICA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhlbmRQb3MpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiB7XG4gICAgICAgIG9mZnNldDogc3RhcnRQb3MsXG4gICAgICAgIGxpbmU6ICAgc3RhcnRQb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgIGNvbHVtbjogc3RhcnRQb3NEZXRhaWxzLmNvbHVtblxuICAgICAgfSxcbiAgICAgIGVuZDoge1xuICAgICAgICBvZmZzZXQ6IGVuZFBvcyxcbiAgICAgICAgbGluZTogICBlbmRQb3NEZXRhaWxzLmxpbmUsXG4gICAgICAgIGNvbHVtbjogZW5kUG9zRGV0YWlscy5jb2x1bW5cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGZhaWwoZXhwZWN0ZWQpIHtcbiAgICBpZiAocGVnJGN1cnJQb3MgPCBwZWckbWF4RmFpbFBvcykgeyByZXR1cm47IH1cblxuICAgIGlmIChwZWckY3VyclBvcyA+IHBlZyRtYXhGYWlsUG9zKSB7XG4gICAgICBwZWckbWF4RmFpbFBvcyA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJG1heEZhaWxFeHBlY3RlZCA9IFtdO1xuICAgIH1cblxuICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQucHVzaChleHBlY3RlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckYnVpbGRTaW1wbGVFcnJvcihtZXNzYWdlLCBsb2NhdGlvbikge1xuICAgIHJldHVybiBuZXcgcGVnJFN5bnRheEVycm9yKG1lc3NhZ2UsIG51bGwsIG51bGwsIGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRidWlsZFN0cnVjdHVyZWRFcnJvcihleHBlY3RlZCwgZm91bmQsIGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBwZWckU3ludGF4RXJyb3IoXG4gICAgICBwZWckU3ludGF4RXJyb3IuYnVpbGRNZXNzYWdlKGV4cGVjdGVkLCBmb3VuZCksXG4gICAgICBleHBlY3RlZCxcbiAgICAgIGZvdW5kLFxuICAgICAgbG9jYXRpb25cbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlc3ZnX3BhdGgoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNDtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBbXTtcbiAgICBzMiA9IHBlZyRwYXJzZXdzcCgpO1xuICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEucHVzaChzMik7XG4gICAgICBzMiA9IHBlZyRwYXJzZXdzcCgpO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNlbW92ZVRvX2RyYXdUb19jb21tYW5kR3JvdXBzKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzAoczIpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cHMoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlbW92ZVRvX2RyYXdUb19jb21tYW5kR3JvdXAoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBbXTtcbiAgICAgIHM1ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB3aGlsZSAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgIHM1ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB9XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cCgpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBbXTtcbiAgICAgICAgczUgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgd2hpbGUgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZW1vdmVUb19kcmF3VG9fY29tbWFuZEdyb3VwKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vtb3ZlVG9fZHJhd1RvX2NvbW1hbmRHcm91cCgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2Vtb3ZldG8oKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBbXTtcbiAgICAgIHM1ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB3aGlsZSAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgIHM1ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB9XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckcGFyc2VkcmF3dG9fY29tbWFuZCgpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBbXTtcbiAgICAgICAgczUgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgd2hpbGUgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQucHVzaChzNSk7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZWRyYXd0b19jb21tYW5kKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VkcmF3dG9fY29tbWFuZCgpIHtcbiAgICB2YXIgczA7XG5cbiAgICBzMCA9IHBlZyRwYXJzZWNsb3NlcGF0aCgpO1xuICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczAgPSBwZWckcGFyc2VsaW5ldG8oKTtcbiAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMCA9IHBlZyRwYXJzZWhvcml6b250YWxfbGluZXRvKCk7XG4gICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMwID0gcGVnJHBhcnNldmVydGljYWxfbGluZXRvKCk7XG4gICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWN1cnZldG8oKTtcbiAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvKCk7XG4gICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvKCk7XG4gICAgICAgICAgICAgICAgaWYgKHMwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZXNtb290aF9xdWFkcmF0aWNfYmV6aWVyX2N1cnZldG8oKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzMCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRwYXJzZWVsbGlwdGljYWxfYXJjKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlbW92ZXRvKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNjtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjMi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMyk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRjdXJyUG9zO1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgaWYgKHM1ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczYgPSBwZWckcGFyc2VsaW5ldG9fYXJndW1lbnRfc2VxdWVuY2UoKTtcbiAgICAgICAgICAgIGlmIChzNiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNSA9IFtzNSwgczZdO1xuICAgICAgICAgICAgICBzNCA9IHM1O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzNDtcbiAgICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHM0O1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGM0KHMxLCBzMywgczQpO1xuICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VjbG9zZXBhdGgoKSB7XG4gICAgdmFyIHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjNS50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNik7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGM3KCk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VsaW5ldG8oKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAocGVnJGM4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlbGluZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VsaW5ldG9fYXJndW1lbnRfc2VxdWVuY2UoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM1ID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMShzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWhvcml6b250YWxfbGluZXRvKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjMTEudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzEyKTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTMoczEsIHMzKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgczQgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNCA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczUgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZW51bWJlcigpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNldmVydGljYWxfbGluZXRvKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjMTQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE1KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXdzcCgpO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTYoczEsIHMzKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY3VydmV0bygpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzE3LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxOCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzEwKHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnRfc2VxdWVuY2UoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlY3VydmV0b19hcmd1bWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnQoKTtcbiAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNSA9IHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnQoKTtcbiAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgICBzMyA9IHM0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMShzMSwgczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWN1cnZldG9fYXJndW1lbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczU7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICAgIGlmIChzNCA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHM1ID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgIHMxID0gcGVnJGMxOShzMSwgczMsIHM1KTtcbiAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfY3VydmV0bygpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzIwLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyMSk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZXNtb290aF9jdXJ2ZXRvX2FyZ3VtZW50KCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2VzbW9vdGhfY3VydmV0b19hcmd1bWVudCgpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlc21vb3RoX2N1cnZldG9fYXJndW1lbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzIyKHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0bygpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzIzLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNCk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudF9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMTAoczEsIHMzKTtcbiAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZXF1YWRyYXRpY19iZXppZXJfY3VydmV0b19hcmd1bWVudCgpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50KCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VxdWFkcmF0aWNfYmV6aWVyX2N1cnZldG9fYXJndW1lbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgczEgPSBwZWckYzI1KHMxLCBzMyk7XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXNtb290aF9xdWFkcmF0aWNfYmV6aWVyX2N1cnZldG8oKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAocGVnJGMyNi50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjcpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB3aGlsZSAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIucHVzaChzMyk7XG4gICAgICAgIHMzID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VzbW9vdGhfcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VzbW9vdGhfcXVhZHJhdGljX2Jlemllcl9jdXJ2ZXRvX2FyZ3VtZW50X3NlcXVlbmNlKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQsIHM1O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZWNvb3JkaW5hdGVfcGFpcigpO1xuICAgICAgICBpZiAoczUgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckY3VyclBvcztcbiAgICAgICAgczQgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM1ID0gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCk7XG4gICAgICAgICAgaWYgKHM1ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IFtzNCwgczVdO1xuICAgICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzEoczEsIHMyKTtcbiAgICAgICAgczAgPSBzMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VlbGxpcHRpY2FsX2FyYygpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzI4LnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMxID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyOSk7IH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIHdoaWxlIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMi5wdXNoKHMzKTtcbiAgICAgICAgczMgPSBwZWckcGFyc2V3c3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWVsbGlwdGljYWxfYXJjX2FyZ3VtZW50X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMxMChzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudF9zZXF1ZW5jZSgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0LCBzNTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudCgpO1xuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBbXTtcbiAgICAgIHMzID0gcGVnJGN1cnJQb3M7XG4gICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHM0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzNSA9IHBlZyRwYXJzZWVsbGlwdGljYWxfYXJjX2FyZ3VtZW50KCk7XG4gICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gW3M0LCBzNV07XG4gICAgICAgICAgczMgPSBzNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMzO1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMztcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICBzMyA9IHBlZyRjdXJyUG9zO1xuICAgICAgICBzNCA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICBpZiAoczQgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczUgPSBwZWckcGFyc2VlbGxpcHRpY2FsX2FyY19hcmd1bWVudCgpO1xuICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczQgPSBbczQsIHM1XTtcbiAgICAgICAgICAgIHMzID0gczQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczM7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMxKHMxLCBzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZWxsaXB0aWNhbF9hcmNfYXJndW1lbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczgsIHM5LCBzMTAsIHMxMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2Vub25uZWdhdGl2ZV9udW1iZXIoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlbm9ubmVnYXRpdmVfbnVtYmVyKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgaWYgKHM0ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzNCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICAgICAgICAgIGlmIChzNSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICBzNiA9IHBlZyRwYXJzZWNvbW1hX3dzcCgpO1xuICAgICAgICAgICAgICBpZiAoczYgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZWZsYWcoKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoczggPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgczggPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKHM4ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJHBhcnNlZmxhZygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoczkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBwZWckcGFyc2Vjb21tYV93c3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMTAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoczEwICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMTEgPSBwZWckcGFyc2Vjb29yZGluYXRlX3BhaXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzMTEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMzMChzMSwgczMsIHM1LCBzNywgczksIHMxMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlY29vcmRpbmF0ZV9wYWlyKCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VudW1iZXIoKTtcbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gcGVnJHBhcnNlY29tbWFfd3NwKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlbnVtYmVyKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgIHMxID0gcGVnJGMzMShzMSwgczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vub25uZWdhdGl2ZV9udW1iZXIoKSB7XG4gICAgdmFyIHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VmbG9hdGluZ19wb2ludF9jb25zdGFudCgpO1xuICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzMyKHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZW51bWJlcigpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczM7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgczIgPSBwZWckcGFyc2VzaWduKCk7XG4gICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczMgPSBwZWckcGFyc2VmbG9hdGluZ19wb2ludF9jb25zdGFudCgpO1xuICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgIHMxID0gczI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgIHMyID0gcGVnJHBhcnNlc2lnbigpO1xuICAgICAgaWYgKHMyID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IHBlZyRwYXJzZWRpZ2l0X3NlcXVlbmNlKCk7XG4gICAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyID0gW3MyLCBzM107XG4gICAgICAgICAgczEgPSBzMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzMzKHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWZsYWcoKSB7XG4gICAgdmFyIHMwLCBzMTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKHBlZyRjMzQudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczEgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzM1KTsgfVxuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzM2KHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZWNvbW1hX3dzcCgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IFtdO1xuICAgIHMyID0gcGVnJHBhcnNld3NwKCk7XG4gICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICB3aGlsZSAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczEucHVzaChzMik7XG4gICAgICAgIHMyID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZWNvbW1hKCk7XG4gICAgICBpZiAoczIgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczEgPSBbczEsIHMyLCBzM107XG4gICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczAgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgICAgczIgPSBwZWckcGFyc2Vjb21tYSgpO1xuICAgICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIHdoaWxlIChzNCAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgIHM0ID0gcGVnJHBhcnNld3NwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBbczIsIHMzXTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMzNygpO1xuICAgICAgfVxuICAgICAgczAgPSBzMTtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2Vjb21tYSgpIHtcbiAgICB2YXIgczA7XG5cbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ0KSB7XG4gICAgICBzMCA9IHBlZyRjMzg7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzkpOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZmxvYXRpbmdfcG9pbnRfY29uc3RhbnQoKSB7XG4gICAgdmFyIHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgIHMyID0gcGVnJHBhcnNlZnJhY3Rpb25hbF9jb25zdGFudCgpO1xuICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczMgPSBwZWckcGFyc2VleHBvbmVudCgpO1xuICAgICAgaWYgKHMzID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzMyAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICBzMSA9IHMyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczEgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgICBzMiA9IHBlZyRwYXJzZWRpZ2l0X3NlcXVlbmNlKCk7XG4gICAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VleHBvbmVudCgpO1xuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgIHMxID0gczI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGM0MChzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VmcmFjdGlvbmFsX2NvbnN0YW50KCkge1xuICAgIHZhciBzMCwgczEsIHMyLCBzMywgczQ7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJGN1cnJQb3M7XG4gICAgczIgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgIGlmIChzMiA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDYpIHtcbiAgICAgICAgczMgPSBwZWckYzQxO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDIpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczMsIHM0XTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckY3VyclBvcztcbiAgICAgIHMyID0gcGVnJHBhcnNlZGlnaXRfc2VxdWVuY2UoKTtcbiAgICAgIGlmIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQ2KSB7XG4gICAgICAgICAgczMgPSBwZWckYzQxO1xuICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0Mik7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczNdO1xuICAgICAgICAgIHMxID0gczI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMTtcbiAgICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMxICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGM0MChzMSk7XG4gICAgfVxuICAgIHMwID0gczE7XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VleHBvbmVudCgpIHtcbiAgICB2YXIgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChwZWckYzQzLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0NCk7IH1cbiAgICB9XG4gICAgaWYgKHMyICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMyA9IHBlZyRwYXJzZXNpZ24oKTtcbiAgICAgIGlmIChzMyA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMyA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoczMgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczQgPSBwZWckcGFyc2VkaWdpdF9zZXF1ZW5jZSgpO1xuICAgICAgICBpZiAoczQgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IFtzMiwgczMsIHM0XTtcbiAgICAgICAgICBzMSA9IHMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMxO1xuICAgICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczE7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjNDAoczEpO1xuICAgIH1cbiAgICBzMCA9IHMxO1xuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlc2lnbigpIHtcbiAgICB2YXIgczA7XG5cbiAgICBpZiAocGVnJGM0NS50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDYpOyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlZGlnaXRfc2VxdWVuY2UoKSB7XG4gICAgdmFyIHMwLCBzMSwgczI7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gW107XG4gICAgaWYgKHBlZyRjNDcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQ4KTsgfVxuICAgIH1cbiAgICBpZiAoczIgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHdoaWxlIChzMiAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgaWYgKHBlZyRjNDcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDgpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczEgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzQ5KHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZXdzcCgpIHtcbiAgICB2YXIgczAsIHMxO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAocGVnJGM1MC50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICBzMSA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNTEpOyB9XG4gICAgfVxuICAgIGlmIChzMSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjMzcoKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG5cbiAgICBmdW5jdGlvbiBtZXJnZShmaXJzdCxtb3JlKXtcbiAgICAgIGlmICghbW9yZSkgcmV0dXJuIFtmaXJzdF07XG4gICAgICBmb3IgKHZhciBhPVtmaXJzdF0saT0wLGw9bW9yZS5sZW5ndGg7aTxsO2krKykgYVtpKzFdPW1vcmVbaV1bMV07XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgY21kcyA9IHttOidtb3ZldG8nLGw6J2xpbmV0bycsaDonaG9yaXpvbnRhbCBsaW5ldG8nLHY6J3ZlcnRpY2FsIGxpbmV0bycsYzonY3VydmV0bycsczonc21vb3RoIGN1cnZldG8nLHE6J3F1YWRyYXRpYyBjdXJ2ZXRvJyx0OidzbW9vdGggcXVhZHJhdGljIGN1cnZldG8nLGE6J2VsbGlwdGljYWwgYXJjJyx6OidjbG9zZXBhdGgnfTtcbiAgICBmb3IgKHZhciBjb2RlIGluIGNtZHMpIGNtZHNbY29kZS50b1VwcGVyQ2FzZSgpXT1jbWRzW2NvZGVdO1xuICAgIGZ1bmN0aW9uIGNvbW1hbmRzKGNvZGUsYXJncyl7XG4gICAgICBpZiAoIWFyZ3MpIGFyZ3M9W3t9XTtcbiAgICAgIGZvciAodmFyIGk9YXJncy5sZW5ndGg7aS0tOyl7XG4gICAgICAgIHZhciBjbWQ9e2NvZGU6Y29kZSxjb21tYW5kOmNtZHNbY29kZV19O1xuICAgICAgICBpZiAoY29kZT09Y29kZS50b0xvd2VyQ2FzZSgpKSBjbWQucmVsYXRpdmU9dHJ1ZTtcbiAgICAgICAgZm9yICh2YXIgayBpbiBhcmdzW2ldKSBjbWRba109YXJnc1tpXVtrXTtcbiAgICAgICAgYXJnc1tpXSA9IGNtZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cblxuXG4gIHBlZyRyZXN1bHQgPSBwZWckc3RhcnRSdWxlRnVuY3Rpb24oKTtcblxuICBpZiAocGVnJHJlc3VsdCAhPT0gcGVnJEZBSUxFRCAmJiBwZWckY3VyclBvcyA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHBlZyRyZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHBlZyRyZXN1bHQgIT09IHBlZyRGQUlMRUQgJiYgcGVnJGN1cnJQb3MgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIHBlZyRmYWlsKHBlZyRlbmRFeHBlY3RhdGlvbigpKTtcbiAgICB9XG5cbiAgICB0aHJvdyBwZWckYnVpbGRTdHJ1Y3R1cmVkRXJyb3IoXG4gICAgICBwZWckbWF4RmFpbEV4cGVjdGVkLFxuICAgICAgcGVnJG1heEZhaWxQb3MgPCBpbnB1dC5sZW5ndGggPyBpbnB1dC5jaGFyQXQocGVnJG1heEZhaWxQb3MpIDogbnVsbCxcbiAgICAgIHBlZyRtYXhGYWlsUG9zIDwgaW5wdXQubGVuZ3RoXG4gICAgICAgID8gcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckbWF4RmFpbFBvcywgcGVnJG1heEZhaWxQb3MgKyAxKVxuICAgICAgICA6IHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJG1heEZhaWxQb3MsIHBlZyRtYXhGYWlsUG9zKVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFN5bnRheEVycm9yOiBwZWckU3ludGF4RXJyb3IsXG4gIHBhcnNlOiAgICAgICBwZWckcGFyc2Vcbn07XG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiAgSW4gdGhlXG4vLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpXG4vLyBhbmQgaW5jb25zaXN0ZW50IHN1cHBvcnQgZm9yIHRoZSBgY3J5cHRvYCBBUEkuICBXZSBkbyB0aGUgYmVzdCB3ZSBjYW4gdmlhXG4vLyBmZWF0dXJlLWRldGVjdGlvblxuXG4vLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG9cbi8vIGltcGxlbWVudGF0aW9uLiBBbHNvLCBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gb24gSUUxMS5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSAodHlwZW9mKGNyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mKG1zQ3J5cHRvKSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKSk7XG5cbmlmIChnZXRSYW5kb21WYWx1ZXMpIHtcbiAgLy8gV0hBVFdHIGNyeXB0byBSTkcgLSBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvQ3J5cHRvXG4gIHZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG4gICAgcmV0dXJuIHJuZHM4O1xuICB9O1xufSBlbHNlIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRoUk5HKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuIiwiLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIC8vIGpvaW4gdXNlZCB0byBmaXggbWVtb3J5IGlzc3VlIGNhdXNlZCBieSBjb25jYXRlbmF0aW9uOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMTc1I2M0XG4gIHJldHVybiAoW2J0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sIFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV1dKS5qb2luKCcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBieXRlc1RvVXVpZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL2VzNi5zZXQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocmVnRXhwLCByZXBsYWNlKSB7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9