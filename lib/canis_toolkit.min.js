!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("canis_toolkit",[],e):"object"==typeof exports?exports.canis_toolkit=e():t.canis_toolkit=e()}(window,function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=143)}([function(t,e,r){var n=r(2),i=r(18),a=r(11),o=r(12),u=r(19),s=function(t,e,r){var c,f,l,h,p=t&s.F,d=t&s.G,v=t&s.S,g=t&s.P,y=t&s.B,m=d?n:v?n[e]||(n[e]={}):(n[e]||{}).prototype,b=d?i:i[e]||(i[e]={}),k=b.prototype||(b.prototype={});for(c in d&&(r=e),r)l=((f=!p&&m&&void 0!==m[c])?m:r)[c],h=y&&f?u(l,n):g&&"function"==typeof l?u(Function.call,l):l,m&&o(m,c,l,t&s.U),b[c]!=l&&a(b,c,h),g&&k[c]!=l&&(k[c]=l)};n.core=i,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e,r){var n=r(4);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,r){var n=r(48)("wks"),i=r(33),a=r(2).Symbol,o="function"==typeof a;(t.exports=function(t){return n[t]||(n[t]=o&&a[t]||(o?a:i)("Symbol."+t))}).store=n},function(t,e,r){var n=r(21),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},function(t,e,r){t.exports=!r(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(1),i=r(107),a=r(23),o=Object.defineProperty;e.f=r(7)?Object.defineProperty:function(t,e,r){if(n(t),e=a(e,!0),n(r),i)try{return o(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(24);t.exports=function(t){return Object(n(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){var n=r(8),i=r(32);t.exports=r(7)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(2),i=r(11),a=r(14),o=r(33)("src"),u=r(154),s=(""+u).split("toString");r(18).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,r,u){var c="function"==typeof r;c&&(a(r,"name")||i(r,"name",e)),t[e]!==r&&(c&&(a(r,o)||i(r,o,t[e]?""+t[e]:s.join(String(e)))),t===n?t[e]=r:u?t[e]?t[e]=r:i(t,e,r):(delete t[e],i(t,e,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[o]||u.call(this)})},function(t,e,r){var n=r(0),i=r(3),a=r(24),o=/"/g,u=function(t,e,r,n){var i=String(a(t)),u="<"+e;return""!==r&&(u+=" "+r+'="'+String(n).replace(o,"&quot;")+'"'),u+">"+i+"</"+e+">"};t.exports=function(t,e){var r={};r[t]=e(u),n(n.P+n.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",r)}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(49),i=r(24);t.exports=function(t){return n(i(t))}},function(t,e,r){var n=r(50),i=r(32),a=r(15),o=r(23),u=r(14),s=r(107),c=Object.getOwnPropertyDescriptor;e.f=r(7)?c:function(t,e){if(t=a(t),e=o(e,!0),s)try{return c(t,e)}catch(t){}if(u(t,e))return i(!n.f.call(t,e),t[e])}},function(t,e,r){var n=r(14),i=r(9),a=r(76)("IE_PROTO"),o=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,a)?t[a]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?o:null}},function(t,e){var r=t.exports={version:"2.6.9"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(10);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){"use strict";var n=r(3);t.exports=function(t,e){return!!t&&n(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(0),i=r(18),a=r(3);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],o={};o[t]=e(r),n(n.S+n.F*a(function(){r(1)}),"Object",o)}},function(t,e,r){var n=r(19),i=r(49),a=r(9),o=r(6),u=r(92);t.exports=function(t,e){var r=1==t,s=2==t,c=3==t,f=4==t,l=6==t,h=5==t||l,p=e||u;return function(e,u,d){for(var v,g,y=a(e),m=i(y),b=n(u,d,3),k=o(m.length),w=0,x=r?p(e,k):s?p(e,0):void 0;k>w;w++)if((h||w in m)&&(g=b(v=m[w],w,y),t))if(r)x[w]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:x.push(v)}else if(f)return!1;return l?-1:c||f?f:x}}},function(t,e,r){"use strict";if(r(7)){var n=r(29),i=r(2),a=r(3),o=r(0),u=r(65),s=r(100),c=r(19),f=r(39),l=r(32),h=r(11),p=r(41),d=r(21),v=r(6),g=r(135),y=r(35),m=r(23),b=r(14),k=r(44),w=r(4),x=r(9),S=r(89),A=r(36),T=r(17),M=r(37).f,E=r(91),O=r(33),_=r(5),P=r(26),I=r(55),N=r(52),F=r(94),j=r(46),C=r(60),R=r(38),L=r(93),B=r(124),V=r(8),D=r(16),G=V.f,U=D.f,z=i.RangeError,Y=i.TypeError,W=i.Uint8Array,X=Array.prototype,q=s.ArrayBuffer,H=s.DataView,J=P(0),Q=P(2),Z=P(3),K=P(4),$=P(5),tt=P(6),et=I(!0),rt=I(!1),nt=F.values,it=F.keys,at=F.entries,ot=X.lastIndexOf,ut=X.reduce,st=X.reduceRight,ct=X.join,ft=X.sort,lt=X.slice,ht=X.toString,pt=X.toLocaleString,dt=_("iterator"),vt=_("toStringTag"),gt=O("typed_constructor"),yt=O("def_constructor"),mt=u.CONSTR,bt=u.TYPED,kt=u.VIEW,wt=P(1,function(t,e){return Mt(N(t,t[yt]),e)}),xt=a(function(){return 1===new W(new Uint16Array([1]).buffer)[0]}),St=!!W&&!!W.prototype.set&&a(function(){new W(1).set({})}),At=function(t,e){var r=d(t);if(r<0||r%e)throw z("Wrong offset!");return r},Tt=function(t){if(w(t)&&bt in t)return t;throw Y(t+" is not a typed array!")},Mt=function(t,e){if(!(w(t)&&gt in t))throw Y("It is not a typed array constructor!");return new t(e)},Et=function(t,e){return Ot(N(t,t[yt]),e)},Ot=function(t,e){for(var r=0,n=e.length,i=Mt(t,n);n>r;)i[r]=e[r++];return i},_t=function(t,e,r){G(t,e,{get:function(){return this._d[r]}})},Pt=function(t){var e,r,n,i,a,o,u=x(t),s=arguments.length,f=s>1?arguments[1]:void 0,l=void 0!==f,h=E(u);if(null!=h&&!S(h)){for(o=h.call(u),n=[],e=0;!(a=o.next()).done;e++)n.push(a.value);u=n}for(l&&s>2&&(f=c(f,arguments[2],2)),e=0,r=v(u.length),i=Mt(this,r);r>e;e++)i[e]=l?f(u[e],e):u[e];return i},It=function(){for(var t=0,e=arguments.length,r=Mt(this,e);e>t;)r[t]=arguments[t++];return r},Nt=!!W&&a(function(){pt.call(new W(1))}),Ft=function(){return pt.apply(Nt?lt.call(Tt(this)):Tt(this),arguments)},jt={copyWithin:function(t,e){return B.call(Tt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return K(Tt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Tt(this),arguments)},filter:function(t){return Et(this,Q(Tt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return $(Tt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){J(Tt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return rt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Tt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Tt(this),arguments)},lastIndexOf:function(t){return ot.apply(Tt(this),arguments)},map:function(t){return wt(Tt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(Tt(this),arguments)},reduceRight:function(t){return st.apply(Tt(this),arguments)},reverse:function(){for(var t,e=Tt(this).length,r=Math.floor(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this},some:function(t){return Z(Tt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Tt(this),t)},subarray:function(t,e){var r=Tt(this),n=r.length,i=y(t,n);return new(N(r,r[yt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,v((void 0===e?n:y(e,n))-i))}},Ct=function(t,e){return Et(this,lt.call(Tt(this),t,e))},Rt=function(t){Tt(this);var e=At(arguments[1],1),r=this.length,n=x(t),i=v(n.length),a=0;if(i+e>r)throw z("Wrong length!");for(;a<i;)this[e+a]=n[a++]},Lt={entries:function(){return at.call(Tt(this))},keys:function(){return it.call(Tt(this))},values:function(){return nt.call(Tt(this))}},Bt=function(t,e){return w(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Vt=function(t,e){return Bt(t,e=m(e,!0))?l(2,t[e]):U(t,e)},Dt=function(t,e,r){return!(Bt(t,e=m(e,!0))&&w(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?G(t,e,r):(t[e]=r.value,t)};mt||(D.f=Vt,V.f=Dt),o(o.S+o.F*!mt,"Object",{getOwnPropertyDescriptor:Vt,defineProperty:Dt}),a(function(){ht.call({})})&&(ht=pt=function(){return ct.call(this)});var Gt=p({},jt);p(Gt,Lt),h(Gt,dt,Lt.values),p(Gt,{slice:Ct,set:Rt,constructor:function(){},toString:ht,toLocaleString:Ft}),_t(Gt,"buffer","b"),_t(Gt,"byteOffset","o"),_t(Gt,"byteLength","l"),_t(Gt,"length","e"),G(Gt,vt,{get:function(){return this[bt]}}),t.exports=function(t,e,r,s){var c=t+((s=!!s)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=i[c],y=d||{},m=d&&T(d),b=!d||!u.ABV,x={},S=d&&d.prototype,E=function(t,r){G(t,r,{get:function(){return function(t,r){var n=t._d;return n.v[l](r*e+n.o,xt)}(this,r)},set:function(t){return function(t,r,n){var i=t._d;s&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),i.v[p](r*e+i.o,n,xt)}(this,r,t)},enumerable:!0})};b?(d=r(function(t,r,n,i){f(t,d,c,"_d");var a,o,u,s,l=0,p=0;if(w(r)){if(!(r instanceof q||"ArrayBuffer"==(s=k(r))||"SharedArrayBuffer"==s))return bt in r?Ot(d,r):Pt.call(d,r);a=r,p=At(n,e);var y=r.byteLength;if(void 0===i){if(y%e)throw z("Wrong length!");if((o=y-p)<0)throw z("Wrong length!")}else if((o=v(i)*e)+p>y)throw z("Wrong length!");u=o/e}else u=g(r),a=new q(o=u*e);for(h(t,"_d",{b:a,o:p,l:o,e:u,v:new H(a)});l<u;)E(t,l++)}),S=d.prototype=A(Gt),h(S,"constructor",d)):a(function(){d(1)})&&a(function(){new d(-1)})&&C(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=r(function(t,r,n,i){var a;return f(t,d,c),w(r)?r instanceof q||"ArrayBuffer"==(a=k(r))||"SharedArrayBuffer"==a?void 0!==i?new y(r,At(n,e),i):void 0!==n?new y(r,At(n,e)):new y(r):bt in r?Ot(d,r):Pt.call(d,r):new y(g(r))}),J(m!==Function.prototype?M(y).concat(M(m)):M(y),function(t){t in d||h(d,t,y[t])}),d.prototype=S,n||(S.constructor=d));var O=S[dt],_=!!O&&("values"==O.name||null==O.name),P=Lt.values;h(d,gt,!0),h(S,bt,c),h(S,kt,!0),h(S,yt,d),(s?new d(1)[vt]==c:vt in S)||G(S,vt,{get:function(){return c}}),x[c]=d,o(o.G+o.W+o.F*(d!=y),x),o(o.S,c,{BYTES_PER_ELEMENT:e}),o(o.S+o.F*a(function(){y.of.call(d,1)}),c,{from:Pt,of:It}),"BYTES_PER_ELEMENT"in S||h(S,"BYTES_PER_ELEMENT",e),o(o.P,c,jt),R(c),o(o.P+o.F*St,c,{set:Rt}),o(o.P+o.F*!_,c,Lt),n||S.toString==ht||(S.toString=ht),o(o.P+o.F*a(function(){new d(1).slice()}),c,{slice:Ct}),o(o.P+o.F*(a(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!a(function(){S.toLocaleString.call([1,2])})),c,{toLocaleString:Ft}),j[c]=_?O:P,n||_||h(S,dt,P)}}else t.exports=function(){}},function(t,e,r){var n=r(130),i=r(0),a=r(48)("metadata"),o=a.store||(a.store=new(r(133))),u=function(t,e,r){var i=o.get(t);if(!i){if(!r)return;o.set(t,i=new n)}var a=i.get(e);if(!a){if(!r)return;i.set(e,a=new n)}return a};t.exports={store:o,map:u,has:function(t,e,r){var n=u(e,r,!1);return void 0!==n&&n.has(t)},get:function(t,e,r){var n=u(e,r,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,r,n){u(r,n,!0).set(t,e)},keys:function(t,e){var r=u(t,e,!1),n=[];return r&&r.forEach(function(t,e){n.push(e)}),n},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){i(i.S,"Reflect",t)}}},function(t,e){t.exports=!1},function(t,e,r){var n=r(33)("meta"),i=r(4),a=r(14),o=r(8).f,u=0,s=Object.isExtensible||function(){return!0},c=!r(3)(function(){return s(Object.preventExtensions({}))}),f=function(t){o(t,n,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!a(t,n)){if(!s(t))return"F";if(!e)return"E";f(t)}return t[n].i},getWeak:function(t,e){if(!a(t,n)){if(!s(t))return!0;if(!e)return!1;f(t)}return t[n].w},onFreeze:function(t){return c&&l.NEED&&s(t)&&!a(t,n)&&f(t),t}}},function(t,e,r){var n=r(5)("unscopables"),i=Array.prototype;null==i[n]&&r(11)(i,n,{}),t.exports=function(t){i[n][t]=!0}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(109),i=r(77);t.exports=Object.keys||function(t){return n(t,i)}},function(t,e,r){var n=r(21),i=Math.max,a=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):a(t,e)}},function(t,e,r){var n=r(1),i=r(110),a=r(77),o=r(76)("IE_PROTO"),u=function(){},s=function(){var t,e=r(74)("iframe"),n=a.length;for(e.style.display="none",r(78).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;n--;)delete s.prototype[a[n]];return s()};t.exports=Object.create||function(t,e){var r;return null!==t?(u.prototype=n(t),r=new u,u.prototype=null,r[o]=t):r=s(),void 0===e?r:i(r,e)}},function(t,e,r){var n=r(109),i=r(77).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},function(t,e,r){"use strict";var n=r(2),i=r(8),a=r(7),o=r(5)("species");t.exports=function(t){var e=n[t];a&&e&&!e[o]&&i.f(e,o,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,e,r){var n=r(19),i=r(122),a=r(89),o=r(1),u=r(6),s=r(91),c={},f={};(e=t.exports=function(t,e,r,l,h){var p,d,v,g,y=h?function(){return t}:s(t),m=n(r,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(a(y)){for(p=u(t.length);p>b;b++)if((g=e?m(o(d=t[b])[0],d[1]):m(t[b]))===c||g===f)return g}else for(v=y.call(t);!(d=v.next()).done;)if((g=i(v,m,d.value,e))===c||g===f)return g}).BREAK=c,e.RETURN=f},function(t,e,r){var n=r(12);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},function(t,e,r){var n=r(4);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,r){var n=r(8).f,i=r(14),a=r(5)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,a)&&n(t,a,{configurable:!0,value:e})}},function(t,e,r){var n=r(20),i=r(5)("toStringTag"),a="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,o;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:a?n(e):"Object"==(o=n(e))&&"function"==typeof e.callee?"Arguments":o}},function(t,e,r){var n=r(0),i=r(24),a=r(3),o=r(80),u="["+o+"]",s=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),f=function(t,e,r){var i={},u=a(function(){return!!o[t]()||"​"!="​"[t]()}),s=i[t]=u?e(l):o[t];r&&(i[r]=s),n(n.P+n.F*u,"String",i)},l=f.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(s,"")),2&e&&(t=t.replace(c,"")),t};t.exports=f},function(t,e){t.exports={}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._offset=0,this._reference=t.timingRef.previousStart}var e,r,a;return e=t,a=[{key:"transRef",value:function(t){switch(t){case this.timingRef.previousStart:return"previousStart";case this.timingRef.previousEnd:return"previousEnd";case this.timingRef.absolute:return"absolute"}}}],(r=[{key:"calOffsetTime",value:function(e,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new Map;if(0===a.size){var o=0;switch(this.reference){case t.timingRef.previousStart:o=e+this.offset-i;break;case t.timingRef.previousEnd:o=r+this.offset-i;break;case t.timingRef.absolute:o=this.offset+i;break;default:o=e+this.offset-i}return o}var u=this,s=new Map,c=1e6;return"object"===n(this.offset)&&a.forEach(function(t,e){c>parseFloat(t["data-datum"][u.offset.field])&&(c=parseFloat(t["data-datum"][u.offset.field]))}),a.forEach(function(a,o){var f=0;switch(f="number"==typeof u.offset?u.offset:"object"===n(u.offset)?u.offset.minOffset*parseFloat(a["data-datum"][u.offset.field])/c:0,u.reference){case t.timingRef.previousStart:s.set(o,e+f-i);break;case t.timingRef.previousEnd:s.set(o,r+f-i);break;case t.timingRef.absolute:s.set(o,f+i);break;default:s.set(o,e+f-i)}}),s}},{key:"reference",set:function(e){if(void 0!==e){var r=t.transRef(e);Object.keys(t.timingRef).includes(r)&&(this._reference=e)}},get:function(){return this._reference}},{key:"offset",set:function(e){void 0!==e&&("number"==typeof e?this._offset=Math.floor(e/(1e3/t.FRAME_RATE))*(1e3/t.FRAME_RATE):"object"===n(e)&&(this._offset=e))},get:function(){return this._offset}}])&&i(e.prototype,r),a&&i(e,a),t}();a.FRAME_RATE=20,a.timingRef={previousStart:"start with previous",previousEnd:"start after previous",absolute:"absolute"};var o=a;e.default=o,t.exports=e.default},function(t,e,r){var n=r(18),i=r(2),a=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return a[t]||(a[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(29)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var n=r(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){"use strict";var n=r(1);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var n=r(1),i=r(10),a=r(5)("species");t.exports=function(t,e){var r,o=n(t).constructor;return void 0===o||null==(r=n(o)[a])?e:i(r)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"LayerFactory",{enumerable:!0,get:function(){return i.LayerFactory}}),Object.defineProperty(e,"EasingFactory",{enumerable:!0,get:function(){return o.EasingFactory}}),Object.defineProperty(e,"PathMaker",{enumerable:!0,get:function(){return u.PathMaker}}),e.MaskType=e.default=void 0;var n,i=r(144),a=(n=r(72))&&n.__esModule?n:{default:n},o=r(103),u=r(71);function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c,f=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:800,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:600;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e,r){e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}(this,"root",void 0),this.root={fr:e,w:r,h:n,ddd:0,layers:[],assets:[],fonts:{list:[]},ip:0,op:0}}var e,r,n;return e=t,(r=[{key:"setFrameRate",value:function(t){this.root.fr=t}},{key:"setViewport",value:function(t,e){this.root.w=t,this.root.h=e}},{key:"addLayer",value:function(t){var e;return e=t instanceof SVGGraphicsElement?i.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):"string"==typeof t?i.LayerFactory.ref(t):t,this.root.layers.splice(0,0,e.root),e}},{key:"addMask",value:function(t,e){var r,n,a,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.Alpha;if(e instanceof i.JSMovinLayer?(r=e,n=this.root.layers.indexOf(r.root),r.root.tt=o):(n=e,this.root.layers[n].tt=o),n<0)throw new Error("Given layer is not a member of this JSMovin.");return a=t instanceof SVGGraphicsElement?i.LayerFactory.hierarchy(t,this.root.assets,this.root.fonts):t,this.root.layers.splice(n,0,a.root),a}},{key:"makeAsset",value:function(t){var e=this;t.forEach(function(r,n){if(1==r.root.tt){var a=e.root.layers.indexOf(r.root);if(a>0){var o=e.root.layers[a-1];0!=n&&t[n-1].root==o||t.splice(n,0,new i.JSMovinLayer(o))}}}),(t=t.map(function(t,e){return{layer:t,innerIndex:e}}).sort(function(t,r){return e.root.layers.indexOf(t.layer.root)-e.root.layers.indexOf(r.layer.root)||t.innerIndex-r.innerIndex}).map(function(t){return t.layer})).forEach(function(t){var r=e.root.layers.indexOf(t.root);r>0&&e.root.layers.splice(r,1),t.root.op=9e9});var r=(0,a.default)();return this.root.assets.push({id:r,layers:t.map(function(t){return t.root})}),r}},{key:"removeLayer",value:function(t){var e,r;t instanceof i.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):r=t,this.root.layers.splice(r,1)}},{key:"removeMask",value:function(t){var e,r;if(t instanceof i.JSMovinLayer?(e=t,r=this.root.layers.indexOf(e.root)):(r=t,e=new i.JSMovinLayer(this.root.layers[r])),e.root.tt)e.root.tt=0,this.root.layers.splice(r-1,1);else{if(!this.root.layers[r+1].tt)throw new Error("The input layer is not a mask or a masked layer.");this.root.layers[r+1].tt=0,this.root.layers.splice(r,1)}}},{key:"clearLayers",value:function(){this.root.layers=[]}},{key:"uniform",value:function(){var t=this.root.layers.reduce(function(t,e){return t<e.op?e.op:t},0);this.root.op=t,this.root.layers.forEach(function(e){return e.op=t})}},{key:"toObject",value:function(){return this.uniform(),JSON.parse(this.toJSON())}},{key:"toJSON",value:function(){return this.uniform(),JSON.stringify(this.root)}}])&&s(e.prototype,r),n&&s(e,n),t}();e.default=f,e.MaskType=c,function(t){t[t.Alpha=1]="Alpha",t[t.InvertAlpha=2]="InvertAlpha",t[t.Luma=3]="Luma",t[t.InvertLuma=4]="InvertLuma"}(c||(e.MaskType=c={}))},function(t,e,r){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.globalVar=void 0;var i={jsMovin:new(((n=r(53))&&n.__esModule?n:{default:n}).default),markLayers:new Map};e.globalVar=i},function(t,e,r){var n=r(15),i=r(6),a=r(35);t.exports=function(t){return function(e,r,o){var u,s=n(e),c=i(s.length),f=a(o,c);if(t&&r!=r){for(;c>f;)if((u=s[f++])!=u)return!0}else for(;c>f;f++)if((t||f in s)&&s[f]===r)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n=r(20);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(21),i=r(24);t.exports=function(t){return function(e,r){var a,o,u=String(i(e)),s=n(r),c=u.length;return s<0||s>=c?t?"":void 0:(a=u.charCodeAt(s))<55296||a>56319||s+1===c||(o=u.charCodeAt(s+1))<56320||o>57343?t?u.charAt(s):a:t?u.slice(s,s+2):o-56320+(a-55296<<10)+65536}}},function(t,e,r){var n=r(4),i=r(20),a=r(5)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==i(t))}},function(t,e,r){var n=r(5)("iterator"),i=!1;try{var a=[7][n]();a.return=function(){i=!0},Array.from(a,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var a=[7],o=a[n]();o.next=function(){return{done:r=!0}},a[n]=function(){return o},t(a)}catch(t){}return r}},function(t,e,r){"use strict";var n=r(44),i=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var a=r.call(t,e);if("object"!=typeof a)throw new TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,r){"use strict";r(126);var n=r(12),i=r(11),a=r(3),o=r(24),u=r(5),s=r(95),c=u("species"),f=!a(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var h=u(t),p=!a(function(){var e={};return e[h]=function(){return 7},7!=""[t](e)}),d=p?!a(function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[c]=function(){return r}),r[h](""),!e}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],g=r(o,h,""[t],function(t,e,r,n,i){return e.exec===s?p&&!i?{done:!0,value:v.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}}),y=g[0],m=g[1];n(String.prototype,t,y),i(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,r){var n=r(2).navigator;t.exports=n&&n.userAgent||""},function(t,e,r){"use strict";var n=r(2),i=r(0),a=r(12),o=r(41),u=r(30),s=r(40),c=r(39),f=r(4),l=r(3),h=r(60),p=r(43),d=r(81);t.exports=function(t,e,r,v,g,y){var m=n[t],b=m,k=g?"set":"add",w=b&&b.prototype,x={},S=function(t){var e=w[t];a(w,t,"delete"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(y||w.forEach&&!l(function(){(new b).entries().next()}))){var A=new b,T=A[k](y?{}:-0,1)!=A,M=l(function(){A.has(1)}),E=h(function(t){new b(t)}),O=!y&&l(function(){for(var t=new b,e=5;e--;)t[k](e,e);return!t.has(-0)});E||((b=e(function(e,r){c(e,b,t);var n=d(new m,e,b);return null!=r&&s(r,g,n[k],n),n})).prototype=w,w.constructor=b),(M||O)&&(S("delete"),S("has"),g&&S("get")),(O||T)&&S(k),y&&w.clear&&delete w.clear}else b=v.getConstructor(e,t,g,k),o(b.prototype,r),u.NEED=!0;return p(b,t),x[t]=b,i(i.G+i.W+i.F*(b!=m),x),y||v.setStrong(b,t,g),b}},function(t,e,r){for(var n,i=r(2),a=r(11),o=r(33),u=o("typed_array"),s=o("view"),c=!(!i.ArrayBuffer||!i.DataView),f=c,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(n=i[h[l++]])?(a(n.prototype,u,!0),a(n.prototype,s,!0)):f=!1;t.exports={ABV:c,CONSTR:f,TYPED:u,VIEW:s}},function(t,e,r){"use strict";t.exports=r(29)||!r(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete r(2)[t]})},function(t,e,r){"use strict";var n=r(0);t.exports=function(t){n(n.S,t,{of:function(){for(var t=arguments.length,e=new Array(t);t--;)e[t]=arguments[t];return new this(e)}})}},function(t,e,r){"use strict";var n=r(0),i=r(10),a=r(19),o=r(40);t.exports=function(t){n(n.S,t,{from:function(t){var e,r,n,u,s=arguments[1];return i(this),(e=void 0!==s)&&i(s),null==t?new this:(r=[],e?(n=0,u=a(s,arguments[2],2),o(t,!1,function(t){r.push(u(t,n++))})):o(t,!1,r.push,r),new this(r))}})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=l(r(102)),i=l(r(149)),a=l(r(106)),o=l(r(47)),u=r(70),s=r(54),c=r(73),f=r(53);function l(t){return t&&t.__esModule?t:{default:t}}function h(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function g(t,e){return!e||"object"!==d(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function y(t,e){return(y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var m=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=g(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))).chartIdx,t.selector,t.grouping=new a.default,t.actions=[],t.animationStartTime=1e6,t.animationEndTime=0,t.root={},t}var r,l,m;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&y(t,e)}(e,o.default),r=e,m=[{key:"renderAnimation",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=this;this.allMarkAni.forEach(function(t,r){e.wholeEndTime<t.startTime+t.totalDuration&&(e.wholeEndTime=t.startTime+t.totalDuration)}),t&&(t.info="The duration of the generated animation is: "+this.wholeEndTime+"ms"),console.log("The duration of the generated animation is: "+this.wholeEndTime+"ms"),this.allMarkAni.forEach(function(t,r){for(var n,i=0;i<t.actionAttrs.length|(n=t.actionAttrs[i]);i++)"wholeEnd"===n.duration&&(n.duration=e.wholeEndTime-n.startTime)}),console.log("all mark ani: ",this.allMarkAni)}},{key:"findKeyframes",value:function(){}},{key:"translateToLottieChannel",value:function(t){switch(t){case"opacity":return["opacity"];case"x":case"cx":return["x"];case"y":case"cy":return["y"];case"r":return["scaleX","scaleY"];case"width":return["scaleX"];case"height":return["scaleY"];case"d":case"x1":case"x2":case"y1":case"y2":return["shape"];case"textContent":return["text"];case"fill":return["fillColor"];case"stroke":return["strokeColor"]}}},{key:"mapToLottieSpec",value:function(){var t=this;this.allMarkAni.forEach(function(r,n){for(var a=function(a){var l=r.actionAttrs[a];if(l.duration>0){var h=document.getElementById(n);if(l.type===i.default.actionTargets.mark){var d=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),v=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){if(l.animationType===i.default.targetAnimationType.custom){if("r"===t.attrName){var r=(0,c.getBoundingBox)(h);s.globalVar.markLayers.get(n).setStaticProperty("anchorX",r[2]/2),s.globalVar.markLayers.get(n).setStaticProperty("anchorY",r[3]/2)}else"text"===document.getElementById(n).tagName&&s.globalVar.markLayers.get(n).setStaticProperty("anchorY",0);var a=e.translateToLottieChannel(t.attrName);if(Array.isArray(t.to)){for(var o=0,f=0,g=0;g<t.to.length;g++)if(t.to[g][0]===n){o=t.from[g][1],f=t.to[g][1];break}a.forEach(function(t){if("shape"===t){var e,r,a=p(u.CanisUtil.transDToLottieSpec(o),2);e=a[0],o=a[1];var c=p(u.CanisUtil.transDToLottieSpec(f),2);r=c[0],f=c[1],s.globalVar.markLayers.get(n).setAnimatableProperty("x",d,v,e[0],r[0],i.default.transToLottieAction(l.easing)),s.globalVar.markLayers.get(n).setAnimatableProperty("y",d,v,e[1],r[1],i.default.transToLottieAction(l.easing))}else"fillColor"===t||"strokeColor"===t?o&&f&&"none"!==o&&"none"!==f?(o=u.CanisUtil.toLottieRGBA(o),f=u.CanisUtil.toLottieRGBA(f)):o=f=[0,0,0,0]:"opacity"===t&&(o*=100,f*=100);s.globalVar.markLayers.get(n).setAnimatableProperty(t,d,v,o,f,i.default.transToLottieAction(l.easing))})}else a.forEach(function(e){s.globalVar.markLayers.get(n).setAnimatableProperty(e,d,v,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))})}else s.globalVar.markLayers.get(n).setAnimatableProperty(t.attrName,d,v,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))})}else if(l.type===i.default.actionTargets.mask){var g,y=(0,c.getBoundingBox)(h),m=t.finalStatus.get(n)[l.chartIdx].outterRadius;switch(l.animationType){case i.default.targetAnimationType.wipe:case i.default.targetAnimationType.move:case i.default.targetAnimationType.appear:g=f.LayerFactory.boundingBox(h);break;case i.default.targetAnimationType.circle:(g=f.LayerFactory.ellipse(y[0]+y[2],y[1]+y[3],m,m)).setStaticProperty("anchorX",y[2]/2),g.setStaticProperty("anchorY",y[3]/2);break;case i.default.targetAnimationType.wheel:var b=u.CanisUtil.getPathOffset(h.getAttribute("d")),k=t.finalStatus.get(n)[l.chartIdx].cx+y[0]-b[0],w=t.finalStatus.get(n)[l.chartIdx].cy+y[1]-b[1];g=f.LayerFactory.ellipse(k,w,m,m);var x=t.finalStatus.get(n)[l.chartIdx].startAngle,S=t.finalStatus.get(n)[l.chartIdx].endAngle;g.setStaticProperty("trimOffset",-x/Math.PI/2*360-90),l.attribute[0].to=1-(S-x)%(2*Math.PI)/(2*Math.PI),g.setStaticProperty("strokeWidth",2*m),g.setStaticProperty("fillOpacity",0)}var A=Math.ceil(l.startTime/(1e3/o.default.FRAME_RATE)),T=Math.ceil((l.startTime+l.duration)/(1e3/o.default.FRAME_RATE));l.attribute.forEach(function(t){g.setAnimatableProperty(t.attrName,A,T,100*t.from,100*t.to,i.default.transToLottieAction(l.easing))}),s.globalVar.jsMovin.addMask(g,s.globalVar.markLayers.get(n),l.maskType)}else console.error("unkonwn actions target: ",l.type)}},l=0;l<r.actionAttrs.length;l++)a(l)})}},{key:"resetAll",value:function(){this.wholeEndTime=0,this.allMarkAni.clear(),this.frameTime.clear(),this.finalStatus.clear(),this.animations.clear()}}],(l=[{key:"translate",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.chartIdx=t.chartIdx,r||(this.selector=t.selector),this.reference=t.reference,this.offset=t.offset,void 0!==t.grouping&&this.grouping.initGrouping(t.grouping),void 0!==t.effects){r&&(this.actions=[]);for(var a,o=0;o<t.effects.length|(a=t.effects[o]);o++){a.chartIdx=t.chartIdx;for(var u,s=i.default.transToVisualAttrAction(a,t.chartIdx,e,n.default.dataTrans),c=0;c<s.length|(u=s[c]);c++){var f=new i.default;f.initAction(u),this.actions.push(f)}}}}},{key:"calAniTime",value:function(t,r){console.time("cal ani time");for(var n,o=this,s=new Map,c=0;c<t.length|(n=t[c]);c++){for(var f,l=new Map,v=0;v<this.actions.length|(f=this.actions[v]);v++)if("object"===d(f.duration)){var g=e.domMarks.get(n)["data-datum"],y=parseFloat(g[f.duration.field]),m=void 0===f.duration.minDuration?300:f.duration.minDuration;l.set(f.duration.field,[y,m])}s.set(n,l)}var b=p(i.default.calActionDuration(this.actions,s,e.domMarks),3),k=b[0],w=b[1],x=b[2];console.log("after calculate actions: ",this.actions,k,w,x);var S=this.grouping.arrangeOrder(t,e.domMarks,this.root);console.log("animation frames: ",a.default.frames);for(var A,T=new Map,M=0;M<S.length|(A=S[M]);M++){for(var E,O={},_=0;_<e.visualAttrs.length|(E=e.visualAttrs[_]);_++)if(void 0===e.domMarks.get(A)[E])switch(E){case"opacity":O[E]=1;break;case"width":O[E]=e.domMarks.get(A).bbWidth;break;case"height":O[E]=e.domMarks.get(A).bbHeight;break;case"x":O[E]=e.domMarks.get(A).bbX;break;case"y":O[E]=e.domMarks.get(A).bbY;break;case"cx":void 0!==e.domMarks.get(A).cx?O[E]=e.domMarks.get(A).cx:O[E]=e.domMarks.get(A).bbX+e.domMarks.get(A).bbWidth/2;break;case"cy":void 0!==e.domMarks.get(A).cy?O[E]=e.domMarks.get(A).cy:O[E]=e.domMarks.get(A).bbY+e.domMarks.get(A).bbHeight/2;break;case"innerRadius":void 0!==e.domMarks.get(A).innerRadius?O[E]=e.domMarks.get(A).innerRadius:O[E]=0;break;case"outterRadius":void 0!==e.domMarks.get(A).outterRadius?O[E]=e.domMarks.get(A).outterRadius:O[E]=Math.sqrt(Math.pow(e.domMarks.get(A).bbWidth/2,2)+Math.pow(e.domMarks.get(A).bbHeight/2,2))+1;break;case"startAngle":void 0!==e.domMarks.get(A).startAngle?O[E]=e.domMarks.get(A).startAngle:O[E]=0;break;case"endAngle":void 0!==e.domMarks.get(A).endAngle?O[E]=e.domMarks.get(A).endAngle:O[E]=2*Math.PI}else O[E]=e.domMarks.get(A)[E];void 0===e.finalStatus.get(A)&&e.finalStatus.set(A,[]),e.finalStatus.get(A).push(O),T.set(A,{startTime:0,totalDuration:k.get(A),actionAttrs:[]})}console.log("going in cal time with tree: ",T,T.get("mark152")),this.grouping.calTimeWithTree(this.root,-1,-1,T),console.log("generated tree: ",this.root),console.log("frame time",a.default.framesMark);var P=1e4;T.forEach(function(t,e){t.startTime<P&&(P=t.startTime)});var I=void 0===r?this.calOffsetTime(0,0,P,e.domMarks):this.calOffsetTime(r.animationStartTime,r.animationEndTime,P,e.domMarks);T.forEach(function(t,r){var n={startTime:t.startTime+I.get(r),totalDuration:t.totalDuration,actionAttrs:[]};n.startTime<o.animationStartTime&&(o.animationStartTime=n.startTime),n.startTime+n.totalDuration>o.animationEndTime&&(o.animationEndTime=n.startTime+n.totalDuration);for(var a,s=0;s<x.length|(a=x[s]);s++){for(var c,f=new i.default,l=Object.keys(a),h=0;h<l.length|(c=l[h]);h++)if(f[c]=a[c],"_duration"===c&&"object"===d(a[c])){var p=e.domMarks.get(r)["data-datum"],v=w.get(a[c].field);f[c]=a[c].minDuration*parseFloat(p[a[c].field])/v}else"offsetStart"===c&&(f[c]=a[c].get(r));f.animationType===i.default.targetAnimationType.custom?u.CanisUtil.checkValidProp(e.domMarks.get(r).tagName,f.attribute[0].attrName)&&n.actionAttrs.push(f):n.actionAttrs.push(f)}T.set(r,n)}),T.forEach(function(t,r){for(var n=0,i=0;i<t.actionAttrs.length;i++)t.actionAttrs[i].startTime=t.startTime+t.actionAttrs[i].offsetStart,t.actionAttrs[i].startTime+t.actionAttrs[i].duration>n&&(n=t.actionAttrs[i].startTime+t.actionAttrs[i].duration);if(void 0===e.allMarkAni.get(r))e.allMarkAni.set(r,t);else{var o=e.allMarkAni.get(r).startTime,u=o+e.allMarkAni.get(r).totalDuration;e.allMarkAni.get(r).startTime=o<t.startTime?o:t.startTime;var s=t.startTime+t.totalDuration;u=u>s?u:s,e.allMarkAni.get(r).totalDuration=u-e.allMarkAni.get(r).startTime,e.allMarkAni.get(r).actionAttrs=[].concat(h(e.allMarkAni.get(r).actionAttrs),h(t.actionAttrs))}a.default.framesMark.get(r)?e.frameTime.set(n,!0):void 0===e.frameTime.get(n)&&e.frameTime.set(n,!1)}),console.timeEnd("cal ani time")}}])&&v(r.prototype,l),m&&v(r,m),e}();m.visualAttrs=["x","y","cx","cy","innerRadius","outterRadius","startAngle","endAngle","width","height","opacity","fill","stroke","content","stroke-dasharray","stroke-dashoffset"],m.domMarks=new Map,m.wholeEndTime=0,m.frameTime=new Map,m.animations=new Map,m.finalStatus=new Map,m.allMarkAni=new Map,m.easeFuncs={easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return t/2<1?.5*t*t:-(--t*(t-2)-1)/2},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return(t-=1)*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?t*t*t/2:((t-=2)*t*t+2)/2},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}};var b=m;e.default=b,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AssetTemplate=e.Viewport=e.CanisUtil=void 0;var n=r(53),i=r(104);function a(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function c(t,e,r){return e&&s(t.prototype,e),r&&s(t,r),t}var f=function(){function t(){u(this,t)}return c(t,null,[{key:"deepClone",value:function(t){if(!t||1==t)return t;var e=o(t);if("number"==e||"string"==e)return t;var r=Array.isArray(t)?[]:{};if(t instanceof Map){r=new Map;for(var n=0;n<t.keys().length;n++){var i=t.keys()[n];r.set(i,this.deepClone(t.get(i)))}}for(var a in t)t.hasOwnProperty(a)&&(r[a]=this.deepClone(t[a]));return r}},{key:"formatTime",value:function(t){var e=parseInt(t/1e3),r=parseInt(t%1e3/10);return(e<10?"0"+e:""+e)+":"+(r<10?"0"+r:""+r)}},{key:"color2RGB",value:function(t){if(t){if(t=t.toLowerCase(),Array.from(this.colorNames.keys()).includes(t)&&(t=this.colorNames.get(t)),(t=t.replace(/\s/g,"")).indexOf("rgb")>=0){var e=t.substr(t.indexOf("(")+1),r=(e=e.substring(0,e.indexOf(")"))).split(",");return 3===r.length&&(r[3]=255),[parseInt(r[0]),parseInt(r[1]),parseInt(r[2]),parseInt(r[3])]}if(t.indexOf("#")>=0)return this.HEX2RGB(t)}return"none"}},{key:"HEX2RGB",value:function(t){if("#"===t.charAt(0)&&(t=t.substr(1)),t.length<2||t.length>6)return!1;var e,r,n,i=t.split("");if(2===t.length)r=e=parseInt(i[0].toString()+i[1].toString(),16),n=e;else if(3===t.length)e=parseInt(i[0].toString()+i[0].toString(),16),r=parseInt(i[1].toString()+i[1].toString(),16),n=parseInt(i[2].toString()+i[2].toString(),16);else{if(6!==t.length)return!1;e=parseInt(i[0].toString()+i[1].toString(),16),r=parseInt(i[2].toString()+i[3].toString(),16),n=parseInt(i[4].toString()+i[5].toString(),16)}return[e,r,n,255]}},{key:"toLottieRGBA",value:function(t){return this.color2RGB(t).map(function(t){return t/255})}},{key:"toJSON",value:function(t){var e={nodeType:(t=t||this).nodeType};t.tagName?e.tagName=t.tagName.toLowerCase():t.nodeName&&(e.nodeName=t.nodeName),t.nodeValue&&(e.nodeValue=t.nodeValue);var r=t.attributes;if(r){e.attr={};for(var n,i=0;i<r.length|(n=r[i]);i++)e.attr[n.nodeName]=n.nodeValue}return e}},{key:"toDOM",value:function(t){var e;switch("string"==typeof t&&(t=JSON.parse(t)),t.nodeType){case 1:e=document.createElementNS("http://www.w3.org/2000/svg",t.tagName);for(var r,n=t.attr||{},i=0;i<Object.keys(n).length|(r=Object.keys(n)[i]);i++){var a="object"===o(n[r])?JSON.stringify(n[r],null,0):n[r];e.setAttributeNS(null,r,a)}break;case 3:e=document.createTextNode(t.nodeValue);break;case 8:e=document.createComment(t.nodeValue);break;case 9:e=document.implementation.createDocument();break;case 10:e=document.implementation.createDocumentType(t.nodeName);break;case 11:e=document.createDocumentFragment();break;default:return e}return e}},{key:"discretizePath",value:function(t){if("path"!==t.tagName)return null;var e=t.attr||{};return e.d?this.discretizeD(e.d,e.fill):null}},{key:"discretizeD",value:function(e,r){for(var n=[],i=/[MmLlHhVvZzCcSsQqTtAa][^MmLlHhVvZzCcSsQqTtAa]*/gi,a=void 0;a=i.exec(e);){var o=n.reduce(function(t,e){return t+e.length},0);n.push(e.slice(o,a.index)),n.push(a[0])}var u=n.map(function(t){var e=t.slice(0,1),r=t.slice(1).split(/[ ,]/).filter(function(t){return t.trim()}).map(function(t){return parseFloat(t)});return e?{command:e,parameters:r}:null}).filter(function(t){return t});if(u.every(function(t){return"MmLlHhVv".includes(t.command)})&&!t.convertColor(r)){var s=[],c=null,f=!0;if(u.forEach(function(t){if(f)if("M"!==t.command){if(!c)return f=!1;if("m"!==t.command){var e=c,r=t.command===t.command.toLowerCase()?c.slice():[0,0];switch(t.command.toLowerCase()){case"l":r=r.map(function(e,r){return e+t.parameters[r]});break;case"h":r[0]+=t.parameters[0],r[1]=e[1];break;case"v":r[1]+=t.parameters[0],r[0]=e[0]}r?(s.push([e,r]),c=r):f=!1}else c=c.map(function(e,r){return e+t.parameters[r]})}else c=t.parameters.slice(-2)}),f)return{type:"lines",data:s}}if(u.every(function(t){return"MmLlAaZz".includes(t.command)})&&u.filter(function(t){return"a"===t.command.toLowerCase()}).length){var l=[],h=null,p=!0;if(u.forEach(function(e){if(p)if("m"!==e.command.toLowerCase()){if(!h)return p=!1;if("z"!==e.command.toLowerCase()){var r=h,n=e.command.toLowerCase()===e.command?h.slice():[0,0];if("a"!==e.command.toLowerCase())return h=n.map(function(t,r){return t+e.parameters[r]});n=n.map(function(t,r){return t+e.parameters[r+5]});var i=t.svgArcToCenterParam.apply(null,r.concat(e.parameters.slice(0,5)).concat(n));isNaN(i.cx)||isNaN(i.cy)||l.push({...i,rx:e.parameters[0],ry:e.parameters[1],rotate:e.parameters[2]}),h=n}}else h=e.parameters.slice(-2)}),(l.length<=0||!l.every(function(t){return["cx","cy"].reduce(function(e,r){return e+Math.abs(t[r]-l[0][r])},0)<.1}))&&(p=!1),p){var d=l.reduce(function(t,e){return t?e.rx+e.ry>t.rx+t.ry?e:t:e},null);return{type:"pies",data:{cx:d.cx,cy:d.cy,startAngle:d.startAngle,endAngle:d.endAngle,clockwise:d.clockwise,radius:l.map(function(t){return{rx:t.rx,ry:t.ry,rotate:t.rotate}})}}}}return null}},{key:"radian",value:function(t,e,r,n){var i=t*r+e*n,a=Math.sqrt((t*t+e*e)*(r*r+n*n)),o=Math.acos(i/a);return t*n-e*r<0&&(o=-o),o}},{key:"svgArcToCenterParam",value:function(e,r,n,i,a,o,u,s,c){var f,l,h,p,d,v=2*Math.PI;n<0&&(n=-n),i<0&&(i=-i);var g=Math.sin(a),y=Math.cos(a),m=(e-s)/2,b=(r-c)/2,k=(e+s)/2,w=(r+c)/2,x=y*m+g*b,S=y*b-g*m,A=x*x/(n*n)+S*S/(i*i);A>1&&(n*=Math.sqrt(A),i*=Math.sqrt(A));var T=n*i,M=n*S,E=i*x,O=M*M+E*E,_=Math.sqrt(Math.abs((T*T-O)/O));o==u&&(_=-_);var P=_*M/i,I=-_*E/n;f=y*P-g*I+k,l=g*P+y*I+w;var N=(x-P)/n,F=(x+P)/n,j=(S-I)/i,C=(S+I)/i;for(h=t.radian(1,0,N,j),p=t.radian(N,j,-F,-C);p>v;)p-=v;for(;p<0;)p+=v;for(0!=u&&0!=u||(p-=v),d=h+p;d>v;)d-=v;for(;d<0;)d+=v;return{cx:f,cy:l,startAngle:h,deltaAngle:p,endAngle:d,clockwise:1==u||1==u}}},{key:"convertColor",value:function(t,e,r){if("string"!=typeof t)return t;if("none"===t)return null;t=t.trim();var n=null;switch(void 0===r&&(r=e,t.startsWith("#")?e="hex":t.startsWith("rgb")&&(e="rgb")),e){case"rgb":n=t.split("(")[1].split(",").map(function(t){return parseFloat(t)});break;case"hex":n=t.slice(1).match(/.{1,2}/g).map(function(t){return parseInt(t,16)});default:return t}switch(n=n.slice(0,3),r){case"hex":return"#"+n.map(function(t){return t.toString(16).padStart(2,"0")}).join("");case"rgb":return"rgb(".concat(n.join(","),")");default:return t}}},{key:"polarToCartesian",value:function(t,e,r,n){return{x:Math.round(100*(t+r*Math.cos(n)))/100,y:Math.round(100*(e+r*Math.sin(n)))/100}}},{key:"arc",value:function(e,r,n,i,a,o){a=a<0?a+2*Math.PI:a,n=0===n?0:n-1,i+=1;var u=(o=o<0||a>o?o+2*Math.PI:o)-a<=Math.PI?0:1,s=t.polarToCartesian(e,r,i,o),c=t.polarToCartesian(e,r,i,a),f=t.polarToCartesian(e,r,n,o),l=t.polarToCartesian(e,r,n,a),h=!1;return s.x===c.x&&s.y===c.y&&(c.y-=1,l.y-=1,h=!0),h?["M"+s.x,s.y,"A"+i,i,0,u,1,c.x,c.y,"M"+l.x,l.y,"A"+n,n,0,u,0,f.x,f.y+"Z"].join(","):["M"+s.x,s.y,"A"+i,i,0,u,0,c.x,c.y,"L"+l.x,l.y,"A"+n,n,0,u,1,f.x,f.y,"L"+s.x,s.y+"Z"].join(",")}},{key:"domNodeToString",value:function(t){var e=document.createElement("div");return e.appendChild(t),e.innerHTML}},{key:"strToDomNode",value:function(t){var e=document.createElement("div");return e.innerHTML=t.trim(),e.firstChild}},{key:"transShape",value:function(e,r,n){if("path"!==e.tagName){var i=!1;(e.getAttribute("x")||e.getAttribute("y"))&&(i=!0,e.setAttribute("x",e.getAttribute("x")?parseFloat(e.getAttribute("x"))+r:r),e.setAttribute("y",e.getAttribute("y")?parseFloat(e.getAttribute("y"))+n:n)),(e.getAttribute("x1")||e.getAttribute("y1")||e.getAttribute("x2")||e.getAttribute("y2"))&&(i=!0,e.setAttribute("x1",e.getAttribute("x1")?parseFloat(e.getAttribute("x1"))+r:r),e.setAttribute("x2",e.getAttribute("x2")?parseFloat(e.getAttribute("x2"))+r:r),e.setAttribute("y1",e.getAttribute("y1")?parseFloat(e.getAttribute("y1"))+n:n),e.setAttribute("y2",e.getAttribute("y2")?parseFloat(e.getAttribute("y2"))+n:n)),(e.getAttribute("cx")||e.getAttribute("cy"))&&(i=!0,e.setAttribute("cx",e.getAttribute("cx")?parseFloat(e.getAttribute("cx"))+r:r),e.setAttribute("cy",e.getAttribute("cy")?parseFloat(e.getAttribute("cy"))+n:n)),i||("circle"===e.tagName?(e.setAttribute("cx",r),e.setAttribute("cy",n)):(e.setAttribute("x",r),e.setAttribute("y",n)))}else if(e.getAttribute("d")){var a=t.setPathDValue(e.getAttribute("d"),!1,r,n);e.setAttribute("d",a)}}},{key:"splitPath",value:function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttributeNS(null,"d",t);for(var r=e.getTotalLength()/300,n="",i=0;i<300;i++){var a=e.getPointAtLength(r*i);n+=0===i?"M"+a.x+","+a.y:"L"+a.x+","+a.y}return n+="Z"}},{key:"getPathOffset",value:function(t){var e,r=t,a=(0,i.parseSVG)(r),o=new n.PathMaker;return a.forEach(function(t){switch(t.code){case"M":e=t,o.moveTo(e.x,e.y);break;case"L":e=t,o.lineTo(e.x,e.y);break;case"l":e=t,o.lineToRelative(e.x,e.y);break;case"H":e=t,o.horizontalTo(e.x);break;case"h":e=t,o.horizontalToRelative(e.x);break;case"V":e=t,o.verticalTo(e.y);break;case"v":e=t,o.verticalToRelative(e.y);break;case"C":e=t,o.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,o.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,o.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,o.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,o.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,o.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":o.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}}),[o.offsetX,o.offsetY]}},{key:"transDToLottieSpec",value:function(t){var e=this.getPathOffset(t),r=new n.PathMaker(t);return r.uniform(),[e,r]}},{key:"setPathDValue",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:new Map;t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var a=new RegExp(/[mMlLhHvVcCsSqQtTaAzZ][^mMlLhHvVcCsSqQtTaAzZ]*/g),o="",u=t.match(a);if(u){var s=u[0].substring(0,1),c="0",f="0";if("m"===s||"M"===s){var l=u[0].substring(1).split(",");c=l[0],f=l[1]}for(var h=0;h<u.length;h++){var p=u[h].substring(0,1),d=u[h].substring(1);switch(o+=p,p){case"H":o=this.calNumTrans(o,i,h,p,d,e,c,r);break;case"h":o=this.calNumTrans(o,i,h,p,d,e,"0",0);break;case"V":o=this.calNumTrans(o,i,h,p,d,e,f,n);break;case"v":o=this.calNumTrans(o,i,h,p,d,e,"0",0);break;case"M":case"L":case"T":case"C":case"S":case"Q":for(var v=d.split(","),g=0;g<v.length;g++)o=g%2==0?this.calNumTrans(o,i,h,p,v[g],e,c,r):this.calNumTrans(o,i,h,p,v[g],e,f,n),g!==v.length-1&&(o+=" ");break;case"m":case"l":case"t":case"c":case"s":case"q":for(var y=d.split(","),m=0;m<y.length;m++)o=this.calNumTrans(o,i,h,p,y[m],e,"0",0),m!==y.length-1&&""!==y[m]&&(o+=" ");break;case"A":for(var b=d.split(","),k=0;k<b.length;k++)k===b.length-2?(o=this.calNumTrans(o,i,h,p,b[k],e,parseFloat(c)+1,r),o+=" "):k===b.length-1?o=this.calNumTrans(o,i,h,p,b[k],e,parseFloat(f)+1,n):o+=b[k]+" ";break;case"a":for(var w=d.split(","),x=0;x<w.length;x++)x===w.length-2?(o=this.calNumTrans(o,i,h,p,w[x],e,"1",0),o+=" "):x===w.length-1?o=this.calNumTrans(o,i,h,p,w[x],e,"1",0):o+=w[x]+" "}}"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(o+="Z")}return o}},{key:"calNumTrans",value:function(t,e,r,n,i,a,o,u){if(n=n.toLowerCase(),a)if(void 0!==e.get(n)){for(var s=e.get(n),c=!1,f=0;f<s.length;f++)if(s[f].cmdIdx===r){t+=o,c=!0;break}c||(t+=i)}else t+=i;else i.length>0&&(t+=parseFloat(i)+u);return t}},{key:"calTransD",value:function(t,e,r,n,i){t=t.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,","),e=e.replace(/(?<=\d)\s(?=[mMlLhHvVcCsSqQtTaAzZ])/g,"").replace(/(?<=[mMlLhHvVcCsSqQtTaA])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",");var a="";if(0===r)a=t;else if(1===r)a=e;else for(var o=0,u=n.length;o<u;o++)a+=(0===o?"M":"L")+((i[o][0]-n[o][0])*r+n[o][0])+","+((i[o][1]-n[o][1])*r+n[o][1]);return"z"!==t.charAt(t.length-1)&&"Z"!==t.charAt(t.length-1)||(a+="Z"),a}},{key:"arcTransition",value:function(t,e,r,n,i,a){var o=function(t,e){return e<t?function(){throw"startAngle should smaller than endAngle"}():null};o(t,e),o(r,n);var u=function(t,e){return e-2*Math.PI*Math.floor((e-t)/Math.PI/2)};e=u(t,e),r=u(t,r),n=u(r,n),n=u(r-=Math.abs(r-t)+Math.abs(n-e)<2*Math.PI?0:2*Math.PI,n);var s=a||function(t,e,r){return r*(e-t)+t};return[s(t,r,i),s(e,n,i)]}},{key:"findDiffCmds",value:function(e){var r=new Map;return e.forEach(function(e,n){for(var i=[],a=0;a<e.length;a++)void 0!==e[a]&&i.push(e[a].d?e[a].d:"m0,0");i.length>0&&t.compareD(i,r)}),r}},{key:"compareD",value:function(t,e){for(var r=new RegExp(/[mlhvcsqta][^mlhvcsqtaz]*/g),n=t[0],i=(n=(n=n.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),o=1;o<t.length;o++)for(var u=t[o],s=(u=(u=u.toLowerCase()).replace(/(?<=\d)\s(?=[mlhvcsqtaz])/g,"").replace(/(?<=[mlhvcsqta])\s(?=(\d|[-+]))/g,"").replace(/\s/g,",")).match(r),c=0;c<i.length;c++)if(void 0===s[c]){var f=i[c].substring(0,1);void 0===e.get(f)&&e.set(f,[]);var l={};l.cmdIdx=c,l.diffAttrIdxs=[];for(var h=i[c].substring(1).split(","),p=0;p<h.length;p++)l.diffAttrIdxs.push(p);e.get(f).push(l)}else{var d=s[c].substring(0,1),v=s[c].substring(1),g=i[c].substring(1);if(v!==g){void 0===e.get(d)&&e.set(d,[]);var y={};y.cmdIdx=c,y.diffAttrIdxs=[];for(var m=v.split(","),b=g.split(","),k=0;k<m.length;k++)Math.floor(1e3*parseFloat(m[k]))!==Math.floor(1e3*parseFloat(b[k]))&&y.diffAttrIdxs.push(k);for(var w=!1,x=0;x<e.get(d).length;x++)if(e.get(d)[x].cmdIdx===y.cmdIdx){w=!0,e.get(d)[x].diffAttrIdxs=[].concat(a(new Set([].concat(a(e.get(d)[x].diffAttrIdxs),a(y.diffAttrIdxs)))));break}w||e.get(d).push(y)}}}},{key:"getTransformAttrs",value:function(t){var e=t.getAttribute("transform");if(e){e=(e=e.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var r="",n="",i=0;i<e.length;i++)e[i].indexOf("translate")>=0?n=e[i]:e[i].indexOf("scale")>=0&&(r=e[i]);var a=["0","0"],o="1";return""!==n&&(a=n.replace(/translate\(| |\)/g,"").split(",")),""!==r&&(o=r.replace(/scale\(| |\)/g,"")),{transNums:[parseFloat(a[0]),parseFloat(a[1])],scaleNum:parseFloat(o)}}return{transNums:[0,0],scaleNum:1}}},{key:"checkValidProp",value:function(t,e){switch(t){case"circle":return["opacity","cx","cy","r","stroke","stroke-width","fill"].includes(e);case"ellipse":return["opacity","cx","cy","rx","ry","stroke","stroke-width","fill"].includes(e);case"image":return["x","y","width","height","href","xlink:href","preserveAspectRatio"].includes(e);case"line":return["opacity","x1","x2","y1","y2","stroke","stroke-width","fill"].includes(e);case"path":return["opacity","d","stroke","stroke-width","fill"].includes(e);case"polygon":case"polyline":return["opacity","points","stroke","stroke-width","fill"].includes(e);case"rect":return["opacity","x","y","width","height","rx","ry","stroke","stroke-width","fill"].includes(e);case"text":return["opacity","x","y","dx","dy","textContent"].includes(e);default:return!1}}},{key:"checkHTML",value:function(t){return/<[^>]+>/g.test(t)}}]),t}();e.CanisUtil=f,f.colorNames=new Map([["aliceblue","#f0f8ff"],["antiquewhite","#faebd7"],["aqua","#00ffff"],["aquamarine","#7fffd4"],["azure","#f0ffff"],["beige","#f5f5dc"],["bisque","#ffe4c4"],["black","#000000"],["blanchedalmond","#ffebcd"],["blue","#0000ff"],["blueviolet","#8a2be2"],["brown","#a52a2a"],["burlywood","#deb887"],["cadetblue","#5f9ea0"],["chartreuse","#7fff00"],["chocolate","#d2691e"],["coral","#ff7f50"],["cornflowerblue","#6495ed"],["cornsilk","#fff8dc"],["crimson","#dc143c"],["cyan","#00ffff"],["darkblue","#00008b"],["darkcyan","#008b8b"],["darkgoldenrod","#b8860b"],["darkgray","#a9a9a9"],["darkgrey","#a9a9a9"],["darkgreen","#006400"],["darkkhaki","#bdb76b"],["darkmagenta","#8b008b"],["darkolivegreen","#556b2f"],["darkorange","#ff8c00"],["darkorchid","#9932cc"],["darkred","#8b0000"],["darksalmon","#e9967a"],["darkseagreen","#8fbc8f"],["darkslateblue","#483d8b"],["darkslategray","#2f4f4f"],["darkslategrey","#2f4f4f"],["darkturquoise","#00ced1"],["darkviolet","#9400d3"],["deeppink","#ff1493"],["deepskyblue","#00bfff"],["dimgray","#696969"],["dimgrey","#696969"],["dodgerblue","#1e90ff"],["firebrick","#b22222"],["floralwhite","#fffaf0"],["forestgreen","#228b22"],["fuchsia","#ff00ff"],["gainsboro","#dcdcdc"],["ghostwhite","#f8f8ff"],["gold","#ffd700"],["goldenrod","#daa520"],["gray","#808080"],["grey","#808080"],["green","#008000"],["greenyellow","#adff2f"],["honeydew","#f0fff0"],["hotpink","#ff69b4"],["indianred ","#cd5c5c"],["indigo  ","#4b0082"],["ivory","#fffff0"],["khaki","#f0e68c"],["lavender","#e6e6fa"],["lavenderblush","#fff0f5"],["lawngreen","#7cfc00"],["lemonchiffon","#fffacd"],["lightblue","#add8e6"],["lightcoral","#f08080"],["lightcyan","#e0ffff"],["lightgoldenrodyellow","#fafad2"],["lightgray","#d3d3d3"],["lightgrey","#d3d3d3"],["lightgreen","#90ee90"],["lightpink","#ffb6c1"],["lightsalmon","#ffa07a"],["lightseagreen","#20b2aa"],["lightskyblue","#87cefa"],["lightslategray","#778899"],["lightslategrey","#778899"],["lightsteelblue","#b0c4de"],["lightyellow","#ffffe0"],["lime","#00ff00"],["limegreen","#32cd32"],["linen","#faf0e6"],["magenta","#ff00ff"],["maroon","#800000"],["mediumaquamarine","#66cdaa"],["mediumblue","#0000cd"],["mediumorchid","#ba55d3"],["mediumpurple","#9370db"],["mediumseagreen","#3cb371"],["mediumslateblue","#7b68ee"],["mediumspringgreen","#00fa9a"],["mediumturquoise","#48d1cc"],["mediumvioletred","#c71585"],["midnightblue","#191970"],["mintcream","#f5fffa"],["mistyrose","#ffe4e1"],["moccasin","#ffe4b5"],["navajowhite","#ffdead"],["navy","#000080"],["oldlace","#fdf5e6"],["olive","#808000"],["olivedrab","#6b8e23"],["orange","#ffa500"],["orangered","#ff4500"],["orchid","#da70d6"],["palegoldenrod","#eee8aa"],["palegreen","#98fb98"],["paleturquoise","#afeeee"],["palevioletred","#db7093"],["papayawhip","#ffefd5"],["peachpuff","#ffdab9"],["peru","#cd853f"],["pink","#ffc0cb"],["plum","#dda0dd"],["powderblue","#b0e0e6"],["purple","#800080"],["rebeccapurple","#663399"],["red","#ff0000"],["rosybrown","#bc8f8f"],["royalblue","#4169e1"],["saddlebrown","#8b4513"],["salmon","#fa8072"],["sandybrown","#f4a460"],["seagreen","#2e8b57"],["seashell","#fff5ee"],["sienna","#a0522d"],["silver","#c0c0c0"],["skyblue","#87ceeb"],["slateblue","#6a5acd"],["slategray","#708090"],["slategrey","#708090"],["snow","#fffafa"],["springgreen","#00ff7f"],["steelblue","#4682b4"],["tan","#d2b48c"],["teal","#008080"],["thistle","#d8bfd8"],["tomato","#ff6347"],["turquoise","#40e0d0"],["violet","#ee82ee"],["wheat","#f5deb3"],["white","#ffffff"],["whitesmoke","#f5f5f5"],["yellow","#ffff00"],["yellowgreen","#9acd32"]]);var l=function(){function t(){u(this,t),this.chartWidth=0,this.chartHeight=0}return c(t,[{key:"setViewport",value:function(t,e){this.chartWidth=t,this.chartHeight=e}}]),t}();e.Viewport=l;var h=function(){function t(){u(this,t)}return c(t,[{key:"construcor",value:function(t,e,r,n,i){this.tagName=t,this.visualProps=e,this.animateProps=r,this.boundingBox=n,this.jsMovinLayerIdx=i}}],[{key:"compareTemplate",value:function(t,e){return t.tagName===e.tagName&&(!!this.compareVisualProps(t.visualProps,e.visualProps)&&void 0)}},{key:"compareVisualProps",value:function(t,e){var r=["x","y","width","height","r","opacity","d"],n=[].concat(a(Object.keys(t)),a(Object.keys(e))).filter(function(r){void 0===t[r]||void 0===e[r]||(t[r],e[r])});if(n.includes("d")){var i=new RegExp(/[0-9\.,\s]/g);return t.d.replace(i,"")===e.d.replace(i,"")}return n.every(function(t){return r.indexOf(t)>=0})}},{key:"checkElementsSelected",value:function(t){console.log(t)}}]),t}();e.AssetTemplate=h},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PathMaker=void 0;var n=r(104);function i(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var u=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,"path",{c:!1,i:[],o:[],v:[]}),o(this,"currentX",0),o(this,"currentY",0),o(this,"offsetX",1/0),o(this,"offsetY",1/0),o(this,"pathReady",!1),o(this,"pathStart",[0,0]),o(this,"pathChain",[]),e&&this.parse(e)}var e,r,u;return e=t,u=[{key:"a2c",value:function(t,e,r,n,i,a,o,u,s,c){var f,l=120*Math.PI/180,h=Math.PI/180*(+i||0),p=[],d=function(t,e,r){return{x:t*Math.cos(r)-e*Math.sin(r),y:t*Math.sin(r)+e*Math.cos(r)}};if(!r||!n)return[t,e,u,s,u,s];if(c)S=c[0],A=c[1],w=c[2],x=c[3];else{t=(f=d(t,e,-h)).x,e=f.y,u=(f=d(u,s,-h)).x,s=f.y,Math.cos(Math.PI/180*i),Math.sin(Math.PI/180*i);var v=(t-u)/2,g=(e-s)/2,y=v*v/(r*r)+g*g/(n*n);y>1&&(r*=y=Math.sqrt(y),n*=y);var m=r*r,b=n*n,k=(a==o?-1:1)*Math.sqrt(Math.abs((m*b-m*g*g-b*v*v)/(m*g*g+b*v*v))),w=k*r*g/n+(t+u)/2,x=k*-n*v/r+(e+s)/2,S=Math.asin((e-x)/n),A=Math.asin((s-x)/n);S=t<w?Math.PI-S:S,A=u<w?Math.PI-A:A,S<0&&(S=2*Math.PI+S),A<0&&(A=2*Math.PI+A),o&&S>A&&(S-=2*Math.PI),!o&&A>S&&(A-=2*Math.PI)}var T=A-S;if(Math.abs(T)>l){var M=A,E=u,O=s;A=S+l*(o&&A>S?1:-1),u=w+r*Math.cos(A),s=x+n*Math.sin(A),p=this.a2c(u,s,r,n,i,0,o,E,O,[A,M,w,x])}T=A-S;var _=Math.cos(S),P=Math.sin(S),I=Math.cos(A),N=Math.sin(A),F=Math.tan(T/4),j=4/3*r*F,C=4/3*n*F,R=[t,e],L=[t+j*P,e-C*_],B=[u+j*N,s-C*I],V=[u,s];if(L[0]=2*R[0]-L[0],L[1]=2*R[1]-L[1],c)return[L,B,V].concat(p);for(var D=[],G=0,U=(p=[L,B,V].concat(p).join().split(",").map(function(t){return parseFloat(t)})).length;G<U;G++)D[G]=G%2?d(p[G-1],p[G],h).y:d(p[G],p[G+1],h).x;return D}}],(r=[{key:"updateXY",value:function(t,e){this.currentX=t,this.currentY=e,this.offsetX=Math.min(this.offsetX,t),this.offsetY=Math.min(this.offsetY,e)}},{key:"calculateBezierMinMax",value:function(t,e,r,n){var i=3*(n-3*r+3*e-t),a=6*(r-2*e+t),o=3*(e-t),u=1/0,s=-1/0;if(a*a-4*i*o>=0){var c=Math.sqrt(a*a-4*i*o);[1,-1].map(function(t){return(t*c-a)/2/i}).forEach(function(i){if(i>0&&i<1){var a=Math.pow(1-i,3)*t+3*Math.pow(1-i,2)*i*e+3*(1-i)*i*i*r+Math.pow(i,3)*n;u=Math.min(u,a),s=Math.max(s,a)}})}return u=Math.min(u,t,n),s=Math.max(s,t,n),[u,s]}},{key:"calculateHighlyOrder",value:function(t,e){var r=[];return t.forEach(function(t,n,i){n>=i.length-1||r.push(t*(1-e)+i[n+1]*e)}),r}},{key:"calculateBezierSplit",value:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var i=this.calculateHighlyOrder(r,t),a=this.calculateHighlyOrder(i,t),o=this.calculateHighlyOrder(a,t);return[i[0],a[0],o[0],a[1],i[2],r[3]]}},{key:"moveTo",value:function(t,e){this.pathReady?(this.lineTo.apply(this,i(this.pathStart)),this.lineTo(t,e),this.pathChain.push(this.pathStart)):(this.path.c=!1,this.path.i=[[0,0]],this.path.o=[],this.path.v=[[t,e]],this.currentX=t,this.currentY=e,this.offsetX=t,this.offsetY=e,this.pathReady=!0),this.pathStart=[t,e]}},{key:"moveToRelative",value:function(t,e){this.moveTo(this.currentX+t,this.currentY+e)}},{key:"lineTo",value:function(t,e){this.path.i.push([0,0]),this.path.o.push([0,0]),this.path.v.push([t,e]),this.updateXY(t,e)}},{key:"lineToRelative",value:function(t,e){this.lineTo(this.currentX+t,this.currentY+e)}},{key:"horizontalTo",value:function(t){this.lineTo(t,this.currentY)}},{key:"horizontalToRelative",value:function(t){this.horizontalTo(this.currentX+t)}},{key:"verticalTo",value:function(t){this.lineTo(this.currentX,t)}},{key:"verticalToRelative",value:function(t){this.verticalTo(this.currentY+t)}},{key:"cubicBezierCurveTo",value:function(t,e,r,n,a,o){this.path.i.push([r-a,n-o]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([a,o]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,t,r,a)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,e,n,o)))),this.updateXY(a,o)}},{key:"cubicBezierCurveToRelative",value:function(t,e,r,n,i,a){this.cubicBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n,this.currentX+i,this.currentY+a)}},{key:"quadraticBezierCurveTo",value:function(t,e,r,n){this.path.i.push([t-r,e-n]),this.path.o.push([t-this.currentX,e-this.currentY]),this.path.v.push([r,n]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,t,t,r)))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,e,e,n)))),this.updateXY(r,n)}},{key:"quadraticBezierCurveToRelative",value:function(t,e,r,n){this.quadraticBezierCurveTo(this.currentX+t,this.currentY+e,this.currentX+r,this.currentY+n)}},{key:"arcTo",value:function(e,r,n,a,o,u,s){for(var c=t.a2c(this.currentX,this.currentY,e,r,n,a,o,u,s);c.length>=6;){var f=c.splice(0,6);this.path.i.push([f[2]-f[4],f[3]-f[5]]),this.path.o.push([f[0]-this.currentX,f[1]-this.currentY]),this.path.v.push([f[4],f[5]]),this.offsetX=Math.min.apply(Math,[this.offsetX].concat(i(this.calculateBezierMinMax(this.currentX,f[0],f[2],f[4])))),this.offsetY=Math.min.apply(Math,[this.offsetY].concat(i(this.calculateBezierMinMax(this.currentY,f[1],f[3],f[5])))),this.updateXY(f[4],f[5])}}},{key:"arcToRelative",value:function(t,e,r,n,i,a,o){this.arcTo(t,e,r,n,i,this.currentX+a,this.currentY+o)}},{key:"closePath",value:function(){this.path.c=!0}},{key:"uniform",value:function(){var t=this;for(!this.pathChain.length||this.currentX==this.pathStart[0]&&this.currentY==this.pathStart[1]||this.lineTo.apply(this,i(this.pathStart));this.pathChain.length;){var e=this.pathChain.pop();this.lineTo.apply(this,i(e))}for(;this.path.o.length<this.path.i.length;)this.path.o.push([0,0]);this.path.v.forEach(function(e){e[0]-=t.offsetX,e[1]-=t.offsetY}),this.offsetX=0,this.offsetY=0}},{key:"parse",value:function(t){var e,r=this;(0,n.parseSVG)(t).forEach(function(t){switch(t.code){case"M":e=t,r.moveTo(e.x,e.y);break;case"m":e=t,r.moveToRelative(e.x,e.y);case"L":e=t,r.lineTo(e.x,e.y);break;case"l":e=t,r.lineToRelative(e.x,e.y);break;case"H":e=t,r.horizontalTo(e.x);break;case"h":e=t,r.horizontalToRelative(e.x);break;case"V":e=t,r.verticalTo(e.y);break;case"v":e=t,r.verticalToRelative(e.y);break;case"C":e=t,r.cubicBezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"c":e=t,r.cubicBezierCurveToRelative(e.x1,e.y1,e.x2,e.y2,e.x,e.y);break;case"Q":e=t,r.quadraticBezierCurveTo(e.x1,e.y1,e.x,e.y);break;case"q":e=t,r.quadraticBezierCurveToRelative(e.x1,e.y1,e.x,e.y);break;case"A":e=t,r.arcTo(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"a":e=t,r.arcToRelative(e.rx,e.ry,e.xAxisRotation,~~e.largeArc,~~e.sweep,e.x,e.y);break;case"Z":case"z":r.closePath();break;default:throw console.error(t),new Error("No implementation found for this path command.")}})}},{key:"upsample",value:function(t){var e=this;if(!Number.isInteger(t))throw new Error("The upsampling ratio should be an integer.");if(this.uniform(),!(t<=1)){var r={c:this.path.c,i:[],o:[],v:[]};this.path.v.forEach(function(n,a,o){if(a<=0)return r.v.push(n),void r.i.push(e.path.i[a]);for(var u=e.path.o,s=e.path.i,c=[o[a-1][0],u[a-1][0]+o[a-1][0],s[a][0]+n[0],n[0]],f=[o[a-1][1],u[a-1][1]+o[a-1][1],s[a][1]+n[1],n[1]],l=1;l<t;l++){var h=1/(t-l+1),p=e.calculateBezierSplit.apply(e,[h].concat(i(c))),d=e.calculateBezierSplit.apply(e,[h].concat(i(f))),v=c[0],g=p.shift()-v,y=p[1],m=p.shift()-y,b=f[0],k=d.shift()-b,w=d[1],x=d.shift()-w;r.o.push([g,k]),r.i.push([m,x]),r.v.push([y,w]),c=p,f=d}var S=c.shift(),A=c.shift()-S,T=c[1],M=c.shift()-T,E=f.shift(),O=f.shift()-E,_=f[1],P=f.shift()-_;r.o.push([A,O]),r.i.push([M,P]),r.v.push([T,_])}),this.path=r,this.uniform()}}}])&&a(e.prototype,r),u&&a(e,u),t}();e.PathMaker=u},function(t,e,r){var n=r(147),i=r(148);t.exports=function(t,e,r){var a=e&&r||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var u=0;u<16;++u)e[a+u]=o[u];return e||i(o)}},function(t,e,r){"use strict";function n(t,e){return e.getScreenCTM().inverse().multiply(t.getScreenCTM())}function i(t,e){for(t=Math.abs(t),e=Math.abs(e);e;){var r=e;e=t%e,t=r}return t}Object.defineProperty(e,"__esModule",{value:!0}),e.calculateBaseTransform=n,e.getBoundingBox=function(t){var e=t;for(;e.parentElement instanceof SVGGraphicsElement;)e=e.parentElement;var r=n(t,e),i=t.getBBox();return[r.e+i.x,r.f+i.y,i.width+1,i.height+1]},e.getLeafNodes=function(t){return Array.prototype.slice.call(t.getElementsByTagName("*"),0).filter(function(t){if(t.hasChildNodes())for(var e=0;e<t.childNodes.length;e++)if(1==t.childNodes[e].nodeType)return!1;return!0})},e.getBaselineHeight=function(t){var e=document.createElement("canvas").getContext("2d"),r=getComputedStyle(t).font;return e.font=r,e.measureText("ypfgj█").actualBoundingBoxDescent||0},e.encodeLineCap=function(t){switch(t){case"square":return 3;case"butt":return 1;default:return 2}},e.encodeLineJoin=function(t){switch(t){case"miter":return 1;case"bevel":return 3;default:return 2}},e.encodeTextAnchor=function(t){switch(t){case"middle":return 2;case"end":return 1;default:return 0}},e.greatestCommonDivisor=i,e.leastCommonMultiple=function(t,e){return t&&e?Math.abs(t*e/i(t,e)):0}},function(t,e,r){var n=r(4),i=r(2).document,a=n(i)&&n(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,r){var n=r(2),i=r(18),a=r(29),o=r(108),u=r(8).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=a?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:o.f(t)})}},function(t,e,r){var n=r(48)("keys"),i=r(33);t.exports=function(t){return n[t]||(n[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,r){var n=r(2).document;t.exports=n&&n.documentElement},function(t,e,r){var n=r(4),i=r(1),a=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(19)(Function.call,r(16).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return a(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:a}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,r){var n=r(4),i=r(79).set;t.exports=function(t,e,r){var a,o=e.constructor;return o!==r&&"function"==typeof o&&(a=o.prototype)!==r.prototype&&n(a)&&i&&i(t,a),t}},function(t,e,r){"use strict";var n=r(21),i=r(24);t.exports=function(t){var e=String(i(this)),r="",a=n(t);if(a<0||a==1/0)throw RangeError("Count can't be negative");for(;a>0;(a>>>=1)&&(e+=e))1&a&&(r+=e);return r}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var r=Math.expm1;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:r},function(t,e,r){"use strict";var n=r(29),i=r(0),a=r(12),o=r(11),u=r(46),s=r(86),c=r(43),f=r(17),l=r(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,d,v,g,y){s(r,e,d);var m,b,k,w=function(t){if(!h&&t in T)return T[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},x=e+" Iterator",S="values"==v,A=!1,T=t.prototype,M=T[l]||T["@@iterator"]||v&&T[v],E=M||w(v),O=v?S?w("entries"):E:void 0,_="Array"==e&&T.entries||M;if(_&&(k=f(_.call(new t)))!==Object.prototype&&k.next&&(c(k,x,!0),n||"function"==typeof k[l]||o(k,l,p)),S&&M&&"values"!==M.name&&(A=!0,E=function(){return M.call(this)}),n&&!y||!h&&!A&&T[l]||o(T,l,E),u[e]=E,u[x]=p,v)if(m={values:S?E:w("values"),keys:g?E:w("keys"),entries:O},y)for(b in m)b in T||a(T,b,m[b]);else i(i.P+i.F*(h||A),e,m);return m}},function(t,e,r){"use strict";var n=r(36),i=r(32),a=r(43),o={};r(11)(o,r(5)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(o,{next:i(1,r)}),a(t,e+" Iterator")}},function(t,e,r){var n=r(59),i=r(24);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},function(t,e,r){var n=r(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,r){var n=r(46),i=r(5)("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||a[i]===t)}},function(t,e,r){"use strict";var n=r(8),i=r(32);t.exports=function(t,e,r){e in t?n.f(t,e,i(0,r)):t[e]=r}},function(t,e,r){var n=r(44),i=r(5)("iterator"),a=r(46);t.exports=r(18).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||a[n(t)]}},function(t,e,r){var n=r(243);t.exports=function(t,e){return new(n(t))(e)}},function(t,e,r){"use strict";var n=r(9),i=r(35),a=r(6);t.exports=function(t){for(var e=n(this),r=a(e.length),o=arguments.length,u=i(o>1?arguments[1]:void 0,r),s=o>2?arguments[2]:void 0,c=void 0===s?r:i(s,r);c>u;)e[u++]=t;return e}},function(t,e,r){"use strict";var n=r(31),i=r(125),a=r(46),o=r(15);t.exports=r(85)(Array,"Array",function(t,e){this._t=o(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var n,i,a=r(51),o=RegExp.prototype.exec,u=String.prototype.replace,s=o,c=(n=/a/,i=/b*/g,o.call(n,"a"),o.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(c||f)&&(s=function(t){var e,r,n,i,s=this;return f&&(r=new RegExp("^"+s.source+"$(?!\\s)",a.call(s))),c&&(e=s.lastIndex),n=o.call(s,t),c&&n&&(s.lastIndex=s.global?n.index+n[0].length:e),f&&n&&n.length>1&&u.call(n[0],r,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)}),n}),t.exports=s},function(t,e,r){"use strict";var n=r(58)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n,i,a,o=r(19),u=r(115),s=r(78),c=r(74),f=r(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return y[++g]=function(){u("function"==typeof t?t:Function(t),e)},n(g),g},p=function(t){delete y[t]},"process"==r(20)(l)?n=function(t){l.nextTick(o(m,t,1))}:v&&v.now?n=function(t){v.now(o(m,t,1))}:d?(a=(i=new d).port2,i.port1.onmessage=b,n=o(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):n="onreadystatechange"in c("script")?function(t){s.appendChild(c("script")).onreadystatechange=function(){s.removeChild(this),m.call(t)}}:function(t){setTimeout(o(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,r){var n=r(2),i=r(97).set,a=n.MutationObserver||n.WebKitMutationObserver,o=n.process,u=n.Promise,s="process"==r(20)(o);t.exports=function(){var t,e,r,c=function(){var n,i;for(s&&(n=o.domain)&&n.exit();t;){i=t.fn,t=t.next;try{i()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(s)r=function(){o.nextTick(c)};else if(!a||n.navigator&&n.navigator.standalone)if(u&&u.resolve){var f=u.resolve(void 0);r=function(){f.then(c)}}else r=function(){i.call(n,c)};else{var l=!0,h=document.createTextNode("");new a(c).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(n){var i={fn:n,next:void 0};e&&(e.next=i),t||(t=i,r()),e=i}}},function(t,e,r){"use strict";var n=r(10);function i(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=n(e),this.reject=n(r)}t.exports.f=function(t){return new i(t)}},function(t,e,r){"use strict";var n=r(2),i=r(7),a=r(29),o=r(65),u=r(11),s=r(41),c=r(3),f=r(39),l=r(21),h=r(6),p=r(135),d=r(37).f,v=r(8).f,g=r(93),y=r(43),m="prototype",b="Wrong index!",k=n.ArrayBuffer,w=n.DataView,x=n.Math,S=n.RangeError,A=n.Infinity,T=k,M=x.abs,E=x.pow,O=x.floor,_=x.log,P=x.LN2,I=i?"_b":"buffer",N=i?"_l":"byteLength",F=i?"_o":"byteOffset";function j(t,e,r){var n,i,a,o=new Array(r),u=8*r-e-1,s=(1<<u)-1,c=s>>1,f=23===e?E(2,-24)-E(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=M(t))!=t||t===A?(i=t!=t?1:0,n=s):(n=O(_(t)/P),t*(a=E(2,-n))<1&&(n--,a*=2),(t+=n+c>=1?f/a:f*E(2,1-c))*a>=2&&(n++,a/=2),n+c>=s?(i=0,n=s):n+c>=1?(i=(t*a-1)*E(2,e),n+=c):(i=t*E(2,c-1)*E(2,e),n=0));e>=8;o[l++]=255&i,i/=256,e-=8);for(n=n<<e|i,u+=e;u>0;o[l++]=255&n,n/=256,u-=8);return o[--l]|=128*h,o}function C(t,e,r){var n,i=8*r-e-1,a=(1<<i)-1,o=a>>1,u=i-7,s=r-1,c=t[s--],f=127&c;for(c>>=7;u>0;f=256*f+t[s],s--,u-=8);for(n=f&(1<<-u)-1,f>>=-u,u+=e;u>0;n=256*n+t[s],s--,u-=8);if(0===f)f=1-o;else{if(f===a)return n?NaN:c?-A:A;n+=E(2,e),f-=o}return(c?-1:1)*n*E(2,f-e)}function R(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function B(t){return[255&t,t>>8&255]}function V(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function D(t){return j(t,52,8)}function G(t){return j(t,23,4)}function U(t,e,r){v(t[m],e,{get:function(){return this[r]}})}function z(t,e,r,n){var i=p(+r);if(i+e>t[N])throw S(b);var a=t[I]._b,o=i+t[F],u=a.slice(o,o+e);return n?u:u.reverse()}function Y(t,e,r,n,i,a){var o=p(+r);if(o+e>t[N])throw S(b);for(var u=t[I]._b,s=o+t[F],c=n(+i),f=0;f<e;f++)u[s+f]=c[a?f:e-f-1]}if(o.ABV){if(!c(function(){k(1)})||!c(function(){new k(-1)})||c(function(){return new k,new k(1.5),new k(NaN),"ArrayBuffer"!=k.name})){for(var W,X=(k=function(t){return f(this,k),new T(p(t))})[m]=T[m],q=d(T),H=0;q.length>H;)(W=q[H++])in k||u(k,W,T[W]);a||(X.constructor=k)}var J=new w(new k(2)),Q=w[m].setInt8;J.setInt8(0,2147483648),J.setInt8(1,2147483649),!J.getInt8(0)&&J.getInt8(1)||s(w[m],{setInt8:function(t,e){Q.call(this,t,e<<24>>24)},setUint8:function(t,e){Q.call(this,t,e<<24>>24)}},!0)}else k=function(t){f(this,k,"ArrayBuffer");var e=p(t);this._b=g.call(new Array(e),0),this[N]=e},w=function(t,e,r){f(this,w,"DataView"),f(t,k,"DataView");var n=t[N],i=l(e);if(i<0||i>n)throw S("Wrong offset!");if(i+(r=void 0===r?n-i:h(r))>n)throw S("Wrong length!");this[I]=t,this[F]=i,this[N]=r},i&&(U(k,"byteLength","_l"),U(w,"buffer","_b"),U(w,"byteLength","_l"),U(w,"byteOffset","_o")),s(w[m],{getInt8:function(t){return z(this,1,t)[0]<<24>>24},getUint8:function(t){return z(this,1,t)[0]},getInt16:function(t){var e=z(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=z(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return R(z(this,4,t,arguments[1]))},getUint32:function(t){return R(z(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return C(z(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return C(z(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){Y(this,1,t,L,e)},setUint8:function(t,e){Y(this,1,t,L,e)},setInt16:function(t,e){Y(this,2,t,B,e,arguments[2])},setUint16:function(t,e){Y(this,2,t,B,e,arguments[2])},setInt32:function(t,e){Y(this,4,t,V,e,arguments[2])},setUint32:function(t,e){Y(this,4,t,V,e,arguments[2])},setFloat32:function(t,e){Y(this,4,t,G,e,arguments[2])},setFloat64:function(t,e){Y(this,8,t,D,e,arguments[2])}});y(k,"ArrayBuffer"),y(w,"DataView"),u(w[m],o.VIEW,!0),e.ArrayBuffer=k,e.DataView=w},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n=f(r(102)),i=f(r(105)),a=f(r(47)),o=f(r(69)),u=r(70),s=r(54);r(150);var c=f(r(106));function f(t){return t&&t.__esModule?t:{default:t}}function l(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function h(t,e,r,n,i,a,o){try{var u=t[a](o),s=u.value}catch(t){return void r(t)}u.done?e(s):Promise.resolve(s).then(n,i)}function p(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function d(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var v=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentSpec={},this.canisObj={},this.chartSpecs,this.facet,this._animations,this.chartWidth,this.chartHeight,this.hasError=!1}var e,r,f,v,g;return e=t,(r=[{key:"preprocessCharts",value:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;console.time("prepeocess charts"),this.chartSpecs=[];var a=t;if(e){var o=n.default.chartPreProcessing(a.charts,r),u=p(o,2);if(a.charts=u[0],this.hasError=u[1],this.hasError)return a;for(var c=0;c<a.charts.length;c++){var f=void 0===a.charts[c].id?"chart"+c:a.charts[c].id,l=void 0===a.charts[c].type?n.default.CHART_URL:a.charts[c].type,h=new n.default(f,l,a.charts[c].source);this.chartSpecs.push(h)}if(a.facet&&(this.facet=new i.default(a.facet.type,a.facet.views)),this.hasError=n.default.loadCharts(this.chartSpecs,this.facet,r),this.hasError)return a;s.globalVar.jsMovin.setViewport(n.default.viewport.chartWidth,n.default.viewport.chartHeight),n.default.removeTransAndMerge(),document.getElementById("chartContainer").innerHTML="",document.getElementById("chartContainer").appendChild(n.default.svgChart)}return s.globalVar.jsMovin.clearLayers(),n.default.addLottieMarkLayers(n.default.svgChart),console.timeEnd("prepeocess charts"),a}},{key:"compareSpec",value:function(t){var e=!1;return console.log("comparing: ",this.currentSpec.charts,t.charst),(void 0!==this.currentSpec.charts&&JSON.stringify(t.charts)!==JSON.stringify(this.currentSpec.charts)||void 0===this.currentSpec.charts||void 0!==t.facet&&void 0!==this.currentSpec.facet&&JSON.stringify(t.facet)!==JSON.stringify(this.currentSpec.facet)||(void 0===this.currentSpec.facet||void 0===t.facet)&&(void 0!==this.currentSpec.facet||void 0!==t.facet))&&(e=!0),e&&(o.default.domMarks.clear(),n.default.dataMarkDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={},o.default.animations.clear()),this.currentSpec=t,e}},{key:"checkSpec",value:function(t,e){var r=!1;0===t.charts.length&&(r=!0,e.info={type:"error",msg:"There are no input charts.",errSpec:'"charts":[]'});for(var n=0,i=t.charts.length;n<i;n++){if(!t.charts[n].source){r=!0,e.info={type:"error",msg:"No chart source found in chart item.",errSpec:JSON.stringify(t.charts[n]).replace(/\s/g,"")};break}if(t.charts[n].source.indexOf(".dsvg")<0&&(!t.charts[n].start||!t.charts[n].end)){r=!0,e.info={type:"error",msg:"No range specification found for input chart index .",errSpec:JSON.stringify(t.charts[n]).replace(/\s/g,"")};break}}for(var o=0,u=t.animations.length;o<u;o++){if(!t.animations[o].selector){r=!0,e.info={type:"error",msg:"No selector found in animation unit.",errSpec:JSON.stringify(t.animations[o]).replace(/\s/g,"")};break}if(!t.animations[o].effects){r=!0,e.info={type:"error",msg:"No effects found in animation unit.",errSpec:JSON.stringify(t.animations[o]).replace(/\s/g,"")};break}if(t.animations[o].reference&&!Object.keys(a.default.timingRef).includes(a.default.transRef(t.animations[o].reference))){r=!0,e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.animations[o].reference.replace(/\s/g,"")+'"'};break}if(t.animations[o].grouping&&(r=this.checkGroupingSpec(t.animations[o].grouping,e)))break;for(var s=0,c=t.animations[o].effects.length;s<c;s++)if(!t.animations[o].effects[s].type){r=!0,e.info={type:"error",msg:"No effect type found in effect item.",errSpec:JSON.stringify(t.animations[o].effects[s]).replace(/\s/g,"")};break}}return r}},{key:"checkGroupingSpec",value:function(t,e){return t.reference&&!Object.keys(a.default.timingRef).includes(a.default.transRef(t.reference))?(e.info={type:"error",msg:"The value of the reference has to be one of: start with previous or start after previous.",errSpec:'"reference":"'+t.reference.replace(/\s/g,"")+'"'},!0):!!t.grouping&&this.checkGroupingSpec(t.grouping,e)}},{key:"init",value:(v=regeneratorRuntime.mark(function t(e){var r,i,f,h,p,d,v=this,g=arguments;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if((r=g.length>1&&void 0!==g[1]?g[1]:null)&&(this.hasError=this.checkSpec(e,r)),this.hasError){t.next=22;break}if(o.default.resetAll(),c.default.frames.clear(),c.default.framesMark.clear(),0!==e.charts.length){t.next=15;break}o.default.domMarks.clear(),n.default.dataMarkDatum.clear(),n.default.nonDataMarkDatum.clear(),n.default.chartUnderstanding={},o.default.animations.clear(),document.getElementById("chartContainer")&&(document.getElementById("chartContainer").innerHTML=""),t.next=22;break;case 15:return s.globalVar.jsMovin.setFrameRate(a.default.FRAME_RATE),i=this.compareSpec(e),t.next=19,this.preprocessCharts(e,i,r);case 19:if(f=t.sent,this.animations=f.animations,Array.isArray(this.animations))for(p=function(t){var e=v.animations[t];console.time("using dom"),console.time("query dom");var r=document.createElement("div");document.body.appendChild(r),r.innerHTML=n.default.charts[e.chartIdx].outerHTML;var i=r.querySelectorAll(e.selector);console.timeEnd("query dom");for(var a=[],s=0;s<n.default.changedAttrs.length;s++)a.push(n.default.changedAttrs[s]);console.log("selector of this animation: ",e.selector);var c=void 0;void 0!==o.default.animations.get(e.selector)?(c=o.default.animations.get(e.selector)).translate(e,a,!0):((c=new o.default).translate(e,a),o.default.animations.set(e.selector,c)),console.log("translated animation: ",c),console.timeEnd("using dom");var f=[];i.length>0&&(console.time("extract mark dom"),[].forEach.call(i,function(t){if(t.classList.contains("mark")){var e=t.getAttribute("id");if(f.push(e),void 0===o.default.domMarks.get(e)){if("path"===t.tagName){var r=u.CanisUtil.toJSON(t),n=u.CanisUtil.discretizePath(r);if(n){if("lines"===n.type)for(var i=0;i<n.data.length;i++)r.attr["x"+(1+2*i)]=n.data[i][0][0],r.attr["y"+(1+2*i)]=n.data[i][0][1],r.attr["x"+(2+2*i)]=n.data[i][1][0],r.attr["y"+(2+2*i)]=n.data[i][1][1];else for(var a=Object.keys(n.data),s=0;s<a.length;s++){var c=a[s];"radius"===c?n.data[c].length>1?(r.attr.innerRadius=n.data[c][0].rx+1,r.attr.outterRadius=n.data[c][1].rx-1):(r.attr.innerRadius=0,r.attr.outterRadius=n.data[c][0].rx-1):r.attr[c]=n.data[c]}t=u.CanisUtil.toDOM(r)}}for(var h={},p=[].concat(l(t.attributes)),d=0;d<p.length;d++){var v=p[d];h[v.name]=t.getAttribute(v.name)}var g=document.getElementById(e);h.bbWidth=g.getBBox().width,h.bbHeight=g.getBBox().height,h.bbX=g.getBBox().x,h.bbY=g.getBBox().y,h.content=t.textContent,h.id=e;var y=JSON.parse(t.getAttribute("data-datum"));if(Array.isArray(y)&&(y=y[0]),h["data-datum"]=y,h.tagName=t.tagName,("path"===t.tagName||"line"===t.tagName)&&(h["stroke-dasharray"]=document.getElementById(e).getTotalLength(),h["stroke-dashoffset"]=document.getElementById(e).getTotalLength(),"path"===t.tagName)){var m=u.CanisUtil.discretizeD(t.getAttribute("d"),"#000");void 0!==m&&m&&"pies"===m.type&&(h.cx=m.data.cx,h.cy=m.data.cy,h.startAngle=(m.data.clockwise?m.data.startAngle:m.data.endAngle)-1/(2*Math.PI),h.endAngle=(m.data.clockwise?m.data.endAngle:m.data.startAngle)+4*Math.PI+1/(2*Math.PI),m.data.radius.length>1?(h.innerRadius=m.data.radius[0].rx>m.data.radius[1].rx?m.data.radius[1].rx:m.data.radius[0].rx,h.outterRadius=m.data.radius[0].rx>m.data.radius[1].rx?m.data.radius[0].rx:m.data.radius[1].rx,h.outterRadius++):(h.innerRadius=0,h.outterRadius=m.data.radius[0].rx+1))}o.default.domMarks.set(e,h)}}}),console.timeEnd("extract mark dom")),c.calAniTime(f,h),h=c,document.body.removeChild(r)},d=0;d<this.animations.length;d++)p(d);case 22:case"end":return t.stop()}},t,this)}),g=function(){var t=this,e=arguments;return new Promise(function(r,n){var i=v.apply(t,e);function a(t){h(i,r,n,a,o,"next",t)}function o(t){h(i,r,n,a,o,"throw",t)}a(void 0)})},function(t){return g.apply(this,arguments)})},{key:"render",value:function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;console.time("rendering"),o.default.renderAnimation(r),o.default.findKeyframes(),o.default.mapToLottieSpec();var n=s.globalVar.jsMovin.toJSON();return t.lottieJSON=n,console.timeEnd("rendering"),r&&(r.info="Done rendering."),e(),JSON.parse(n)}},{key:"animations",set:function(t){var e=t.map(function(t){return t.chartIdx=0,t}),r=0;if((r=this.facet?this.facet.views[0].frames.length:this.chartSpecs.length)>1)for(var n=function(r){var n=u.CanisUtil.deepClone(t);n[0].reference=a.default.timingRef.previousEnd;var i=n.map(function(t){return t.chartIdx=r,t});e.push.apply(e,l(i))},i=1;i<r-1;i++)n(i);this._animations=e},get:function(){return this._animations}}])&&d(e.prototype,r),f&&d(e,f),t}();v.lottieJSON="";var g=v;e.default=g,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=r(70),a=(n=r(105))&&n.__esModule?n:{default:n},o=r(54);function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c=function(){function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=e,this.type=r,this.source=n}var e,r,n;return e=t,n=[{key:"chartPreProcessing",value:function(t,e){for(var r=[],n=!1,i=0;i<t.length;i++){var a=t[i];if(void 0!==a.start&&void 0!==a.end){var o=parseInt(a.start),u=parseInt(a.end);if(u<o){n=!0,e.info={type:"error",msg:"Wrong start and end chart index.",errSpec:JSON.stringify(r).replace(/\s/g,"")};continue}for(var s=a.source.split("/"),c=void 0===a.id?s[s.length-1]:a.id,f=o;f<=u;f++)r.push({id:c+f,source:a.source+f+".dsvg"})}else r.push(a)}return[r,n]}},{key:"loadCharts",value:function(e,r,n){var i=new Map;t.charts=[];for(var a=[],o=0,s=0,c=!1,f=0;f<e.length;f++)if(e[f].type===t.CHART_URL){var l=new XMLHttpRequest,h="file:"===document.location.protocol?0:200,p=void 0;if(l.open("GET",e[f].source,!1),l.overrideMimeType("text/html;charset=utf-8"),l.send(null),l.status===h){var d=document.createElement("div");d.innerHTML=l.responseText;var v=(p=d.children[0]).getAttribute("viewBox").split(" ");o=parseFloat(v[2]),s=parseFloat(v[3]),t.charts.push(p),i.set(e[f].id,t.charts.length-1)}else 404===l.status&&(a.unshift(f),c=!0,console.log('"source":'+e[f].source),n.info={type:"error",msg:"Can not find "+e[f].source+" ! Please check the url.",errSpec:'"source":"'+e[f].source.replace(/\s/g,"")+'"'})}else console.log(e[f].source,u(e[f].source));for(var g=0;g<a.length;g++)e.slice(a[g],1);return void 0!==r?t.facetViews(i,r):this.viewport.setViewport(o,s),c}},{key:"removeTransAndMerge",value:function(){for(var e=0;e<t.charts.length;e++)t.charts[e].setAttribute("trans","0,0"),t.removeTransitions(t.charts[e].children[0]);this.svgChart=t.mergeCharts()}},{key:"facetViews",value:function(e,r){if(r.views.length>0){for(var n=[],i=0;i<r.views[0].frames.length;i++){for(var a=[],o=0;o<r.views.length;o++){var u=r.views[o].frames[i];void 0!==e.get(u)?a.push(t.charts[e.get(u)].cloneNode(!0)):console.log("chart name "+u+" is undefined !")}a.length===r.views.length&&n.push(a)}t.combineCharts(r.type,r.views.length,n)}}},{key:"combineCharts",value:function(e,r,n){for(var o=[],u=0,s=0,c=u,f=s,l=0;l<n.length;l++){var h=n[l];u=parseFloat(h[0].getAttribute("width")),s=parseFloat(h[0].getAttribute("height")),c=u,f=s;var p=h[0].getAttribute("viewBox").split(" "),d=parseFloat(p[2]),v=parseFloat(p[3]),g=i.CanisUtil.getTransformAttrs(h[0].children[0]);switch(h[0].children[0].setAttribute("transform","translate("+g.transNums[0]+","+g.transNums[1]+")"),e){case a.default.facetType.row:f*=h.length,h[0].setAttribute("height",s*h.length),h[0].setAttribute("viewBox","0 0 "+d+" "+s*h.length);break;case a.default.facetType.col:c*=h.length,h[0].setAttribute("width",u*h.length),h[0].setAttribute("viewBox","0 0 "+u*h.length+" "+v)}for(var y=function(t){var r=h[t],n=r.querySelectorAll(".mark");if([].forEach.call(n,function(e){var r=parseInt(e.getAttribute("id").substring(4));e.setAttribute("id","mark"+(r+1e5*t)),e.classList.add("facet"+t)}),t>0)for(var o=r.children[0].children,c=0;c<o.length;c++){var f=o[c],l=i.CanisUtil.getTransformAttrs(f);switch(e){case a.default.facetType.row:f.setAttribute("transform","translate("+l.transNums[0]+","+(l.transNums[1]+(s+20)*t)+") scale("+l.scaleNum+")");break;case a.default.facetType.col:f.setAttribute("transform","translate("+(l.transNums[0]+(u+20)*t)+","+l.transNums[1]+") scale("+l.scaleNum+")")}h[0].children[0].appendChild(f)}},m=0;m<h.length;m++)y(m);o.push(h[0])}t.charts=o,this.viewport.setViewport(c,f)}},{key:"mergeCharts",value:function(){for(var e=new Set,r=new Map,n=new Map,a=["x","y","cx","cy","x1","y1","x2","y2","d","r","width","height","textContent","fill","stroke","opacity"],o={},u=0;u<a.length;u++)o[a[u]]=null;for(var s=function(i){var u=t.charts[i].querySelectorAll(".mark");u.length>0&&[].forEach.call(u,function(u){var s=u.getAttribute("id");e.add(s);for(var c={},f=0;f<a.length;f++)c[a[f]]="textContent"===a[f]?u.innerHTML:u.getAttribute(a[f]);void 0===r.get(s)&&r.set(s,new Array(t.charts.length).fill(o)),r.get(s)[i]=c,n.set(s,u.outerHTML)})},c=0;c<t.charts.length;c++)s(c);t.changedAttrs=[];var f=i.CanisUtil.deepClone(a);r.forEach(function(e,r){for(var n=0;n<f.length;n++){for(var i=!0,a=void 0,o=0;o<e.length;o++)if(void 0!==e[o]){a=e[o];break}for(var u=0;u<e.length;u++)if(void 0!==e[u]&&e[u][f[n]]!==a[f[n]]){t.changedAttrs.push(f[n]),i=!1;break}i||f.splice(n,1)}});var l=new Map;for(t.changedAttrs.indexOf("d")>=0&&(l=i.CanisUtil.findDiffCmds(r)),e=Array.from(e),c=0;c<t.charts.length;c++)for(var h=0;h<e.length;h++)if(0===t.charts[c].querySelectorAll("#"+e[h]).length){var p=n.get(e[h]),d=document.createElement("div");d.innerHTML=p;for(var v=d.children[0],g={},y=0;y<t.changedAttrs.length;y++)if("y"===t.changedAttrs[y]&&t.changedAttrs.indexOf("height")>=0){var m=(v.getAttribute("y")?parseFloat(v.getAttribute("y")):0)+(v.getAttribute("height")?parseFloat(v.getAttribute("height")):0);v.setAttribute("y",m),g.y=m}else if("d"===t.changedAttrs[y]){var b=void 0;v.getAttribute("d")&&(b=i.CanisUtil.setPathDValue(v.getAttribute("d"),!0,0,0,l)),v.setAttribute("d",b),g.d=b}else"textContent"===t.changedAttrs[y]?(v.innerHTML="",g.textContent=""):"fill"===t.changedAttrs[y]||"stroke"===t.changedAttrs[y]?(void 0===v.getAttribute(t.changedAttrs[y])&&v.setAttribute(t.changedAttrs[y],"#FFFFFF"),g[t.changedAttrs[y]]=v.getAttribute(t.changedAttrs[y])):["x","y","cx","cy","x1","y1","x2","y2"].includes(t.changedAttrs[y])?"x2"===t.changedAttrs[y]?(v.setAttribute("x2",parseFloat(v.getAttribute("x1"))),g.x2=parseFloat(v.getAttribute("x1"))):"y2"===t.changedAttrs[y]?(v.setAttribute("y2",parseFloat(v.getAttribute("y1"))),g.y2=parseFloat(v.getAttribute("y1"))):g[t.changedAttrs[y]]=parseFloat(v.getAttribute(t.changedAttrs[y])):(v.setAttribute(t.changedAttrs[y],0),g[t.changedAttrs[y]]=0);p='<svg xmlns="http://www.w3.org/2000/svg" width="500" height="500">'+v.outerHTML+"</svg>";var k=(new DOMParser).parseFromString(p,"image/svg+xml").lastChild.children[0];t.charts[c].querySelector("#chartContent").appendChild(k),r.get(e[h])[c]=g}t.dataTrans=new Map;for(var w=0;w<e.length;w++){for(var x=r.get(e[w]),S=[],A=0;A<x.length;A++){for(var T={},M=0;M<t.changedAttrs.length;M++)["width","height","r"].includes(t.changedAttrs[M])?T[t.changedAttrs[M]]=100*x[A][t.changedAttrs[M]]/x[0][t.changedAttrs[M]]:T[t.changedAttrs[M]]=x[A][t.changedAttrs[M]];S.push(T)}t.dataTrans.set(e[w],S),t.charts[0].querySelector("#"+e[w]).setAttribute("data-transition",JSON.stringify({dataTrans:S},null,"\t"))}return t.charts[0]}},{key:"getBBoxes",value:function(){var t=document.getElementById("chartContainer").children[0].querySelectorAll('[id^="mark"]'),e=new Map;return t.length>0&&[].forEach.call(t,function(t){var r,n=t.getAttribute("id");"text"===t.tagName?(r=t.getBBox()).width+=10:r=t.getBBox(),e.set(n,r)}),e}},{key:"removeTransitions",value:function(e){var r=e.getAttribute("transform"),n=e.parentNode.getAttribute("trans").split(",");if(e.classList.contains("mark")){var a=JSON.parse(e.getAttribute("data-datum"));Array.isArray(a)&&(a=a[0]);var o=!1;Array.from(e.classList).forEach(function(t){((t=t.toLowerCase()).includes("axis")||t.includes("legend")||t.includes("title"))&&(o=!0)}),o?this.nonDataMarkDatum.set(e.getAttribute("id"),a):this.dataMarkDatum.set(e.getAttribute("id"),a)}if(e.classList.contains("axis")||e.classList.contains("legend")){var u=JSON.parse(e.getAttribute("data-datum"));if(Array.isArray(u)&&(function(){throw new Error('"tmpDataDatum" is read-only')}(),u=u[0]),e.classList.contains("axis"))this.chartUnderstanding[u.position]="position";else if(e.classList.contains("legend"))for(var s in u)this.chartUnderstanding[u[s]]=s}if(r){r=(r=r.replace(/translate|scale|rotate|\s/g,function(t){return" "===t?"":"@"+t})).replace(/(^@*)|(@*$)/g,"").split("@");for(var c="",f="",l=0;l<r.length;l++)r[l].indexOf("translate")>=0?f=r[l]:r[l].indexOf("scale")>=0&&(c=r[l]);var h=f.replace(/translate\(| |\)/g,"").split(",");e.setAttribute("transform",c),"g"===e.tagName?e.setAttribute("trans",parseFloat(h[0])+parseFloat(n[0])+","+(parseFloat(h[1])+parseFloat(n[1]))):i.CanisUtil.transShape(e,parseFloat(h[0])+parseFloat(n[0]),parseFloat(h[1])+parseFloat(n[1]))}else"g"===e.tagName?e.setAttribute("trans",n.join(",")):i.CanisUtil.transShape(e,parseFloat(n[0]),parseFloat(n[1]));if(e.children.length>0)for(var p=0;p<e.children.length;p++)t.removeTransitions(e.children[p])}},{key:"addLottieMarkLayers",value:function(e){if("g"!==e.tagName&&"svg"!==e.tagName&&(e.classList.contains("mark")?o.globalVar.markLayers.set(e.getAttribute("id"),o.globalVar.jsMovin.addLayer(e)):o.globalVar.jsMovin.addLayer(e)),e.children.length>0)for(var r=0;r<e.children.length;r++)t.addLottieMarkLayers(e.children[r])}}],(r=null)&&s(e.prototype,r),n&&s(e,n),t}();c.CHART_URL="url",c.CHART_CONTENT="content",c.charts=[],c.changedAttrs=[],c.viewport=new i.Viewport,c.dataTrans=new Map,c.svgChart,c.chartUnderstanding={},c.dataMarkDatum=new Map,c.nonDataMarkDatum=new Map;var f=c;e.default=f,t.exports=e.default},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.EasingFactory=void 0;var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,r,i;return e=t,i=[{key:"linear",value:function(){return[[[1],[1]],[[0],[0]]]}},{key:"easeInSine",value:function(){return[[[.47],[0]],[[.745],[.715]]]}},{key:"easeOutSine",value:function(){return[[[.39],[.575]],[[.565],[1]]]}},{key:"easeInOutSine",value:function(){return[[[.445],[.05]],[[.55],[.95]]]}},{key:"easeInQuad",value:function(){return[[[.55],[.085]],[[.68],[.53]]]}},{key:"easeOutQuad",value:function(){return[[[.25],[.46]],[[.45],[.94]]]}},{key:"easeInOutQuad",value:function(){return[[[.455],[.03]],[[.515],[.955]]]}},{key:"easeInCubic",value:function(){return[[[.55],[.055]],[[.675],[.19]]]}},{key:"easeOutCubic",value:function(){return[[[.215],[.61]],[[.355],[1]]]}},{key:"easeInOutCubic",value:function(){return[[[.645],[.045]],[[.355],[1]]]}},{key:"easeInQuart",value:function(){return[[[.895],[.03]],[[.685],[.22]]]}},{key:"easeOutQuart",value:function(){return[[[.165],[.84]],[[.44],[1]]]}},{key:"easeInOutQuart",value:function(){return[[[.77],[0]],[[.175],[1]]]}},{key:"easeInQuint",value:function(){return[[[.755],[.05]],[[.855],[.06]]]}},{key:"easeOutQuint",value:function(){return[[[.23],[1]],[[.32],[1]]]}},{key:"easeInOutQuint",value:function(){return[[[.86],[0]],[[.07],[1]]]}},{key:"easeInExpo",value:function(){return[[[.95],[.05]],[[.795],[.035]]]}},{key:"easeOutExpo",value:function(){return[[[.19],[1]],[[.22],[1]]]}},{key:"easeInOutExpo",value:function(){return[[[1],[0]],[[0],[1]]]}},{key:"easeInCirc",value:function(){return[[[.6],[.04]],[[.98],[.335]]]}},{key:"easeOutCirc",value:function(){return[[[.075],[.82]],[[.165],[1]]]}},{key:"easeInOutCirc",value:function(){return[[[.785],[.135]],[[.15],[.86]]]}},{key:"easeInBack",value:function(){return[[[.6],[-.28]],[[.735],[.045]]]}},{key:"easeOutBack",value:function(){return[[[.175],[.885]],[[.32],[1.275]]]}},{key:"easeInOutBack",value:function(){return[[[.68],[-.55]],[[.265],[1.55]]]}}],(r=null)&&n(e.prototype,r),i&&n(e,i),t}();e.EasingFactory=i},function(t,e,r){var n=r(146).parse;n.parseSVG=n,n.makeAbsolute=function(t){var e,r={x:0,y:0},n={x:"x0",y:"y0",x1:"x0",y1:"y0",x2:"x0",y2:"y0"};return t.forEach(function(t){for(var i in"moveto"===t.command&&(e=t),t.x0=r.x,t.y0=r.y,n)i in t&&(t[i]+=t.relative?t[n[i]]:0);"x"in t||(t.x=r.x),"y"in t||(t.y=r.y),t.relative=!1,t.code=t.code.toUpperCase(),"closepath"==t.command&&(t.x=e.x,t.y=e.y),r=t}),t},t.exports=n},function(t,e,r){"use strict";function n(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._type,this._views,this.views=r,this.type=e}var e,r,i;return e=t,(r=[{key:"type",set:function(e){void 0!==e&&(Object.keys(t.facetType).includes(e)?this._type=e:(console.log('the facet type has to be one of "row" or "column", setting to default value "column".'),this._type=t.facetType.col))},get:function(){return this._type}},{key:"views",set:function(t){if(void 0!==t){for(var e=t.map(function(t){if(void 0!==t.range){var e=new RegExp("\\d+$"),r=t.range[0].replace(e,""),n=t.range[1].replace(e,""),i=t.range[0].match(e),a=t.range[1].match(e);if(r===n){t.frames=[];for(var o=i;o<=a;o++)t.frames.push(r+o)}else t.frames=[t.range[0],t.range[1]],console.log("range start and end mismatch")}return t}),r=0,n=0;n<e.length;n++)e[n].frames.length>r&&(r=e[n].frames.length);for(var i=0;i<e.length;i++)if(e[i].frames.length<r)for(var a=e[i].frames[e[i].frames.length-1],o=r-e[i].frames.length;o>0;)e[i].frames.push(a),o--;this._views=e}},get:function(){return this._views}}])&&n(e.prototype,r),i&&n(e,i),t}();i.facetType={row:"row",col:"column"};var a=i;e.default=a,t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=(n=r(47))&&n.__esModule?n:{default:n};function a(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var f=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this)))._groupBy="id",t._reference=i.default.timingRef.previousStart,t._delay=0,t.definedById=!1,t.sort={},t.grouping,t}var r,n,f;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,i.default),r=e,(n=[{key:"initGrouping",value:function(t){console.log("grouping json: ",t,this,this.grouping),this.groupBy=t.groupBy,"id"===t.groupBy&&(this.definedById=!0),this.reference=t.reference,this.delay=t.delay,void 0!==t.sort&&(this.sort.field=t.sort.field,this.sort.order=t.sort.order,this.sort.expr=t.sort.expr),void 0!==t.grouping?(this.grouping=new e,this.grouping.initGrouping(t.grouping)):void 0===t.grouping&&"id"!==t.groupBy&&(this.grouping=new e,this.grouping.groupBy="id",this.grouping.definedById=!1)}},{key:"arrangeOrder",value:function(t,r,n){return e.frames.clear(),e.framesMark.clear(),0===Object.keys(n).length?(n.groupRef="root",n.id=e.nodeId,e.frames.set(e.nodeId,!0),e.nodeId++,n.children=[],n.marks=t,n.timingRef=i.default.timingRef.previousStart,n.delay=0,this.generateTree(n,r)):this.updateTree(n,r),console.log("generated tree: ",n),this.getMarkOrder(n)}},{key:"updateTree",value:function(t,e){if(void 0!==t){var r=this.groupBy,n=this.reference,i=this.delay;if(void 0!==this.grouping){var a=!1;if(void 0!==t.children[0]&&(a=t.children[0].groupRef===r),console.log("whether this is same grouping: ",a),a){for(var o,u=new Map,s=0;s<t.children.length|(o=t.children[s]);s++)this.grouping.updateTree(o,e),u.set(o.refValue,o),o.timingRef=n,o.delay=i;this.sortNodes(this.sort,t,u,e)}else t.children=[],this.generateTree(t,e)}else void 0===this.grouping&&t.children.length>0&&(t.children=[])}}},{key:"generateTree",value:function(t,r){for(var n,i=this.groupBy,a=this.reference,o=this.delay,u=new Map,s=0;s<t.marks.length|(n=t.marks[s]);s++){var c=r.get(n)["data-datum"],f=void 0;if(void 0!==r.get(n)[i])f=r.get(n)[i];else{if(void 0!==r.get(n)[i]||void 0===c[i])return void console.log("error: grouping by an unknown attribute");f=c[i]}if(void 0!==u.get(f))u.get(f).marks.push(n);else{var l={};l.id=e.nodeId,e.nodeId++,l.groupRef=i,"id"===l.groupRef&&(l.definedById=this.definedById),l.refValue=f,l.timingRef=a,l.delay=o,l.children=[],l.marks=[n],u.set(f,l)}}if(this.sortNodes(this.sort,t,u,r),console.log("nodes this level: ",u),void 0!==this.grouping)for(var h,p=0;p<t.children.length|(h=t.children[p]);p++)this.grouping.generateTree(h,r)}},{key:"sortNodes",value:function(t,r,n,i){var u=this;switch(r.children=[],o(t.order)){case"object":for(var s,c=0,f=0;f<t.order.length|(s=t.order[f]);f++)void 0!==n.get(s)&&(r.children.push(n.get(s)),u.appendFrame(r.id,n.get(s).id,c,n.size),c++);break;case"string":var l=!0;if(n.forEach(function(t,e){t.marks.length>1&&(l=!1)}),void 0!==t.field&&l){var h=t.field,p=[].concat(a(n)),d=t.order;p.sort(function(t,r){var n=t[1].marks[0],a=r[1].marks[0],o="",u="",s=i.get(n)["data-datum"],c=i.get(a)["data-datum"];return void 0!==i.get(n)[h]&&"undefined"!==i.get(a)[h]?(o=i.get(n)[h],u=i.get(a)[h]):void 0===i.get(n)[h]&&void 0!==s[h]&&void 0===i.get(a)[h]&&void 0!==c[h]&&(o=s[h],u=c[h]),isNaN(parseFloat(o))||(o=parseFloat(o)),isNaN(parseFloat(u))||(u=parseFloat(u)),d===e.orderTypes.ascending?o>=u?1:-1:d===e.orderTypes.descending?u>=o?1:-1:d===e.orderTypes.random?Math.random()>=.5?1:-1:void 0});for(var v,g=0;g<p.length|(v=p[g]);g++)u.appendFrame(r.id,v.id,g,p.length),r.children.push(v[1])}else{var y=[].concat(a(n));t.order===e.orderTypes.ascending?y.sort(function(t,e){return t[0]>=e[0]?1:-1}):t.order===e.orderTypes.descending?y.sort(function(t,e){return e[0]>=t[0]?1:-1}):t.order===e.orderTypes.random&&y.sort(function(t,e){return Math.random()>=.5?1:-1});for(var m,b=0;b<y.length|(m=y[b]);b++)u.appendFrame(r.id,m.id,b,y.length),r.children.push(m[1])}break;default:var k=0;n.forEach(function(t,e){r.children.push(t),u.appendFrame(r.id,t.id,k,n.size),k++})}}},{key:"appendFrame",value:function(t,r,n,i){!e.frames.get(t)||0!==n&&n!==i-1?e.frames.set(r,!1):e.frames.set(r,!0)}},{key:"getMarkOrder",value:function(t){var e=[];if(null!=t){var r=[];for(r.unshift(t);0!=r.length;){var n=r.shift(),i=n.children;if(i.length<=0)e=[].concat(a(e),a(n.marks));else for(var o=0;o<i.length;o++)r.push(i[o])}}return e}},{key:"calTimeWithTree",value:function(t,r,n,a){if(t.children.length>0)for(var o=0;o<t.children.length;o++)o>0?this.calTimeWithTree(t.children[o],t.children[o-1].start,t.children[o-1].end,a):this.calTimeWithTree(t.children[o],-1,-1,a);switch(t.timingRef){case i.default.timingRef.previousStart:t.start=r+t.delay;break;case i.default.timingRef.previousEnd:t.start=n+t.delay;break;case i.default.timingRef.absolute:t.start=t.delay;break;default:t.start=r+t.delay}-1===r&&(t.start=0),t.end=0;for(var u=0;u<t.marks.length;u++)a.get(t.marks[u]).startTime+=t.start,a.get(t.marks[u]).startTime+a.get(t.marks[u]).totalDuration>t.end&&(t.end=a.get(t.marks[u]).startTime+a.get(t.marks[u]).totalDuration,console.log("t end: ",t.end));if(1===t.marks.length){var s=t.marks[0];e.frames.get(t.id)?e.framesMark.set(s,!0):void 0===e.framesMark.get(s)&&e.framesMark.set(s,!1)}}},{key:"groupBy",set:function(t){void 0!==t&&(this._groupBy=t)},get:function(){return this._groupBy}},{key:"reference",set:function(t){if(void 0!==t){var e=i.default.transRef(t);Object.keys(i.default.timingRef).includes(e)?this._reference=t:alert("the 'reference' of TimingSpec has to be one of 'previousStart', 'previousEnd' or 'absolute'. ")}},get:function(){return this._reference}},{key:"delay",set:function(t){void 0!==t&&(t>=1e3/i.default.FRAME_RATE||0===t?this._delay=t:this._delay=1e3/i.default.FRAME_RATE)},get:function(){return this._delay}}])&&u(r.prototype,n),f&&u(r,f),e}();f.orderTypes={ascending:"ascending",descending:"descending",random:"random"},f.nodeId=0,f.frames=new Map,f.framesMark=new Map;var l=f;e.default=l,t.exports=e.default},function(t,e,r){t.exports=!r(7)&&!r(3)(function(){return 7!=Object.defineProperty(r(74)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){e.f=r(5)},function(t,e,r){var n=r(14),i=r(15),a=r(55)(!1),o=r(76)("IE_PROTO");t.exports=function(t,e){var r,u=i(t),s=0,c=[];for(r in u)r!=o&&n(u,r)&&c.push(r);for(;e.length>s;)n(u,r=e[s++])&&(~a(c,r)||c.push(r));return c}},function(t,e,r){var n=r(8),i=r(1),a=r(34);t.exports=r(7)?Object.defineProperties:function(t,e){i(t);for(var r,o=a(e),u=o.length,s=0;u>s;)n.f(t,r=o[s++],e[r]);return t}},function(t,e,r){var n=r(15),i=r(37).f,a={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return o&&"[object Window]"==a.call(t)?function(t){try{return i(t)}catch(t){return o.slice()}}(t):i(n(t))}},function(t,e,r){"use strict";var n=r(7),i=r(34),a=r(56),o=r(50),u=r(9),s=r(49),c=Object.assign;t.exports=!c||r(3)(function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach(function(t){e[t]=t}),7!=c({},t)[r]||Object.keys(c({},e)).join("")!=n})?function(t,e){for(var r=u(t),c=arguments.length,f=1,l=a.f,h=o.f;c>f;)for(var p,d=s(arguments[f++]),v=l?i(d).concat(l(d)):i(d),g=v.length,y=0;g>y;)p=v[y++],n&&!h.call(d,p)||(r[p]=d[p]);return r}:c},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,r){"use strict";var n=r(10),i=r(4),a=r(115),o=[].slice,u={},s=function(t,e,r){if(!(e in u)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";u[e]=Function("F,a","return new F("+n.join(",")+")")}return u[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=o.call(arguments,1),u=function(){var n=r.concat(o.call(arguments));return this instanceof u?s(e,n.length,n):a(e,n,t)};return i(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e){t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},function(t,e,r){var n=r(2).parseInt,i=r(45).trim,a=r(80),o=/^[-+]?0[xX]/;t.exports=8!==n(a+"08")||22!==n(a+"0x16")?function(t,e){var r=i(String(t),3);return n(r,e>>>0||(o.test(r)?16:10))}:n},function(t,e,r){var n=r(2).parseFloat,i=r(45).trim;t.exports=1/n(r(80)+"-0")!=-1/0?function(t){var e=i(String(t),3),r=n(e);return 0===r&&"-"==e.charAt(0)?-0:r}:n},function(t,e,r){var n=r(20);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},function(t,e,r){var n=r(4),i=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&i(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,r){var n=r(83),i=Math.pow,a=i(2,-52),o=i(2,-23),u=i(2,127)*(2-o),s=i(2,-126);t.exports=Math.fround||function(t){var e,r,i=Math.abs(t),c=n(t);return i<s?c*(i/s/o+1/a-1/a)*s*o:(r=(e=(1+o/a)*i)-(e-i))>u||r!=r?c*(1/0):c*r}},function(t,e,r){var n=r(1);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var a=t.return;throw void 0!==a&&n(a.call(t)),e}}},function(t,e,r){var n=r(10),i=r(9),a=r(49),o=r(6);t.exports=function(t,e,r,u,s){n(e);var c=i(t),f=a(c),l=o(c.length),h=s?l-1:0,p=s?-1:1;if(r<2)for(;;){if(h in f){u=f[h],h+=p;break}if(h+=p,s?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;s?h>=0:l>h;h+=p)h in f&&(u=e(u,f[h],h,c));return u}},function(t,e,r){"use strict";var n=r(9),i=r(35),a=r(6);t.exports=[].copyWithin||function(t,e){var r=n(this),o=a(r.length),u=i(t,o),s=i(e,o),c=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===c?o:i(c,o))-s,o-u),l=1;for(s<u&&u<s+f&&(l=-1,s+=f-1,u+=f-1);f-- >0;)s in r?r[u]=r[s]:delete r[u],u+=l,s+=l;return r}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){"use strict";var n=r(95);r(0)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},function(t,e,r){r(7)&&"g"!=/./g.flags&&r(8).f(RegExp.prototype,"flags",{configurable:!0,get:r(51)})},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,r){var n=r(1),i=r(4),a=r(99);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){"use strict";var n=r(131),i=r(42);t.exports=r(64)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=n.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return n.def(i(this,"Map"),0===t?0:t,e)}},n,!0)},function(t,e,r){"use strict";var n=r(8).f,i=r(36),a=r(41),o=r(19),u=r(39),s=r(40),c=r(85),f=r(125),l=r(38),h=r(7),p=r(30).fastKey,d=r(42),v=h?"_s":"size",g=function(t,e){var r,n=p(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,c){var f=t(function(t,n){u(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=n&&s(n,r,t[c],t)});return a(f.prototype,{clear:function(){for(var t=d(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var r=d(this,e),n=g(r,t);if(n){var i=n.n,a=n.p;delete r._i[n.i],n.r=!0,a&&(a.n=i),i&&(i.p=a),r._f==n&&(r._f=i),r._l==n&&(r._l=a),r[v]--}return!!n},forEach:function(t){d(this,e);for(var r,n=o(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(d(this,e),t)}}),h&&n(f.prototype,"size",{get:function(){return d(this,e)[v]}}),f},def:function(t,e,r){var n,i,a=g(t,e);return a?a.v=r:(t._l=a={i:i=p(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=a),n&&(n.n=a),t[v]++,"F"!==i&&(t._i[i]=a)),t},getEntry:g,setStrong:function(t,e,r){c(t,e,function(t,r){this._t=d(t,e),this._k=r,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))},r?"entries":"values",!r,!0),l(e)}}},function(t,e,r){"use strict";var n=r(131),i=r(42);t.exports=r(64)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(i(this,"Set"),t=0===t?0:t,t)}},n)},function(t,e,r){"use strict";var n,i=r(2),a=r(26)(0),o=r(12),u=r(30),s=r(112),c=r(134),f=r(4),l=r(42),h=r(42),p=!i.ActiveXObject&&"ActiveXObject"in i,d=u.getWeak,v=Object.isExtensible,g=c.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(t){if(f(t)){var e=d(t);return!0===e?g(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(l(this,"WeakMap"),t,e)}},b=t.exports=r(64)("WeakMap",y,m,c,!0,!0);h&&p&&(s((n=c.getConstructor(y,"WeakMap")).prototype,m),u.NEED=!0,a(["delete","has","get","set"],function(t){var e=b.prototype,r=e[t];o(e,t,function(e,i){if(f(e)&&!v(e)){this._f||(this._f=new n);var a=this._f[t](e,i);return"set"==t?this:a}return r.call(this,e,i)})}))},function(t,e,r){"use strict";var n=r(41),i=r(30).getWeak,a=r(1),o=r(4),u=r(39),s=r(40),c=r(26),f=r(14),l=r(42),h=c(5),p=c(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return h(t.a,function(t){return t[0]===e})};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var r=y(this,t);r?r[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,a){var c=t(function(t,n){u(t,c,e,"_i"),t._t=e,t._i=d++,t._l=void 0,null!=n&&s(n,r,t[a],t)});return n(c.prototype,{delete:function(t){if(!o(t))return!1;var r=i(t);return!0===r?v(l(this,e)).delete(t):r&&f(r,this._i)&&delete r[this._i]},has:function(t){if(!o(t))return!1;var r=i(t);return!0===r?v(l(this,e)).has(t):r&&f(r,this._i)}}),c},def:function(t,e,r){var n=i(a(e),!0);return!0===n?v(t).set(e,r):n[t._i]=r,t},ufstore:v}},function(t,e,r){var n=r(21),i=r(6);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=i(e);if(e!==r)throw RangeError("Wrong length!");return r}},function(t,e,r){var n=r(37),i=r(56),a=r(1),o=r(2).Reflect;t.exports=o&&o.ownKeys||function(t){var e=n.f(a(t)),r=i.f;return r?e.concat(r(t)):e}},function(t,e,r){"use strict";var n=r(57),i=r(4),a=r(6),o=r(19),u=r(5)("isConcatSpreadable");t.exports=function t(e,r,s,c,f,l,h,p){for(var d,v,g=f,y=0,m=!!h&&o(h,p,3);y<c;){if(y in s){if(d=m?m(s[y],y,r):s[y],v=!1,i(d)&&(v=void 0!==(v=d[u])?!!v:n(d)),v&&l>0)g=t(e,r,d,a(d.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=d}g++}y++}return g}},function(t,e,r){var n=r(6),i=r(82),a=r(24);t.exports=function(t,e,r,o){var u=String(a(t)),s=u.length,c=void 0===r?" ":String(r),f=n(e);if(f<=s||""==c)return u;var l=f-s,h=i.call(c,Math.ceil(l/c.length));return h.length>l&&(h=h.slice(0,l)),o?h+u:u+h}},function(t,e,r){var n=r(7),i=r(34),a=r(15),o=r(50).f;t.exports=function(t){return function(e){for(var r,u=a(e),s=i(u),c=s.length,f=0,l=[];c>f;)r=s[f++],n&&!o.call(u,r)||l.push(t?[r,u[r]]:u[r]);return l}}},function(t,e,r){var n=r(44),i=r(141);t.exports=function(t){return function(){if(n(this)!=t)throw TypeError(t+"#toJSON isn't generic");return i(this)}}},function(t,e,r){var n=r(40);t.exports=function(t,e){var r=[];return n(t,!1,r.push,r,e),r}},function(t,e){t.exports=Math.scale||function(t,e,r,n,i){return 0===arguments.length||t!=t||e!=e||r!=r||n!=n||i!=i?NaN:t===1/0||t===-1/0?t:(t-e)*(i-n)/(r-e)+n}},function(t,e,r){"use strict";r.r(e);var n=r(47),i=r.n(n),a=r(69),o=r.n(a),u=r(101),s=r.n(u);window.canis={canisObj:{},frameRate:i.a.FRAME_RATE,duration:()=>o.a.wholeEndTime,renderSpec:(t,e,r)=>(e.info={type:"clear",msg:"rendering..."},0===Object.keys(canis.canisObj).length&&(canis.canisObj=new s.a),canis.canisObj.init(t,e).then(()=>{if(!canis.canisObj.hasError)return canis.canisObj.render(r,e)})),reset:function(){o.a.resetAll()},exportJSON:function(){return s.a.lottieJSON},test:function(t){console.log("this is a test! ",t)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LayerFactory=e.JSMovinLayer=void 0;var n,i=r(103),a=r(145),o=r(73),u=(n=r(72))&&n.__esModule?n:{default:n},s=r(71);function c(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function p(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function d(t,e,r){return e&&p(t.prototype,e),r&&p(t,r),t}function v(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var g=function(){function t(e){h(this,t),v(this,"root",void 0),v(this,"anchor",void 0),v(this,"position",void 0),v(this,"timeRange",{}),this.root=e,this.anchor=[0,0,0],this.position=[0,0,0]}return d(t,[{key:"getDefaultProperty",value:function(t){switch(t){case"a":case"p":return JSON.parse(JSON.stringify("a"==t?this.anchor:this.position));case"s":return[100,100,100];case"o":return 100;case"r":return 0;case"tm":return{s:{k:0},e:{k:100},o:{k:0}};default:return 0}}},{key:"convertToStaticProperty",value:function(t,e){if(t[e]||(t[e]={a:0,k:this.getDefaultProperty(e)}),1==t[e].a){var r=t[e].k[0].s;t[e]={a:0,k:r}}}},{key:"convertToAnimatableProperty",value:function(t,e){t[e]&&t[e].a||("a"==e&&(this.anchor=t[e]?t[e].k:[0,0,0]),"p"==e&&(this.position=t[e]?t[e].k:[0,0,0]),t[e]={a:1,k:[]})}},{key:"addKeyframe",value:function(t,e){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1,i=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,u=!(arguments.length>6&&void 0!==arguments[6])||arguments[6],s=t[e].k.filter(function(t){return t.t==i});if(s.length)r=s[0];else{r={t:i,s:this.getDefaultProperty(e)};var c=t[e].k.reduce(function(t,e){return e.t<i?t+1:t},0);t[e].k.splice(c,0,r)}o&&(r.o={x:o[0][0],y:o[0][1]},r.i={x:o[1][0],y:o[1][1]}),n>=0?r.s[n]=a:r.s=!u||a instanceof Array?a:[a]}},{key:"findPropertyConfig",value:function(t){return this.root.shapes[0].it.find(function(e){return e.ty==t})}},{key:"findOrInsertPropertyConfig",value:function(t){var e=this.findPropertyConfig(t);if(e)return e;var r=this.findPropertyConfig("tr"),n=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?l(Object(r),!0).forEach(function(e){v(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}({ty:t},this.getDefaultProperty(t));if(r){var i=this.root.shapes[0].it;i.splice(i.length-1,0,n)}else this.root.shapes[0].it.push(n);return n}},{key:"commonPropertyMapping",value:function(t){var e,r,n;switch(t){case"scaleX":e=this.root.ks,r="s",n=0;break;case"scaleY":e=this.root.ks,r="s",n=1;break;case"anchorX":e=this.root.ks,r="a",n=0;break;case"anchorY":e=this.root.ks,r="a",n=1;break;case"x":e=this.root.ks,r="p",n=0;break;case"y":e=this.root.ks,r="p",n=1;break;case"rotate":e=this.root.ks,r="r",n=-1;break;case"opacity":e=this.root.ks,r="o",n=-1;break;case"trimStart":e=this.findOrInsertPropertyConfig("tm"),r="s",n=-1;break;case"trimEnd":e=this.findOrInsertPropertyConfig("tm"),r="e",n=-1;break;case"trimOffset":e=this.findOrInsertPropertyConfig("tm"),r="o",n=-1;break;case"fillColor":e=this.findPropertyConfig("fl"),r="c",n=-1;break;case"strokeColor":e=this.findPropertyConfig("st"),r="c",n=-1;break;case"strokeWidth":e=this.findPropertyConfig("st"),r="w",n=-1;break;case"shape":e=this.findPropertyConfig("sh"),r="ks",n=-1;break;case"fillOpacity":e=this.findPropertyConfig("fl"),r="o",n=-1;break;case"strokeOpacity":e=this.findPropertyConfig("st"),r="o",n=-1}return[e,r,n]}},{key:"updateTimeRange",value:function(){this.root.op=Math.max.apply(Math,f(Object.values(this.timeRange)).concat([1]))}}]),d(t,[{key:"setStaticProperty",value:function(t,e){var r,n,i;this.timeRange[t]=1,this.updateTimeRange(),e instanceof s.PathMaker&&(e.uniform(),e=e.path);var a=c(this.commonPropertyMapping(t),3);if(r=a[0],n=a[1],i=a[2],!n||void 0===i)switch(t){case"text":if(5==this.root.ty){var o=this.root.t.d;o.k=[o.k[0]],o.k[0].t=0,o.k[0].s.t=e}break;default:throw console.error(t,e),new Error("Not a valid key.")}r&&n&&void 0!==i&&(this.convertToStaticProperty(r,n),i>=0?r[n].k[i]=e:r[n].k=e)}},{key:"setAnimatableProperty",value:function(t,e,r,n,a,u){if(r<=e)throw new Error("End frame should be larger than start frame.");if(this.timeRange[t]=Math.max(this.timeRange[t]||0,r+1),this.updateTimeRange(),u||(u=i.EasingFactory.linear()),n instanceof s.PathMaker||a instanceof s.PathMaker){if([n,a].forEach(function(t){return t instanceof s.PathMaker&&t.uniform()}),n instanceof s.PathMaker&&a instanceof s.PathMaker){var f=n.path.v.length-1,l=a.path.v.length-1;if(!(f<=0&&l<=0))if(Math.min(f,l)<=0&&Math.max(f,l)>0){var h=f<=0?n:a,p=Math.max(f,l);["i","o","v"].forEach(function(t){h.path[t]=Array(p).fill(h.path[t].length?h.path[t][0]:[0,0])})}else{var d=(0,o.leastCommonMultiple)(f,l);n.upsample(Math.round(d/f)),a.upsample(Math.round(d/l))}}var v=c([n,a].map(function(t){return t instanceof s.PathMaker?t.path:t}),2);n=v[0],a=v[1]}var g,y,m,b=!0,k=c(this.commonPropertyMapping(t),3);if(g=k[0],y=k[1],m=k[2],!y||void 0===m)switch(t){case"text":if(5==this.root.ty){var w=(g=this.root.t).d.k[0].s,x=JSON.parse(JSON.stringify(w)),S=JSON.parse(JSON.stringify(w));x.t=n,S.t=a,n=x,a=S,y="d",m=-1,b=!1}break;default:throw console.error(t,e,r,n,a,u),new Error("Not a valid key.")}g&&y&&void 0!==m&&(this.convertToAnimatableProperty(g,y),this.addKeyframe(g,y,m,e,n,u,b),this.addKeyframe(g,y,m,r,a,i.EasingFactory.linear(),b))}}]),t}();e.JSMovinLayer=g;var y=function(){function t(){h(this,t)}return d(t,null,[{key:"generateTransform",value:function(t){return{o:{a:0,k:100},r:{a:0,k:0},p:{a:0,k:[t[0],t[1],0]},a:{a:0,k:[0,0,0]},s:{a:0,k:[100,100,100]}}}},{key:"boundingBox",value:function(t){var e=(0,o.getBoundingBox)(t).map(function(t,e){return e<2?t-1:t+1});return this.rect.apply(this,f(e))}},{key:"shape",value:function(t){var e=(0,o.getBoundingBox)(t),r={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(e),ip:0,op:1,st:0,bm:0,shapes:(0,a.render)(t)};return new g(r)}},{key:"rect",value:function(t,e,r,n){var i={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t,e,r,n]),ip:0,op:1,st:0,bm:0,shapes:[(0,a.renderPlainGlyph)("rect",[r,n])]};return new g(i)}},{key:"ellipse",value:function(t,e,r,n){var i={ty:4,ddd:0,sr:1,ao:0,ks:this.generateTransform([t-r,e-n,2*r,2*n]),ip:0,op:1,st:0,bm:0,shapes:[(0,a.renderPlainGlyph)("ellipse",[r,n])]};return new g(i)}},{key:"ref",value:function(t){return new g({ty:0,ddd:0,sr:1,ao:0,ks:this.generateTransform([0,0,0,0]),ip:0,op:1,st:0,bm:0,w:9e9,h:9e9,refId:t})}},{key:"hierarchy",value:function(t,e,r){var n,i=this,s=(0,o.getBoundingBox)(t),f={ty:n=t instanceof SVGTextElement?5:t instanceof SVGImageElement?2:t instanceof SVGGElement?0:4,ddd:0,sr:1,ao:0,ks:this.generateTransform(0==n?[0,0,0,0]:s),ip:0,op:1,st:0,bm:0};switch(n){case 0:var l=(0,o.getLeafNodes)(t);if(l.filter(function(t){return t instanceof SVGTextElement||t instanceof SVGImageElement}).length){var h=f,p=[],d=(0,u.default)();l.forEach(function(t){t instanceof SVGGraphicsElement&&!(t instanceof SVGGElement)&&p.unshift(i.hierarchy(t,e,r))}),p.forEach(function(t){t.root.op=9e9}),h.w=s[0]+s[2]+1,h.h=s[1]+s[3]+1,h.refId=d,e.push({id:d,layers:p.map(function(t){return t.root})})}else{var v=f;v.ty=4,v.ks=this.generateTransform(s),v.shapes=(0,a.render)(t)}break;case 2:var y=f,m=c((0,a.renderImage)(t,e),2),b=m[0],k=m[1];y.refId=b,e.filter(function(t){return t.id==b}).length||e.push(k);break;case 4:f.shapes=(0,a.render)(t);break;case 5:var w=f,x=(0,o.getBaselineHeight)(t),S=[0,1,.5][(0,o.encodeTextAnchor)(getComputedStyle(t).textAnchor)];w.ks.p.k=[s[0]+s[2]*S,s[1]+s[3]-x,0],w.ks.o.k=~~(100*parseFloat(getComputedStyle(t).fillOpacity||"1"));var A=c((0,a.renderText)(t,r),2),T=A[0],M=A[1];w.t=T,r.list.filter(function(t){return t.fName==M.fName}).length||r.list.push(M)}return new g(f)}}]),t}();e.LayerFactory=y},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.render=s,e.renderPlainGlyph=function(t,e){var r={ty:"gr",it:[{ty:"sh",ks:{k:null,a:0},hd:!1},{ty:"st",c:{k:[1,1,1,1]},w:{k:1},o:{k:100},lc:(0,o.encodeLineCap)("butt"),lj:(0,o.encodeLineJoin)("miter")},{ty:"fl",c:{k:[1,1,1,1]},o:{k:100}},{ty:"tr",p:{k:[0,0]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:100},sk:{k:0},sa:{k:0}}],bm:0,hd:!1},n=new i.PathMaker;switch(t){case"rect":n.moveTo(0,0),n.lineTo(e[0],0),n.lineTo(e[0],e[1]),n.lineTo(0,e[1]),n.closePath();break;case"ellipse":n.moveTo(e[0],0),n.arcTo(e[0],e[1],0,1,0,e[0],2*e[1]),n.arcTo(e[0],e[1],0,1,0,e[0],0),n.closePath()}return n.uniform(),r.it[0].ks.k=n.path,r},e.renderText=function(t,e){var r=getComputedStyle(t),n=parseFloat(r.fontSize),i=r.fontFamily.split(",")[0].trim(),u=r.fontStyle,s=r.fontWeight,c=(r.fill||"rgb(0,0,0)").split("(")[1].split(")")[0].split(",").map(function(t){return parseInt(t)/255}),f=r.textAnchor,l=(0,a.default)();if(e){var h=e.list.filter(function(t){return t.fFamily==i&&t.fStyle==u&&t.fWeight==s});h.length&&(l=h[0].fName)}var p={d:{k:[{t:0,s:{s:n,f:l,t:t.innerHTML,j:(0,o.encodeTextAnchor)(f),tr:0,ls:0,fc:c}}]},p:{},m:{a:{k:[0,0]}},a:[]},d={fFamily:i,fWeight:"".concat(s),fStyle:u,fName:l};return[p,d]},e.renderImage=function(t,e){var r=(0,a.default)(),n=t.height.baseVal;n.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var i=t.width.baseVal;i.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var o=document.createElement("canvas"),u=o.getContext("2d");o.width=3*i.valueInSpecifiedUnits,o.height=3*n.valueInSpecifiedUnits,u.drawImage(t,0,0,o.width,o.height);var s=o.toDataURL();if(e){var c=e.filter(function(t){return t.p==s});c.length&&(r=c[0].id)}var f={h:n.valueInSpecifiedUnits,w:i.valueInSpecifiedUnits,id:r,p:s,e:1};return[r,f]};var n,i=r(71),a=(n=r(72))&&n.__esModule?n:{default:n},o=r(73);function u(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(r.push(o.value),!e||r.length!==e);n=!0);}catch(t){i=!0,a=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw a}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function s(t,e){return t instanceof SVGTextElement||t instanceof SVGImageElement?[]:t instanceof SVGGElement?function(t,e){var r=[];return t.childNodes.forEach(function(n){n instanceof SVGGraphicsElement&&(r=s(n,e||t).concat(r))}),r}(t,e):function(t,e){var r={ty:"gr",it:[],bm:0,hd:!1},n=function(n){n.uniform(),r.it.push({ty:"sh",ks:{k:n.path,a:0},nm:t.id,hd:!1});var i=window.getComputedStyle(t);!function(t,e,r,n){e.stroke&&"none"!==e.stroke&&t.push({ty:"st",c:{k:e.stroke.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.strokeOpacity||"1")},w:{k:parseFloat(e.strokeWidth||"1")},lc:(0,o.encodeLineCap)(e.strokeLinecap),lj:(0,o.encodeLineJoin)(e.strokeLinejoin)});e.fill&&"none"!==e.fill&&t.push({ty:"fl",c:{k:e.fill.split("(")[1].split(")")[0].split(",").slice(0,3).map(function(t){return parseInt(t)/255}).concat(1)},o:{k:100*parseFloat(e.fillOpacity||"1")}});var i=0,a=0,u=100;if(r&&n){var s=(0,o.calculateBaseTransform)(r,n),c=n.getBBox(),f=r.getBBox();i=s.e+f.x-c.x,a=s.f+f.y-c.y,u=100*parseFloat(e.opacity||"1")}t.push({ty:"tr",p:{k:[i,a]},a:{k:[0,0]},s:{k:[100,100]},r:{k:0},o:{k:u},sk:{k:0},sa:{k:0}})}(r.it,i,t,e)};if(t instanceof SVGCircleElement){var a=t.r.baseVal;a.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);var s=a.valueInSpecifiedUnits,c=new i.PathMaker;c.moveTo(s,0),c.arcTo(s,s,0,1,0,s,2*s),c.arcTo(s,s,0,1,0,s,0),c.closePath(),n(c)}else if(t instanceof SVGEllipseElement){var f=u(["rx","ry"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),l=f[0],h=f[1],p=new i.PathMaker;p.moveTo(l,0),p.arcTo(l,h,0,1,0,l,2*h),p.arcTo(l,h,0,1,0,l,0),p.closePath(),n(p)}else if(t instanceof SVGLineElement){var d=u(["x1","x2","y1","y2"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),4),v=d[0],g=d[1],y=d[2],m=d[3],b=Math.min(v,g),k=Math.min(y,m),w=new i.PathMaker;w.moveTo(v-b,y-k),w.lineTo(g-b,m-k),n(w)}else if(t instanceof SVGPathElement){var x=t.getAttribute("d")||"",S=new i.PathMaker(x);n(S)}else if(t instanceof SVGPolygonElement||t instanceof SVGPolylineElement){var A=t.points;if(A.length){var T=Array.prototype.slice.call(A),M=T.reduce(function(t,e){return Math.min(t,e.x)},0),E=T.reduce(function(t,e){return Math.min(t,e.y)},0),O=new i.PathMaker;O.moveTo(A[0].x-M,A[0].y-E),T.forEach(function(t,e){e<=0||O.lineTo(t.x-M,t.y-E)}),t instanceof SVGPolygonElement&&O.closePath(),n(O)}}else{if(!(t instanceof SVGRectElement))throw console.error(t),new Error("No implementation found for svg graphics element.");var _=u(["width","height"].map(function(e){var r=t[e].baseVal;return r.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX),r.valueInSpecifiedUnits}),2),P=_[0],I=_[1],N=new i.PathMaker;N.moveTo(0,0),N.lineTo(P,0),N.lineTo(P,I),N.lineTo(0,I),N.closePath(),n(N)}return[r]}(t,e)}},function(t,e,r){"use strict";function n(t,e,r,i){this.message=t,this.expected=e,this.found=r,this.location=i,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,n)}!function(t,e){function r(){this.constructor=t}r.prototype=e.prototype,t.prototype=new r}(n,Error),n.buildMessage=function(t,e){var r={literal:function(t){return'"'+i(t.text)+'"'},class:function(t){var e,r="";for(e=0;e<t.parts.length;e++)r+=t.parts[e]instanceof Array?a(t.parts[e][0])+"-"+a(t.parts[e][1]):a(t.parts[e]);return"["+(t.inverted?"^":"")+r+"]"},any:function(t){return"any character"},end:function(t){return"end of input"},other:function(t){return t.description}};function n(t){return t.charCodeAt(0).toString(16).toUpperCase()}function i(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}function a(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+n(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+n(t)})}return"Expected "+function(t){var e,n,i,a=new Array(t.length);for(e=0;e<t.length;e++)a[e]=(i=t[e],r[i.type](i));if(a.sort(),a.length>0){for(e=1,n=1;e<a.length;e++)a[e-1]!==a[e]&&(a[n]=a[e],n++);a.length=n}switch(a.length){case 1:return a[0];case 2:return a[0]+" or "+a[1];default:return a.slice(0,-1).join(", ")+", or "+a[a.length-1]}}(t)+" but "+function(t){return t?'"'+i(t)+'"':"end of input"}(e)+" found."},t.exports={SyntaxError:n,parse:function(t,e){e=void 0!==e?e:{};var r,i={},a={svg_path:gt},o=gt,u=function(t){if(!t)return[];for(var e=[],r=0;r<t.length;r++)e=e.concat.apply(e,t[r]);var n=e[0];return n&&"m"==n.code&&(delete n.relative,n.code="M"),e},s=function(t,e){return function(t,e){if(!e)return[t];for(var r=[t],n=0,i=e.length;n<i;n++)r[n+1]=e[n][1];return r}(t,e)},c=/^[Mm]/,f=lt(["M","m"],!1,!1),l=function(t,e,r){var n=Bt(t,[e]);return r&&(n=n.concat(Bt("M"==t?"L":"l",r[1]))),n},h=/^[Zz]/,p=lt(["Z","z"],!1,!1),d=function(){return Bt("Z")},v=/^[Ll]/,g=lt(["L","l"],!1,!1),y=function(t,e){return Bt(t,e)},m=/^[Hh]/,b=lt(["H","h"],!1,!1),k=function(t,e){return Bt(t,e.map(function(t){return{x:t}}))},w=/^[Vv]/,x=lt(["V","v"],!1,!1),S=function(t,e){return Bt(t,e.map(function(t){return{y:t}}))},A=/^[Cc]/,T=lt(["C","c"],!1,!1),M=function(t,e,r){return{x1:t.x,y1:t.y,x2:e.x,y2:e.y,x:r.x,y:r.y}},E=/^[Ss]/,O=lt(["S","s"],!1,!1),_=function(t,e){return{x2:t.x,y2:t.y,x:e.x,y:e.y}},P=/^[Qq]/,I=lt(["Q","q"],!1,!1),N=function(t,e){return{x1:t.x,y1:t.y,x:e.x,y:e.y}},F=/^[Tt]/,j=lt(["T","t"],!1,!1),C=/^[Aa]/,R=lt(["A","a"],!1,!1),L=function(t,e,r,n,i,a){return{rx:t,ry:e,xAxisRotation:r,largeArc:n,sweep:i,x:a.x,y:a.y}},B=function(t,e){return{x:t,y:e}},V=function(t){return 1*t},D=function(t){return 1*t.join("")},G=/^[01]/,U=lt(["0","1"],!1,!1),z=function(t){return"1"==t},Y=function(){return""},W=",",X=ft(",",!1),q=function(t){return t.join("")},H=".",J=ft(".",!1),Q=/^[eE]/,Z=lt(["e","E"],!1,!1),K=/^[+\-]/,$=lt(["+","-"],!1,!1),tt=/^[0-9]/,et=lt([["0","9"]],!1,!1),rt=function(t){return t.join("")},nt=/^[ \t\n\r]/,it=lt([" ","\t","\n","\r"],!1,!1),at=0,ot=[{line:1,column:1}],ut=0,st=[],ct=0;if("startRule"in e){if(!(e.startRule in a))throw new Error("Can't start parsing from rule \""+e.startRule+'".');o=a[e.startRule]}function ft(t,e){return{type:"literal",text:t,ignoreCase:e}}function lt(t,e,r){return{type:"class",parts:t,inverted:e,ignoreCase:r}}function ht(e){var r,n=ot[e];if(n)return n;for(r=e-1;!ot[r];)r--;for(n={line:(n=ot[r]).line,column:n.column};r<e;)10===t.charCodeAt(r)?(n.line++,n.column=1):n.column++,r++;return ot[e]=n,n}function pt(t,e){var r=ht(t),n=ht(e);return{start:{offset:t,line:r.line,column:r.column},end:{offset:e,line:n.line,column:n.column}}}function dt(t){at<ut||(at>ut&&(ut=at,st=[]),st.push(t))}function vt(t,e,r){return new n(n.buildMessage(t,e),t,e,r)}function gt(){var t,e,r,n,a;for(t=at,e=[],r=Ct();r!==i;)e.push(r),r=Ct();if(e!==i)if((r=function(){var t,e,r,n,a,o;if(t=at,(e=yt())!==i){for(r=[],n=at,a=[],o=Ct();o!==i;)a.push(o),o=Ct();for(a!==i&&(o=yt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;){for(r.push(n),n=at,a=[],o=Ct();o!==i;)a.push(o),o=Ct();a!==i&&(o=yt())!==i?n=a=[a,o]:(at=n,n=i)}r!==i?(t,e=s(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())===i&&(r=null),r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i?(t,t=e=u(r)):(at=t,t=i)}else at=t,t=i;else at=t,t=i;return t}function yt(){var e,r,n,a,o,u;if(e=at,(r=function(){var e,r,n,a,o,u,s;e=at,c.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(f));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=Tt())!==i?(o=at,(u=_t())===i&&(u=null),u!==i&&(s=bt())!==i?o=u=[u,s]:(at=o,o=i),o===i&&(o=null),o!==i?(e,r=l(r,a,o),e=r):(at=e,e=i)):(at=e,e=i)}else at=e,e=i;return e}())!==i){for(n=[],a=at,o=[],u=Ct();u!==i;)o.push(u),u=Ct();for(o!==i&&(u=mt())!==i?a=o=[o,u]:(at=a,a=i);a!==i;){for(n.push(a),a=at,o=[],u=Ct();u!==i;)o.push(u),u=Ct();o!==i&&(u=mt())!==i?a=o=[o,u]:(at=a,a=i)}n!==i?(e,e=r=s(r,n)):(at=e,e=i)}else at=e,e=i;return e}function mt(){var e;return(e=function(){var e,r;e=at,h.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(p));r!==i&&(e,r=d());return e=r}())===i&&(e=function(){var e,r,n,a;e=at,v.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(g));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=bt())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,m.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(b));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=kt())!==i?(e,r=k(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,w.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(x));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=kt())!==i?(e,r=S(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,A.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(T));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=wt())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=wt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=wt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=s(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,E.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(O));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=xt())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=xt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=s(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,P.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(I));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=St())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=St())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=St())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=s(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,F.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(j));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=Tt())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=s(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}())===i&&(e=function(){var e,r,n,a;e=at,C.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(R));if(r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i&&(a=function(){var t,e,r,n,a,o;if(t=at,(e=At())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=At())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=At())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,e=s(e,r),t=e):(at=t,t=i)}else at=t,t=i;return t}())!==i?(e,r=y(r,a),e=r):(at=e,e=i)}else at=e,e=i;return e}()),e}function bt(){var t,e,r,n,a,o;if(t=at,(e=Tt())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,t=e=s(e,r)):(at=t,t=i)}else at=t,t=i;return t}function kt(){var t,e,r,n,a,o;if(t=at,(e=Et())!==i){for(r=[],n=at,(a=_t())===i&&(a=null),a!==i&&(o=Et())!==i?n=a=[a,o]:(at=n,n=i);n!==i;)r.push(n),n=at,(a=_t())===i&&(a=null),a!==i&&(o=Et())!==i?n=a=[a,o]:(at=n,n=i);r!==i?(t,t=e=s(e,r)):(at=t,t=i)}else at=t,t=i;return t}function wt(){var t,e,r,n,a,o;return t=at,(e=Tt())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Tt())!==i?((a=_t())===i&&(a=null),a!==i&&(o=Tt())!==i?(t,t=e=M(e,n,o)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i),t}function xt(){var t,e,r,n;return t=at,(e=Tt())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Tt())!==i?(t,t=e=_(e,n)):(at=t,t=i)):(at=t,t=i),t}function St(){var t,e,r,n;return t=at,(e=Tt())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Tt())!==i?(t,t=e=N(e,n)):(at=t,t=i)):(at=t,t=i),t}function At(){var t,e,r,n,a,o,u,s,c,f,l;return t=at,(e=Mt())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Mt())!==i?((a=_t())===i&&(a=null),a!==i&&(o=Et())!==i&&_t()!==i&&(u=Ot())!==i?((s=_t())===i&&(s=null),s!==i&&(c=Ot())!==i?((f=_t())===i&&(f=null),f!==i&&(l=Tt())!==i?(t,t=e=L(e,n,o,u,c,l)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i)):(at=t,t=i),t}function Tt(){var t,e,r,n;return t=at,(e=Et())!==i?((r=_t())===i&&(r=null),r!==i&&(n=Et())!==i?(t,t=e=B(e,n)):(at=t,t=i)):(at=t,t=i),t}function Mt(){var t,e;return t=at,(e=It())===i&&(e=jt()),e!==i&&(t,e=V(e)),t=e}function Et(){var t,e,r,n;return t=at,e=at,(r=Ft())===i&&(r=null),r!==i&&(n=It())!==i?e=r=[r,n]:(at=e,e=i),e===i&&(e=at,(r=Ft())===i&&(r=null),r!==i&&(n=jt())!==i?e=r=[r,n]:(at=e,e=i)),e!==i&&(t,e=D(e)),t=e}function Ot(){var e,r;return e=at,G.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(U)),r!==i&&(e,r=z(r)),e=r}function _t(){var t,e,r,n,a;if(t=at,e=[],(r=Ct())!==i)for(;r!==i;)e.push(r),r=Ct();else e=i;if(e!==i)if((r=Pt())===i&&(r=null),r!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i?t=e=[e,r,n]:(at=t,t=i)}else at=t,t=i;else at=t,t=i;if(t===i){if(t=at,e=at,(r=Pt())!==i){for(n=[],a=Ct();a!==i;)n.push(a),a=Ct();n!==i?e=r=[r,n]:(at=e,e=i)}else at=e,e=i;e!==i&&(t,e=Y()),t=e}return t}function Pt(){var e;return 44===t.charCodeAt(at)?(e=W,at++):(e=i,0===ct&&dt(X)),e}function It(){var e,r,n,a;return e=at,r=at,(n=function(){var e,r,n,a,o;e=at,r=at,(n=jt())===i&&(n=null);n!==i?(46===t.charCodeAt(at)?(a=H,at++):(a=i,0===ct&&dt(J)),a!==i&&(o=jt())!==i?r=n=[n,a,o]:(at=r,r=i)):(at=r,r=i);r===i&&(r=at,(n=jt())!==i?(46===t.charCodeAt(at)?(a=H,at++):(a=i,0===ct&&dt(J)),a!==i?r=n=[n,a]:(at=r,r=i)):(at=r,r=i));r!==i&&(e,r=q(r));return e=r}())!==i?((a=Nt())===i&&(a=null),a!==i?r=n=[n,a]:(at=r,r=i)):(at=r,r=i),r===i&&(r=at,(n=jt())!==i&&(a=Nt())!==i?r=n=[n,a]:(at=r,r=i)),r!==i&&(e,r=q(r)),e=r}function Nt(){var e,r,n,a,o;return e=at,r=at,Q.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(Z)),n!==i?((a=Ft())===i&&(a=null),a!==i&&(o=jt())!==i?r=n=[n,a,o]:(at=r,r=i)):(at=r,r=i),r!==i&&(e,r=q(r)),e=r}function Ft(){var e;return K.test(t.charAt(at))?(e=t.charAt(at),at++):(e=i,0===ct&&dt($)),e}function jt(){var e,r,n;if(e=at,r=[],tt.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(et)),n!==i)for(;n!==i;)r.push(n),tt.test(t.charAt(at))?(n=t.charAt(at),at++):(n=i,0===ct&&dt(et));else r=i;return r!==i&&(e,r=rt(r)),e=r}function Ct(){var e,r;return e=at,nt.test(t.charAt(at))?(r=t.charAt(at),at++):(r=i,0===ct&&dt(it)),r!==i&&(e,r=Y()),e=r}var Rt={m:"moveto",l:"lineto",h:"horizontal lineto",v:"vertical lineto",c:"curveto",s:"smooth curveto",q:"quadratic curveto",t:"smooth quadratic curveto",a:"elliptical arc",z:"closepath"};for(var Lt in Rt)Rt[Lt.toUpperCase()]=Rt[Lt];function Bt(t,e){e||(e=[{}]);for(var r=e.length;r--;){var n={code:t,command:Rt[t]};for(var i in t==t.toLowerCase()&&(n.relative=!0),e[r])n[i]=e[r][i];e[r]=n}return e}if((r=o())!==i&&at===t.length)return r;throw r!==i&&at<t.length&&dt({type:"end"}),vt(st,ut<t.length?t.charAt(ut):null,ut<t.length?pt(ut,ut+1):pt(ut,ut))}}},function(t,e){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var n=new Uint8Array(16);t.exports=function(){return r(n),n}}else{var i=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),i[e]=t>>>((3&e)<<3)&255;return i}}},function(t,e){for(var r=[],n=0;n<256;++n)r[n]=(n+256).toString(16).substr(1);t.exports=function(t,e){var n=e||0,i=r;return[i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],"-",i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]],i[t[n++]]].join("")}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var n,i=(n=r(47))&&n.__esModule?n:{default:n},a=(r(54),r(53));function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var f=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=s(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))).chartIdx=0,t._type=e.actionTypes.appear,t.animationType="",t._easing=e.easingType.easeLinear,t._duration=0,t.startTime,t.attribute=[],t}var r,n,f;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,i.default),r=e,f=[{key:"transToVisualAttrAction",value:function(t,r,n,o){for(var u=[],s=function(a){var s=n[a],c=[],f=[];o.forEach(function(t,e){if(r+1<t.length)if("d"===s||"textContent"===s||"fill"===s||"stroke"===s){var n=[e,t[r][s]?t[r][s]:"d"===s?"m0,0":t[r][s]],i=[e,t[r+1][s]?t[r+1][s]:"d"===s?"m0,0":t[r+1][s]];if("d"===s){var a=document.createElementNS("http://www.w3.org/2000/svg","path"),o=document.createElementNS("http://www.w3.org/2000/svg","path");a.setAttributeNS(null,"d",t[r][s]?t[r][s]:"m0,0"),o.setAttributeNS(null,"d",t[r+1][s]?t[r+1][s]:"m0,0");for(var u=a.getTotalLength()/300,l=o.getTotalLength()/300,h=[],p=[],d=0;d<300;d++){var v=a.getPointAtLength(u*d),g=o.getPointAtLength(l*d);h.push([v.x,v.y]),p.push([g.x,g.y])}n.push(h),i.push(p)}c.push(n),f.push(i)}else c.push([e,parseFloat(t[r][s])]),f.push([e,parseFloat(t[r+1][s])])});var l={chartIdx:t.chartIdx,reference:i.default.timingRef.previousStart,offset:0,duration:t.type===e.actionTypes.transition?t.duration:0,type:e.actionTargets.mark,animationType:e.targetAnimationType.custom,attribute:[{attrName:s,from:c,to:f}]};u.push(l)},c=0;c<n.length;c++)s(c);if(t.type!==e.actionTypes.transition){var f={chartIdx:t.chartIdx,reference:t.reference,offset:t.offset,easing:t.easing,duration:void 0===t.duration?i.default.FRAME_RATE:t.duration,type:e.actionTargets.mask};switch(t.type){case e.actionTypes.appear:f.duration=1e3/i.default.FRAME_RATE,f.animationType=e.targetAnimationType.fade,f.type=e.actionTargets.mark,f.attribute=[{attrName:"opacity",from:0,to:1}];break;case e.actionTypes.disappear:f.duration=1e3/i.default.FRAME_RATE,f.animationType=e.targetAnimationType.fade,f.type=e.actionTargets.mark,f.attribute=[{attrName:"opacity",from:1,to:0}];break;case e.actionTypes.fade:f.animationType=e.targetAnimationType.fade,f.type=e.actionTargets.mark,f.attribute=[{attrName:"opacity",from:0,to:1}];break;case e.actionTypes.fadeOut:f.animationType=e.targetAnimationType.fade,f.type=e.actionTargets.mark,f.attribute=[{attrName:"opacity",from:1,to:0}];break;case e.actionTypes.grow:f.type=e.actionTargets.mark,f.animationType=e.targetAnimationType.grow,f.attribute=[{attrName:"trimEnd",from:0,to:1}];break;case e.actionTypes.degrow:f.type=e.actionTargets.mark,f.animationType=e.targetAnimationType.grow,f.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case e.actionTypes.wipeBottom:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"scaleY",from:1,to:0}];break;case e.actionTypes.wipeOutFromTop:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"scaleY",from:0,to:1}];break;case e.actionTypes.wipeTop:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleY",from:0,to:1}];break;case e.actionTypes.wipeOutFromBottom:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleY",from:1,to:0}];break;case e.actionTypes.wipeLeft:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleX",from:0,to:1}];break;case e.actionTypes.wipeOutFromRight:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleX",from:1,to:0}];break;case e.actionTypes.wipeRight:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"scaleX",from:1,to:0}];break;case e.actionTypes.wipeOutFromLeft:f.animationType=e.targetAnimationType.wipe,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"scaleX",from:0,to:1}];break;case e.actionTypes.circle:f.animationType=e.targetAnimationType.circle,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleX",from:0,to:1},{attrName:"scaleY",from:0,to:1}];break;case e.actionTypes.circleOut:f.animationType=e.targetAnimationType.circle,f.maskType=a.MaskType.Alpha,f.attribute=[{attrName:"scaleX",from:1,to:0},{attrName:"scaleY",from:1,to:0}];break;case e.actionTypes.wheel:f.animationType=e.targetAnimationType.wheel,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"trimEnd",from:1,to:0}];break;case e.actionTypes.wheelOut:f.animationType=e.targetAnimationType.wheel,f.maskType=a.MaskType.InvertAlpha,f.attribute=[{attrName:"trimEnd",from:0,to:1}]}u.push(f)}return u}},{key:"calActionDuration",value:function(t,r,n){for(var i=0,a=-1e5,u=0,s=0,c=!1,f=function(r){var f=void 0,l=new Map;f=t[r].calOffsetTime(u,s,0,n),r>0&&t[r-1].animationType===e.targetAnimationType.mistake&&f.forEach(function(e,n){f.set(n,e-t[r-1].offset)});var h=1e6,p=-1e5;t[r].offsetStart=new Map,f.forEach(function(e,n){var u=0;"object"===o(t[r].duration)?(c=!0,u=e):"number"==typeof t[r].duration&&(u=e+t[r].duration),l.set(n,u),t[r].offsetStart.set(n,e),e<h&&(h=e),u>p&&(p=u),e<i&&(i=e),u>a&&(a=u)}),u=h,s=p},l=0;l<t.length;l++)f(l);var h=a-i,p=new Map,d=new Map;return c?(r.forEach(function(t,e){t.forEach(function(t,e){(void 0===d.get(e)||t[0]<d.get(e))&&d.set(e,t[0])})}),r.forEach(function(t,e){var r=0;t.forEach(function(t,e){var n=d.get(e);r+=t[1]*t[0]/n}),p.set(e,h+r)})):r.forEach(function(t,e){p.set(e,h)}),[p,d,t]}},{key:"transToLottieAction",value:function(t){switch(t){case e.easingType.easeLinear:return a.EasingFactory.linear();case e.easingType.easeInQuad:return a.EasingFactory.easeInQuad();case e.easingType.easeOutQuad:return a.EasingFactory.easeOutQuad();case e.easingType.easeInOutQuad:return a.EasingFactory.easeInOutQuad();case e.easingType.easeInCubic:return a.EasingFactory.easeInCubic();case e.easingType.easeOutCubic:return a.EasingFactory.easeOutCubic();case e.easingType.easeInOutCubic:return a.EasingFactory.easeInOutCubic()}}}],(n=[{key:"initAction",value:function(t){var e=this;this.chartIdx=t.chartIdx,this.type=t.type,this.animationType=t.animationType,this.maskType=void 0===t.maskType?a.MaskType.Alpha:t.maskType,this.reference=t.reference,this.offset=t.offset,this.duration=t.duration,this.easing=t.easing,void 0!==t.attribute&&t.attribute.forEach(function(t){var r={attrName:t.attrName,from:t.from,to:t.to};e.attribute.push(r)})}},{key:"type",set:function(t){void 0!==t&&(Object.keys(e.actionTypes).includes(t)?this._type=t:alert("the 'type' of action is not defined. "))},get:function(){return this._type}},{key:"easing",set:function(t){void 0!==t&&(Object.keys(e.easingType).includes(t)?this._easing=t:alert("the 'easing' of action is not defined. "))},get:function(){return this._easing}},{key:"duration",set:function(t){void 0!==t&&(this._duration="number"==typeof t?Math.floor(t/(1e3/i.default.FRAME_RATE))*(1e3/i.default.FRAME_RATE):t)},get:function(){return this._duration}}])&&u(r.prototype,n),f&&u(r,f),e}();f.actionTypes={fade:"fade",wipeBottom:"wipe bottom",wipeTop:"wipe top",wipeLeft:"wipe left",wipeRight:"wipe right",wheel:"wheel",appear:"appear",disappear:"disappear",circle:"circle",grow:"grow",custom:"custom",fadeOut:"fade out",wipeOutFromLeft:"wipe out from left",wipeOutFromTop:"wipe out from top",wipeOutFromRight:"wipe out from right",wipeOutFromBottom:"wipe out from bottom",wheelOut:"wheel out",circleOut:"circle out",degrow:"degrow",transition:"magic move",zoom:"zoom",mark:"mask",mask:"mark"},f.actionTargets={mark:"mark",mask:"mask"},f.targetAnimationType={fade:"fade",wipe:"wipe",move:"move",wheel:"wheel",circle:"circle",appear:"appear",grow:"grow",custom:"custom",mistake:"mistake"},f.easingType={easeLinear:"easeLinear",easeInQuad:"easeInQuad",easeOutQuad:"easeOutQuad",easeInOutQuad:"easeInOutQuad",easeInCubic:"easeInCubic",easeOutCubic:"easeOutCubic",easeInOutCubic:"easeInOutCubic",easeOutBounce:"easeOutBounce"};var l=f;e.default=l,t.exports=e.default},function(t,e,r){"use strict";(function(t){if(r(152),r(349),r(350),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var e="defineProperty";function n(t,r,n){t[r]||Object[e](t,r,{writable:!0,configurable:!0,value:n})}n(String.prototype,"padLeft","".padStart),n(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&n(Array,t,Function.call.bind([][t]))})}).call(this,r(151))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){r(153),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(167),r(168),r(169),r(170),r(171),r(172),r(173),r(174),r(175),r(176),r(177),r(178),r(179),r(180),r(181),r(182),r(183),r(184),r(185),r(186),r(187),r(188),r(189),r(190),r(191),r(192),r(193),r(194),r(195),r(196),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208),r(209),r(210),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(218),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(227),r(228),r(229),r(230),r(231),r(233),r(234),r(236),r(237),r(238),r(239),r(240),r(241),r(242),r(244),r(245),r(246),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(255),r(256),r(94),r(257),r(126),r(258),r(127),r(259),r(260),r(261),r(262),r(263),r(130),r(132),r(133),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(276),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(290),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),r(324),r(325),r(326),r(327),r(328),r(329),r(330),r(331),r(332),r(333),r(334),r(335),r(336),r(337),r(338),r(339),r(340),r(341),r(342),r(343),r(344),r(345),r(346),r(347),r(348),t.exports=r(18)},function(t,e,r){"use strict";var n=r(2),i=r(14),a=r(7),o=r(0),u=r(12),s=r(30).KEY,c=r(3),f=r(48),l=r(43),h=r(33),p=r(5),d=r(108),v=r(75),g=r(155),y=r(57),m=r(1),b=r(4),k=r(9),w=r(15),x=r(23),S=r(32),A=r(36),T=r(111),M=r(16),E=r(56),O=r(8),_=r(34),P=M.f,I=O.f,N=T.f,F=n.Symbol,j=n.JSON,C=j&&j.stringify,R=p("_hidden"),L=p("toPrimitive"),B={}.propertyIsEnumerable,V=f("symbol-registry"),D=f("symbols"),G=f("op-symbols"),U=Object.prototype,z="function"==typeof F&&!!E.f,Y=n.QObject,W=!Y||!Y.prototype||!Y.prototype.findChild,X=a&&c(function(){return 7!=A(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=P(U,e);n&&delete U[e],I(t,e,r),n&&t!==U&&I(U,e,n)}:I,q=function(t){var e=D[t]=A(F.prototype);return e._k=t,e},H=z&&"symbol"==typeof F.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof F},J=function(t,e,r){return t===U&&J(G,e,r),m(t),e=x(e,!0),m(r),i(D,e)?(r.enumerable?(i(t,R)&&t[R][e]&&(t[R][e]=!1),r=A(r,{enumerable:S(0,!1)})):(i(t,R)||I(t,R,S(1,{})),t[R][e]=!0),X(t,e,r)):I(t,e,r)},Q=function(t,e){m(t);for(var r,n=g(e=w(e)),i=0,a=n.length;a>i;)J(t,r=n[i++],e[r]);return t},Z=function(t){var e=B.call(this,t=x(t,!0));return!(this===U&&i(D,t)&&!i(G,t))&&(!(e||!i(this,t)||!i(D,t)||i(this,R)&&this[R][t])||e)},K=function(t,e){if(t=w(t),e=x(e,!0),t!==U||!i(D,e)||i(G,e)){var r=P(t,e);return!r||!i(D,e)||i(t,R)&&t[R][e]||(r.enumerable=!0),r}},$=function(t){for(var e,r=N(w(t)),n=[],a=0;r.length>a;)i(D,e=r[a++])||e==R||e==s||n.push(e);return n},tt=function(t){for(var e,r=t===U,n=N(r?G:w(t)),a=[],o=0;n.length>o;)!i(D,e=n[o++])||r&&!i(U,e)||a.push(D[e]);return a};z||(u((F=function(){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(r){this===U&&e.call(G,r),i(this,R)&&i(this[R],t)&&(this[R][t]=!1),X(this,t,S(1,r))};return a&&W&&X(U,t,{configurable:!0,set:e}),q(t)}).prototype,"toString",function(){return this._k}),M.f=K,O.f=J,r(37).f=T.f=$,r(50).f=Z,E.f=tt,a&&!r(29)&&u(U,"propertyIsEnumerable",Z,!0),d.f=function(t){return q(p(t))}),o(o.G+o.W+o.F*!z,{Symbol:F});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;et.length>rt;)p(et[rt++]);for(var nt=_(p.store),it=0;nt.length>it;)v(nt[it++]);o(o.S+o.F*!z,"Symbol",{for:function(t){return i(V,t+="")?V[t]:V[t]=F(t)},keyFor:function(t){if(!H(t))throw TypeError(t+" is not a symbol!");for(var e in V)if(V[e]===t)return e},useSetter:function(){W=!0},useSimple:function(){W=!1}}),o(o.S+o.F*!z,"Object",{create:function(t,e){return void 0===e?A(t):Q(A(t),e)},defineProperty:J,defineProperties:Q,getOwnPropertyDescriptor:K,getOwnPropertyNames:$,getOwnPropertySymbols:tt});var at=c(function(){E.f(1)});o(o.S+o.F*at,"Object",{getOwnPropertySymbols:function(t){return E.f(k(t))}}),j&&o(o.S+o.F*(!z||c(function(){var t=F();return"[null]"!=C([t])||"{}"!=C({a:t})||"{}"!=C(Object(t))})),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!H(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!H(e))return e}),n[1]=e,C.apply(j,n)}}),F.prototype[L]||r(11)(F.prototype,L,F.prototype.valueOf),l(F,"Symbol"),l(Math,"Math",!0),l(n.JSON,"JSON",!0)},function(t,e,r){t.exports=r(48)("native-function-to-string",Function.toString)},function(t,e,r){var n=r(34),i=r(56),a=r(50);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var o,u=r(t),s=a.f,c=0;u.length>c;)s.call(t,o=u[c++])&&e.push(o);return e}},function(t,e,r){var n=r(0);n(n.S,"Object",{create:r(36)})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperty:r(8).f})},function(t,e,r){var n=r(0);n(n.S+n.F*!r(7),"Object",{defineProperties:r(110)})},function(t,e,r){var n=r(15),i=r(16).f;r(25)("getOwnPropertyDescriptor",function(){return function(t,e){return i(n(t),e)}})},function(t,e,r){var n=r(9),i=r(17);r(25)("getPrototypeOf",function(){return function(t){return i(n(t))}})},function(t,e,r){var n=r(9),i=r(34);r(25)("keys",function(){return function(t){return i(n(t))}})},function(t,e,r){r(25)("getOwnPropertyNames",function(){return r(111).f})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("freeze",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("seal",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4),i=r(30).onFreeze;r(25)("preventExtensions",function(t){return function(e){return t&&n(e)?t(i(e)):e}})},function(t,e,r){var n=r(4);r(25)("isFrozen",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isSealed",function(t){return function(e){return!n(e)||!!t&&t(e)}})},function(t,e,r){var n=r(4);r(25)("isExtensible",function(t){return function(e){return!!n(e)&&(!t||t(e))}})},function(t,e,r){var n=r(0);n(n.S+n.F,"Object",{assign:r(112)})},function(t,e,r){var n=r(0);n(n.S,"Object",{is:r(113)})},function(t,e,r){var n=r(0);n(n.S,"Object",{setPrototypeOf:r(79).set})},function(t,e,r){"use strict";var n=r(44),i={};i[r(5)("toStringTag")]="z",i+""!="[object z]"&&r(12)(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},function(t,e,r){var n=r(0);n(n.P,"Function",{bind:r(114)})},function(t,e,r){var n=r(8).f,i=Function.prototype,a=/^\s*function ([^ (]*)/;"name"in i||r(7)&&n(i,"name",{configurable:!0,get:function(){try{return(""+this).match(a)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(4),i=r(17),a=r(5)("hasInstance"),o=Function.prototype;a in o||r(8).f(o,a,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,r){var n=r(0),i=r(116);n(n.G+n.F*(parseInt!=i),{parseInt:i})},function(t,e,r){var n=r(0),i=r(117);n(n.G+n.F*(parseFloat!=i),{parseFloat:i})},function(t,e,r){"use strict";var n=r(2),i=r(14),a=r(20),o=r(81),u=r(23),s=r(3),c=r(37).f,f=r(16).f,l=r(8).f,h=r(45).trim,p=n.Number,d=p,v=p.prototype,g="Number"==a(r(36)(v)),y="trim"in String.prototype,m=function(t){var e=u(t,!1);if("string"==typeof e&&e.length>2){var r,n,i,a=(e=y?e.trim():h(e,3)).charCodeAt(0);if(43===a||45===a){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===a){switch(e.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+e}for(var o,s=e.slice(2),c=0,f=s.length;c<f;c++)if((o=s.charCodeAt(c))<48||o>i)return NaN;return parseInt(s,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof p&&(g?s(function(){v.valueOf.call(r)}):"Number"!=a(r))?o(new d(m(e)),r,p):m(e)};for(var b,k=r(7)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;k.length>w;w++)i(d,b=k[w])&&!i(p,b)&&l(p,b,f(d,b));p.prototype=v,v.constructor=p,r(12)(n,"Number",p)}},function(t,e,r){"use strict";var n=r(0),i=r(21),a=r(118),o=r(82),u=1..toFixed,s=Math.floor,c=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*c[r],c[r]=n%1e7,n=s(n/1e7)},h=function(t){for(var e=6,r=0;--e>=0;)r+=c[e],c[e]=s(r/t),r=r%t*1e7},p=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var r=String(c[t]);e=""===e?r:e+o.call("0",7-r.length)+r}return e},d=function(t,e,r){return 0===e?r:e%2==1?d(t,e-1,r*t):d(t*t,e/2,r)};n(n.P+n.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(3)(function(){u.call({})})),"Number",{toFixed:function(t){var e,r,n,u,s=a(this,f),c=i(t),v="",g="0";if(c<0||c>20)throw RangeError(f);if(s!=s)return"NaN";if(s<=-1e21||s>=1e21)return String(s);if(s<0&&(v="-",s=-s),s>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(s*d(2,69,1))-69)<0?s*d(2,-e,1):s/d(2,e,1),r*=4503599627370496,(e=52-e)>0){for(l(0,r),n=c;n>=7;)l(1e7,0),n-=7;for(l(d(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),l(1,1),h(2),g=p()}else l(0,r),l(1<<-e,0),g=p()+o.call("0",c);return g=c>0?v+((u=g.length)<=c?"0."+o.call("0",c-u)+g:g.slice(0,u-c)+"."+g.slice(u-c)):v+g}})},function(t,e,r){"use strict";var n=r(0),i=r(3),a=r(118),o=1..toPrecision;n(n.P+n.F*(i(function(){return"1"!==o.call(1,void 0)})||!i(function(){o.call({})})),"Number",{toPrecision:function(t){var e=a(this,"Number#toPrecision: incorrect invocation!");return void 0===t?o.call(e):o.call(e,t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,r){var n=r(0),i=r(2).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Number",{isInteger:r(119)})},function(t,e,r){var n=r(0);n(n.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,r){var n=r(0),i=r(119),a=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return i(t)&&a(t)<=9007199254740991}})},function(t,e,r){var n=r(0);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,r){var n=r(0);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,r){var n=r(0),i=r(117);n(n.S+n.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,r){var n=r(0),i=r(116);n(n.S+n.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,r){var n=r(0),i=r(120),a=Math.sqrt,o=Math.acosh;n(n.S+n.F*!(o&&710==Math.floor(o(Number.MAX_VALUE))&&o(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+a(t-1)*a(t+1))}})},function(t,e,r){var n=r(0),i=Math.asinh;n(n.S+n.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,r){var n=r(0),i=Math.atanh;n(n.S+n.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,r){var n=r(0),i=r(83);n(n.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,r){var n=r(0),i=Math.exp;n(n.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,r){var n=r(0),i=r(84);n(n.S+n.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,r){var n=r(0);n(n.S,"Math",{fround:r(121)})},function(t,e,r){var n=r(0),i=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var r,n,a=0,o=0,u=arguments.length,s=0;o<u;)s<(r=i(arguments[o++]))?(a=a*(n=s/r)*n+1,s=r):a+=r>0?(n=r/s)*n:r;return s===1/0?1/0:s*Math.sqrt(a)}})},function(t,e,r){var n=r(0),i=Math.imul;n(n.S+n.F*r(3)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n;return 0|i*a+((65535&r>>>16)*a+i*(65535&n>>>16)<<16>>>0)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,r){var n=r(0);n(n.S,"Math",{log1p:r(120)})},function(t,e,r){var n=r(0);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,r){var n=r(0);n(n.S,"Math",{sign:r(83)})},function(t,e,r){var n=r(0),i=r(84),a=Math.exp;n(n.S+n.F*r(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(a(t-1)-a(-t-1))*(Math.E/2)}})},function(t,e,r){var n=r(0),i=r(84),a=Math.exp;n(n.S,"Math",{tanh:function(t){var e=i(t=+t),r=i(-t);return e==1/0?1:r==1/0?-1:(e-r)/(a(t)+a(-t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,r){var n=r(0),i=r(35),a=String.fromCharCode,o=String.fromCodePoint;n(n.S+n.F*(!!o&&1!=o.length),"String",{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?a(e):a(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},function(t,e,r){var n=r(0),i=r(15),a=r(6);n(n.S,"String",{raw:function(t){for(var e=i(t.raw),r=a(e.length),n=arguments.length,o=[],u=0;r>u;)o.push(String(e[u++])),u<n&&o.push(String(arguments[u]));return o.join("")}})},function(t,e,r){"use strict";r(45)("trim",function(t){return function(){return t(this,3)}})},function(t,e,r){"use strict";var n=r(58)(!0);r(85)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e,r){"use strict";var n=r(0),i=r(58)(!1);n(n.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,r){"use strict";var n=r(0),i=r(6),a=r(87),o="".endsWith;n(n.P+n.F*r(88)("endsWith"),"String",{endsWith:function(t){var e=a(this,t,"endsWith"),r=arguments.length>1?arguments[1]:void 0,n=i(e.length),u=void 0===r?n:Math.min(i(r),n),s=String(t);return o?o.call(e,s,u):e.slice(u-s.length,u)===s}})},function(t,e,r){"use strict";var n=r(0),i=r(87);n(n.P+n.F*r(88)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(0);n(n.P,"String",{repeat:r(82)})},function(t,e,r){"use strict";var n=r(0),i=r(6),a=r(87),o="".startsWith;n(n.P+n.F*r(88)("startsWith"),"String",{startsWith:function(t){var e=a(this,t,"startsWith"),r=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return o?o.call(e,n,r):e.slice(r,r+n.length)===n}})},function(t,e,r){"use strict";r(13)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,r){"use strict";r(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,r){"use strict";r(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,r){"use strict";r(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,r){"use strict";r(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,r){"use strict";r(13)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,r){"use strict";r(13)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,r){"use strict";r(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,r){"use strict";r(13)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,r){"use strict";r(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,r){"use strict";r(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,r){"use strict";r(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,r){"use strict";r(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,r){var n=r(0);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23);n(n.P+n.F*r(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),r=a(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},function(t,e,r){var n=r(0),i=r(232);n(n.P+n.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,r){"use strict";var n=r(3),i=Date.prototype.getTime,a=Date.prototype.toISOString,o=function(t){return t>9?t:"0"+t};t.exports=n(function(){return"0385-07-25T07:06:39.999Z"!=a.call(new Date(-5e13-1))})||!n(function(){a.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+o(t.getUTCMonth()+1)+"-"+o(t.getUTCDate())+"T"+o(t.getUTCHours())+":"+o(t.getUTCMinutes())+":"+o(t.getUTCSeconds())+"."+(r>99?r:"0"+o(r))+"Z"}:a},function(t,e,r){var n=Date.prototype,i=n.toString,a=n.getTime;new Date(NaN)+""!="Invalid Date"&&r(12)(n,"toString",function(){var t=a.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,e,r){var n=r(5)("toPrimitive"),i=Date.prototype;n in i||r(11)(i,n,r(235))},function(t,e,r){"use strict";var n=r(1),i=r(23);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(n(this),"number"!=t)}},function(t,e,r){var n=r(0);n(n.S,"Array",{isArray:r(57)})},function(t,e,r){"use strict";var n=r(19),i=r(0),a=r(9),o=r(122),u=r(89),s=r(6),c=r(90),f=r(91);i(i.S+i.F*!r(60)(function(t){Array.from(t)}),"Array",{from:function(t){var e,r,i,l,h=a(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,y=0,m=f(h);if(g&&(v=n(v,d>2?arguments[2]:void 0,2)),null==m||p==Array&&u(m))for(r=new p(e=s(h.length));e>y;y++)c(r,y,g?v(h[y],y):h[y]);else for(l=m.call(h),r=new p;!(i=l.next()).done;y++)c(r,y,g?o(l,v,[i.value,y],!0):i.value);return r.length=y,r}})},function(t,e,r){"use strict";var n=r(0),i=r(90);n(n.S+n.F*r(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)i(r,t,arguments[t++]);return r.length=e,r}})},function(t,e,r){"use strict";var n=r(0),i=r(15),a=[].join;n(n.P+n.F*(r(49)!=Object||!r(22)(a)),"Array",{join:function(t){return a.call(i(this),void 0===t?",":t)}})},function(t,e,r){"use strict";var n=r(0),i=r(78),a=r(20),o=r(35),u=r(6),s=[].slice;n(n.P+n.F*r(3)(function(){i&&s.call(i)}),"Array",{slice:function(t,e){var r=u(this.length),n=a(this);if(e=void 0===e?r:e,"Array"==n)return s.call(this,t,e);for(var i=o(t,r),c=o(e,r),f=u(c-i),l=new Array(f),h=0;h<f;h++)l[h]="String"==n?this.charAt(i+h):this[i+h];return l}})},function(t,e,r){"use strict";var n=r(0),i=r(10),a=r(9),o=r(3),u=[].sort,s=[1,2,3];n(n.P+n.F*(o(function(){s.sort(void 0)})||!o(function(){s.sort(null)})||!r(22)(u)),"Array",{sort:function(t){return void 0===t?u.call(a(this)):u.call(a(this),i(t))}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(0),a=r(22)([].forEach,!0);n(n.P+n.F*!a,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,r){var n=r(4),i=r(57),a=r(5)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),n(e)&&null===(e=e[a])&&(e=void 0)),void 0===e?Array:e}},function(t,e,r){"use strict";var n=r(0),i=r(26)(1);n(n.P+n.F*!r(22)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(2);n(n.P+n.F*!r(22)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(3);n(n.P+n.F*!r(22)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(26)(4);n(n.P+n.F*!r(22)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(123);n(n.P+n.F*!r(22)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,r){"use strict";var n=r(0),i=r(123);n(n.P+n.F*!r(22)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,r){"use strict";var n=r(0),i=r(55)(!1),a=[].indexOf,o=!!a&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(o||!r(22)(a)),"Array",{indexOf:function(t){return o?a.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,r){"use strict";var n=r(0),i=r(15),a=r(21),o=r(6),u=[].lastIndexOf,s=!!u&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(s||!r(22)(u)),"Array",{lastIndexOf:function(t){if(s)return u.apply(this,arguments)||0;var e=i(this),r=o(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,a(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},function(t,e,r){var n=r(0);n(n.P,"Array",{copyWithin:r(124)}),r(31)("copyWithin")},function(t,e,r){var n=r(0);n(n.P,"Array",{fill:r(93)}),r(31)("fill")},function(t,e,r){"use strict";var n=r(0),i=r(26)(5),a=!0;"find"in[]&&Array(1).find(function(){a=!1}),n(n.P+n.F*a,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("find")},function(t,e,r){"use strict";var n=r(0),i=r(26)(6),a="findIndex",o=!0;a in[]&&Array(1)[a](function(){o=!1}),n(n.P+n.F*o,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)(a)},function(t,e,r){r(38)("Array")},function(t,e,r){var n=r(2),i=r(81),a=r(8).f,o=r(37).f,u=r(59),s=r(51),c=n.RegExp,f=c,l=c.prototype,h=/a/g,p=/a/g,d=new c(h)!==h;if(r(7)&&(!d||r(3)(function(){return p[r(5)("match")]=!1,c(h)!=h||c(p)==p||"/a/i"!=c(h,"i")}))){c=function(t,e){var r=this instanceof c,n=u(t),a=void 0===e;return!r&&n&&t.constructor===c&&a?t:i(d?new f(n&&!a?t.source:t,e):f((n=t instanceof c)?t.source:t,n&&a?s.call(t):e),r?this:l,c)};for(var v=function(t){t in c||a(c,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=o(f),y=0;g.length>y;)v(g[y++]);l.constructor=c,c.prototype=l,r(12)(n,"RegExp",c)}r(38)("RegExp")},function(t,e,r){"use strict";r(127);var n=r(1),i=r(51),a=r(7),o=/./.toString,u=function(t){r(12)(RegExp.prototype,"toString",t,!0)};r(3)(function(){return"/a/b"!=o.call({source:"a",flags:"b"})})?u(function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!a&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=o.name&&u(function(){return o.call(this)})},function(t,e,r){"use strict";var n=r(1),i=r(6),a=r(96),o=r(61);r(62)("match",1,function(t,e,r,u){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=u(r,t,this);if(e.done)return e.value;var s=n(t),c=String(this);if(!s.global)return o(s,c);var f=s.unicode;s.lastIndex=0;for(var l,h=[],p=0;null!==(l=o(s,c));){var d=String(l[0]);h[p]=d,""===d&&(s.lastIndex=a(c,i(s.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,e,r){"use strict";var n=r(1),i=r(9),a=r(6),o=r(21),u=r(96),s=r(61),c=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;r(62)("replace",2,function(t,e,r,d){return[function(n,i){var a=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,a,i):r.call(String(a),n,i)},function(t,e){var i=d(r,t,this,e);if(i.done)return i.value;var l=n(t),h=String(this),p="function"==typeof e;p||(e=String(e));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=s(l,h);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(l.lastIndex=u(h,a(l.lastIndex),y))}for(var k,w="",x=0,S=0;S<m.length;S++){b=m[S];for(var A=String(b[0]),T=c(f(o(b.index),h.length),0),M=[],E=1;E<b.length;E++)M.push(void 0===(k=b[E])?k:String(k));var O=b.groups;if(p){var _=[A].concat(M,T,h);void 0!==O&&_.push(O);var P=String(e.apply(void 0,_))}else P=v(A,h,T,M,O,e);T>=x&&(w+=h.slice(x,T)+P,x=T+A.length)}return w+h.slice(x)}];function v(t,e,n,a,o,u){var s=n+t.length,c=a.length,f=p;return void 0!==o&&(o=i(o),f=h),r.call(u,f,function(r,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(s);case"<":u=o[i.slice(1,-1)];break;default:var f=+i;if(0===f)return r;if(f>c){var h=l(f/10);return 0===h?r:h<=c?void 0===a[h-1]?i.charAt(1):a[h-1]+i.charAt(1):r}u=a[f-1]}return void 0===u?"":u})}})},function(t,e,r){"use strict";var n=r(1),i=r(113),a=r(61);r(62)("search",1,function(t,e,r,o){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=o(r,t,this);if(e.done)return e.value;var u=n(t),s=String(this),c=u.lastIndex;i(c,0)||(u.lastIndex=0);var f=a(u,s);return i(u.lastIndex,c)||(u.lastIndex=c),null===f?-1:f.index}]})},function(t,e,r){"use strict";var n=r(59),i=r(1),a=r(52),o=r(96),u=r(6),s=r(61),c=r(95),f=r(3),l=Math.min,h=[].push,p=!f(function(){RegExp(4294967295,"y")});r(62)("split",2,function(t,e,r,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!n(t))return r.call(i,t,e);for(var a,o,u,s=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===e?4294967295:e>>>0,d=new RegExp(t.source,f+"g");(a=c.call(d,i))&&!((o=d.lastIndex)>l&&(s.push(i.slice(l,a.index)),a.length>1&&a.index<i.length&&h.apply(s,a.slice(1)),u=a[0].length,l=o,s.length>=p));)d.lastIndex===a.index&&d.lastIndex++;return l===i.length?!u&&d.test("")||s.push(""):s.push(i.slice(l)),s.length>p?s.slice(0,p):s}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:r.call(this,t,e)}:r,[function(r,n){var i=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,i,n):d.call(String(i),r,n)},function(t,e){var n=f(d,t,this,e,d!==r);if(n.done)return n.value;var c=i(t),h=String(this),v=a(c,RegExp),g=c.unicode,y=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(p?"y":"g"),m=new v(p?c:"^(?:"+c.source+")",y),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===h.length)return null===s(m,h)?[h]:[];for(var k=0,w=0,x=[];w<h.length;){m.lastIndex=p?w:0;var S,A=s(m,p?h:h.slice(w));if(null===A||(S=l(u(m.lastIndex+(p?0:w)),h.length))===k)w=o(h,w,g);else{if(x.push(h.slice(k,w)),x.length===b)return x;for(var T=1;T<=A.length-1;T++)if(x.push(A[T]),x.length===b)return x;w=k=S}}return x.push(h.slice(k)),x}]})},function(t,e,r){"use strict";var n,i,a,o,u=r(29),s=r(2),c=r(19),f=r(44),l=r(0),h=r(4),p=r(10),d=r(39),v=r(40),g=r(52),y=r(97).set,m=r(98)(),b=r(99),k=r(128),w=r(63),x=r(129),S=s.TypeError,A=s.process,T=A&&A.versions,M=T&&T.v8||"",E=s.Promise,O="process"==f(A),_=function(){},P=i=b.f,I=!!function(){try{var t=E.resolve(1),e=(t.constructor={})[r(5)("species")]=function(t){t(_,_)};return(O||"function"==typeof PromiseRejectionEvent)&&t.then(_)instanceof e&&0!==M.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),N=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},F=function(t,e){if(!t._n){t._n=!0;var r=t._c;m(function(){for(var n=t._v,i=1==t._s,a=0,o=function(e){var r,a,o,u=i?e.ok:e.fail,s=e.resolve,c=e.reject,f=e.domain;try{u?(i||(2==t._h&&R(t),t._h=1),!0===u?r=n:(f&&f.enter(),r=u(n),f&&(f.exit(),o=!0)),r===e.promise?c(S("Promise-chain cycle")):(a=N(r))?a.call(r,s,c):s(r)):c(n)}catch(t){f&&!o&&f.exit(),c(t)}};r.length>a;)o(r[a++]);t._c=[],t._n=!1,e&&!t._h&&j(t)})}},j=function(t){y.call(s,function(){var e,r,n,i=t._v,a=C(t);if(a&&(e=k(function(){O?A.emit("unhandledRejection",i,t):(r=s.onunhandledrejection)?r({promise:t,reason:i}):(n=s.console)&&n.error&&n.error("Unhandled promise rejection",i)}),t._h=O||C(t)?2:1),t._a=void 0,a&&e.e)throw e.v})},C=function(t){return 1!==t._h&&0===(t._a||t._c).length},R=function(t){y.call(s,function(){var e;O?A.emit("rejectionHandled",t):(e=s.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),F(e,!0))},B=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw S("Promise can't be resolved itself");(e=N(t))?m(function(){var n={_w:r,_d:!1};try{e.call(t,c(B,n,1),c(L,n,1))}catch(t){L.call(n,t)}}):(r._v=t,r._s=1,F(r,!1))}catch(t){L.call({_w:r,_d:!1},t)}}};I||(E=function(t){d(this,E,"Promise","_h"),p(t),n.call(this);try{t(c(B,this,1),c(L,this,1))}catch(t){L.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(41)(E.prototype,{then:function(t,e){var r=P(g(this,E));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=O?A.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&F(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),a=function(){var t=new n;this.promise=t,this.resolve=c(B,t,1),this.reject=c(L,t,1)},b.f=P=function(t){return t===E||t===o?new a(t):i(t)}),l(l.G+l.W+l.F*!I,{Promise:E}),r(43)(E,"Promise"),r(38)("Promise"),o=r(18).Promise,l(l.S+l.F*!I,"Promise",{reject:function(t){var e=P(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(u||!I),"Promise",{resolve:function(t){return x(u&&this===o?E:this,t)}}),l(l.S+l.F*!(I&&r(60)(function(t){E.all(t).catch(_)})),"Promise",{all:function(t){var e=this,r=P(e),n=r.resolve,i=r.reject,a=k(function(){var r=[],a=0,o=1;v(t,!1,function(t){var u=a++,s=!1;r.push(void 0),o++,e.resolve(t).then(function(t){s||(s=!0,r[u]=t,--o||n(r))},i)}),--o||n(r)});return a.e&&i(a.v),r.promise},race:function(t){var e=this,r=P(e),n=r.reject,i=k(function(){v(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return i.e&&n(i.v),r.promise}})},function(t,e,r){"use strict";var n=r(134),i=r(42);r(64)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return n.def(i(this,"WeakSet"),t,!0)}},n,!1,!0)},function(t,e,r){"use strict";var n=r(0),i=r(65),a=r(100),o=r(1),u=r(35),s=r(6),c=r(4),f=r(2).ArrayBuffer,l=r(52),h=a.ArrayBuffer,p=a.DataView,d=i.ABV&&f.isView,v=h.prototype.slice,g=i.VIEW;n(n.G+n.W+n.F*(f!==h),{ArrayBuffer:h}),n(n.S+n.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||c(t)&&g in t}}),n(n.P+n.U+n.F*r(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(o(this),t);for(var r=o(this).byteLength,n=u(t,r),i=u(void 0===e?r:e,r),a=new(l(this,h))(s(i-n)),c=new p(this),f=new p(a),d=0;n<i;)f.setUint8(d++,c.getUint8(n++));return a}}),r(38)("ArrayBuffer")},function(t,e,r){var n=r(0);n(n.G+n.W+n.F*!r(65).ABV,{DataView:r(100).DataView})},function(t,e,r){r(27)("Int8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint8",1,function(t){return function(e,r,n){return t(this,e,r,n)}},!0)},function(t,e,r){r(27)("Int16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint16",2,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Int32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Uint32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float32",4,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){r(27)("Float64",8,function(t){return function(e,r,n){return t(this,e,r,n)}})},function(t,e,r){var n=r(0),i=r(10),a=r(1),o=(r(2).Reflect||{}).apply,u=Function.apply;n(n.S+n.F*!r(3)(function(){o(function(){})}),"Reflect",{apply:function(t,e,r){var n=i(t),s=a(r);return o?o(n,e,s):u.call(n,e,s)}})},function(t,e,r){var n=r(0),i=r(36),a=r(10),o=r(1),u=r(4),s=r(3),c=r(114),f=(r(2).Reflect||{}).construct,l=s(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!s(function(){f(function(){})});n(n.S+n.F*(l||h),"Reflect",{construct:function(t,e){a(t),o(e);var r=arguments.length<3?t:a(arguments[2]);if(h&&!l)return f(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(c.apply(t,n))}var s=r.prototype,p=i(u(s)?s:Object.prototype),d=Function.apply.call(t,p,e);return u(d)?d:p}})},function(t,e,r){var n=r(8),i=r(0),a=r(1),o=r(23);i(i.S+i.F*r(3)(function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,r){a(t),e=o(e,!0),a(r);try{return n.f(t,e,r),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),i=r(16).f,a=r(1);n(n.S,"Reflect",{deleteProperty:function(t,e){var r=i(a(t),e);return!(r&&!r.configurable)&&delete t[e]}})},function(t,e,r){"use strict";var n=r(0),i=r(1),a=function(t){this._t=i(t),this._i=0;var e,r=this._k=[];for(e in t)r.push(e)};r(86)(a,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),n(n.S,"Reflect",{enumerate:function(t){return new a(t)}})},function(t,e,r){var n=r(16),i=r(17),a=r(14),o=r(0),u=r(4),s=r(1);o(o.S,"Reflect",{get:function t(e,r){var o,c,f=arguments.length<3?e:arguments[2];return s(e)===f?e[r]:(o=n.f(e,r))?a(o,"value")?o.value:void 0!==o.get?o.get.call(f):void 0:u(c=i(e))?t(c,r,f):void 0}})},function(t,e,r){var n=r(16),i=r(0),a=r(1);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(a(t),e)}})},function(t,e,r){var n=r(0),i=r(17),a=r(1);n(n.S,"Reflect",{getPrototypeOf:function(t){return i(a(t))}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,r){var n=r(0),i=r(1),a=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return i(t),!a||a(t)}})},function(t,e,r){var n=r(0);n(n.S,"Reflect",{ownKeys:r(136)})},function(t,e,r){var n=r(0),i=r(1),a=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){i(t);try{return a&&a(t),!0}catch(t){return!1}}})},function(t,e,r){var n=r(8),i=r(16),a=r(17),o=r(14),u=r(0),s=r(32),c=r(1),f=r(4);u(u.S,"Reflect",{set:function t(e,r,u){var l,h,p=arguments.length<4?e:arguments[3],d=i.f(c(e),r);if(!d){if(f(h=a(e)))return t(h,r,u,p);d=s(0)}if(o(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=i.f(p,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=u,n.f(p,r,l)}else n.f(p,r,s(0,u));return!0}return void 0!==d.set&&(d.set.call(p,u),!0)}})},function(t,e,r){var n=r(0),i=r(79);i&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},function(t,e,r){"use strict";var n=r(0),i=r(55)(!0);n(n.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(31)("includes")},function(t,e,r){"use strict";var n=r(0),i=r(137),a=r(9),o=r(6),u=r(10),s=r(92);n(n.P,"Array",{flatMap:function(t){var e,r,n=a(this);return u(t),e=o(n.length),r=s(n,0),i(r,n,n,e,0,1,t,arguments[1]),r}}),r(31)("flatMap")},function(t,e,r){"use strict";var n=r(0),i=r(137),a=r(9),o=r(6),u=r(21),s=r(92);n(n.P,"Array",{flatten:function(){var t=arguments[0],e=a(this),r=o(e.length),n=s(e,0);return i(n,e,e,r,0,void 0===t?1:u(t)),n}}),r(31)("flatten")},function(t,e,r){"use strict";var n=r(0),i=r(58)(!0);n(n.P,"String",{at:function(t){return i(this,t)}})},function(t,e,r){"use strict";var n=r(0),i=r(138),a=r(63),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);n(n.P+n.F*o,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,r){"use strict";var n=r(0),i=r(138),a=r(63),o=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(a);n(n.P+n.F*o,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,r){"use strict";r(45)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,e,r){"use strict";r(45)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,e,r){"use strict";var n=r(0),i=r(24),a=r(6),o=r(59),u=r(51),s=RegExp.prototype,c=function(t,e){this._r=t,this._s=e};r(86)(c,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),n(n.P,"String",{matchAll:function(t){if(i(this),!o(t))throw TypeError(t+" is not a regexp!");var e=String(this),r="flags"in s?String(t.flags):u.call(t),n=new RegExp(t.source,~r.indexOf("g")?r:"g"+r);return n.lastIndex=a(t.lastIndex),new c(n,e)}})},function(t,e,r){r(75)("asyncIterator")},function(t,e,r){r(75)("observable")},function(t,e,r){var n=r(0),i=r(136),a=r(15),o=r(16),u=r(90);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),s=o.f,c=i(n),f={},l=0;c.length>l;)void 0!==(r=s(n,e=c[l++]))&&u(f,e,r);return f}})},function(t,e,r){var n=r(0),i=r(139)(!1);n(n.S,"Object",{values:function(t){return i(t)}})},function(t,e,r){var n=r(0),i=r(139)(!0);n(n.S,"Object",{entries:function(t){return i(t)}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(10),o=r(8);r(7)&&n(n.P+r(66),"Object",{__defineGetter__:function(t,e){o.f(i(this),t,{get:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(10),o=r(8);r(7)&&n(n.P+r(66),"Object",{__defineSetter__:function(t,e){o.f(i(this),t,{set:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23),o=r(17),u=r(16).f;r(7)&&n(n.P+r(66),"Object",{__lookupGetter__:function(t){var e,r=i(this),n=a(t,!0);do{if(e=u(r,n))return e.get}while(r=o(r))}})},function(t,e,r){"use strict";var n=r(0),i=r(9),a=r(23),o=r(17),u=r(16).f;r(7)&&n(n.P+r(66),"Object",{__lookupSetter__:function(t){var e,r=i(this),n=a(t,!0);do{if(e=u(r,n))return e.set}while(r=o(r))}})},function(t,e,r){var n=r(0);n(n.P+n.R,"Map",{toJSON:r(140)("Map")})},function(t,e,r){var n=r(0);n(n.P+n.R,"Set",{toJSON:r(140)("Set")})},function(t,e,r){r(67)("Map")},function(t,e,r){r(67)("Set")},function(t,e,r){r(67)("WeakMap")},function(t,e,r){r(67)("WeakSet")},function(t,e,r){r(68)("Map")},function(t,e,r){r(68)("Set")},function(t,e,r){r(68)("WeakMap")},function(t,e,r){r(68)("WeakSet")},function(t,e,r){var n=r(0);n(n.G,{global:r(2)})},function(t,e,r){var n=r(0);n(n.S,"System",{global:r(2)})},function(t,e,r){var n=r(0),i=r(20);n(n.S,"Error",{isError:function(t){return"Error"===i(t)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{clamp:function(t,e,r){return Math.min(r,Math.max(e,t))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,e,r){var n=r(0),i=180/Math.PI;n(n.S,"Math",{degrees:function(t){return t*i}})},function(t,e,r){var n=r(0),i=r(142),a=r(121);n(n.S,"Math",{fscale:function(t,e,r,n,o){return a(i(t,e,r,n,o))}})},function(t,e,r){var n=r(0);n(n.S,"Math",{iaddh:function(t,e,r,n){var i=t>>>0,a=r>>>0;return(e>>>0)+(n>>>0)+((i&a|(i|a)&~(i+a>>>0))>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{isubh:function(t,e,r,n){var i=t>>>0,a=r>>>0;return(e>>>0)-(n>>>0)-((~i&a|~(i^a)&i-a>>>0)>>>31)|0}})},function(t,e,r){var n=r(0);n(n.S,"Math",{imulh:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n,o=r>>16,u=n>>16,s=(o*a>>>0)+(i*a>>>16);return o*u+(s>>16)+((i*u>>>0)+(65535&s)>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,e,r){var n=r(0),i=Math.PI/180;n(n.S,"Math",{radians:function(t){return t*i}})},function(t,e,r){var n=r(0);n(n.S,"Math",{scale:r(142)})},function(t,e,r){var n=r(0);n(n.S,"Math",{umulh:function(t,e){var r=+t,n=+e,i=65535&r,a=65535&n,o=r>>>16,u=n>>>16,s=(o*a>>>0)+(i*a>>>16);return o*u+(s>>>16)+((i*u>>>0)+(65535&s)>>>16)}})},function(t,e,r){var n=r(0);n(n.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,e,r){"use strict";var n=r(0),i=r(18),a=r(2),o=r(52),u=r(129);n(n.P+n.R,"Promise",{finally:function(t){var e=o(this,i.Promise||a.Promise),r="function"==typeof t;return this.then(r?function(r){return u(e,t()).then(function(){return r})}:t,r?function(r){return u(e,t()).then(function(){throw r})}:t)}})},function(t,e,r){"use strict";var n=r(0),i=r(99),a=r(128);n(n.S,"Promise",{try:function(t){var e=i.f(this),r=a(t);return(r.e?e.reject:e.resolve)(r.v),e.promise}})},function(t,e,r){var n=r(28),i=r(1),a=n.key,o=n.set;n.exp({defineMetadata:function(t,e,r,n){o(t,e,i(r),a(n))}})},function(t,e,r){var n=r(28),i=r(1),a=n.key,o=n.map,u=n.store;n.exp({deleteMetadata:function(t,e){var r=arguments.length<3?void 0:a(arguments[2]),n=o(i(e),r,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var s=u.get(e);return s.delete(r),!!s.size||u.delete(e)}})},function(t,e,r){var n=r(28),i=r(1),a=r(17),o=n.has,u=n.get,s=n.key,c=function(t,e,r){if(o(t,e,r))return u(t,e,r);var n=a(e);return null!==n?c(t,n,r):void 0};n.exp({getMetadata:function(t,e){return c(t,i(e),arguments.length<3?void 0:s(arguments[2]))}})},function(t,e,r){var n=r(132),i=r(141),a=r(28),o=r(1),u=r(17),s=a.keys,c=a.key,f=function(t,e){var r=s(t,e),a=u(t);if(null===a)return r;var o=f(a,e);return o.length?r.length?i(new n(r.concat(o))):o:r};a.exp({getMetadataKeys:function(t){return f(o(t),arguments.length<2?void 0:c(arguments[1]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.get,o=n.key;n.exp({getOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.keys,o=n.key;n.exp({getOwnMetadataKeys:function(t){return a(i(t),arguments.length<2?void 0:o(arguments[1]))}})},function(t,e,r){var n=r(28),i=r(1),a=r(17),o=n.has,u=n.key,s=function(t,e,r){if(o(t,e,r))return!0;var n=a(e);return null!==n&&s(t,n,r)};n.exp({hasMetadata:function(t,e){return s(t,i(e),arguments.length<3?void 0:u(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=n.has,o=n.key;n.exp({hasOwnMetadata:function(t,e){return a(t,i(e),arguments.length<3?void 0:o(arguments[2]))}})},function(t,e,r){var n=r(28),i=r(1),a=r(10),o=n.key,u=n.set;n.exp({metadata:function(t,e){return function(r,n){u(t,e,(void 0!==n?i:a)(r),o(n))}}})},function(t,e,r){var n=r(0),i=r(98)(),a=r(2).process,o="process"==r(20)(a);n(n.G,{asap:function(t){var e=o&&a.domain;i(e?e.bind(t):t)}})},function(t,e,r){"use strict";var n=r(0),i=r(2),a=r(18),o=r(98)(),u=r(5)("observable"),s=r(10),c=r(1),f=r(39),l=r(41),h=r(11),p=r(40),d=p.RETURN,v=function(t){return null==t?void 0:s(t)},g=function(t){var e=t._c;e&&(t._c=void 0,e())},y=function(t){return void 0===t._o},m=function(t){y(t)||(t._o=void 0,g(t))},b=function(t,e){c(t),this._c=void 0,this._o=t,t=new k(this);try{var r=e(t),n=r;null!=r&&("function"==typeof r.unsubscribe?r=function(){n.unsubscribe()}:s(r),this._c=r)}catch(e){return void t.error(e)}y(this)&&g(this)};b.prototype=l({},{unsubscribe:function(){m(this)}});var k=function(t){this._s=t};k.prototype=l({},{next:function(t){var e=this._s;if(!y(e)){var r=e._o;try{var n=v(r.next);if(n)return n.call(r,t)}catch(t){try{m(e)}finally{throw t}}}},error:function(t){var e=this._s;if(y(e))throw t;var r=e._o;e._o=void 0;try{var n=v(r.error);if(!n)throw t;t=n.call(r,t)}catch(t){try{g(e)}finally{throw t}}return g(e),t},complete:function(t){var e=this._s;if(!y(e)){var r=e._o;e._o=void 0;try{var n=v(r.complete);t=n?n.call(r,t):void 0}catch(t){try{g(e)}finally{throw t}}return g(e),t}}});var w=function(t){f(this,w,"Observable","_f")._f=s(t)};l(w.prototype,{subscribe:function(t){return new b(t,this._f)},forEach:function(t){var e=this;return new(a.Promise||i.Promise)(function(r,n){s(t);var i=e.subscribe({next:function(e){try{return t(e)}catch(t){n(t),i.unsubscribe()}},error:n,complete:r})})}}),l(w,{from:function(t){var e="function"==typeof this?this:w,r=v(c(t)[u]);if(r){var n=c(r.call(t));return n.constructor===e?n:new e(function(t){return n.subscribe(t)})}return new e(function(e){var r=!1;return o(function(){if(!r){try{if(p(t,!1,function(t){if(e.next(t),r)return d})===d)return}catch(t){if(r)throw t;return void e.error(t)}e.complete()}}),function(){r=!0}})},of:function(){for(var t=0,e=arguments.length,r=new Array(e);t<e;)r[t]=arguments[t++];return new("function"==typeof this?this:w)(function(t){var e=!1;return o(function(){if(!e){for(var n=0;n<r.length;++n)if(t.next(r[n]),e)return;t.complete()}}),function(){e=!0}})}}),h(w.prototype,u,function(){return this}),n(n.G,{Observable:w}),r(38)("Observable")},function(t,e,r){var n=r(2),i=r(0),a=r(63),o=[].slice,u=/MSIE .\./.test(a),s=function(t){return function(e,r){var n=arguments.length>2,i=!!n&&o.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,r)}};i(i.G+i.B+i.F*u,{setTimeout:s(n.setTimeout),setInterval:s(n.setInterval)})},function(t,e,r){var n=r(0),i=r(97);n(n.G+n.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,r){for(var n=r(94),i=r(34),a=r(12),o=r(2),u=r(11),s=r(46),c=r(5),f=c("iterator"),l=c("toStringTag"),h=s.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,y=d[v],m=p[y],b=o[y],k=b&&b.prototype;if(k&&(k[f]||u(k,f,h),k[l]||u(k,l,y),s[y]=h,m))for(g in n)k[g]||a(k,g,n[g],!0)}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",s=a.toStringTag||"@@toStringTag",c="object"==typeof t,f=e.regeneratorRuntime;if(f)c&&(t.exports=f);else{(f=e.regeneratorRuntime=c?t.exports:{}).wrap=k;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},g={};g[o]=function(){return this};var y=Object.getPrototypeOf,m=y&&y(y(I([])));m&&m!==n&&i.call(m,o)&&(g=m);var b=A.prototype=x.prototype=Object.create(g);S.prototype=b.constructor=A,A.constructor=S,A[s]=S.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===S||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,A):(t.__proto__=A,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},T(M.prototype),M.prototype[u]=function(){return this},f.AsyncIterator=M,f.async=function(t,e,r,n){var i=new M(k(t,e,r,n));return f.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},T(b),b[s]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=I,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(_),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,i){return u.type="throw",u.arg=t,e.next=n,i&&(e.method="next",e.arg=r),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],u=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var s=i.call(o,"catchLoc"),c=i.call(o,"finallyLoc");if(s&&c){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var a=n;break}}a&&("break"===t||"continue"===t)&&a.tryLoc<=e&&e<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=t,o.arg=e,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(o)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),v},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),_(r),v}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;_(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:I(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),v}}}function k(t,e,r,n){var i=e&&e.prototype instanceof x?e:x,a=Object.create(i.prototype),o=new P(n||[]);return a._invoke=function(t,e,r){var n=l;return function(i,a){if(n===p)throw new Error("Generator is already running");if(n===d){if("throw"===i)throw a;return N()}for(r.method=i,r.arg=a;;){var o=r.delegate;if(o){var u=E(o,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=d,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var s=w(t,e,r);if("normal"===s.type){if(n=r.done?d:h,s.arg===v)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=d,r.method="throw",r.arg=s.arg)}}}(t,r,o),a}function w(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function S(){}function A(){}function T(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function M(t){var e;this._invoke=function(r,n){function a(){return new Promise(function(e,a){!function e(r,n,a,o){var u=w(t[r],t,n);if("throw"!==u.type){var s=u.arg,c=s.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){e("next",t,a,o)},function(t){e("throw",t,a,o)}):Promise.resolve(c).then(function(t){s.value=t,a(s)},o)}o(u.arg)}(r,n,e,a)})}return e=e?e.then(a,a):a()}}function E(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,E(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=w(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var a=i.arg;return a?a.done?(e[t.resultName]=a.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,v):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function O(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(O,this),this.reset(!0)}function I(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,a=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return a.next=a}}return{next:N}}function N(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){r(351),t.exports=r(18).RegExp.escape},function(t,e,r){var n=r(0),i=r(352)(/[\\^$*+?.()|[\]{}]/g,"\\$&");n(n.S,"RegExp",{escape:function(t){return i(t)}})},function(t,e){t.exports=function(t,e){var r=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,r)}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,